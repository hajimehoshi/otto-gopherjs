"use strict";
(function() {

Error.stackTraceLimit = Infinity;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
  $global = window;
} else if (typeof self !== "undefined") { /* web worker */
  $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
  $global = global;
  $global.require = require;
} else { /* others (e.g. Nashorn) */
  $global = this;
}

if ($global === undefined || $global.Array === undefined) {
  throw new Error("no global object found");
}
if (typeof module !== "undefined") {
  $module = module;
}

var $packages = {}, $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $flushConsole = function() {};
var $throwRuntimeError; /* set by package "runtime" */
var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $call = function(fn, rcvr, args) { return fn.apply(rcvr, args); };
var $makeFunc = function(fn) { return function() { return fn(new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(arguments, []))); } };

var $mapArray = function(array, f) {
  var newArray = new array.constructor(array.length);
  for (var i = 0; i < array.length; i++) {
    newArray[i] = f(array[i]);
  }
  return newArray;
};

var $methodVal = function(recv, name) {
  var vals = recv.$methodVals || {};
  recv.$methodVals = vals; /* noop for primitives */
  var f = vals[name];
  if (f !== undefined) {
    return f;
  }
  var method = recv[name];
  f = function() {
    $stackDepthOffset--;
    try {
      return method.apply(recv, arguments);
    } finally {
      $stackDepthOffset++;
    }
  };
  vals[name] = f;
  return f;
};

var $methodExpr = function(typ, name) {
  var method = typ.prototype[name];
  if (method.$expr === undefined) {
    method.$expr = function() {
      $stackDepthOffset--;
      try {
        if (typ.wrapped) {
          arguments[0] = new typ(arguments[0]);
        }
        return Function.call.apply(method, arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return method.$expr;
};

var $ifaceMethodExprs = {};
var $ifaceMethodExpr = function(name) {
  var expr = $ifaceMethodExprs["$" + name];
  if (expr === undefined) {
    expr = $ifaceMethodExprs["$" + name] = function() {
      $stackDepthOffset--;
      try {
        return Function.call.apply(arguments[0][name], arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return expr;
};

var $subslice = function(slice, low, high, max) {
  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
    $throwRuntimeError("slice bounds out of range");
  }
  var s = new slice.constructor(slice.$array);
  s.$offset = slice.$offset + low;
  s.$length = slice.$length - low;
  s.$capacity = slice.$capacity - low;
  if (high !== undefined) {
    s.$length = high - low;
  }
  if (max !== undefined) {
    s.$capacity = max - low;
  }
  return s;
};

var $sliceToArray = function(slice) {
  if (slice.$length === 0) {
    return [];
  }
  if (slice.$array.constructor !== Array) {
    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
  }
  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

var $decodeRune = function(str, pos) {
  var c0 = str.charCodeAt(pos);

  if (c0 < 0x80) {
    return [c0, 1];
  }

  if (c0 !== c0 || c0 < 0xC0) {
    return [0xFFFD, 1];
  }

  var c1 = str.charCodeAt(pos + 1);
  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xE0) {
    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
    if (r <= 0x7F) {
      return [0xFFFD, 1];
    }
    return [r, 2];
  }

  var c2 = str.charCodeAt(pos + 2);
  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF0) {
    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
    if (r <= 0x7FF) {
      return [0xFFFD, 1];
    }
    if (0xD800 <= r && r <= 0xDFFF) {
      return [0xFFFD, 1];
    }
    return [r, 3];
  }

  var c3 = str.charCodeAt(pos + 3);
  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF8) {
    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
    if (r <= 0xFFFF || 0x10FFFF < r) {
      return [0xFFFD, 1];
    }
    return [r, 4];
  }

  return [0xFFFD, 1];
};

var $encodeRune = function(r) {
  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
    r = 0xFFFD;
  }
  if (r <= 0x7F) {
    return String.fromCharCode(r);
  }
  if (r <= 0x7FF) {
    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
  }
  if (r <= 0xFFFF) {
    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
  }
  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
  var array = new Uint8Array(str.length);
  for (var i = 0; i < str.length; i++) {
    array[i] = str.charCodeAt(i);
  }
  return array;
};

var $bytesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i += 10000) {
    str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
  }
  return str;
};

var $stringToRunes = function(str) {
  var array = new Int32Array(str.length);
  var rune, j = 0;
  for (var i = 0; i < str.length; i += rune[1], j++) {
    rune = $decodeRune(str, i);
    array[j] = rune[0];
  }
  return array.subarray(0, j);
};

var $runesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i++) {
    str += $encodeRune(slice.$array[slice.$offset + i]);
  }
  return str;
};

var $copyString = function(dst, src) {
  var n = Math.min(src.length, dst.$length);
  for (var i = 0; i < n; i++) {
    dst.$array[dst.$offset + i] = src.charCodeAt(i);
  }
  return n;
};

var $copySlice = function(dst, src) {
  var n = Math.min(src.$length, dst.$length);
  $copyArray(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
  return n;
};

var $copyArray = function(dst, src, dstOffset, srcOffset, n, elem) {
  if (n === 0 || (dst === src && dstOffset === srcOffset)) {
    return;
  }

  if (src.subarray) {
    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
    return;
  }

  switch (elem.kind) {
  case $kindArray:
  case $kindStruct:
    if (dst === src && dstOffset > srcOffset) {
      for (var i = n - 1; i >= 0; i--) {
        elem.copy(dst[dstOffset + i], src[srcOffset + i]);
      }
      return;
    }
    for (var i = 0; i < n; i++) {
      elem.copy(dst[dstOffset + i], src[srcOffset + i]);
    }
    return;
  }

  if (dst === src && dstOffset > srcOffset) {
    for (var i = n - 1; i >= 0; i--) {
      dst[dstOffset + i] = src[srcOffset + i];
    }
    return;
  }
  for (var i = 0; i < n; i++) {
    dst[dstOffset + i] = src[srcOffset + i];
  }
};

var $clone = function(src, type) {
  var clone = type.zero();
  type.copy(clone, src);
  return clone;
};

var $pointerOfStructConversion = function(obj, type) {
  if(obj.$proxies === undefined) {
    obj.$proxies = {};
    obj.$proxies[obj.constructor.string] = obj;
  }
  var proxy = obj.$proxies[type.string];
  if (proxy === undefined) {
    var properties = {};
    for (var i = 0; i < type.elem.fields.length; i++) {
      (function(fieldProp) {
        properties[fieldProp] = {
          get: function() { return obj[fieldProp]; },
          set: function(value) { obj[fieldProp] = value; }
        };
      })(type.elem.fields[i].prop);
    }
    proxy = Object.create(type.prototype, properties);
    proxy.$val = proxy;
    obj.$proxies[type.string] = proxy;
    proxy.$proxies = obj.$proxies;
  }
  return proxy;
};

var $append = function(slice) {
  return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
  if (toAppend.constructor === String) {
    var bytes = $stringToBytes(toAppend);
    return $internalAppend(slice, bytes, 0, bytes.length);
  }
  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = function(slice, array, offset, length) {
  if (length === 0) {
    return slice;
  }

  var newArray = slice.$array;
  var newOffset = slice.$offset;
  var newLength = slice.$length + length;
  var newCapacity = slice.$capacity;

  if (newLength > newCapacity) {
    newOffset = 0;
    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

    if (slice.$array.constructor === Array) {
      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
      newArray.length = newCapacity;
      var zero = slice.constructor.elem.zero;
      for (var i = slice.$length; i < newCapacity; i++) {
        newArray[i] = zero();
      }
    } else {
      newArray = new slice.$array.constructor(newCapacity);
      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
    }
  }

  $copyArray(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

  var newSlice = new slice.constructor(newArray);
  newSlice.$offset = newOffset;
  newSlice.$length = newLength;
  newSlice.$capacity = newCapacity;
  return newSlice;
};

var $equal = function(a, b, type) {
  if (type === $jsObjectPtr) {
    return a === b;
  }
  switch (type.kind) {
  case $kindComplex64:
  case $kindComplex128:
    return a.$real === b.$real && a.$imag === b.$imag;
  case $kindInt64:
  case $kindUint64:
    return a.$high === b.$high && a.$low === b.$low;
  case $kindArray:
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (!$equal(a[i], b[i], type.elem)) {
        return false;
      }
    }
    return true;
  case $kindStruct:
    for (var i = 0; i < type.fields.length; i++) {
      var f = type.fields[i];
      if (!$equal(a[f.prop], b[f.prop], f.typ)) {
        return false;
      }
    }
    return true;
  case $kindInterface:
    return $interfaceIsEqual(a, b);
  default:
    return a === b;
  }
};

var $interfaceIsEqual = function(a, b) {
  if (a === $ifaceNil || b === $ifaceNil) {
    return a === b;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (a.constructor === $jsObjectPtr) {
    return a.object === b.object;
  }
  if (!a.constructor.comparable) {
    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
  }
  return $equal(a.$val, b.$val, a.constructor);
};

var $min = Math.min;
var $mod = function(x, y) { return x % y; };
var $parseInt = parseInt;
var $parseFloat = function(f) {
  if (f !== undefined && f !== null && f.constructor === Number) {
    return f;
  }
  return parseFloat(f);
};

var $froundBuf = new Float32Array(1);
var $fround = Math.fround || function(f) {
  $froundBuf[0] = f;
  return $froundBuf[0];
};

var $imul = Math.imul || function(a, b) {
  var ah = (a >>> 16) & 0xffff;
  var al = a & 0xffff;
  var bh = (b >>> 16) & 0xffff;
  var bl = b & 0xffff;
  return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) >> 0);
};

var $floatKey = function(f) {
  if (f !== f) {
    $idCounter++;
    return "NaN$" + $idCounter;
  }
  return String(f);
};

var $flatten64 = function(x) {
  return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$low << (y - 32), 0);
  }
  return new x.constructor(0, 0);
};

var $shiftRightInt64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
  }
  if (x.$high < 0) {
    return new x.constructor(-1, 4294967295);
  }
  return new x.constructor(0, 0);
};

var $shiftRightUint64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(0, x.$high >>> (y - 32));
  }
  return new x.constructor(0, 0);
};

var $mul64 = function(x, y) {
  var high = 0, low = 0;
  if ((y.$low & 1) !== 0) {
    high = x.$high;
    low = x.$low;
  }
  for (var i = 1; i < 32; i++) {
    if ((y.$low & 1<<i) !== 0) {
      high += x.$high << i | x.$low >>> (32 - i);
      low += (x.$low << i) >>> 0;
    }
  }
  for (var i = 0; i < 32; i++) {
    if ((y.$high & 1<<i) !== 0) {
      high += x.$low << i;
    }
  }
  return new x.constructor(high, low);
};

var $div64 = function(x, y, returnRemainder) {
  if (y.$high === 0 && y.$low === 0) {
    $throwRuntimeError("integer divide by zero");
  }

  var s = 1;
  var rs = 1;

  var xHigh = x.$high;
  var xLow = x.$low;
  if (xHigh < 0) {
    s = -1;
    rs = -1;
    xHigh = -xHigh;
    if (xLow !== 0) {
      xHigh--;
      xLow = 4294967296 - xLow;
    }
  }

  var yHigh = y.$high;
  var yLow = y.$low;
  if (y.$high < 0) {
    s *= -1;
    yHigh = -yHigh;
    if (yLow !== 0) {
      yHigh--;
      yLow = 4294967296 - yLow;
    }
  }

  var high = 0, low = 0, n = 0;
  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
    yLow = (yLow << 1) >>> 0;
    n++;
  }
  for (var i = 0; i <= n; i++) {
    high = high << 1 | low >>> 31;
    low = (low << 1) >>> 0;
    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
      xHigh = xHigh - yHigh;
      xLow = xLow - yLow;
      if (xLow < 0) {
        xHigh--;
        xLow += 4294967296;
      }
      low++;
      if (low === 4294967296) {
        high++;
        low = 0;
      }
    }
    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
    yHigh = yHigh >>> 1;
  }

  if (returnRemainder) {
    return new x.constructor(xHigh * rs, xLow * rs);
  }
  return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
  var ninf = n.$real === Infinity || n.$real === -Infinity || n.$imag === Infinity || n.$imag === -Infinity;
  var dinf = d.$real === Infinity || d.$real === -Infinity || d.$imag === Infinity || d.$imag === -Infinity;
  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
  if(nnan || dnan) {
    return new n.constructor(NaN, NaN);
  }
  if (ninf && !dinf) {
    return new n.constructor(Infinity, Infinity);
  }
  if (!ninf && dinf) {
    return new n.constructor(0, 0);
  }
  if (d.$real === 0 && d.$imag === 0) {
    if (n.$real === 0 && n.$imag === 0) {
      return new n.constructor(NaN, NaN);
    }
    return new n.constructor(Infinity, Infinity);
  }
  var a = Math.abs(d.$real);
  var b = Math.abs(d.$imag);
  if (a <= b) {
    var ratio = d.$real / d.$imag;
    var denom = d.$real * ratio + d.$imag;
    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
  }
  var ratio = d.$imag / d.$real;
  var denom = d.$imag * ratio + d.$real;
  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};

var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $methodSynthesizers = [];
var $addMethodSynthesizer = function(f) {
  if ($methodSynthesizers === null) {
    f();
    return;
  }
  $methodSynthesizers.push(f);
};
var $synthesizeMethods = function() {
  $methodSynthesizers.forEach(function(f) { f(); });
  $methodSynthesizers = null;
};

var $ifaceKeyFor = function(x) {
  if (x === $ifaceNil) {
    return 'nil';
  }
  var c = x.constructor;
  return c.string + '$' + c.keyFor(x.$val);
};

var $identity = function(x) { return x; };

var $typeIDCounter = 0;

var $idKey = function(x) {
  if (x.$id === undefined) {
    $idCounter++;
    x.$id = $idCounter;
  }
  return String(x.$id);
};

var $newType = function(size, kind, string, name, pkg, constructor) {
  var typ;
  switch(kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $identity;
    break;

  case $kindString:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return "$" + x; };
    break;

  case $kindFloat32:
  case $kindFloat64:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return $floatKey(x); };
    break;

  case $kindInt64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindUint64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindComplex64:
    typ = function(real, imag) {
      this.$real = $fround(real);
      this.$imag = $fround(imag);
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindComplex128:
    typ = function(real, imag) {
      this.$real = real;
      this.$imag = imag;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindArray:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, "", "", function(array) {
      this.$get = function() { return array; };
      this.$set = function(v) { typ.copy(this, v); };
      this.$val = array;
    });
    typ.init = function(elem, len) {
      typ.elem = elem;
      typ.len = len;
      typ.comparable = elem.comparable;
      typ.keyFor = function(x) {
        return Array.prototype.join.call($mapArray(x, function(e) {
          return String(elem.keyFor(e)).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }), "$");
      };
      typ.copy = function(dst, src) {
        $copyArray(dst, src, 0, 0, src.length, elem);
      };
      typ.ptr.init(typ);
      Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
    };
    break;

  case $kindChan:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $idKey;
    typ.init = function(elem, sendOnly, recvOnly) {
      typ.elem = elem;
      typ.sendOnly = sendOnly;
      typ.recvOnly = recvOnly;
    };
    break;

  case $kindFunc:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(params, results, variadic) {
      typ.params = params;
      typ.results = results;
      typ.variadic = variadic;
      typ.comparable = false;
    };
    break;

  case $kindInterface:
    typ = { implementedBy: {}, missingMethodFor: {} };
    typ.keyFor = $ifaceKeyFor;
    typ.init = function(methods) {
      typ.methods = methods;
      methods.forEach(function(m) {
        $ifaceNil[m.prop] = $throwNilPointerError;
      });
    };
    break;

  case $kindMap:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(key, elem) {
      typ.key = key;
      typ.elem = elem;
      typ.comparable = false;
    };
    break;

  case $kindPtr:
    typ = constructor || function(getter, setter, target) {
      this.$get = getter;
      this.$set = setter;
      this.$target = target;
      this.$val = this;
    };
    typ.keyFor = $idKey;
    typ.init = function(elem) {
      typ.elem = elem;
      typ.wrapped = (elem.kind === $kindArray);
      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
    };
    break;

  case $kindSlice:
    typ = function(array) {
      if (array.constructor !== typ.nativeArray) {
        array = new typ.nativeArray(array);
      }
      this.$array = array;
      this.$offset = 0;
      this.$length = array.length;
      this.$capacity = array.length;
      this.$val = this;
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.comparable = false;
      typ.nativeArray = $nativeArray(elem.kind);
      typ.nil = new typ([]);
    };
    break;

  case $kindStruct:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, "", "", constructor);
    typ.ptr.elem = typ;
    typ.ptr.prototype.$get = function() { return this; };
    typ.ptr.prototype.$set = function(v) { typ.copy(this, v); };
    typ.init = function(fields) {
      typ.fields = fields;
      fields.forEach(function(f) {
        if (!f.typ.comparable) {
          typ.comparable = false;
        }
      });
      typ.keyFor = function(x) {
        var val = x.$val;
        return $mapArray(fields, function(f) {
          return String(f.typ.keyFor(val[f.prop])).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }).join("$");
      };
      typ.copy = function(dst, src) {
        for (var i = 0; i < fields.length; i++) {
          var f = fields[i];
          switch (f.typ.kind) {
          case $kindArray:
          case $kindStruct:
            f.typ.copy(dst[f.prop], src[f.prop]);
            continue;
          default:
            dst[f.prop] = src[f.prop];
            continue;
          }
        }
      };
      /* nil value */
      var properties = {};
      fields.forEach(function(f) {
        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
      });
      typ.ptr.nil = Object.create(constructor.prototype, properties);
      typ.ptr.nil.$val = typ.ptr.nil;
      /* methods for embedded fields */
      $addMethodSynthesizer(function() {
        var synthesizeMethod = function(target, m, f) {
          if (target.prototype[m.prop] !== undefined) { return; }
          target.prototype[m.prop] = function() {
            var v = this.$val[f.prop];
            if (f.typ === $jsObjectPtr) {
              v = new $jsObjectPtr(v);
            }
            if (v.$val === undefined) {
              v = new f.typ(v);
            }
            return v[m.prop].apply(v, arguments);
          };
        };
        fields.forEach(function(f) {
          if (f.name === "") {
            $methodSet(f.typ).forEach(function(m) {
              synthesizeMethod(typ, m, f);
              synthesizeMethod(typ.ptr, m, f);
            });
            $methodSet($ptrType(f.typ)).forEach(function(m) {
              synthesizeMethod(typ.ptr, m, f);
            });
          }
        });
      });
    };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  switch (kind) {
  case $kindBool:
  case $kindMap:
    typ.zero = function() { return false; };
    break;

  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8 :
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
  case $kindFloat32:
  case $kindFloat64:
    typ.zero = function() { return 0; };
    break;

  case $kindString:
    typ.zero = function() { return ""; };
    break;

  case $kindInt64:
  case $kindUint64:
  case $kindComplex64:
  case $kindComplex128:
    var zero = new typ(0, 0);
    typ.zero = function() { return zero; };
    break;

  case $kindPtr:
  case $kindSlice:
    typ.zero = function() { return typ.nil; };
    break;

  case $kindChan:
    typ.zero = function() { return $chanNil; };

  case $kindFunc:
    typ.zero = function() { return $throwNilPointerError; };
    break;

  case $kindInterface:
    typ.zero = function() { return $ifaceNil; };
    break;

  case $kindArray:
    typ.zero = function() {
      var arrayClass = $nativeArray(typ.elem.kind);
      if (arrayClass !== Array) {
        return new arrayClass(typ.len);
      }
      var array = new Array(typ.len);
      for (var i = 0; i < typ.len; i++) {
        array[i] = typ.elem.zero();
      }
      return array;
    };
    break;

  case $kindStruct:
    typ.zero = function() { return new typ.ptr(); };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  typ.id = $typeIDCounter;
  $typeIDCounter++;
  typ.size = size;
  typ.kind = kind;
  typ.string = string;
  typ.typeName = name;
  typ.pkg = pkg;
  typ.methods = [];
  typ.methodSetCache = null;
  typ.comparable = true;
  return typ;
};

var $methodSet = function(typ) {
  if (typ.methodSetCache !== null) {
    return typ.methodSetCache;
  }
  var base = {};

  var isPtr = (typ.kind === $kindPtr);
  if (isPtr && typ.elem.kind === $kindInterface) {
    typ.methodSetCache = [];
    return [];
  }

  var current = [{typ: isPtr ? typ.elem : typ, indirect: isPtr}];

  var seen = {};

  while (current.length > 0) {
    var next = [];
    var mset = [];

    current.forEach(function(e) {
      if (seen[e.typ.string]) {
        return;
      }
      seen[e.typ.string] = true;

      if(e.typ.typeName !== "") {
        mset = mset.concat(e.typ.methods);
        if (e.indirect) {
          mset = mset.concat($ptrType(e.typ).methods);
        }
      }

      switch (e.typ.kind) {
      case $kindStruct:
        e.typ.fields.forEach(function(f) {
          if (f.name === "") {
            var fTyp = f.typ;
            var fIsPtr = (fTyp.kind === $kindPtr);
            next.push({typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr});
          }
        });
        break;

      case $kindInterface:
        mset = mset.concat(e.typ.methods);
        break;
      }
    });

    mset.forEach(function(m) {
      if (base[m.name] === undefined) {
        base[m.name] = m;
      }
    });

    current = next;
  }

  typ.methodSetCache = [];
  Object.keys(base).sort().forEach(function(name) {
    typ.methodSetCache.push(base[name]);
  });
  return typ.methodSetCache;
};

var $Bool          = $newType( 1, $kindBool,          "bool",           "bool",       "", null);
var $Int           = $newType( 4, $kindInt,           "int",            "int",        "", null);
var $Int8          = $newType( 1, $kindInt8,          "int8",           "int8",       "", null);
var $Int16         = $newType( 2, $kindInt16,         "int16",          "int16",      "", null);
var $Int32         = $newType( 4, $kindInt32,         "int32",          "int32",      "", null);
var $Int64         = $newType( 8, $kindInt64,         "int64",          "int64",      "", null);
var $Uint          = $newType( 4, $kindUint,          "uint",           "uint",       "", null);
var $Uint8         = $newType( 1, $kindUint8,         "uint8",          "uint8",      "", null);
var $Uint16        = $newType( 2, $kindUint16,        "uint16",         "uint16",     "", null);
var $Uint32        = $newType( 4, $kindUint32,        "uint32",         "uint32",     "", null);
var $Uint64        = $newType( 8, $kindUint64,        "uint64",         "uint64",     "", null);
var $Uintptr       = $newType( 4, $kindUintptr,       "uintptr",        "uintptr",    "", null);
var $Float32       = $newType( 4, $kindFloat32,       "float32",        "float32",    "", null);
var $Float64       = $newType( 8, $kindFloat64,       "float64",        "float64",    "", null);
var $Complex64     = $newType( 8, $kindComplex64,     "complex64",      "complex64",  "", null);
var $Complex128    = $newType(16, $kindComplex128,    "complex128",     "complex128", "", null);
var $String        = $newType( 8, $kindString,        "string",         "string",     "", null);
var $UnsafePointer = $newType( 4, $kindUnsafePointer, "unsafe.Pointer", "Pointer",    "", null);

var $nativeArray = function(elemKind) {
  switch (elemKind) {
  case $kindInt:
    return Int32Array;
  case $kindInt8:
    return Int8Array;
  case $kindInt16:
    return Int16Array;
  case $kindInt32:
    return Int32Array;
  case $kindUint:
    return Uint32Array;
  case $kindUint8:
    return Uint8Array;
  case $kindUint16:
    return Uint16Array;
  case $kindUint32:
    return Uint32Array;
  case $kindUintptr:
    return Uint32Array;
  case $kindFloat32:
    return Float32Array;
  case $kindFloat64:
    return Float64Array;
  default:
    return Array;
  }
};
var $toNativeArray = function(elemKind, array) {
  var nativeArray = $nativeArray(elemKind);
  if (nativeArray === Array) {
    return array;
  }
  return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
  var typeKey = elem.id + "$" + len;
  var typ = $arrayTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(12, $kindArray, "[" + len + "]" + elem.string, "", "", null);
    $arrayTypes[typeKey] = typ;
    typ.init(elem, len);
  }
  return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
  var typ = elem[field];
  if (typ === undefined) {
    typ = $newType(4, $kindChan, string, "", "", null);
    elem[field] = typ;
    typ.init(elem, sendOnly, recvOnly);
  }
  return typ;
};
var $Chan = function(elem, capacity) {
  if (capacity < 0 || capacity > 2147483647) {
    $throwRuntimeError("makechan: size out of range");
  }
  this.$elem = elem;
  this.$capacity = capacity;
  this.$buffer = [];
  this.$sendQueue = [];
  this.$recvQueue = [];
  this.$closed = false;
};
var $chanNil = new $Chan(null, 0);
$chanNil.$sendQueue = $chanNil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
  var typeKey = $mapArray(params, function(p) { return p.id; }).join(",") + "$" + $mapArray(results, function(r) { return r.id; }).join(",") + "$" + variadic;
  var typ = $funcTypes[typeKey];
  if (typ === undefined) {
    var paramTypes = $mapArray(params, function(p) { return p.string; });
    if (variadic) {
      paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
    }
    var string = "func(" + paramTypes.join(", ") + ")";
    if (results.length === 1) {
      string += " " + results[0].string;
    } else if (results.length > 1) {
      string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
    }
    typ = $newType(4, $kindFunc, string, "", "", null);
    $funcTypes[typeKey] = typ;
    typ.init(params, results, variadic);
  }
  return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
  var typeKey = $mapArray(methods, function(m) { return m.pkg + "," + m.name + "," + m.typ.id; }).join("$");
  var typ = $interfaceTypes[typeKey];
  if (typ === undefined) {
    var string = "interface {}";
    if (methods.length !== 0) {
      string = "interface { " + $mapArray(methods, function(m) {
        return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
      }).join("; ") + " }";
    }
    typ = $newType(8, $kindInterface, string, "", "", null);
    $interfaceTypes[typeKey] = typ;
    typ.init(methods);
  }
  return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = {};
var $error = $newType(8, $kindInterface, "error", "error", "", null);
$error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}]);

var $mapTypes = {};
var $mapType = function(key, elem) {
  var typeKey = key.id + "$" + elem.id;
  var typ = $mapTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(4, $kindMap, "map[" + key.string + "]" + elem.string, "", "", null);
    $mapTypes[typeKey] = typ;
    typ.init(key, elem);
  }
  return typ;
};
var $makeMap = function(keyForFunc, entries) {
  var m = {};
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i];
    m[keyForFunc(e.k)] = e;
  }
  return m;
};

var $ptrType = function(elem) {
  var typ = elem.ptr;
  if (typ === undefined) {
    typ = $newType(4, $kindPtr, "*" + elem.string, "", "", null);
    elem.ptr = typ;
    typ.init(elem);
  }
  return typ;
};

var $newDataPointer = function(data, constructor) {
  if (constructor.elem.kind === $kindStruct) {
    return data;
  }
  return new constructor(function() { return data; }, function(v) { data = v; });
};

var $indexPtr = function(array, index, constructor) {
  array.$ptr = array.$ptr || {};
  return array.$ptr[index] || (array.$ptr[index] = new constructor(function() { return array[index]; }, function(v) { array[index] = v; }));
};

var $sliceType = function(elem) {
  var typ = elem.slice;
  if (typ === undefined) {
    typ = $newType(12, $kindSlice, "[]" + elem.string, "", "", null);
    elem.slice = typ;
    typ.init(elem);
  }
  return typ;
};
var $makeSlice = function(typ, length, capacity) {
  capacity = capacity || length;
  if (length < 0 || length > 2147483647) {
    $throwRuntimeError("makeslice: len out of range");
  }
  if (capacity < 0 || capacity < length || capacity > 2147483647) {
    $throwRuntimeError("makeslice: cap out of range");
  }
  var array = new typ.nativeArray(capacity);
  if (typ.nativeArray === Array) {
    for (var i = 0; i < capacity; i++) {
      array[i] = typ.elem.zero();
    }
  }
  var slice = new typ(array);
  slice.$length = length;
  return slice;
};

var $structTypes = {};
var $structType = function(fields) {
  var typeKey = $mapArray(fields, function(f) { return f.name + "," + f.typ.id + "," + f.tag; }).join("$");
  var typ = $structTypes[typeKey];
  if (typ === undefined) {
    var string = "struct { " + $mapArray(fields, function(f) {
      return f.name + " " + f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
    }).join("; ") + " }";
    if (fields.length === 0) {
      string = "struct {}";
    }
    typ = $newType(0, $kindStruct, string, "", "", function() {
      this.$val = this;
      for (var i = 0; i < fields.length; i++) {
        var f = fields[i];
        var arg = arguments[i];
        this[f.prop] = arg !== undefined ? arg : f.typ.zero();
      }
    });
    $structTypes[typeKey] = typ;
    typ.init(fields);
  }
  return typ;
};

var $assertType = function(value, type, returnTuple) {
  var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
  if (value === $ifaceNil) {
    ok = false;
  } else if (!isInterface) {
    ok = value.constructor === type;
  } else {
    var valueTypeString = value.constructor.string;
    ok = type.implementedBy[valueTypeString];
    if (ok === undefined) {
      ok = true;
      var valueMethodSet = $methodSet(value.constructor);
      var interfaceMethods = type.methods;
      for (var i = 0; i < interfaceMethods.length; i++) {
        var tm = interfaceMethods[i];
        var found = false;
        for (var j = 0; j < valueMethodSet.length; j++) {
          var vm = valueMethodSet[j];
          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
            found = true;
            break;
          }
        }
        if (!found) {
          ok = false;
          type.missingMethodFor[valueTypeString] = tm.name;
          break;
        }
      }
      type.implementedBy[valueTypeString] = ok;
    }
    if (!ok) {
      missingMethod = type.missingMethodFor[valueTypeString];
    }
  }

  if (!ok) {
    if (returnTuple) {
      return [type.zero(), false];
    }
    $panic(new $packages["runtime"].TypeAssertionError.ptr("", (value === $ifaceNil ? "" : value.constructor.string), type.string, missingMethod));
  }

  if (!isInterface) {
    value = value.$val;
  }
  if (type === $jsObjectPtr) {
    value = value.object;
  }
  return returnTuple ? [value, true] : value;
};

var $stackDepthOffset = 0;
var $getStackDepth = function() {
  var err = new Error();
  if (err.stack === undefined) {
    return undefined;
  }
  return $stackDepthOffset + err.stack.split("\n").length;
};

var $panicStackDepth = null, $panicValue;
var $callDeferred = function(deferred, jsErr, fromPanic) {
  if (!fromPanic && deferred !== null && deferred.index >= $curGoroutine.deferStack.length) {
    throw jsErr;
  }
  if (jsErr !== null) {
    var newErr = null;
    try {
      $curGoroutine.deferStack.push(deferred);
      $panic(new $jsErrorPtr(jsErr));
    } catch (err) {
      newErr = err;
    }
    $curGoroutine.deferStack.pop();
    $callDeferred(deferred, newErr);
    return;
  }
  if ($curGoroutine.asleep) {
    return;
  }

  $stackDepthOffset--;
  var outerPanicStackDepth = $panicStackDepth;
  var outerPanicValue = $panicValue;

  var localPanicValue = $curGoroutine.panicStack.pop();
  if (localPanicValue !== undefined) {
    $panicStackDepth = $getStackDepth();
    $panicValue = localPanicValue;
  }

  try {
    while (true) {
      if (deferred === null) {
        deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];
        if (deferred === undefined) {
          /* The panic reached the top of the stack. Clear it and throw it as a JavaScript error. */
          $panicStackDepth = null;
          if (localPanicValue.Object instanceof Error) {
            throw localPanicValue.Object;
          }
          var msg;
          if (localPanicValue.constructor === $String) {
            msg = localPanicValue.$val;
          } else if (localPanicValue.Error !== undefined) {
            msg = localPanicValue.Error();
          } else if (localPanicValue.String !== undefined) {
            msg = localPanicValue.String();
          } else {
            msg = localPanicValue;
          }
          throw new Error(msg);
        }
      }
      var call = deferred.pop();
      if (call === undefined) {
        $curGoroutine.deferStack.pop();
        if (localPanicValue !== undefined) {
          deferred = null;
          continue;
        }
        return;
      }
      var r = call[0].apply(call[2], call[1]);
      if (r && r.$blk !== undefined) {
        deferred.push([r.$blk, [], r]);
        if (fromPanic) {
          throw null;
        }
        return;
      }

      if (localPanicValue !== undefined && $panicStackDepth === null) {
        throw null; /* error was recovered */
      }
    }
  } finally {
    if (localPanicValue !== undefined) {
      if ($panicStackDepth !== null) {
        $curGoroutine.panicStack.push(localPanicValue);
      }
      $panicStackDepth = outerPanicStackDepth;
      $panicValue = outerPanicValue;
    }
    $stackDepthOffset++;
  }
};

var $panic = function(value) {
  $curGoroutine.panicStack.push(value);
  $callDeferred(null, null, true);
};
var $recover = function() {
  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
    return $ifaceNil;
  }
  $panicStackDepth = null;
  return $panicValue;
};
var $throw = function(err) { throw err; };

var $dummyGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [], canBlock: false };
var $curGoroutine = $dummyGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true;
var $mainFinished = false;
var $go = function(fun, args, direct) {
  $totalGoroutines++;
  $awakeGoroutines++;
  var $goroutine = function() {
    try {
      $curGoroutine = $goroutine;
      var r = fun.apply(undefined, args);
      if (r && r.$blk !== undefined) {
        fun = function() { return r.$blk(); };
        args = [];
        return;
      }
      $goroutine.exit = true;
    } catch (err) {
      if (!$goroutine.exit) {
        throw err;
      }
    } finally {
      $curGoroutine = $dummyGoroutine;
      if ($goroutine.exit) { /* also set by runtime.Goexit() */
        $totalGoroutines--;
        $goroutine.asleep = true;
      }
      if ($goroutine.asleep) {
        $awakeGoroutines--;
        if (!$mainFinished && $awakeGoroutines === 0 && $checkForDeadlock) {
          console.error("fatal error: all goroutines are asleep - deadlock!");
          if ($global.process !== undefined) {
            $global.process.exit(2);
          }
        }
      }
    }
  };
  $goroutine.asleep = false;
  $goroutine.exit = false;
  $goroutine.deferStack = [];
  $goroutine.panicStack = [];
  $goroutine.canBlock = true;
  $schedule($goroutine, direct);
};

var $scheduled = [], $schedulerActive = false;
var $runScheduled = function() {
  try {
    var r;
    while ((r = $scheduled.shift()) !== undefined) {
      r();
    }
    $schedulerActive = false;
  } finally {
    if ($schedulerActive) {
      setTimeout($runScheduled, 0);
    }
  }
};
var $schedule = function(goroutine, direct) {
  if (goroutine.asleep) {
    goroutine.asleep = false;
    $awakeGoroutines++;
  }

  if (direct) {
    goroutine();
    return;
  }

  $scheduled.push(goroutine);
  if (!$schedulerActive) {
    $schedulerActive = true;
    setTimeout($runScheduled, 0);
  }
};

var $setTimeout = function(f, t) {
  $awakeGoroutines++;
  return setTimeout(function() {
    $awakeGoroutines--;
    f();
  }, t);
};

var $block = function() {
  if (!$curGoroutine.canBlock) {
    $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine");
  }
  $curGoroutine.asleep = true;
};

var $send = function(chan, value) {
  if (chan.$closed) {
    $throwRuntimeError("send on closed channel");
  }
  var queuedRecv = chan.$recvQueue.shift();
  if (queuedRecv !== undefined) {
    queuedRecv([value, true]);
    return;
  }
  if (chan.$buffer.length < chan.$capacity) {
    chan.$buffer.push(value);
    return;
  }

  var thisGoroutine = $curGoroutine;
  chan.$sendQueue.push(function() {
    $schedule(thisGoroutine);
    return value;
  });
  $block();
  return {
    $blk: function() {
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
    }
  };
};
var $recv = function(chan) {
  var queuedSend = chan.$sendQueue.shift();
  if (queuedSend !== undefined) {
    chan.$buffer.push(queuedSend());
  }
  var bufferedValue = chan.$buffer.shift();
  if (bufferedValue !== undefined) {
    return [bufferedValue, true];
  }
  if (chan.$closed) {
    return [chan.$elem.zero(), false];
  }

  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.value; } };
  var queueEntry = function(v) {
    f.value = v;
    $schedule(thisGoroutine);
  };
  chan.$recvQueue.push(queueEntry);
  $block();
  return f;
};
var $close = function(chan) {
  if (chan.$closed) {
    $throwRuntimeError("close of closed channel");
  }
  chan.$closed = true;
  while (true) {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend === undefined) {
      break;
    }
    queuedSend(); /* will panic because of closed channel */
  }
  while (true) {
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv === undefined) {
      break;
    }
    queuedRecv([chan.$elem.zero(), false]);
  }
};
var $select = function(comms) {
  var ready = [];
  var selection = -1;
  for (var i = 0; i < comms.length; i++) {
    var comm = comms[i];
    var chan = comm[0];
    switch (comm.length) {
    case 0: /* default */
      selection = i;
      break;
    case 1: /* recv */
      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
        ready.push(i);
      }
      break;
    case 2: /* send */
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
        ready.push(i);
      }
      break;
    }
  }

  if (ready.length !== 0) {
    selection = ready[Math.floor(Math.random() * ready.length)];
  }
  if (selection !== -1) {
    var comm = comms[selection];
    switch (comm.length) {
    case 0: /* default */
      return [selection];
    case 1: /* recv */
      return [selection, $recv(comm[0])];
    case 2: /* send */
      $send(comm[0], comm[1]);
      return [selection];
    }
  }

  var entries = [];
  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.selection; } };
  var removeFromQueues = function() {
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var queue = entry[0];
      var index = queue.indexOf(entry[1]);
      if (index !== -1) {
        queue.splice(index, 1);
      }
    }
  };
  for (var i = 0; i < comms.length; i++) {
    (function(i) {
      var comm = comms[i];
      switch (comm.length) {
      case 1: /* recv */
        var queueEntry = function(value) {
          f.selection = [i, value];
          removeFromQueues();
          $schedule(thisGoroutine);
        };
        entries.push([comm[0].$recvQueue, queueEntry]);
        comm[0].$recvQueue.push(queueEntry);
        break;
      case 2: /* send */
        var queueEntry = function() {
          if (comm[0].$closed) {
            $throwRuntimeError("send on closed channel");
          }
          f.selection = [i];
          removeFromQueues();
          $schedule(thisGoroutine);
          return comm[1];
        };
        entries.push([comm[0].$sendQueue, queueEntry]);
        comm[0].$sendQueue.push(queueEntry);
        break;
      }
    })(i);
  }
  $block();
  return f;
};

var $jsObjectPtr, $jsErrorPtr;

var $needsExternalization = function(t) {
  switch (t.kind) {
    case $kindBool:
    case $kindInt:
    case $kindInt8:
    case $kindInt16:
    case $kindInt32:
    case $kindUint:
    case $kindUint8:
    case $kindUint16:
    case $kindUint32:
    case $kindUintptr:
    case $kindFloat32:
    case $kindFloat64:
      return false;
    default:
      return t !== $jsObjectPtr;
  }
};

var $externalize = function(v, t) {
  if (t === $jsObjectPtr) {
    return v;
  }
  switch (t.kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindFloat32:
  case $kindFloat64:
    return v;
  case $kindInt64:
  case $kindUint64:
    return $flatten64(v);
  case $kindArray:
    if ($needsExternalization(t.elem)) {
      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
    }
    return v;
  case $kindFunc:
    return $externalizeFunction(v, t, false);
  case $kindInterface:
    if (v === $ifaceNil) {
      return null;
    }
    if (v.constructor === $jsObjectPtr) {
      return v.$val.object;
    }
    return $externalize(v.$val, v.constructor);
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var entry = v[keys[i]];
      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
    }
    return m;
  case $kindPtr:
    if (v === t.nil) {
      return null;
    }
    return $externalize(v.$get(), t.elem);
  case $kindSlice:
    if ($needsExternalization(t.elem)) {
      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
    }
    return $sliceToArray(v);
  case $kindString:
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "", r;
    for (var i = 0; i < v.length; i += r[1]) {
      r = $decodeRune(v, i);
      var c = r[0];
      if (c > 0xFFFF) {
        var h = Math.floor((c - 0x10000) / 0x400) + 0xD800;
        var l = (c - 0x10000) % 0x400 + 0xDC00;
        s += String.fromCharCode(h, l);
        continue;
      }
      s += String.fromCharCode(c);
    }
    return s;
  case $kindStruct:
    var timePkg = $packages["time"];
    if (timePkg !== undefined && v.constructor === timePkg.Time.ptr) {
      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
      return new Date($flatten64(milli));
    }

    var noJsObject = {};
    var searchJsObject = function(v, t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      switch (t.kind) {
      case $kindPtr:
        if (v === t.nil) {
          return noJsObject;
        }
        return searchJsObject(v.$get(), t.elem);
      case $kindStruct:
        var f = t.fields[0];
        return searchJsObject(v[f.prop], f.typ);
      case $kindInterface:
        return searchJsObject(v.$val, v.constructor);
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(v, t);
    if (o !== noJsObject) {
      return o;
    }

    o = {};
    for (var i = 0; i < t.fields.length; i++) {
      var f = t.fields[i];
      if (f.pkg !== "") { /* not exported */
        continue;
      }
      o[f.name] = $externalize(v[f.prop], f.typ);
    }
    return o;
  }
  $throwRuntimeError("cannot externalize " + t.string);
};

var $externalizeFunction = function(v, t, passThis) {
  if (v === $throwNilPointerError) {
    return null;
  }
  if (v.$externalizeWrapper === undefined) {
    $checkForDeadlock = false;
    v.$externalizeWrapper = function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = [];
          for (var j = i; j < arguments.length; j++) {
            varargs.push($internalize(arguments[j], vt));
          }
          args.push(new (t.params[i])(varargs));
          break;
        }
        args.push($internalize(arguments[i], t.params[i]));
      }
      var canBlock = $curGoroutine.canBlock;
      $curGoroutine.canBlock = false;
      try {
        var result = v.apply(passThis ? this : undefined, args);
      } finally {
        $curGoroutine.canBlock = canBlock;
      }
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $externalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $externalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  }
  return v.$externalizeWrapper;
};

var $internalize = function(v, t, recv) {
  if (t === $jsObjectPtr) {
    return v;
  }
  if (t === $jsObjectPtr.elem) {
    $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
  }
  if (v && v.__internal_object__ !== undefined) {
    return $assertType(v.__internal_object__, t, false);
  }
  var timePkg = $packages["time"];
  if (timePkg !== undefined && t === timePkg.Time) {
    if (!(v !== null && v !== undefined && v.constructor === Date)) {
      $throwRuntimeError("cannot internalize time.Time from " + typeof v + ", must be Date");
    }
    return timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000));
  }
  switch (t.kind) {
  case $kindBool:
    return !!v;
  case $kindInt:
    return parseInt(v);
  case $kindInt8:
    return parseInt(v) << 24 >> 24;
  case $kindInt16:
    return parseInt(v) << 16 >> 16;
  case $kindInt32:
    return parseInt(v) >> 0;
  case $kindUint:
    return parseInt(v);
  case $kindUint8:
    return parseInt(v) << 24 >>> 24;
  case $kindUint16:
    return parseInt(v) << 16 >>> 16;
  case $kindUint32:
  case $kindUintptr:
    return parseInt(v) >>> 0;
  case $kindInt64:
  case $kindUint64:
    return new t(0, v);
  case $kindFloat32:
  case $kindFloat64:
    return parseFloat(v);
  case $kindArray:
    if (v.length !== t.len) {
      $throwRuntimeError("got array with wrong size from JavaScript native");
    }
    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
  case $kindFunc:
    return function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = arguments[i];
          for (var j = 0; j < varargs.$length; j++) {
            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
          }
          break;
        }
        args.push($externalize(arguments[i], t.params[i]));
      }
      var result = v.apply(recv, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $internalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $internalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  case $kindInterface:
    if (t.methods.length !== 0) {
      $throwRuntimeError("cannot internalize " + t.string);
    }
    if (v === null) {
      return $ifaceNil;
    }
    if (v === undefined) {
      return new $jsObjectPtr(undefined);
    }
    switch (v.constructor) {
    case Int8Array:
      return new ($sliceType($Int8))(v);
    case Int16Array:
      return new ($sliceType($Int16))(v);
    case Int32Array:
      return new ($sliceType($Int))(v);
    case Uint8Array:
      return new ($sliceType($Uint8))(v);
    case Uint16Array:
      return new ($sliceType($Uint16))(v);
    case Uint32Array:
      return new ($sliceType($Uint))(v);
    case Float32Array:
      return new ($sliceType($Float32))(v);
    case Float64Array:
      return new ($sliceType($Float64))(v);
    case Array:
      return $internalize(v, $sliceType($emptyInterface));
    case Boolean:
      return new $Bool(!!v);
    case Date:
      if (timePkg === undefined) {
        /* time package is not present, internalize as &js.Object{Date} so it can be externalized into original Date. */
        return new $jsObjectPtr(v);
      }
      return new timePkg.Time($internalize(v, timePkg.Time));
    case Function:
      var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
      return new funcType($internalize(v, funcType));
    case Number:
      return new $Float64(parseFloat(v));
    case String:
      return new $String($internalize(v, $String));
    default:
      if ($global.Node && v instanceof $global.Node) {
        return new $jsObjectPtr(v);
      }
      var mapType = $mapType($String, $emptyInterface);
      return new mapType($internalize(v, mapType));
    }
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var k = $internalize(keys[i], t.key);
      m[t.key.keyFor(k)] = { k: k, v: $internalize(v[keys[i]], t.elem) };
    }
    return m;
  case $kindPtr:
    if (t.elem.kind === $kindStruct) {
      return $internalize(v, t.elem);
    }
  case $kindSlice:
    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
  case $kindString:
    v = String(v);
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "";
    var i = 0;
    while (i < v.length) {
      var h = v.charCodeAt(i);
      if (0xD800 <= h && h <= 0xDBFF) {
        var l = v.charCodeAt(i + 1);
        var c = (h - 0xD800) * 0x400 + l - 0xDC00 + 0x10000;
        s += $encodeRune(c);
        i += 2;
        continue;
      }
      s += $encodeRune(h);
      i++;
    }
    return s;
  case $kindStruct:
    var noJsObject = {};
    var searchJsObject = function(t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      if (t === $jsObjectPtr.elem) {
        $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
      }
      switch (t.kind) {
      case $kindPtr:
        return searchJsObject(t.elem);
      case $kindStruct:
        var f = t.fields[0];
        var o = searchJsObject(f.typ);
        if (o !== noJsObject) {
          var n = new t.ptr();
          n[f.prop] = o;
          return n;
        }
        return noJsObject;
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(t);
    if (o !== noJsObject) {
      return o;
    }
  }
  $throwRuntimeError("cannot internalize " + t.string);
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, $init, Object, Error, sliceType, ptrType, ptrType$1, init;
	Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", "Object", "github.com/gopherjs/gopherjs/js", function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = null;
			return;
		}
		this.object = object_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", "Error", "github.com/gopherjs/gopherjs/js", function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Object);
	ptrType$1 = $ptrType(Error);
	Object.ptr.prototype.Get = function(key) {
		var $ptr, key, o;
		o = this;
		return o.object[$externalize(key, $String)];
	};
	Object.prototype.Get = function(key) { return this.$val.Get(key); };
	Object.ptr.prototype.Set = function(key, value) {
		var $ptr, key, o, value;
		o = this;
		o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
	};
	Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	Object.ptr.prototype.Delete = function(key) {
		var $ptr, key, o;
		o = this;
		delete o.object[$externalize(key, $String)];
	};
	Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Object.ptr.prototype.Length = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.object.length);
	};
	Object.prototype.Length = function() { return this.$val.Length(); };
	Object.ptr.prototype.Index = function(i) {
		var $ptr, i, o;
		o = this;
		return o.object[i];
	};
	Object.prototype.Index = function(i) { return this.$val.Index(i); };
	Object.ptr.prototype.SetIndex = function(i, value) {
		var $ptr, i, o, value;
		o = this;
		o.object[i] = $externalize(value, $emptyInterface);
	};
	Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
	Object.ptr.prototype.Call = function(name, args) {
		var $ptr, args, name, o, obj;
		o = this;
		return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));
	};
	Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	Object.ptr.prototype.Invoke = function(args) {
		var $ptr, args, o;
		o = this;
		return o.object.apply(undefined, $externalize(args, sliceType));
	};
	Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Object.ptr.prototype.New = function(args) {
		var $ptr, args, o;
		o = this;
		return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));
	};
	Object.prototype.New = function(args) { return this.$val.New(args); };
	Object.ptr.prototype.Bool = function() {
		var $ptr, o;
		o = this;
		return !!(o.object);
	};
	Object.prototype.Bool = function() { return this.$val.Bool(); };
	Object.ptr.prototype.String = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $String);
	};
	Object.prototype.String = function() { return this.$val.String(); };
	Object.ptr.prototype.Int = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.object) >> 0;
	};
	Object.prototype.Int = function() { return this.$val.Int(); };
	Object.ptr.prototype.Int64 = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $Int64);
	};
	Object.prototype.Int64 = function() { return this.$val.Int64(); };
	Object.ptr.prototype.Uint64 = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $Uint64);
	};
	Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Object.ptr.prototype.Float = function() {
		var $ptr, o;
		o = this;
		return $parseFloat(o.object);
	};
	Object.prototype.Float = function() { return this.$val.Float(); };
	Object.ptr.prototype.Interface = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $emptyInterface);
	};
	Object.prototype.Interface = function() { return this.$val.Interface(); };
	Object.ptr.prototype.Unsafe = function() {
		var $ptr, o;
		o = this;
		return o.object;
	};
	Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
	Error.ptr.prototype.Error = function() {
		var $ptr, err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var $ptr, err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	init = function() {
		var $ptr, e;
		e = new Error.ptr(null);
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
	Object.init([{prop: "object", name: "object", pkg: "github.com/gopherjs/gopherjs/js", typ: ptrType, tag: ""}]);
	Error.init([{prop: "Object", name: "", pkg: "", typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, $init, js, Func, Error, TypeAssertionError, errorString, structType, funcType, ptrType, ptrType$5, init, Caller, Goexit, GOMAXPROCS, Gosched, SetFinalizer, FuncForPC;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	Func = $pkg.Func = $newType(0, $kindStruct, "runtime.Func", "Func", "runtime", function(opaque_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.opaque = new structType.ptr();
			return;
		}
		this.opaque = opaque_;
	});
	Error = $pkg.Error = $newType(8, $kindInterface, "runtime.Error", "Error", "runtime", null);
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", "TypeAssertionError", "runtime", function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.interfaceString = "";
			this.concreteString = "";
			this.assertedString = "";
			this.missingMethod = "";
			return;
		}
		this.interfaceString = interfaceString_;
		this.concreteString = concreteString_;
		this.assertedString = assertedString_;
		this.missingMethod = missingMethod_;
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", "errorString", "runtime", null);
	structType = $structType([]);
	funcType = $funcType([], [], false);
	ptrType = $ptrType(Func);
	ptrType$5 = $ptrType(TypeAssertionError);
	init = function() {
		var $ptr, e, jsPkg;
		jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$jsObjectPtr = jsPkg.Object.ptr;
		$jsErrorPtr = jsPkg.Error.ptr;
		$throwRuntimeError = (function(msg) {
			var $ptr, msg;
			$panic(new errorString(msg));
		});
		e = $ifaceNil;
		e = new TypeAssertionError.ptr("", "", "", "");
	};
	Caller = function(skip) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, file, info, line, ok, parts, pc, skip;
		pc = 0;
		file = "";
		line = 0;
		ok = false;
		info = new ($global.Error)().stack.split($externalize("\n", $String))[(skip + 2 >> 0)];
		if (info === undefined) {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = 0;
			_tmp$3 = false;
			pc = _tmp;
			file = _tmp$1;
			line = _tmp$2;
			ok = _tmp$3;
			return [pc, file, line, ok];
		}
		parts = info.substring(($parseInt(info.indexOf($externalize("(", $String))) >> 0) + 1 >> 0, $parseInt(info.indexOf($externalize(")", $String))) >> 0).split($externalize(":", $String));
		_tmp$4 = 0;
		_tmp$5 = $internalize(parts[0], $String);
		_tmp$6 = $parseInt(parts[1]) >> 0;
		_tmp$7 = true;
		pc = _tmp$4;
		file = _tmp$5;
		line = _tmp$6;
		ok = _tmp$7;
		return [pc, file, line, ok];
	};
	$pkg.Caller = Caller;
	Goexit = function() {
		var $ptr;
		$curGoroutine.exit = $externalize(true, $Bool);
		$throw(null);
	};
	$pkg.Goexit = Goexit;
	GOMAXPROCS = function(n) {
		var $ptr, n;
		return 1;
	};
	$pkg.GOMAXPROCS = GOMAXPROCS;
	Gosched = function() {
		var $ptr, _r, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = [c];
		c[0] = new $Chan(structType, 0);
		$global.setTimeout($externalize((function(c) { return function() {
			var $ptr;
			$close(c[0]);
		}; })(c), funcType), 0);
		_r = $recv(c[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r[0];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Gosched }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Gosched = Gosched;
	SetFinalizer = function(x, f) {
		var $ptr, f, x;
	};
	$pkg.SetFinalizer = SetFinalizer;
	Func.ptr.prototype.Entry = function() {
		var $ptr;
		return 0;
	};
	Func.prototype.Entry = function() { return this.$val.Entry(); };
	Func.ptr.prototype.FileLine = function(pc) {
		var $ptr, _tmp, _tmp$1, file, line, pc;
		file = "";
		line = 0;
		_tmp = "";
		_tmp$1 = 0;
		file = _tmp;
		line = _tmp$1;
		return [file, line];
	};
	Func.prototype.FileLine = function(pc) { return this.$val.FileLine(pc); };
	Func.ptr.prototype.Name = function() {
		var $ptr;
		return "";
	};
	Func.prototype.Name = function() { return this.$val.Name(); };
	FuncForPC = function(pc) {
		var $ptr, pc;
		return ptrType.nil;
	};
	$pkg.FuncForPC = FuncForPC;
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
		var $ptr;
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var $ptr, e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var $ptr, e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "runtime error: " + e;
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	ptrType.methods = [{prop: "Entry", name: "Entry", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "FileLine", name: "FileLine", pkg: "", typ: $funcType([$Uintptr], [$String, $Int], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$5.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Func.init([{prop: "opaque", name: "opaque", pkg: "runtime", typ: structType, tag: ""}]);
	Error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}]);
	TypeAssertionError.init([{prop: "interfaceString", name: "interfaceString", pkg: "runtime", typ: $String, tag: ""}, {prop: "concreteString", name: "concreteString", pkg: "runtime", typ: $String, tag: ""}, {prop: "assertedString", name: "assertedString", pkg: "runtime", typ: $String, tag: ""}, {prop: "missingMethod", name: "missingMethod", pkg: "runtime", typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, $init, errorString, ptrType, New;
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", "errorString", "errors", function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	ptrType = $ptrType(errorString);
	New = function(text) {
		var $ptr, text;
		return new errorString.ptr(text);
	};
	$pkg.New = New;
	errorString.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.init([{prop: "s", name: "s", pkg: "errors", typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, $init, js, Value, ptrType, CompareAndSwapInt32, AddInt32, LoadUint32, StoreInt32, StoreUint32;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	Value = $pkg.Value = $newType(0, $kindStruct, "atomic.Value", "Value", "sync/atomic", function(v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = $ifaceNil;
			return;
		}
		this.v = v_;
	});
	ptrType = $ptrType(Value);
	CompareAndSwapInt32 = function(addr, old, new$1) {
		var $ptr, addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;
	AddInt32 = function(addr, delta) {
		var $ptr, addr, delta, new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddInt32 = AddInt32;
	LoadUint32 = function(addr) {
		var $ptr, addr;
		return addr.$get();
	};
	$pkg.LoadUint32 = LoadUint32;
	StoreInt32 = function(addr, val) {
		var $ptr, addr, val;
		addr.$set(val);
	};
	$pkg.StoreInt32 = StoreInt32;
	StoreUint32 = function(addr, val) {
		var $ptr, addr, val;
		addr.$set(val);
	};
	$pkg.StoreUint32 = StoreUint32;
	Value.ptr.prototype.Load = function() {
		var $ptr, v, x;
		x = $ifaceNil;
		v = this;
		x = v.v;
		return x;
	};
	Value.prototype.Load = function() { return this.$val.Load(); };
	Value.ptr.prototype.Store = function(x) {
		var $ptr, v, x;
		v = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			$panic(new $String("sync/atomic: store of nil value into Value"));
		}
		if (!($interfaceIsEqual(v.v, $ifaceNil)) && !(x.constructor === v.v.constructor)) {
			$panic(new $String("sync/atomic: store of inconsistently typed value into Value"));
		}
		v.v = x;
	};
	Value.prototype.Store = function(x) { return this.$val.Store(x); };
	ptrType.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	Value.init([{prop: "v", name: "v", pkg: "sync/atomic", typ: $emptyInterface, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, $init, runtime, atomic, Pool, Mutex, Locker, Once, poolLocal, syncSema, RWMutex, rlocker, ptrType, sliceType, ptrType$1, chanType, sliceType$1, ptrType$4, ptrType$6, sliceType$3, ptrType$7, ptrType$8, funcType, ptrType$12, funcType$1, ptrType$13, arrayType$1, semWaiters, allPools, runtime_Syncsemcheck, runtime_registerPoolCleanup, runtime_Semacquire, runtime_Semrelease, runtime_canSpin, poolCleanup, init, indexLocal, raceEnable, init$1, runtime_doSpin;
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", "Pool", "sync", function(local_, localSize_, store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.local = 0;
			this.localSize = 0;
			this.store = sliceType$3.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.local = local_;
		this.localSize = localSize_;
		this.store = store_;
		this.New = New_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", "Mutex", "sync", function(state_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = 0;
			this.sema = 0;
			return;
		}
		this.state = state_;
		this.sema = sema_;
	});
	Locker = $pkg.Locker = $newType(8, $kindInterface, "sync.Locker", "Locker", "sync", null);
	Once = $pkg.Once = $newType(0, $kindStruct, "sync.Once", "Once", "sync", function(m_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = new Mutex.ptr(0, 0);
			this.done = 0;
			return;
		}
		this.m = m_;
		this.done = done_;
	});
	poolLocal = $pkg.poolLocal = $newType(0, $kindStruct, "sync.poolLocal", "poolLocal", "sync", function(private$0_, shared_, Mutex_, pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.private$0 = $ifaceNil;
			this.shared = sliceType$3.nil;
			this.Mutex = new Mutex.ptr(0, 0);
			this.pad = arrayType$1.zero();
			return;
		}
		this.private$0 = private$0_;
		this.shared = shared_;
		this.Mutex = Mutex_;
		this.pad = pad_;
	});
	syncSema = $pkg.syncSema = $newType(0, $kindStruct, "sync.syncSema", "syncSema", "sync", function(lock_, head_, tail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lock = 0;
			this.head = 0;
			this.tail = 0;
			return;
		}
		this.lock = lock_;
		this.head = head_;
		this.tail = tail_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "sync.RWMutex", "RWMutex", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	rlocker = $pkg.rlocker = $newType(0, $kindStruct, "sync.rlocker", "rlocker", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	ptrType = $ptrType(Pool);
	sliceType = $sliceType(ptrType);
	ptrType$1 = $ptrType($Uint32);
	chanType = $chanType($Bool, false, false);
	sliceType$1 = $sliceType(chanType);
	ptrType$4 = $ptrType($Int32);
	ptrType$6 = $ptrType(poolLocal);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$7 = $ptrType(rlocker);
	ptrType$8 = $ptrType(RWMutex);
	funcType = $funcType([], [$emptyInterface], false);
	ptrType$12 = $ptrType(Mutex);
	funcType$1 = $funcType([], [], false);
	ptrType$13 = $ptrType(Once);
	arrayType$1 = $arrayType($Uint8, 128);
	runtime_Syncsemcheck = function(size) {
		var $ptr, size;
	};
	Pool.ptr.prototype.Get = function() {
		var $ptr, _r, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 6; case 6:
				return _r;
			/* } */ case 4:
			return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		return x$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var $ptr, p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_registerPoolCleanup = function(cleanup) {
		var $ptr, cleanup;
	};
	runtime_Semacquire = function(s) {
		var $ptr, _entry, _key, _r, ch, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; ch = $f.ch; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (s.$get() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.$get() === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: $append((_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil), ch) };
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: runtime_Semacquire }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f.ch = ch; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s) {
		var $ptr, _entry, _key, ch, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; ch = $f.ch; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil);
		if (w.$length === 0) {
			return;
		}
		ch = (0 >= w.$length ? $throwRuntimeError("index out of range") : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[ptrType$1.keyFor(s)];
		}
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f.ch = ch; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_canSpin = function(i) {
		var $ptr, i;
		return false;
	};
	Mutex.ptr.prototype.Lock = function() {
		var $ptr, awoke, iter, m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; awoke = $f.awoke; iter = $f.iter; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {
			return;
		}
		awoke = false;
		iter = 0;
		/* while (true) { */ case 1:
			old = m.state;
			new$1 = old | 1;
			/* */ if (!(((old & 1) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(((old & 1) === 0))) { */ case 3:
				if (runtime_canSpin(iter)) {
					if (!awoke && ((old & 2) === 0) && !(((old >> 2 >> 0) === 0)) && atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, old | 2)) {
						awoke = true;
					}
					runtime_doSpin();
					iter = iter + (1) >> 0;
					/* continue; */ $s = 1; continue;
				}
				new$1 = old + 4 >> 0;
			/* } */ case 4:
			if (awoke) {
				if ((new$1 & 2) === 0) {
					$panic(new $String("sync: inconsistent mutex state"));
				}
				new$1 = (new$1 & ~(2)) >> 0;
			}
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 5:
				if ((old & 1) === 0) {
					/* break; */ $s = 2; continue;
				}
				$r = runtime_Semacquire((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				awoke = true;
				iter = 0;
			/* } */ case 6:
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.awoke = awoke; $f.iter = iter; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var $ptr, m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		new$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			$panic(new $String("sync: unlock of unlocked mutex"));
		}
		old = new$1;
		/* while (true) { */ case 1:
			if (((old >> 2 >> 0) === 0) || !(((old & 3) === 0))) {
				return;
			}
			new$1 = ((old - 4 >> 0)) | 2;
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 3:
				$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 4:
			old = m.state;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Once.ptr.prototype.Do = function(f) {
		var $ptr, f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = this;
		if (atomic.LoadUint32((o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o)))) === 1) {
			return;
		}
		$r = o.m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(o.m, "Unlock"), []]);
		/* */ if (o.done === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (o.done === 0) { */ case 2:
			$deferred.push([atomic.StoreUint32, [(o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o))), 1]]);
			$r = f(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	poolCleanup = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, i, i$1, j, l, p, x;
		_ref = allPools;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= allPools.$length) ? $throwRuntimeError("index out of range") : allPools.$array[allPools.$offset + i] = ptrType.nil);
			i$1 = 0;
			while (true) {
				if (!(i$1 < (p.localSize >> 0))) { break; }
				l = indexLocal(p.local, i$1);
				l.private$0 = $ifaceNil;
				_ref$1 = l.shared;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					j = _i$1;
					(x = l.shared, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j] = $ifaceNil));
					_i$1++;
				}
				l.shared = sliceType$3.nil;
				i$1 = i$1 + (1) >> 0;
			}
			p.local = 0;
			p.localSize = 0;
			_i++;
		}
		allPools = new sliceType([]);
	};
	init = function() {
		var $ptr;
		runtime_registerPoolCleanup(poolCleanup);
	};
	indexLocal = function(l, i) {
		var $ptr, i, l, x;
		return (x = l, (x.nilCheck, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i])));
	};
	raceEnable = function() {
		var $ptr;
	};
	init$1 = function() {
		var $ptr, s;
		s = new syncSema.ptr(0, 0, 0);
		runtime_Syncsemcheck(12);
	};
	runtime_doSpin = function() {
		$panic("Native function not implemented: sync.runtime_doSpin");
	};
	RWMutex.ptr.prototype.RLock = function() {
		var $ptr, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		/* */ if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { */ case 1:
			$r = runtime_Semacquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RLock }; } $f.$ptr = $ptr; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var $ptr, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1);
		/* */ if (r < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 0) { */ case 1:
			if (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) {
				raceEnable();
				$panic(new $String("sync: RUnlock of unlocked RWMutex"));
			}
			/* */ if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { */ case 3:
				$r = runtime_Semrelease((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RUnlock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	RWMutex.ptr.prototype.Lock = function() {
		var $ptr, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		$r = rw.w.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1073741824) + 1073741824 >> 0;
		/* */ if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { */ case 2:
			$r = runtime_Semacquire((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var $ptr, i, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; i = $f.i; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1073741824);
		if (r >= 1073741824) {
			raceEnable();
			$panic(new $String("sync: Unlock of unlocked RWMutex"));
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < (r >> 0))) { break; } */ if(!(i < (r >> 0))) { $s = 2; continue; }
			$r = runtime_Semrelease((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = rw.w.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.i = i; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLocker = function() {
		var $ptr, rw;
		rw = this;
		return $pointerOfStructConversion(rw, ptrType$7);
	};
	RWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };
	rlocker.ptr.prototype.Lock = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = $pointerOfStructConversion(r, ptrType$8).RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Lock = function() { return this.$val.Lock(); };
	rlocker.ptr.prototype.Unlock = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = $pointerOfStructConversion(r, ptrType$8).RUnlock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Unlock = function() { return this.$val.Unlock(); };
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "getSlow", name: "getSlow", pkg: "sync", typ: $funcType([], [$emptyInterface], false)}, {prop: "pin", name: "pin", pkg: "sync", typ: $funcType([], [ptrType$6], false)}, {prop: "pinSlow", name: "pinSlow", pkg: "sync", typ: $funcType([], [ptrType$6], false)}];
	ptrType$12.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$13.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
	ptrType$8.methods = [{prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}, {prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLocker", name: "RLocker", pkg: "", typ: $funcType([], [Locker], false)}];
	ptrType$7.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	Pool.init([{prop: "local", name: "local", pkg: "sync", typ: $UnsafePointer, tag: ""}, {prop: "localSize", name: "localSize", pkg: "sync", typ: $Uintptr, tag: ""}, {prop: "store", name: "store", pkg: "sync", typ: sliceType$3, tag: ""}, {prop: "New", name: "New", pkg: "", typ: funcType, tag: ""}]);
	Mutex.init([{prop: "state", name: "state", pkg: "sync", typ: $Int32, tag: ""}, {prop: "sema", name: "sema", pkg: "sync", typ: $Uint32, tag: ""}]);
	Locker.init([{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}]);
	Once.init([{prop: "m", name: "m", pkg: "sync", typ: Mutex, tag: ""}, {prop: "done", name: "done", pkg: "sync", typ: $Uint32, tag: ""}]);
	poolLocal.init([{prop: "private$0", name: "private", pkg: "sync", typ: $emptyInterface, tag: ""}, {prop: "shared", name: "shared", pkg: "sync", typ: sliceType$3, tag: ""}, {prop: "Mutex", name: "", pkg: "", typ: Mutex, tag: ""}, {prop: "pad", name: "pad", pkg: "sync", typ: arrayType$1, tag: ""}]);
	syncSema.init([{prop: "lock", name: "lock", pkg: "sync", typ: $Uintptr, tag: ""}, {prop: "head", name: "head", pkg: "sync", typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", pkg: "sync", typ: $UnsafePointer, tag: ""}]);
	RWMutex.init([{prop: "w", name: "w", pkg: "sync", typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", pkg: "sync", typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", pkg: "sync", typ: $Int32, tag: ""}]);
	rlocker.init([{prop: "w", name: "w", pkg: "sync", typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", pkg: "sync", typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", pkg: "sync", typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = runtime.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		allPools = sliceType.nil;
		semWaiters = {};
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, $init, errors, sync, Reader, Writer, ReaderFrom, WriterTo, RuneReader, sliceType, errWhence, errOffset, Copy, copyBuffer;
	errors = $packages["errors"];
	sync = $packages["sync"];
	Reader = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", "Reader", "io", null);
	Writer = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", "Writer", "io", null);
	ReaderFrom = $pkg.ReaderFrom = $newType(8, $kindInterface, "io.ReaderFrom", "ReaderFrom", "io", null);
	WriterTo = $pkg.WriterTo = $newType(8, $kindInterface, "io.WriterTo", "WriterTo", "io", null);
	RuneReader = $pkg.RuneReader = $newType(8, $kindInterface, "io.RuneReader", "RuneReader", "io", null);
	sliceType = $sliceType($Uint8);
	Copy = function(dst, src) {
		var $ptr, _r, _tuple, dst, err, src, written, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; dst = $f.dst; err = $f.err; src = $f.src; written = $f.written; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		err = $ifaceNil;
		_r = copyBuffer(dst, src, sliceType.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		written = _tuple[0];
		err = _tuple[1];
		/* */ $s = 2; case 2:
		return [written, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Copy }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.dst = dst; $f.err = err; $f.src = src; $f.written = written; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Copy = Copy;
	copyBuffer = function(dst, src, buf) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, buf, dst, er, err, ew, nr, nw, ok, ok$1, rt, src, written, wt, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; buf = $f.buf; dst = $f.dst; er = $f.er; err = $f.err; ew = $f.ew; nr = $f.nr; nw = $f.nw; ok = $f.ok; ok$1 = $f.ok$1; rt = $f.rt; src = $f.src; written = $f.written; wt = $f.wt; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = $assertType(src, WriterTo, true);
		wt = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = wt.WriteTo(dst); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			written = _tuple$1[0];
			err = _tuple$1[1];
			/* */ $s = 4; case 4:
			return [written, err];
		/* } */ case 2:
		_tuple$2 = $assertType(dst, ReaderFrom, true);
		rt = _tuple$2[0];
		ok$1 = _tuple$2[1];
		/* */ if (ok$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (ok$1) { */ case 5:
			_r$1 = rt.ReadFrom(src); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$3 = _r$1;
			written = _tuple$3[0];
			err = _tuple$3[1];
			/* */ $s = 8; case 8:
			return [written, err];
		/* } */ case 6:
		if (buf === sliceType.nil) {
			buf = $makeSlice(sliceType, 32768);
		}
		/* while (true) { */ case 9:
			_r$2 = src.Read(buf); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$4 = _r$2;
			nr = _tuple$4[0];
			er = _tuple$4[1];
			/* */ if (nr > 0) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (nr > 0) { */ case 12:
				_r$3 = dst.Write($subslice(buf, 0, nr)); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$5 = _r$3;
				nw = _tuple$5[0];
				ew = _tuple$5[1];
				if (nw > 0) {
					written = (x = new $Int64(0, nw), new $Int64(written.$high + x.$high, written.$low + x.$low));
				}
				if (!($interfaceIsEqual(ew, $ifaceNil))) {
					err = ew;
					/* break; */ $s = 10; continue;
				}
				if (!((nr === nw))) {
					err = $pkg.ErrShortWrite;
					/* break; */ $s = 10; continue;
				}
			/* } */ case 13:
			if ($interfaceIsEqual(er, $pkg.EOF)) {
				/* break; */ $s = 10; continue;
			}
			if (!($interfaceIsEqual(er, $ifaceNil))) {
				err = er;
				/* break; */ $s = 10; continue;
			}
		/* } */ $s = 9; continue; case 10:
		_tmp = written;
		_tmp$1 = err;
		written = _tmp;
		err = _tmp$1;
		return [written, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: copyBuffer }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.buf = buf; $f.dst = dst; $f.er = er; $f.err = err; $f.ew = ew; $f.nr = nr; $f.nw = nw; $f.ok = ok; $f.ok$1 = ok$1; $f.rt = rt; $f.src = src; $f.written = written; $f.wt = wt; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Writer.init([{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	ReaderFrom.init([{prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([Reader], [$Int64, $error], false)}]);
	WriterTo.init([{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([Writer], [$Int64, $error], false)}]);
	RuneReader.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrShortWrite = errors.New("short write");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, $init, js, arrayType, arrayType$1, arrayType$2, structType, arrayType$3, math, zero, posInf, negInf, nan, buf, pow10tab, Abs, Acos, Asin, Atan, Atan2, Ceil, Copysign, Cos, Exp, Floor, Inf, IsInf, IsNaN, Log, Log10, Max, Min, Mod, Modf, NaN, Pow, Signbit, Sin, Sqrt, Tan, init, Float32bits, Float32frombits, Float64bits, Float64frombits, abs, max, min, log10, init$1;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	arrayType = $arrayType($Uint32, 2);
	arrayType$1 = $arrayType($Float32, 2);
	arrayType$2 = $arrayType($Float64, 1);
	structType = $structType([{prop: "uint32array", name: "uint32array", pkg: "math", typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", pkg: "math", typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", pkg: "math", typ: arrayType$2, tag: ""}]);
	arrayType$3 = $arrayType($Float64, 70);
	Abs = function(x) {
		var $ptr, x;
		return abs(x);
	};
	$pkg.Abs = Abs;
	Acos = function(x) {
		var $ptr, x;
		return $parseFloat(math.acos(x));
	};
	$pkg.Acos = Acos;
	Asin = function(x) {
		var $ptr, x;
		return $parseFloat(math.asin(x));
	};
	$pkg.Asin = Asin;
	Atan = function(x) {
		var $ptr, x;
		return $parseFloat(math.atan(x));
	};
	$pkg.Atan = Atan;
	Atan2 = function(y, x) {
		var $ptr, x, y;
		return $parseFloat(math.atan2(y, x));
	};
	$pkg.Atan2 = Atan2;
	Ceil = function(x) {
		var $ptr, x;
		return $parseFloat(math.ceil(x));
	};
	$pkg.Ceil = Ceil;
	Copysign = function(x, y) {
		var $ptr, x, y;
		if (!((x < 0 || (1 / x === negInf)) === (y < 0 || (1 / y === negInf)))) {
			return -x;
		}
		return x;
	};
	$pkg.Copysign = Copysign;
	Cos = function(x) {
		var $ptr, x;
		return $parseFloat(math.cos(x));
	};
	$pkg.Cos = Cos;
	Exp = function(x) {
		var $ptr, x;
		return $parseFloat(math.exp(x));
	};
	$pkg.Exp = Exp;
	Floor = function(x) {
		var $ptr, x;
		return $parseFloat(math.floor(x));
	};
	$pkg.Floor = Floor;
	Inf = function(sign) {
		var $ptr, sign;
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	$pkg.Inf = Inf;
	IsInf = function(f, sign) {
		var $ptr, f, sign;
		if (f === posInf) {
			return sign >= 0;
		}
		if (f === negInf) {
			return sign <= 0;
		}
		return false;
	};
	$pkg.IsInf = IsInf;
	IsNaN = function(f) {
		var $ptr, f, is;
		is = false;
		is = !((f === f));
		return is;
	};
	$pkg.IsNaN = IsNaN;
	Log = function(x) {
		var $ptr, x;
		if (!((x === x))) {
			return nan;
		}
		return $parseFloat(math.log(x));
	};
	$pkg.Log = Log;
	Log10 = function(x) {
		var $ptr, x;
		return log10(x);
	};
	$pkg.Log10 = Log10;
	Max = function(x, y) {
		var $ptr, x, y;
		return max(x, y);
	};
	$pkg.Max = Max;
	Min = function(x, y) {
		var $ptr, x, y;
		return min(x, y);
	};
	$pkg.Min = Min;
	Mod = function(x, y) {
		var $ptr, x, y;
		return $parseFloat($mod(x, y));
	};
	$pkg.Mod = Mod;
	Modf = function(f) {
		var $ptr, f, frac;
		if ((f === posInf) || (f === negInf)) {
			return [f, nan];
		}
		frac = Mod(f, 1);
		return [f - frac, frac];
	};
	$pkg.Modf = Modf;
	NaN = function() {
		var $ptr;
		return nan;
	};
	$pkg.NaN = NaN;
	Pow = function(x, y) {
		var $ptr, x, y;
		if ((x === 1) || ((x === -1) && ((y === posInf) || (y === negInf)))) {
			return 1;
		}
		return $parseFloat(math.pow(x, y));
	};
	$pkg.Pow = Pow;
	Signbit = function(x) {
		var $ptr, x;
		return x < 0 || (1 / x === negInf);
	};
	$pkg.Signbit = Signbit;
	Sin = function(x) {
		var $ptr, x;
		return $parseFloat(math.sin(x));
	};
	$pkg.Sin = Sin;
	Sqrt = function(x) {
		var $ptr, x;
		return $parseFloat(math.sqrt(x));
	};
	$pkg.Sqrt = Sqrt;
	Tan = function(x) {
		var $ptr, x;
		return $parseFloat(math.tan(x));
	};
	$pkg.Tan = Tan;
	init = function() {
		var $ptr, ab;
		ab = new ($global.ArrayBuffer)(8);
		buf.uint32array = new ($global.Uint32Array)(ab);
		buf.float32array = new ($global.Float32Array)(ab);
		buf.float64array = new ($global.Float64Array)(ab);
	};
	Float32bits = function(f) {
		var $ptr, f;
		buf.float32array[0] = f;
		return buf.uint32array[0];
	};
	$pkg.Float32bits = Float32bits;
	Float32frombits = function(b) {
		var $ptr, b;
		buf.uint32array[0] = b;
		return buf.float32array[0];
	};
	$pkg.Float32frombits = Float32frombits;
	Float64bits = function(f) {
		var $ptr, f, x, x$1;
		buf.float64array[0] = f;
		return (x = $shiftLeft64(new $Uint64(0, buf.uint32array[1]), 32), x$1 = new $Uint64(0, buf.uint32array[0]), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	$pkg.Float64bits = Float64bits;
	Float64frombits = function(b) {
		var $ptr, b;
		buf.uint32array[0] = (b.$low >>> 0);
		buf.uint32array[1] = ($shiftRightUint64(b, 32).$low >>> 0);
		return buf.float64array[0];
	};
	$pkg.Float64frombits = Float64frombits;
	abs = function(x) {
		var $ptr, x;
		if (x < 0) {
			return -x;
		} else if (x === 0) {
			return 0;
		}
		return x;
	};
	max = function(x, y) {
		var $ptr, x, y;
		if (IsInf(x, 1) || IsInf(y, 1)) {
			return Inf(1);
		} else if (IsNaN(x) || IsNaN(y)) {
			return NaN();
		} else if ((x === 0) && (x === y)) {
			if (Signbit(x)) {
				return y;
			}
			return x;
		}
		if (x > y) {
			return x;
		}
		return y;
	};
	min = function(x, y) {
		var $ptr, x, y;
		if (IsInf(x, -1) || IsInf(y, -1)) {
			return Inf(-1);
		} else if (IsNaN(x) || IsNaN(y)) {
			return NaN();
		} else if ((x === 0) && (x === y)) {
			if (Signbit(x)) {
				return x;
			}
			return y;
		}
		if (x < y) {
			return x;
		}
		return y;
	};
	log10 = function(x) {
		var $ptr, x;
		return Log(x) * 0.4342944819032518;
	};
	init$1 = function() {
		var $ptr, _q, i, m, x;
		pow10tab[0] = 1;
		pow10tab[1] = 10;
		i = 2;
		while (true) {
			if (!(i < 70)) { break; }
			m = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[i] = ((m < 0 || m >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[m]) * (x = i - m >> 0, ((x < 0 || x >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[x])));
			i = i + (1) >> 0;
		}
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buf = new structType.ptr(arrayType.zero(), arrayType$1.zero(), arrayType$2.zero());
		pow10tab = arrayType$3.zero();
		math = $global.Math;
		zero = 0;
		posInf = 1 / zero;
		negInf = -1 / zero;
		nan = 0 / zero;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, $init, RangeTable, Range16, Range32, CaseRange, d, foldPair, arrayType, sliceType, sliceType$1, ptrType, sliceType$2, sliceType$3, sliceType$4, _C, _Cc, _Cf, _Co, _Cs, _L, _Ll, _Lm, _Lo, _Lt, _Lu, _M, _Mc, _Me, _Mn, _N, _Nd, _Nl, _No, _P, _Pc, _Pd, _Pe, _Pf, _Pi, _Po, _Ps, _S, _Sc, _Sk, _Sm, _So, _Z, _Zl, _Zp, _Zs, _Ahom, _Anatolian_Hieroglyphs, _Arabic, _Armenian, _Avestan, _Balinese, _Bamum, _Bassa_Vah, _Batak, _Bengali, _Bopomofo, _Brahmi, _Braille, _Buginese, _Buhid, _Canadian_Aboriginal, _Carian, _Caucasian_Albanian, _Chakma, _Cham, _Cherokee, _Common, _Coptic, _Cuneiform, _Cypriot, _Cyrillic, _Deseret, _Devanagari, _Duployan, _Egyptian_Hieroglyphs, _Elbasan, _Ethiopic, _Georgian, _Glagolitic, _Gothic, _Grantha, _Greek, _Gujarati, _Gurmukhi, _Han, _Hangul, _Hanunoo, _Hatran, _Hebrew, _Hiragana, _Imperial_Aramaic, _Inherited, _Inscriptional_Pahlavi, _Inscriptional_Parthian, _Javanese, _Kaithi, _Kannada, _Katakana, _Kayah_Li, _Kharoshthi, _Khmer, _Khojki, _Khudawadi, _Lao, _Latin, _Lepcha, _Limbu, _Linear_A, _Linear_B, _Lisu, _Lycian, _Lydian, _Mahajani, _Malayalam, _Mandaic, _Manichaean, _Meetei_Mayek, _Mende_Kikakui, _Meroitic_Cursive, _Meroitic_Hieroglyphs, _Miao, _Modi, _Mongolian, _Mro, _Multani, _Myanmar, _Nabataean, _New_Tai_Lue, _Nko, _Ogham, _Ol_Chiki, _Old_Hungarian, _Old_Italic, _Old_North_Arabian, _Old_Permic, _Old_Persian, _Old_South_Arabian, _Old_Turkic, _Oriya, _Osmanya, _Pahawh_Hmong, _Palmyrene, _Pau_Cin_Hau, _Phags_Pa, _Phoenician, _Psalter_Pahlavi, _Rejang, _Runic, _Samaritan, _Saurashtra, _Sharada, _Shavian, _Siddham, _SignWriting, _Sinhala, _Sora_Sompeng, _Sundanese, _Syloti_Nagri, _Syriac, _Tagalog, _Tagbanwa, _Tai_Le, _Tai_Tham, _Tai_Viet, _Takri, _Tamil, _Telugu, _Thaana, _Thai, _Tibetan, _Tifinagh, _Tirhuta, _Ugaritic, _Vai, _Warang_Citi, _Yi, _White_Space, _CaseRanges, properties, caseOrbit, foldCommon, foldGreek, foldInherited, foldL, foldLl, foldLt, foldLu, foldM, foldMn, to, IsDigit, IsPrint, In, IsLetter, IsSpace, is16, is32, Is, isExcludingLatin, IsUpper, To, ToUpper, ToLower, SimpleFold;
	RangeTable = $pkg.RangeTable = $newType(0, $kindStruct, "unicode.RangeTable", "RangeTable", "unicode", function(R16_, R32_, LatinOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R16 = sliceType.nil;
			this.R32 = sliceType$1.nil;
			this.LatinOffset = 0;
			return;
		}
		this.R16 = R16_;
		this.R32 = R32_;
		this.LatinOffset = LatinOffset_;
	});
	Range16 = $pkg.Range16 = $newType(0, $kindStruct, "unicode.Range16", "Range16", "unicode", function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	Range32 = $pkg.Range32 = $newType(0, $kindStruct, "unicode.Range32", "Range32", "unicode", function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	CaseRange = $pkg.CaseRange = $newType(0, $kindStruct, "unicode.CaseRange", "CaseRange", "unicode", function(Lo_, Hi_, Delta_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Delta = arrayType.zero();
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Delta = Delta_;
	});
	d = $pkg.d = $newType(12, $kindArray, "unicode.d", "d", "unicode", null);
	foldPair = $pkg.foldPair = $newType(0, $kindStruct, "unicode.foldPair", "foldPair", "unicode", function(From_, To_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.From = 0;
			this.To = 0;
			return;
		}
		this.From = From_;
		this.To = To_;
	});
	arrayType = $arrayType($Int32, 3);
	sliceType = $sliceType(Range16);
	sliceType$1 = $sliceType(Range32);
	ptrType = $ptrType(RangeTable);
	sliceType$2 = $sliceType(ptrType);
	sliceType$3 = $sliceType(CaseRange);
	sliceType$4 = $sliceType(foldPair);
	to = function(_case, r, caseRange) {
		var $ptr, _case, _q, caseRange, cr, delta, hi, lo, m, r, x;
		if (_case < 0 || 3 <= _case) {
			return 65533;
		}
		lo = 0;
		hi = caseRange.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cr = ((m < 0 || m >= caseRange.$length) ? $throwRuntimeError("index out of range") : caseRange.$array[caseRange.$offset + m]);
			if ((cr.Lo >> 0) <= r && r <= (cr.Hi >> 0)) {
				delta = (x = cr.Delta, ((_case < 0 || _case >= x.length) ? $throwRuntimeError("index out of range") : x[_case]));
				if (delta > 1114111) {
					return (cr.Lo >> 0) + ((((((r - (cr.Lo >> 0) >> 0)) & ~1) >> 0) | ((_case & 1) >> 0))) >> 0;
				}
				return r + delta >> 0;
			}
			if (r < (cr.Lo >> 0)) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return r;
	};
	IsDigit = function(r) {
		var $ptr, r;
		if (r <= 255) {
			return 48 <= r && r <= 57;
		}
		return isExcludingLatin($pkg.Digit, r);
	};
	$pkg.IsDigit = IsDigit;
	IsPrint = function(r) {
		var $ptr, r, x;
		if ((r >>> 0) <= 255) {
			return !(((((x = (r << 24 >>> 24), ((x < 0 || x >= properties.length) ? $throwRuntimeError("index out of range") : properties[x])) & 128) >>> 0) === 0));
		}
		return In(r, $pkg.PrintRanges);
	};
	$pkg.IsPrint = IsPrint;
	In = function(r, ranges) {
		var $ptr, _i, _ref, inside, r, ranges;
		_ref = ranges;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			inside = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (Is(inside, r)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	$pkg.In = In;
	IsLetter = function(r) {
		var $ptr, r, x;
		if ((r >>> 0) <= 255) {
			return !(((((x = (r << 24 >>> 24), ((x < 0 || x >= properties.length) ? $throwRuntimeError("index out of range") : properties[x])) & 96) >>> 0) === 0));
		}
		return isExcludingLatin($pkg.Letter, r);
	};
	$pkg.IsLetter = IsLetter;
	IsSpace = function(r) {
		var $ptr, _ref, r;
		if ((r >>> 0) <= 255) {
			_ref = r;
			if (_ref === 9 || _ref === 10 || _ref === 11 || _ref === 12 || _ref === 13 || _ref === 32 || _ref === 133 || _ref === 160) {
				return true;
			}
			return false;
		}
		return isExcludingLatin($pkg.White_Space, r);
	};
	$pkg.IsSpace = IsSpace;
	is16 = function(ranges, r) {
		var $ptr, _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = ((m < 0 || m >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + m]);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var $ptr, _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = $clone(((m < 0 || m >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + m]), Range32);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	Is = function(rangeTab, r) {
		var $ptr, r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		if (r16.$length > 0 && r <= ((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? $throwRuntimeError("index out of range") : r16.$array[r16.$offset + x])).Hi >> 0)) {
			return is16(r16, (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= ((0 >= r32.$length ? $throwRuntimeError("index out of range") : r32.$array[r32.$offset + 0]).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	$pkg.Is = Is;
	isExcludingLatin = function(rangeTab, r) {
		var $ptr, off, r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		off = rangeTab.LatinOffset;
		if (r16.$length > off && r <= ((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? $throwRuntimeError("index out of range") : r16.$array[r16.$offset + x])).Hi >> 0)) {
			return is16($subslice(r16, off), (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= ((0 >= r32.$length ? $throwRuntimeError("index out of range") : r32.$array[r32.$offset + 0]).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	IsUpper = function(r) {
		var $ptr, r, x;
		if ((r >>> 0) <= 255) {
			return (((x = (r << 24 >>> 24), ((x < 0 || x >= properties.length) ? $throwRuntimeError("index out of range") : properties[x])) & 96) >>> 0) === 32;
		}
		return isExcludingLatin($pkg.Upper, r);
	};
	$pkg.IsUpper = IsUpper;
	To = function(_case, r) {
		var $ptr, _case, r;
		return to(_case, r, $pkg.CaseRanges);
	};
	$pkg.To = To;
	ToUpper = function(r) {
		var $ptr, r;
		if (r <= 127) {
			if (97 <= r && r <= 122) {
				r = r - (32) >> 0;
			}
			return r;
		}
		return To(0, r);
	};
	$pkg.ToUpper = ToUpper;
	ToLower = function(r) {
		var $ptr, r;
		if (r <= 127) {
			if (65 <= r && r <= 90) {
				r = r + (32) >> 0;
			}
			return r;
		}
		return To(1, r);
	};
	$pkg.ToLower = ToLower;
	SimpleFold = function(r) {
		var $ptr, _q, hi, l, lo, m, r;
		lo = 0;
		hi = caseOrbit.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if ((((m < 0 || m >= caseOrbit.$length) ? $throwRuntimeError("index out of range") : caseOrbit.$array[caseOrbit.$offset + m]).From >> 0) < r) {
				lo = m + 1 >> 0;
			} else {
				hi = m;
			}
		}
		if (lo < caseOrbit.$length && ((((lo < 0 || lo >= caseOrbit.$length) ? $throwRuntimeError("index out of range") : caseOrbit.$array[caseOrbit.$offset + lo]).From >> 0) === r)) {
			return (((lo < 0 || lo >= caseOrbit.$length) ? $throwRuntimeError("index out of range") : caseOrbit.$array[caseOrbit.$offset + lo]).To >> 0);
		}
		l = ToLower(r);
		if (!((l === r))) {
			return l;
		}
		return ToUpper(r);
	};
	$pkg.SimpleFold = SimpleFold;
	RangeTable.init([{prop: "R16", name: "R16", pkg: "", typ: sliceType, tag: ""}, {prop: "R32", name: "R32", pkg: "", typ: sliceType$1, tag: ""}, {prop: "LatinOffset", name: "LatinOffset", pkg: "", typ: $Int, tag: ""}]);
	Range16.init([{prop: "Lo", name: "Lo", pkg: "", typ: $Uint16, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", typ: $Uint16, tag: ""}, {prop: "Stride", name: "Stride", pkg: "", typ: $Uint16, tag: ""}]);
	Range32.init([{prop: "Lo", name: "Lo", pkg: "", typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", typ: $Uint32, tag: ""}, {prop: "Stride", name: "Stride", pkg: "", typ: $Uint32, tag: ""}]);
	CaseRange.init([{prop: "Lo", name: "Lo", pkg: "", typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", typ: $Uint32, tag: ""}, {prop: "Delta", name: "Delta", pkg: "", typ: d, tag: ""}]);
	d.init($Int32, 3);
	foldPair.init([{prop: "From", name: "From", pkg: "", typ: $Uint16, tag: ""}, {prop: "To", name: "To", pkg: "", typ: $Uint16, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_C = new RangeTable.ptr(new sliceType([new Range16.ptr(1, 31, 1), new Range16.ptr(127, 159, 1), new Range16.ptr(173, 1536, 1363), new Range16.ptr(1537, 1541, 1), new Range16.ptr(1564, 1757, 193), new Range16.ptr(1807, 6158, 4351), new Range16.ptr(8203, 8207, 1), new Range16.ptr(8234, 8238, 1), new Range16.ptr(8288, 8292, 1), new Range16.ptr(8294, 8303, 1), new Range16.ptr(55296, 63743, 1), new Range16.ptr(65279, 65529, 250), new Range16.ptr(65530, 65531, 1)]), new sliceType$1([new Range32.ptr(69821, 113824, 44003), new Range32.ptr(113825, 113827, 1), new Range32.ptr(119155, 119162, 1), new Range32.ptr(917505, 917536, 31), new Range32.ptr(917537, 917631, 1), new Range32.ptr(983040, 1048573, 1), new Range32.ptr(1048576, 1114109, 1)]), 2);
		_Cc = new RangeTable.ptr(new sliceType([new Range16.ptr(1, 31, 1), new Range16.ptr(127, 159, 1)]), sliceType$1.nil, 2);
		_Cf = new RangeTable.ptr(new sliceType([new Range16.ptr(173, 1536, 1363), new Range16.ptr(1537, 1541, 1), new Range16.ptr(1564, 1757, 193), new Range16.ptr(1807, 6158, 4351), new Range16.ptr(8203, 8207, 1), new Range16.ptr(8234, 8238, 1), new Range16.ptr(8288, 8292, 1), new Range16.ptr(8294, 8303, 1), new Range16.ptr(65279, 65529, 250), new Range16.ptr(65530, 65531, 1)]), new sliceType$1([new Range32.ptr(69821, 113824, 44003), new Range32.ptr(113825, 113827, 1), new Range32.ptr(119155, 119162, 1), new Range32.ptr(917505, 917536, 31), new Range32.ptr(917537, 917631, 1)]), 0);
		_Co = new RangeTable.ptr(new sliceType([new Range16.ptr(57344, 63743, 1)]), new sliceType$1([new Range32.ptr(983040, 1048573, 1), new Range32.ptr(1048576, 1114109, 1)]), 0);
		_Cs = new RangeTable.ptr(new sliceType([new Range16.ptr(55296, 57343, 1)]), sliceType$1.nil, 0);
		_L = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(97, 122, 1), new Range16.ptr(170, 181, 11), new Range16.ptr(186, 192, 6), new Range16.ptr(193, 214, 1), new Range16.ptr(216, 246, 1), new Range16.ptr(248, 705, 1), new Range16.ptr(710, 721, 1), new Range16.ptr(736, 740, 1), new Range16.ptr(748, 750, 2), new Range16.ptr(880, 884, 1), new Range16.ptr(886, 887, 1), new Range16.ptr(890, 893, 1), new Range16.ptr(895, 902, 7), new Range16.ptr(904, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 929, 1), new Range16.ptr(931, 1013, 1), new Range16.ptr(1015, 1153, 1), new Range16.ptr(1162, 1327, 1), new Range16.ptr(1329, 1366, 1), new Range16.ptr(1369, 1377, 8), new Range16.ptr(1378, 1415, 1), new Range16.ptr(1488, 1514, 1), new Range16.ptr(1520, 1522, 1), new Range16.ptr(1568, 1610, 1), new Range16.ptr(1646, 1647, 1), new Range16.ptr(1649, 1747, 1), new Range16.ptr(1749, 1765, 16), new Range16.ptr(1766, 1774, 8), new Range16.ptr(1775, 1786, 11), new Range16.ptr(1787, 1788, 1), new Range16.ptr(1791, 1808, 17), new Range16.ptr(1810, 1839, 1), new Range16.ptr(1869, 1957, 1), new Range16.ptr(1969, 1994, 25), new Range16.ptr(1995, 2026, 1), new Range16.ptr(2036, 2037, 1), new Range16.ptr(2042, 2048, 6), new Range16.ptr(2049, 2069, 1), new Range16.ptr(2074, 2084, 10), new Range16.ptr(2088, 2112, 24), new Range16.ptr(2113, 2136, 1), new Range16.ptr(2208, 2228, 1), new Range16.ptr(2308, 2361, 1), new Range16.ptr(2365, 2384, 19), new Range16.ptr(2392, 2401, 1), new Range16.ptr(2417, 2432, 1), new Range16.ptr(2437, 2444, 1), new Range16.ptr(2447, 2448, 1), new Range16.ptr(2451, 2472, 1), new Range16.ptr(2474, 2480, 1), new Range16.ptr(2482, 2486, 4), new Range16.ptr(2487, 2489, 1), new Range16.ptr(2493, 2510, 17), new Range16.ptr(2524, 2525, 1), new Range16.ptr(2527, 2529, 1), new Range16.ptr(2544, 2545, 1), new Range16.ptr(2565, 2570, 1), new Range16.ptr(2575, 2576, 1), new Range16.ptr(2579, 2600, 1), new Range16.ptr(2602, 2608, 1), new Range16.ptr(2610, 2611, 1), new Range16.ptr(2613, 2614, 1), new Range16.ptr(2616, 2617, 1), new Range16.ptr(2649, 2652, 1), new Range16.ptr(2654, 2674, 20), new Range16.ptr(2675, 2676, 1), new Range16.ptr(2693, 2701, 1), new Range16.ptr(2703, 2705, 1), new Range16.ptr(2707, 2728, 1), new Range16.ptr(2730, 2736, 1), new Range16.ptr(2738, 2739, 1), new Range16.ptr(2741, 2745, 1), new Range16.ptr(2749, 2768, 19), new Range16.ptr(2784, 2785, 1), new Range16.ptr(2809, 2821, 12), new Range16.ptr(2822, 2828, 1), new Range16.ptr(2831, 2832, 1), new Range16.ptr(2835, 2856, 1), new Range16.ptr(2858, 2864, 1), new Range16.ptr(2866, 2867, 1), new Range16.ptr(2869, 2873, 1), new Range16.ptr(2877, 2908, 31), new Range16.ptr(2909, 2911, 2), new Range16.ptr(2912, 2913, 1), new Range16.ptr(2929, 2947, 18), new Range16.ptr(2949, 2954, 1), new Range16.ptr(2958, 2960, 1), new Range16.ptr(2962, 2965, 1), new Range16.ptr(2969, 2970, 1), new Range16.ptr(2972, 2974, 2), new Range16.ptr(2975, 2979, 4), new Range16.ptr(2980, 2984, 4), new Range16.ptr(2985, 2986, 1), new Range16.ptr(2990, 3001, 1), new Range16.ptr(3024, 3077, 53), new Range16.ptr(3078, 3084, 1), new Range16.ptr(3086, 3088, 1), new Range16.ptr(3090, 3112, 1), new Range16.ptr(3114, 3129, 1), new Range16.ptr(3133, 3160, 27), new Range16.ptr(3161, 3162, 1), new Range16.ptr(3168, 3169, 1), new Range16.ptr(3205, 3212, 1), new Range16.ptr(3214, 3216, 1), new Range16.ptr(3218, 3240, 1), new Range16.ptr(3242, 3251, 1), new Range16.ptr(3253, 3257, 1), new Range16.ptr(3261, 3294, 33), new Range16.ptr(3296, 3297, 1), new Range16.ptr(3313, 3314, 1), new Range16.ptr(3333, 3340, 1), new Range16.ptr(3342, 3344, 1), new Range16.ptr(3346, 3386, 1), new Range16.ptr(3389, 3423, 17), new Range16.ptr(3424, 3425, 1), new Range16.ptr(3450, 3455, 1), new Range16.ptr(3461, 3478, 1), new Range16.ptr(3482, 3505, 1), new Range16.ptr(3507, 3515, 1), new Range16.ptr(3517, 3520, 3), new Range16.ptr(3521, 3526, 1), new Range16.ptr(3585, 3632, 1), new Range16.ptr(3634, 3635, 1), new Range16.ptr(3648, 3654, 1), new Range16.ptr(3713, 3714, 1), new Range16.ptr(3716, 3719, 3), new Range16.ptr(3720, 3722, 2), new Range16.ptr(3725, 3732, 7), new Range16.ptr(3733, 3735, 1), new Range16.ptr(3737, 3743, 1), new Range16.ptr(3745, 3747, 1), new Range16.ptr(3749, 3751, 2), new Range16.ptr(3754, 3755, 1), new Range16.ptr(3757, 3760, 1), new Range16.ptr(3762, 3763, 1), new Range16.ptr(3773, 3776, 3), new Range16.ptr(3777, 3780, 1), new Range16.ptr(3782, 3804, 22), new Range16.ptr(3805, 3807, 1), new Range16.ptr(3840, 3904, 64), new Range16.ptr(3905, 3911, 1), new Range16.ptr(3913, 3948, 1), new Range16.ptr(3976, 3980, 1), new Range16.ptr(4096, 4138, 1), new Range16.ptr(4159, 4176, 17), new Range16.ptr(4177, 4181, 1), new Range16.ptr(4186, 4189, 1), new Range16.ptr(4193, 4197, 4), new Range16.ptr(4198, 4206, 8), new Range16.ptr(4207, 4208, 1), new Range16.ptr(4213, 4225, 1), new Range16.ptr(4238, 4256, 18), new Range16.ptr(4257, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(4304, 4346, 1), new Range16.ptr(4348, 4680, 1), new Range16.ptr(4682, 4685, 1), new Range16.ptr(4688, 4694, 1), new Range16.ptr(4696, 4698, 2), new Range16.ptr(4699, 4701, 1), new Range16.ptr(4704, 4744, 1), new Range16.ptr(4746, 4749, 1), new Range16.ptr(4752, 4784, 1), new Range16.ptr(4786, 4789, 1), new Range16.ptr(4792, 4798, 1), new Range16.ptr(4800, 4802, 2), new Range16.ptr(4803, 4805, 1), new Range16.ptr(4808, 4822, 1), new Range16.ptr(4824, 4880, 1), new Range16.ptr(4882, 4885, 1), new Range16.ptr(4888, 4954, 1), new Range16.ptr(4992, 5007, 1), new Range16.ptr(5024, 5109, 1), new Range16.ptr(5112, 5117, 1), new Range16.ptr(5121, 5740, 1), new Range16.ptr(5743, 5759, 1), new Range16.ptr(5761, 5786, 1), new Range16.ptr(5792, 5866, 1), new Range16.ptr(5873, 5880, 1), new Range16.ptr(5888, 5900, 1), new Range16.ptr(5902, 5905, 1), new Range16.ptr(5920, 5937, 1), new Range16.ptr(5952, 5969, 1), new Range16.ptr(5984, 5996, 1), new Range16.ptr(5998, 6000, 1), new Range16.ptr(6016, 6067, 1), new Range16.ptr(6103, 6108, 5), new Range16.ptr(6176, 6263, 1), new Range16.ptr(6272, 6312, 1), new Range16.ptr(6314, 6320, 6), new Range16.ptr(6321, 6389, 1), new Range16.ptr(6400, 6430, 1), new Range16.ptr(6480, 6509, 1), new Range16.ptr(6512, 6516, 1), new Range16.ptr(6528, 6571, 1), new Range16.ptr(6576, 6601, 1), new Range16.ptr(6656, 6678, 1), new Range16.ptr(6688, 6740, 1), new Range16.ptr(6823, 6917, 94), new Range16.ptr(6918, 6963, 1), new Range16.ptr(6981, 6987, 1), new Range16.ptr(7043, 7072, 1), new Range16.ptr(7086, 7087, 1), new Range16.ptr(7098, 7141, 1), new Range16.ptr(7168, 7203, 1), new Range16.ptr(7245, 7247, 1), new Range16.ptr(7258, 7293, 1), new Range16.ptr(7401, 7404, 1), new Range16.ptr(7406, 7409, 1), new Range16.ptr(7413, 7414, 1), new Range16.ptr(7424, 7615, 1), new Range16.ptr(7680, 7957, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7968, 8005, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8016, 8023, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8032, 8061, 1), new Range16.ptr(8064, 8116, 1), new Range16.ptr(8118, 8124, 1), new Range16.ptr(8126, 8130, 4), new Range16.ptr(8131, 8132, 1), new Range16.ptr(8134, 8140, 1), new Range16.ptr(8144, 8147, 1), new Range16.ptr(8150, 8155, 1), new Range16.ptr(8160, 8172, 1), new Range16.ptr(8178, 8180, 1), new Range16.ptr(8182, 8188, 1), new Range16.ptr(8305, 8319, 14), new Range16.ptr(8336, 8348, 1), new Range16.ptr(8450, 8455, 5), new Range16.ptr(8458, 8467, 1), new Range16.ptr(8469, 8473, 4), new Range16.ptr(8474, 8477, 1), new Range16.ptr(8484, 8490, 2), new Range16.ptr(8491, 8493, 1), new Range16.ptr(8495, 8505, 1), new Range16.ptr(8508, 8511, 1), new Range16.ptr(8517, 8521, 1), new Range16.ptr(8526, 8579, 53), new Range16.ptr(8580, 11264, 2684), new Range16.ptr(11265, 11310, 1), new Range16.ptr(11312, 11358, 1), new Range16.ptr(11360, 11492, 1), new Range16.ptr(11499, 11502, 1), new Range16.ptr(11506, 11507, 1), new Range16.ptr(11520, 11557, 1), new Range16.ptr(11559, 11565, 6), new Range16.ptr(11568, 11623, 1), new Range16.ptr(11631, 11648, 17), new Range16.ptr(11649, 11670, 1), new Range16.ptr(11680, 11686, 1), new Range16.ptr(11688, 11694, 1), new Range16.ptr(11696, 11702, 1), new Range16.ptr(11704, 11710, 1), new Range16.ptr(11712, 11718, 1), new Range16.ptr(11720, 11726, 1), new Range16.ptr(11728, 11734, 1), new Range16.ptr(11736, 11742, 1), new Range16.ptr(11823, 12293, 470), new Range16.ptr(12294, 12337, 43), new Range16.ptr(12338, 12341, 1), new Range16.ptr(12347, 12348, 1), new Range16.ptr(12353, 12438, 1), new Range16.ptr(12445, 12447, 1), new Range16.ptr(12449, 12538, 1), new Range16.ptr(12540, 12543, 1), new Range16.ptr(12549, 12589, 1), new Range16.ptr(12593, 12686, 1), new Range16.ptr(12704, 12730, 1), new Range16.ptr(12784, 12799, 1), new Range16.ptr(13312, 19893, 1), new Range16.ptr(19968, 40917, 1), new Range16.ptr(40960, 42124, 1), new Range16.ptr(42192, 42237, 1), new Range16.ptr(42240, 42508, 1), new Range16.ptr(42512, 42527, 1), new Range16.ptr(42538, 42539, 1), new Range16.ptr(42560, 42606, 1), new Range16.ptr(42623, 42653, 1), new Range16.ptr(42656, 42725, 1), new Range16.ptr(42775, 42783, 1), new Range16.ptr(42786, 42888, 1), new Range16.ptr(42891, 42925, 1), new Range16.ptr(42928, 42935, 1), new Range16.ptr(42999, 43009, 1), new Range16.ptr(43011, 43013, 1), new Range16.ptr(43015, 43018, 1), new Range16.ptr(43020, 43042, 1), new Range16.ptr(43072, 43123, 1), new Range16.ptr(43138, 43187, 1), new Range16.ptr(43250, 43255, 1), new Range16.ptr(43259, 43261, 2), new Range16.ptr(43274, 43301, 1), new Range16.ptr(43312, 43334, 1), new Range16.ptr(43360, 43388, 1), new Range16.ptr(43396, 43442, 1), new Range16.ptr(43471, 43488, 17), new Range16.ptr(43489, 43492, 1), new Range16.ptr(43494, 43503, 1), new Range16.ptr(43514, 43518, 1), new Range16.ptr(43520, 43560, 1), new Range16.ptr(43584, 43586, 1), new Range16.ptr(43588, 43595, 1), new Range16.ptr(43616, 43638, 1), new Range16.ptr(43642, 43646, 4), new Range16.ptr(43647, 43695, 1), new Range16.ptr(43697, 43701, 4), new Range16.ptr(43702, 43705, 3), new Range16.ptr(43706, 43709, 1), new Range16.ptr(43712, 43714, 2), new Range16.ptr(43739, 43741, 1), new Range16.ptr(43744, 43754, 1), new Range16.ptr(43762, 43764, 1), new Range16.ptr(43777, 43782, 1), new Range16.ptr(43785, 43790, 1), new Range16.ptr(43793, 43798, 1), new Range16.ptr(43808, 43814, 1), new Range16.ptr(43816, 43822, 1), new Range16.ptr(43824, 43866, 1), new Range16.ptr(43868, 43877, 1), new Range16.ptr(43888, 44002, 1), new Range16.ptr(44032, 55203, 1), new Range16.ptr(55216, 55238, 1), new Range16.ptr(55243, 55291, 1), new Range16.ptr(63744, 64109, 1), new Range16.ptr(64112, 64217, 1), new Range16.ptr(64256, 64262, 1), new Range16.ptr(64275, 64279, 1), new Range16.ptr(64285, 64287, 2), new Range16.ptr(64288, 64296, 1), new Range16.ptr(64298, 64310, 1), new Range16.ptr(64312, 64316, 1), new Range16.ptr(64318, 64320, 2), new Range16.ptr(64321, 64323, 2), new Range16.ptr(64324, 64326, 2), new Range16.ptr(64327, 64433, 1), new Range16.ptr(64467, 64829, 1), new Range16.ptr(64848, 64911, 1), new Range16.ptr(64914, 64967, 1), new Range16.ptr(65008, 65019, 1), new Range16.ptr(65136, 65140, 1), new Range16.ptr(65142, 65276, 1), new Range16.ptr(65313, 65338, 1), new Range16.ptr(65345, 65370, 1), new Range16.ptr(65382, 65470, 1), new Range16.ptr(65474, 65479, 1), new Range16.ptr(65482, 65487, 1), new Range16.ptr(65490, 65495, 1), new Range16.ptr(65498, 65500, 1)]), new sliceType$1([new Range32.ptr(65536, 65547, 1), new Range32.ptr(65549, 65574, 1), new Range32.ptr(65576, 65594, 1), new Range32.ptr(65596, 65597, 1), new Range32.ptr(65599, 65613, 1), new Range32.ptr(65616, 65629, 1), new Range32.ptr(65664, 65786, 1), new Range32.ptr(66176, 66204, 1), new Range32.ptr(66208, 66256, 1), new Range32.ptr(66304, 66335, 1), new Range32.ptr(66352, 66368, 1), new Range32.ptr(66370, 66377, 1), new Range32.ptr(66384, 66421, 1), new Range32.ptr(66432, 66461, 1), new Range32.ptr(66464, 66499, 1), new Range32.ptr(66504, 66511, 1), new Range32.ptr(66560, 66717, 1), new Range32.ptr(66816, 66855, 1), new Range32.ptr(66864, 66915, 1), new Range32.ptr(67072, 67382, 1), new Range32.ptr(67392, 67413, 1), new Range32.ptr(67424, 67431, 1), new Range32.ptr(67584, 67589, 1), new Range32.ptr(67592, 67594, 2), new Range32.ptr(67595, 67637, 1), new Range32.ptr(67639, 67640, 1), new Range32.ptr(67644, 67647, 3), new Range32.ptr(67648, 67669, 1), new Range32.ptr(67680, 67702, 1), new Range32.ptr(67712, 67742, 1), new Range32.ptr(67808, 67826, 1), new Range32.ptr(67828, 67829, 1), new Range32.ptr(67840, 67861, 1), new Range32.ptr(67872, 67897, 1), new Range32.ptr(67968, 68023, 1), new Range32.ptr(68030, 68031, 1), new Range32.ptr(68096, 68112, 16), new Range32.ptr(68113, 68115, 1), new Range32.ptr(68117, 68119, 1), new Range32.ptr(68121, 68147, 1), new Range32.ptr(68192, 68220, 1), new Range32.ptr(68224, 68252, 1), new Range32.ptr(68288, 68295, 1), new Range32.ptr(68297, 68324, 1), new Range32.ptr(68352, 68405, 1), new Range32.ptr(68416, 68437, 1), new Range32.ptr(68448, 68466, 1), new Range32.ptr(68480, 68497, 1), new Range32.ptr(68608, 68680, 1), new Range32.ptr(68736, 68786, 1), new Range32.ptr(68800, 68850, 1), new Range32.ptr(69635, 69687, 1), new Range32.ptr(69763, 69807, 1), new Range32.ptr(69840, 69864, 1), new Range32.ptr(69891, 69926, 1), new Range32.ptr(69968, 70002, 1), new Range32.ptr(70006, 70019, 13), new Range32.ptr(70020, 70066, 1), new Range32.ptr(70081, 70084, 1), new Range32.ptr(70106, 70108, 2), new Range32.ptr(70144, 70161, 1), new Range32.ptr(70163, 70187, 1), new Range32.ptr(70272, 70278, 1), new Range32.ptr(70280, 70282, 2), new Range32.ptr(70283, 70285, 1), new Range32.ptr(70287, 70301, 1), new Range32.ptr(70303, 70312, 1), new Range32.ptr(70320, 70366, 1), new Range32.ptr(70405, 70412, 1), new Range32.ptr(70415, 70416, 1), new Range32.ptr(70419, 70440, 1), new Range32.ptr(70442, 70448, 1), new Range32.ptr(70450, 70451, 1), new Range32.ptr(70453, 70457, 1), new Range32.ptr(70461, 70480, 19), new Range32.ptr(70493, 70497, 1), new Range32.ptr(70784, 70831, 1), new Range32.ptr(70852, 70853, 1), new Range32.ptr(70855, 71040, 185), new Range32.ptr(71041, 71086, 1), new Range32.ptr(71128, 71131, 1), new Range32.ptr(71168, 71215, 1), new Range32.ptr(71236, 71296, 60), new Range32.ptr(71297, 71338, 1), new Range32.ptr(71424, 71449, 1), new Range32.ptr(71840, 71903, 1), new Range32.ptr(71935, 72384, 449), new Range32.ptr(72385, 72440, 1), new Range32.ptr(73728, 74649, 1), new Range32.ptr(74880, 75075, 1), new Range32.ptr(77824, 78894, 1), new Range32.ptr(82944, 83526, 1), new Range32.ptr(92160, 92728, 1), new Range32.ptr(92736, 92766, 1), new Range32.ptr(92880, 92909, 1), new Range32.ptr(92928, 92975, 1), new Range32.ptr(92992, 92995, 1), new Range32.ptr(93027, 93047, 1), new Range32.ptr(93053, 93071, 1), new Range32.ptr(93952, 94020, 1), new Range32.ptr(94032, 94099, 67), new Range32.ptr(94100, 94111, 1), new Range32.ptr(110592, 110593, 1), new Range32.ptr(113664, 113770, 1), new Range32.ptr(113776, 113788, 1), new Range32.ptr(113792, 113800, 1), new Range32.ptr(113808, 113817, 1), new Range32.ptr(119808, 119892, 1), new Range32.ptr(119894, 119964, 1), new Range32.ptr(119966, 119967, 1), new Range32.ptr(119970, 119973, 3), new Range32.ptr(119974, 119977, 3), new Range32.ptr(119978, 119980, 1), new Range32.ptr(119982, 119993, 1), new Range32.ptr(119995, 119997, 2), new Range32.ptr(119998, 120003, 1), new Range32.ptr(120005, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120094, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120138, 4), new Range32.ptr(120139, 120144, 1), new Range32.ptr(120146, 120485, 1), new Range32.ptr(120488, 120512, 1), new Range32.ptr(120514, 120538, 1), new Range32.ptr(120540, 120570, 1), new Range32.ptr(120572, 120596, 1), new Range32.ptr(120598, 120628, 1), new Range32.ptr(120630, 120654, 1), new Range32.ptr(120656, 120686, 1), new Range32.ptr(120688, 120712, 1), new Range32.ptr(120714, 120744, 1), new Range32.ptr(120746, 120770, 1), new Range32.ptr(120772, 120779, 1), new Range32.ptr(124928, 125124, 1), new Range32.ptr(126464, 126467, 1), new Range32.ptr(126469, 126495, 1), new Range32.ptr(126497, 126498, 1), new Range32.ptr(126500, 126503, 3), new Range32.ptr(126505, 126514, 1), new Range32.ptr(126516, 126519, 1), new Range32.ptr(126521, 126523, 2), new Range32.ptr(126530, 126535, 5), new Range32.ptr(126537, 126541, 2), new Range32.ptr(126542, 126543, 1), new Range32.ptr(126545, 126546, 1), new Range32.ptr(126548, 126551, 3), new Range32.ptr(126553, 126561, 2), new Range32.ptr(126562, 126564, 2), new Range32.ptr(126567, 126570, 1), new Range32.ptr(126572, 126578, 1), new Range32.ptr(126580, 126583, 1), new Range32.ptr(126585, 126588, 1), new Range32.ptr(126590, 126592, 2), new Range32.ptr(126593, 126601, 1), new Range32.ptr(126603, 126619, 1), new Range32.ptr(126625, 126627, 1), new Range32.ptr(126629, 126633, 1), new Range32.ptr(126635, 126651, 1), new Range32.ptr(131072, 173782, 1), new Range32.ptr(173824, 177972, 1), new Range32.ptr(177984, 178205, 1), new Range32.ptr(178208, 183969, 1), new Range32.ptr(194560, 195101, 1)]), 6);
		_Ll = new RangeTable.ptr(new sliceType([new Range16.ptr(97, 122, 1), new Range16.ptr(181, 223, 42), new Range16.ptr(224, 246, 1), new Range16.ptr(248, 255, 1), new Range16.ptr(257, 311, 2), new Range16.ptr(312, 328, 2), new Range16.ptr(329, 375, 2), new Range16.ptr(378, 382, 2), new Range16.ptr(383, 384, 1), new Range16.ptr(387, 389, 2), new Range16.ptr(392, 396, 4), new Range16.ptr(397, 402, 5), new Range16.ptr(405, 409, 4), new Range16.ptr(410, 411, 1), new Range16.ptr(414, 417, 3), new Range16.ptr(419, 421, 2), new Range16.ptr(424, 426, 2), new Range16.ptr(427, 429, 2), new Range16.ptr(432, 436, 4), new Range16.ptr(438, 441, 3), new Range16.ptr(442, 445, 3), new Range16.ptr(446, 447, 1), new Range16.ptr(454, 460, 3), new Range16.ptr(462, 476, 2), new Range16.ptr(477, 495, 2), new Range16.ptr(496, 499, 3), new Range16.ptr(501, 505, 4), new Range16.ptr(507, 563, 2), new Range16.ptr(564, 569, 1), new Range16.ptr(572, 575, 3), new Range16.ptr(576, 578, 2), new Range16.ptr(583, 591, 2), new Range16.ptr(592, 659, 1), new Range16.ptr(661, 687, 1), new Range16.ptr(881, 883, 2), new Range16.ptr(887, 891, 4), new Range16.ptr(892, 893, 1), new Range16.ptr(912, 940, 28), new Range16.ptr(941, 974, 1), new Range16.ptr(976, 977, 1), new Range16.ptr(981, 983, 1), new Range16.ptr(985, 1007, 2), new Range16.ptr(1008, 1011, 1), new Range16.ptr(1013, 1019, 3), new Range16.ptr(1020, 1072, 52), new Range16.ptr(1073, 1119, 1), new Range16.ptr(1121, 1153, 2), new Range16.ptr(1163, 1215, 2), new Range16.ptr(1218, 1230, 2), new Range16.ptr(1231, 1327, 2), new Range16.ptr(1377, 1415, 1), new Range16.ptr(5112, 5117, 1), new Range16.ptr(7424, 7467, 1), new Range16.ptr(7531, 7543, 1), new Range16.ptr(7545, 7578, 1), new Range16.ptr(7681, 7829, 2), new Range16.ptr(7830, 7837, 1), new Range16.ptr(7839, 7935, 2), new Range16.ptr(7936, 7943, 1), new Range16.ptr(7952, 7957, 1), new Range16.ptr(7968, 7975, 1), new Range16.ptr(7984, 7991, 1), new Range16.ptr(8000, 8005, 1), new Range16.ptr(8016, 8023, 1), new Range16.ptr(8032, 8039, 1), new Range16.ptr(8048, 8061, 1), new Range16.ptr(8064, 8071, 1), new Range16.ptr(8080, 8087, 1), new Range16.ptr(8096, 8103, 1), new Range16.ptr(8112, 8116, 1), new Range16.ptr(8118, 8119, 1), new Range16.ptr(8126, 8130, 4), new Range16.ptr(8131, 8132, 1), new Range16.ptr(8134, 8135, 1), new Range16.ptr(8144, 8147, 1), new Range16.ptr(8150, 8151, 1), new Range16.ptr(8160, 8167, 1), new Range16.ptr(8178, 8180, 1), new Range16.ptr(8182, 8183, 1), new Range16.ptr(8458, 8462, 4), new Range16.ptr(8463, 8467, 4), new Range16.ptr(8495, 8505, 5), new Range16.ptr(8508, 8509, 1), new Range16.ptr(8518, 8521, 1), new Range16.ptr(8526, 8580, 54), new Range16.ptr(11312, 11358, 1), new Range16.ptr(11361, 11365, 4), new Range16.ptr(11366, 11372, 2), new Range16.ptr(11377, 11379, 2), new Range16.ptr(11380, 11382, 2), new Range16.ptr(11383, 11387, 1), new Range16.ptr(11393, 11491, 2), new Range16.ptr(11492, 11500, 8), new Range16.ptr(11502, 11507, 5), new Range16.ptr(11520, 11557, 1), new Range16.ptr(11559, 11565, 6), new Range16.ptr(42561, 42605, 2), new Range16.ptr(42625, 42651, 2), new Range16.ptr(42787, 42799, 2), new Range16.ptr(42800, 42801, 1), new Range16.ptr(42803, 42865, 2), new Range16.ptr(42866, 42872, 1), new Range16.ptr(42874, 42876, 2), new Range16.ptr(42879, 42887, 2), new Range16.ptr(42892, 42894, 2), new Range16.ptr(42897, 42899, 2), new Range16.ptr(42900, 42901, 1), new Range16.ptr(42903, 42921, 2), new Range16.ptr(42933, 42935, 2), new Range16.ptr(43002, 43824, 822), new Range16.ptr(43825, 43866, 1), new Range16.ptr(43872, 43877, 1), new Range16.ptr(43888, 43967, 1), new Range16.ptr(64256, 64262, 1), new Range16.ptr(64275, 64279, 1), new Range16.ptr(65345, 65370, 1)]), new sliceType$1([new Range32.ptr(66600, 66639, 1), new Range32.ptr(68800, 68850, 1), new Range32.ptr(71872, 71903, 1), new Range32.ptr(119834, 119859, 1), new Range32.ptr(119886, 119892, 1), new Range32.ptr(119894, 119911, 1), new Range32.ptr(119938, 119963, 1), new Range32.ptr(119990, 119993, 1), new Range32.ptr(119995, 119997, 2), new Range32.ptr(119998, 120003, 1), new Range32.ptr(120005, 120015, 1), new Range32.ptr(120042, 120067, 1), new Range32.ptr(120094, 120119, 1), new Range32.ptr(120146, 120171, 1), new Range32.ptr(120198, 120223, 1), new Range32.ptr(120250, 120275, 1), new Range32.ptr(120302, 120327, 1), new Range32.ptr(120354, 120379, 1), new Range32.ptr(120406, 120431, 1), new Range32.ptr(120458, 120485, 1), new Range32.ptr(120514, 120538, 1), new Range32.ptr(120540, 120545, 1), new Range32.ptr(120572, 120596, 1), new Range32.ptr(120598, 120603, 1), new Range32.ptr(120630, 120654, 1), new Range32.ptr(120656, 120661, 1), new Range32.ptr(120688, 120712, 1), new Range32.ptr(120714, 120719, 1), new Range32.ptr(120746, 120770, 1), new Range32.ptr(120772, 120777, 1), new Range32.ptr(120779, 120779, 1)]), 4);
		_Lm = new RangeTable.ptr(new sliceType([new Range16.ptr(688, 705, 1), new Range16.ptr(710, 721, 1), new Range16.ptr(736, 740, 1), new Range16.ptr(748, 750, 2), new Range16.ptr(884, 890, 6), new Range16.ptr(1369, 1600, 231), new Range16.ptr(1765, 1766, 1), new Range16.ptr(2036, 2037, 1), new Range16.ptr(2042, 2074, 32), new Range16.ptr(2084, 2088, 4), new Range16.ptr(2417, 3654, 1237), new Range16.ptr(3782, 4348, 566), new Range16.ptr(6103, 6211, 108), new Range16.ptr(6823, 7288, 465), new Range16.ptr(7289, 7293, 1), new Range16.ptr(7468, 7530, 1), new Range16.ptr(7544, 7579, 35), new Range16.ptr(7580, 7615, 1), new Range16.ptr(8305, 8319, 14), new Range16.ptr(8336, 8348, 1), new Range16.ptr(11388, 11389, 1), new Range16.ptr(11631, 11823, 192), new Range16.ptr(12293, 12337, 44), new Range16.ptr(12338, 12341, 1), new Range16.ptr(12347, 12445, 98), new Range16.ptr(12446, 12540, 94), new Range16.ptr(12541, 12542, 1), new Range16.ptr(40981, 42232, 1251), new Range16.ptr(42233, 42237, 1), new Range16.ptr(42508, 42623, 115), new Range16.ptr(42652, 42653, 1), new Range16.ptr(42775, 42783, 1), new Range16.ptr(42864, 42888, 24), new Range16.ptr(43000, 43001, 1), new Range16.ptr(43471, 43494, 23), new Range16.ptr(43632, 43741, 109), new Range16.ptr(43763, 43764, 1), new Range16.ptr(43868, 43871, 1), new Range16.ptr(65392, 65438, 46), new Range16.ptr(65439, 65439, 1)]), new sliceType$1([new Range32.ptr(92992, 92992, 1), new Range32.ptr(92993, 92995, 1), new Range32.ptr(94099, 94111, 1)]), 0);
		_Lo = new RangeTable.ptr(new sliceType([new Range16.ptr(170, 186, 16), new Range16.ptr(443, 448, 5), new Range16.ptr(449, 451, 1), new Range16.ptr(660, 1488, 828), new Range16.ptr(1489, 1514, 1), new Range16.ptr(1520, 1522, 1), new Range16.ptr(1568, 1599, 1), new Range16.ptr(1601, 1610, 1), new Range16.ptr(1646, 1647, 1), new Range16.ptr(1649, 1747, 1), new Range16.ptr(1749, 1774, 25), new Range16.ptr(1775, 1786, 11), new Range16.ptr(1787, 1788, 1), new Range16.ptr(1791, 1808, 17), new Range16.ptr(1810, 1839, 1), new Range16.ptr(1869, 1957, 1), new Range16.ptr(1969, 1994, 25), new Range16.ptr(1995, 2026, 1), new Range16.ptr(2048, 2069, 1), new Range16.ptr(2112, 2136, 1), new Range16.ptr(2208, 2228, 1), new Range16.ptr(2308, 2361, 1), new Range16.ptr(2365, 2384, 19), new Range16.ptr(2392, 2401, 1), new Range16.ptr(2418, 2432, 1), new Range16.ptr(2437, 2444, 1), new Range16.ptr(2447, 2448, 1), new Range16.ptr(2451, 2472, 1), new Range16.ptr(2474, 2480, 1), new Range16.ptr(2482, 2486, 4), new Range16.ptr(2487, 2489, 1), new Range16.ptr(2493, 2510, 17), new Range16.ptr(2524, 2525, 1), new Range16.ptr(2527, 2529, 1), new Range16.ptr(2544, 2545, 1), new Range16.ptr(2565, 2570, 1), new Range16.ptr(2575, 2576, 1), new Range16.ptr(2579, 2600, 1), new Range16.ptr(2602, 2608, 1), new Range16.ptr(2610, 2611, 1), new Range16.ptr(2613, 2614, 1), new Range16.ptr(2616, 2617, 1), new Range16.ptr(2649, 2652, 1), new Range16.ptr(2654, 2674, 20), new Range16.ptr(2675, 2676, 1), new Range16.ptr(2693, 2701, 1), new Range16.ptr(2703, 2705, 1), new Range16.ptr(2707, 2728, 1), new Range16.ptr(2730, 2736, 1), new Range16.ptr(2738, 2739, 1), new Range16.ptr(2741, 2745, 1), new Range16.ptr(2749, 2768, 19), new Range16.ptr(2784, 2785, 1), new Range16.ptr(2809, 2821, 12), new Range16.ptr(2822, 2828, 1), new Range16.ptr(2831, 2832, 1), new Range16.ptr(2835, 2856, 1), new Range16.ptr(2858, 2864, 1), new Range16.ptr(2866, 2867, 1), new Range16.ptr(2869, 2873, 1), new Range16.ptr(2877, 2908, 31), new Range16.ptr(2909, 2911, 2), new Range16.ptr(2912, 2913, 1), new Range16.ptr(2929, 2947, 18), new Range16.ptr(2949, 2954, 1), new Range16.ptr(2958, 2960, 1), new Range16.ptr(2962, 2965, 1), new Range16.ptr(2969, 2970, 1), new Range16.ptr(2972, 2974, 2), new Range16.ptr(2975, 2979, 4), new Range16.ptr(2980, 2984, 4), new Range16.ptr(2985, 2986, 1), new Range16.ptr(2990, 3001, 1), new Range16.ptr(3024, 3077, 53), new Range16.ptr(3078, 3084, 1), new Range16.ptr(3086, 3088, 1), new Range16.ptr(3090, 3112, 1), new Range16.ptr(3114, 3129, 1), new Range16.ptr(3133, 3160, 27), new Range16.ptr(3161, 3162, 1), new Range16.ptr(3168, 3169, 1), new Range16.ptr(3205, 3212, 1), new Range16.ptr(3214, 3216, 1), new Range16.ptr(3218, 3240, 1), new Range16.ptr(3242, 3251, 1), new Range16.ptr(3253, 3257, 1), new Range16.ptr(3261, 3294, 33), new Range16.ptr(3296, 3297, 1), new Range16.ptr(3313, 3314, 1), new Range16.ptr(3333, 3340, 1), new Range16.ptr(3342, 3344, 1), new Range16.ptr(3346, 3386, 1), new Range16.ptr(3389, 3423, 17), new Range16.ptr(3424, 3425, 1), new Range16.ptr(3450, 3455, 1), new Range16.ptr(3461, 3478, 1), new Range16.ptr(3482, 3505, 1), new Range16.ptr(3507, 3515, 1), new Range16.ptr(3517, 3520, 3), new Range16.ptr(3521, 3526, 1), new Range16.ptr(3585, 3632, 1), new Range16.ptr(3634, 3635, 1), new Range16.ptr(3648, 3653, 1), new Range16.ptr(3713, 3714, 1), new Range16.ptr(3716, 3719, 3), new Range16.ptr(3720, 3722, 2), new Range16.ptr(3725, 3732, 7), new Range16.ptr(3733, 3735, 1), new Range16.ptr(3737, 3743, 1), new Range16.ptr(3745, 3747, 1), new Range16.ptr(3749, 3751, 2), new Range16.ptr(3754, 3755, 1), new Range16.ptr(3757, 3760, 1), new Range16.ptr(3762, 3763, 1), new Range16.ptr(3773, 3776, 3), new Range16.ptr(3777, 3780, 1), new Range16.ptr(3804, 3807, 1), new Range16.ptr(3840, 3904, 64), new Range16.ptr(3905, 3911, 1), new Range16.ptr(3913, 3948, 1), new Range16.ptr(3976, 3980, 1), new Range16.ptr(4096, 4138, 1), new Range16.ptr(4159, 4176, 17), new Range16.ptr(4177, 4181, 1), new Range16.ptr(4186, 4189, 1), new Range16.ptr(4193, 4197, 4), new Range16.ptr(4198, 4206, 8), new Range16.ptr(4207, 4208, 1), new Range16.ptr(4213, 4225, 1), new Range16.ptr(4238, 4304, 66), new Range16.ptr(4305, 4346, 1), new Range16.ptr(4349, 4680, 1), new Range16.ptr(4682, 4685, 1), new Range16.ptr(4688, 4694, 1), new Range16.ptr(4696, 4698, 2), new Range16.ptr(4699, 4701, 1), new Range16.ptr(4704, 4744, 1), new Range16.ptr(4746, 4749, 1), new Range16.ptr(4752, 4784, 1), new Range16.ptr(4786, 4789, 1), new Range16.ptr(4792, 4798, 1), new Range16.ptr(4800, 4802, 2), new Range16.ptr(4803, 4805, 1), new Range16.ptr(4808, 4822, 1), new Range16.ptr(4824, 4880, 1), new Range16.ptr(4882, 4885, 1), new Range16.ptr(4888, 4954, 1), new Range16.ptr(4992, 5007, 1), new Range16.ptr(5121, 5740, 1), new Range16.ptr(5743, 5759, 1), new Range16.ptr(5761, 5786, 1), new Range16.ptr(5792, 5866, 1), new Range16.ptr(5873, 5880, 1), new Range16.ptr(5888, 5900, 1), new Range16.ptr(5902, 5905, 1), new Range16.ptr(5920, 5937, 1), new Range16.ptr(5952, 5969, 1), new Range16.ptr(5984, 5996, 1), new Range16.ptr(5998, 6000, 1), new Range16.ptr(6016, 6067, 1), new Range16.ptr(6108, 6176, 68), new Range16.ptr(6177, 6210, 1), new Range16.ptr(6212, 6263, 1), new Range16.ptr(6272, 6312, 1), new Range16.ptr(6314, 6320, 6), new Range16.ptr(6321, 6389, 1), new Range16.ptr(6400, 6430, 1), new Range16.ptr(6480, 6509, 1), new Range16.ptr(6512, 6516, 1), new Range16.ptr(6528, 6571, 1), new Range16.ptr(6576, 6601, 1), new Range16.ptr(6656, 6678, 1), new Range16.ptr(6688, 6740, 1), new Range16.ptr(6917, 6963, 1), new Range16.ptr(6981, 6987, 1), new Range16.ptr(7043, 7072, 1), new Range16.ptr(7086, 7087, 1), new Range16.ptr(7098, 7141, 1), new Range16.ptr(7168, 7203, 1), new Range16.ptr(7245, 7247, 1), new Range16.ptr(7258, 7287, 1), new Range16.ptr(7401, 7404, 1), new Range16.ptr(7406, 7409, 1), new Range16.ptr(7413, 7414, 1), new Range16.ptr(8501, 8504, 1), new Range16.ptr(11568, 11623, 1), new Range16.ptr(11648, 11670, 1), new Range16.ptr(11680, 11686, 1), new Range16.ptr(11688, 11694, 1), new Range16.ptr(11696, 11702, 1), new Range16.ptr(11704, 11710, 1), new Range16.ptr(11712, 11718, 1), new Range16.ptr(11720, 11726, 1), new Range16.ptr(11728, 11734, 1), new Range16.ptr(11736, 11742, 1), new Range16.ptr(12294, 12348, 54), new Range16.ptr(12353, 12438, 1), new Range16.ptr(12447, 12449, 2), new Range16.ptr(12450, 12538, 1), new Range16.ptr(12543, 12549, 6), new Range16.ptr(12550, 12589, 1), new Range16.ptr(12593, 12686, 1), new Range16.ptr(12704, 12730, 1), new Range16.ptr(12784, 12799, 1), new Range16.ptr(13312, 19893, 1), new Range16.ptr(19968, 40917, 1), new Range16.ptr(40960, 40980, 1), new Range16.ptr(40982, 42124, 1), new Range16.ptr(42192, 42231, 1), new Range16.ptr(42240, 42507, 1), new Range16.ptr(42512, 42527, 1), new Range16.ptr(42538, 42539, 1), new Range16.ptr(42606, 42656, 50), new Range16.ptr(42657, 42725, 1), new Range16.ptr(42895, 42999, 104), new Range16.ptr(43003, 43009, 1), new Range16.ptr(43011, 43013, 1), new Range16.ptr(43015, 43018, 1), new Range16.ptr(43020, 43042, 1), new Range16.ptr(43072, 43123, 1), new Range16.ptr(43138, 43187, 1), new Range16.ptr(43250, 43255, 1), new Range16.ptr(43259, 43261, 2), new Range16.ptr(43274, 43301, 1), new Range16.ptr(43312, 43334, 1), new Range16.ptr(43360, 43388, 1), new Range16.ptr(43396, 43442, 1), new Range16.ptr(43488, 43492, 1), new Range16.ptr(43495, 43503, 1), new Range16.ptr(43514, 43518, 1), new Range16.ptr(43520, 43560, 1), new Range16.ptr(43584, 43586, 1), new Range16.ptr(43588, 43595, 1), new Range16.ptr(43616, 43631, 1), new Range16.ptr(43633, 43638, 1), new Range16.ptr(43642, 43646, 4), new Range16.ptr(43647, 43695, 1), new Range16.ptr(43697, 43701, 4), new Range16.ptr(43702, 43705, 3), new Range16.ptr(43706, 43709, 1), new Range16.ptr(43712, 43714, 2), new Range16.ptr(43739, 43740, 1), new Range16.ptr(43744, 43754, 1), new Range16.ptr(43762, 43777, 15), new Range16.ptr(43778, 43782, 1), new Range16.ptr(43785, 43790, 1), new Range16.ptr(43793, 43798, 1), new Range16.ptr(43808, 43814, 1), new Range16.ptr(43816, 43822, 1), new Range16.ptr(43968, 44002, 1), new Range16.ptr(44032, 55203, 1), new Range16.ptr(55216, 55238, 1), new Range16.ptr(55243, 55291, 1), new Range16.ptr(63744, 64109, 1), new Range16.ptr(64112, 64217, 1), new Range16.ptr(64285, 64287, 2), new Range16.ptr(64288, 64296, 1), new Range16.ptr(64298, 64310, 1), new Range16.ptr(64312, 64316, 1), new Range16.ptr(64318, 64320, 2), new Range16.ptr(64321, 64323, 2), new Range16.ptr(64324, 64326, 2), new Range16.ptr(64327, 64433, 1), new Range16.ptr(64467, 64829, 1), new Range16.ptr(64848, 64911, 1), new Range16.ptr(64914, 64967, 1), new Range16.ptr(65008, 65019, 1), new Range16.ptr(65136, 65140, 1), new Range16.ptr(65142, 65276, 1), new Range16.ptr(65382, 65391, 1), new Range16.ptr(65393, 65437, 1), new Range16.ptr(65440, 65470, 1), new Range16.ptr(65474, 65479, 1), new Range16.ptr(65482, 65487, 1), new Range16.ptr(65490, 65495, 1), new Range16.ptr(65498, 65500, 1)]), new sliceType$1([new Range32.ptr(65536, 65547, 1), new Range32.ptr(65549, 65574, 1), new Range32.ptr(65576, 65594, 1), new Range32.ptr(65596, 65597, 1), new Range32.ptr(65599, 65613, 1), new Range32.ptr(65616, 65629, 1), new Range32.ptr(65664, 65786, 1), new Range32.ptr(66176, 66204, 1), new Range32.ptr(66208, 66256, 1), new Range32.ptr(66304, 66335, 1), new Range32.ptr(66352, 66368, 1), new Range32.ptr(66370, 66377, 1), new Range32.ptr(66384, 66421, 1), new Range32.ptr(66432, 66461, 1), new Range32.ptr(66464, 66499, 1), new Range32.ptr(66504, 66511, 1), new Range32.ptr(66640, 66717, 1), new Range32.ptr(66816, 66855, 1), new Range32.ptr(66864, 66915, 1), new Range32.ptr(67072, 67382, 1), new Range32.ptr(67392, 67413, 1), new Range32.ptr(67424, 67431, 1), new Range32.ptr(67584, 67589, 1), new Range32.ptr(67592, 67594, 2), new Range32.ptr(67595, 67637, 1), new Range32.ptr(67639, 67640, 1), new Range32.ptr(67644, 67647, 3), new Range32.ptr(67648, 67669, 1), new Range32.ptr(67680, 67702, 1), new Range32.ptr(67712, 67742, 1), new Range32.ptr(67808, 67826, 1), new Range32.ptr(67828, 67829, 1), new Range32.ptr(67840, 67861, 1), new Range32.ptr(67872, 67897, 1), new Range32.ptr(67968, 68023, 1), new Range32.ptr(68030, 68031, 1), new Range32.ptr(68096, 68112, 16), new Range32.ptr(68113, 68115, 1), new Range32.ptr(68117, 68119, 1), new Range32.ptr(68121, 68147, 1), new Range32.ptr(68192, 68220, 1), new Range32.ptr(68224, 68252, 1), new Range32.ptr(68288, 68295, 1), new Range32.ptr(68297, 68324, 1), new Range32.ptr(68352, 68405, 1), new Range32.ptr(68416, 68437, 1), new Range32.ptr(68448, 68466, 1), new Range32.ptr(68480, 68497, 1), new Range32.ptr(68608, 68680, 1), new Range32.ptr(69635, 69687, 1), new Range32.ptr(69763, 69807, 1), new Range32.ptr(69840, 69864, 1), new Range32.ptr(69891, 69926, 1), new Range32.ptr(69968, 70002, 1), new Range32.ptr(70006, 70019, 13), new Range32.ptr(70020, 70066, 1), new Range32.ptr(70081, 70084, 1), new Range32.ptr(70106, 70108, 2), new Range32.ptr(70144, 70161, 1), new Range32.ptr(70163, 70187, 1), new Range32.ptr(70272, 70278, 1), new Range32.ptr(70280, 70282, 2), new Range32.ptr(70283, 70285, 1), new Range32.ptr(70287, 70301, 1), new Range32.ptr(70303, 70312, 1), new Range32.ptr(70320, 70366, 1), new Range32.ptr(70405, 70412, 1), new Range32.ptr(70415, 70416, 1), new Range32.ptr(70419, 70440, 1), new Range32.ptr(70442, 70448, 1), new Range32.ptr(70450, 70451, 1), new Range32.ptr(70453, 70457, 1), new Range32.ptr(70461, 70480, 19), new Range32.ptr(70493, 70497, 1), new Range32.ptr(70784, 70831, 1), new Range32.ptr(70852, 70853, 1), new Range32.ptr(70855, 71040, 185), new Range32.ptr(71041, 71086, 1), new Range32.ptr(71128, 71131, 1), new Range32.ptr(71168, 71215, 1), new Range32.ptr(71236, 71296, 60), new Range32.ptr(71297, 71338, 1), new Range32.ptr(71424, 71449, 1), new Range32.ptr(71935, 72384, 449), new Range32.ptr(72385, 72440, 1), new Range32.ptr(73728, 74649, 1), new Range32.ptr(74880, 75075, 1), new Range32.ptr(77824, 78894, 1), new Range32.ptr(82944, 83526, 1), new Range32.ptr(92160, 92728, 1), new Range32.ptr(92736, 92766, 1), new Range32.ptr(92880, 92909, 1), new Range32.ptr(92928, 92975, 1), new Range32.ptr(93027, 93047, 1), new Range32.ptr(93053, 93071, 1), new Range32.ptr(93952, 94020, 1), new Range32.ptr(94032, 110592, 16560), new Range32.ptr(110593, 113664, 3071), new Range32.ptr(113665, 113770, 1), new Range32.ptr(113776, 113788, 1), new Range32.ptr(113792, 113800, 1), new Range32.ptr(113808, 113817, 1), new Range32.ptr(124928, 125124, 1), new Range32.ptr(126464, 126467, 1), new Range32.ptr(126469, 126495, 1), new Range32.ptr(126497, 126498, 1), new Range32.ptr(126500, 126503, 3), new Range32.ptr(126505, 126514, 1), new Range32.ptr(126516, 126519, 1), new Range32.ptr(126521, 126523, 2), new Range32.ptr(126530, 126535, 5), new Range32.ptr(126537, 126541, 2), new Range32.ptr(126542, 126543, 1), new Range32.ptr(126545, 126546, 1), new Range32.ptr(126548, 126551, 3), new Range32.ptr(126553, 126561, 2), new Range32.ptr(126562, 126564, 2), new Range32.ptr(126567, 126570, 1), new Range32.ptr(126572, 126578, 1), new Range32.ptr(126580, 126583, 1), new Range32.ptr(126585, 126588, 1), new Range32.ptr(126590, 126592, 2), new Range32.ptr(126593, 126601, 1), new Range32.ptr(126603, 126619, 1), new Range32.ptr(126625, 126627, 1), new Range32.ptr(126629, 126633, 1), new Range32.ptr(126635, 126651, 1), new Range32.ptr(131072, 173782, 1), new Range32.ptr(173824, 177972, 1), new Range32.ptr(177984, 178205, 1), new Range32.ptr(178208, 183969, 1), new Range32.ptr(194560, 195101, 1)]), 1);
		_Lt = new RangeTable.ptr(new sliceType([new Range16.ptr(453, 459, 3), new Range16.ptr(498, 8072, 7574), new Range16.ptr(8073, 8079, 1), new Range16.ptr(8088, 8095, 1), new Range16.ptr(8104, 8111, 1), new Range16.ptr(8124, 8140, 16), new Range16.ptr(8188, 8188, 1)]), sliceType$1.nil, 0);
		_Lu = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(192, 214, 1), new Range16.ptr(216, 222, 1), new Range16.ptr(256, 310, 2), new Range16.ptr(313, 327, 2), new Range16.ptr(330, 376, 2), new Range16.ptr(377, 381, 2), new Range16.ptr(385, 386, 1), new Range16.ptr(388, 390, 2), new Range16.ptr(391, 393, 2), new Range16.ptr(394, 395, 1), new Range16.ptr(398, 401, 1), new Range16.ptr(403, 404, 1), new Range16.ptr(406, 408, 1), new Range16.ptr(412, 413, 1), new Range16.ptr(415, 416, 1), new Range16.ptr(418, 422, 2), new Range16.ptr(423, 425, 2), new Range16.ptr(428, 430, 2), new Range16.ptr(431, 433, 2), new Range16.ptr(434, 435, 1), new Range16.ptr(437, 439, 2), new Range16.ptr(440, 444, 4), new Range16.ptr(452, 461, 3), new Range16.ptr(463, 475, 2), new Range16.ptr(478, 494, 2), new Range16.ptr(497, 500, 3), new Range16.ptr(502, 504, 1), new Range16.ptr(506, 562, 2), new Range16.ptr(570, 571, 1), new Range16.ptr(573, 574, 1), new Range16.ptr(577, 579, 2), new Range16.ptr(580, 582, 1), new Range16.ptr(584, 590, 2), new Range16.ptr(880, 882, 2), new Range16.ptr(886, 895, 9), new Range16.ptr(902, 904, 2), new Range16.ptr(905, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 913, 2), new Range16.ptr(914, 929, 1), new Range16.ptr(931, 939, 1), new Range16.ptr(975, 978, 3), new Range16.ptr(979, 980, 1), new Range16.ptr(984, 1006, 2), new Range16.ptr(1012, 1015, 3), new Range16.ptr(1017, 1018, 1), new Range16.ptr(1021, 1071, 1), new Range16.ptr(1120, 1152, 2), new Range16.ptr(1162, 1216, 2), new Range16.ptr(1217, 1229, 2), new Range16.ptr(1232, 1326, 2), new Range16.ptr(1329, 1366, 1), new Range16.ptr(4256, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(5024, 5109, 1), new Range16.ptr(7680, 7828, 2), new Range16.ptr(7838, 7934, 2), new Range16.ptr(7944, 7951, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7976, 7983, 1), new Range16.ptr(7992, 7999, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8040, 8047, 1), new Range16.ptr(8120, 8123, 1), new Range16.ptr(8136, 8139, 1), new Range16.ptr(8152, 8155, 1), new Range16.ptr(8168, 8172, 1), new Range16.ptr(8184, 8187, 1), new Range16.ptr(8450, 8455, 5), new Range16.ptr(8459, 8461, 1), new Range16.ptr(8464, 8466, 1), new Range16.ptr(8469, 8473, 4), new Range16.ptr(8474, 8477, 1), new Range16.ptr(8484, 8490, 2), new Range16.ptr(8491, 8493, 1), new Range16.ptr(8496, 8499, 1), new Range16.ptr(8510, 8511, 1), new Range16.ptr(8517, 8579, 62), new Range16.ptr(11264, 11310, 1), new Range16.ptr(11360, 11362, 2), new Range16.ptr(11363, 11364, 1), new Range16.ptr(11367, 11373, 2), new Range16.ptr(11374, 11376, 1), new Range16.ptr(11378, 11381, 3), new Range16.ptr(11390, 11392, 1), new Range16.ptr(11394, 11490, 2), new Range16.ptr(11499, 11501, 2), new Range16.ptr(11506, 42560, 31054), new Range16.ptr(42562, 42604, 2), new Range16.ptr(42624, 42650, 2), new Range16.ptr(42786, 42798, 2), new Range16.ptr(42802, 42862, 2), new Range16.ptr(42873, 42877, 2), new Range16.ptr(42878, 42886, 2), new Range16.ptr(42891, 42893, 2), new Range16.ptr(42896, 42898, 2), new Range16.ptr(42902, 42922, 2), new Range16.ptr(42923, 42925, 1), new Range16.ptr(42928, 42932, 1), new Range16.ptr(42934, 65313, 22379), new Range16.ptr(65314, 65338, 1)]), new sliceType$1([new Range32.ptr(66560, 66599, 1), new Range32.ptr(68736, 68786, 1), new Range32.ptr(71840, 71871, 1), new Range32.ptr(119808, 119833, 1), new Range32.ptr(119860, 119885, 1), new Range32.ptr(119912, 119937, 1), new Range32.ptr(119964, 119966, 2), new Range32.ptr(119967, 119973, 3), new Range32.ptr(119974, 119977, 3), new Range32.ptr(119978, 119980, 1), new Range32.ptr(119982, 119989, 1), new Range32.ptr(120016, 120041, 1), new Range32.ptr(120068, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120120, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120138, 4), new Range32.ptr(120139, 120144, 1), new Range32.ptr(120172, 120197, 1), new Range32.ptr(120224, 120249, 1), new Range32.ptr(120276, 120301, 1), new Range32.ptr(120328, 120353, 1), new Range32.ptr(120380, 120405, 1), new Range32.ptr(120432, 120457, 1), new Range32.ptr(120488, 120512, 1), new Range32.ptr(120546, 120570, 1), new Range32.ptr(120604, 120628, 1), new Range32.ptr(120662, 120686, 1), new Range32.ptr(120720, 120744, 1), new Range32.ptr(120778, 120778, 1)]), 3);
		_M = new RangeTable.ptr(new sliceType([new Range16.ptr(768, 879, 1), new Range16.ptr(1155, 1161, 1), new Range16.ptr(1425, 1469, 1), new Range16.ptr(1471, 1473, 2), new Range16.ptr(1474, 1476, 2), new Range16.ptr(1477, 1479, 2), new Range16.ptr(1552, 1562, 1), new Range16.ptr(1611, 1631, 1), new Range16.ptr(1648, 1750, 102), new Range16.ptr(1751, 1756, 1), new Range16.ptr(1759, 1764, 1), new Range16.ptr(1767, 1768, 1), new Range16.ptr(1770, 1773, 1), new Range16.ptr(1809, 1840, 31), new Range16.ptr(1841, 1866, 1), new Range16.ptr(1958, 1968, 1), new Range16.ptr(2027, 2035, 1), new Range16.ptr(2070, 2073, 1), new Range16.ptr(2075, 2083, 1), new Range16.ptr(2085, 2087, 1), new Range16.ptr(2089, 2093, 1), new Range16.ptr(2137, 2139, 1), new Range16.ptr(2275, 2307, 1), new Range16.ptr(2362, 2364, 1), new Range16.ptr(2366, 2383, 1), new Range16.ptr(2385, 2391, 1), new Range16.ptr(2402, 2403, 1), new Range16.ptr(2433, 2435, 1), new Range16.ptr(2492, 2494, 2), new Range16.ptr(2495, 2500, 1), new Range16.ptr(2503, 2504, 1), new Range16.ptr(2507, 2509, 1), new Range16.ptr(2519, 2530, 11), new Range16.ptr(2531, 2561, 30), new Range16.ptr(2562, 2563, 1), new Range16.ptr(2620, 2622, 2), new Range16.ptr(2623, 2626, 1), new Range16.ptr(2631, 2632, 1), new Range16.ptr(2635, 2637, 1), new Range16.ptr(2641, 2672, 31), new Range16.ptr(2673, 2677, 4), new Range16.ptr(2689, 2691, 1), new Range16.ptr(2748, 2750, 2), new Range16.ptr(2751, 2757, 1), new Range16.ptr(2759, 2761, 1), new Range16.ptr(2763, 2765, 1), new Range16.ptr(2786, 2787, 1), new Range16.ptr(2817, 2819, 1), new Range16.ptr(2876, 2878, 2), new Range16.ptr(2879, 2884, 1), new Range16.ptr(2887, 2888, 1), new Range16.ptr(2891, 2893, 1), new Range16.ptr(2902, 2903, 1), new Range16.ptr(2914, 2915, 1), new Range16.ptr(2946, 3006, 60), new Range16.ptr(3007, 3010, 1), new Range16.ptr(3014, 3016, 1), new Range16.ptr(3018, 3021, 1), new Range16.ptr(3031, 3072, 41), new Range16.ptr(3073, 3075, 1), new Range16.ptr(3134, 3140, 1), new Range16.ptr(3142, 3144, 1), new Range16.ptr(3146, 3149, 1), new Range16.ptr(3157, 3158, 1), new Range16.ptr(3170, 3171, 1), new Range16.ptr(3201, 3203, 1), new Range16.ptr(3260, 3262, 2), new Range16.ptr(3263, 3268, 1), new Range16.ptr(3270, 3272, 1), new Range16.ptr(3274, 3277, 1), new Range16.ptr(3285, 3286, 1), new Range16.ptr(3298, 3299, 1), new Range16.ptr(3329, 3331, 1), new Range16.ptr(3390, 3396, 1), new Range16.ptr(3398, 3400, 1), new Range16.ptr(3402, 3405, 1), new Range16.ptr(3415, 3426, 11), new Range16.ptr(3427, 3458, 31), new Range16.ptr(3459, 3530, 71), new Range16.ptr(3535, 3540, 1), new Range16.ptr(3542, 3544, 2), new Range16.ptr(3545, 3551, 1), new Range16.ptr(3570, 3571, 1), new Range16.ptr(3633, 3636, 3), new Range16.ptr(3637, 3642, 1), new Range16.ptr(3655, 3662, 1), new Range16.ptr(3761, 3764, 3), new Range16.ptr(3765, 3769, 1), new Range16.ptr(3771, 3772, 1), new Range16.ptr(3784, 3789, 1), new Range16.ptr(3864, 3865, 1), new Range16.ptr(3893, 3897, 2), new Range16.ptr(3902, 3903, 1), new Range16.ptr(3953, 3972, 1), new Range16.ptr(3974, 3975, 1), new Range16.ptr(3981, 3991, 1), new Range16.ptr(3993, 4028, 1), new Range16.ptr(4038, 4139, 101), new Range16.ptr(4140, 4158, 1), new Range16.ptr(4182, 4185, 1), new Range16.ptr(4190, 4192, 1), new Range16.ptr(4194, 4196, 1), new Range16.ptr(4199, 4205, 1), new Range16.ptr(4209, 4212, 1), new Range16.ptr(4226, 4237, 1), new Range16.ptr(4239, 4250, 11), new Range16.ptr(4251, 4253, 1), new Range16.ptr(4957, 4959, 1), new Range16.ptr(5906, 5908, 1), new Range16.ptr(5938, 5940, 1), new Range16.ptr(5970, 5971, 1), new Range16.ptr(6002, 6003, 1), new Range16.ptr(6068, 6099, 1), new Range16.ptr(6109, 6155, 46), new Range16.ptr(6156, 6157, 1), new Range16.ptr(6313, 6432, 119), new Range16.ptr(6433, 6443, 1), new Range16.ptr(6448, 6459, 1), new Range16.ptr(6679, 6683, 1), new Range16.ptr(6741, 6750, 1), new Range16.ptr(6752, 6780, 1), new Range16.ptr(6783, 6832, 49), new Range16.ptr(6833, 6846, 1), new Range16.ptr(6912, 6916, 1), new Range16.ptr(6964, 6980, 1), new Range16.ptr(7019, 7027, 1), new Range16.ptr(7040, 7042, 1), new Range16.ptr(7073, 7085, 1), new Range16.ptr(7142, 7155, 1), new Range16.ptr(7204, 7223, 1), new Range16.ptr(7376, 7378, 1), new Range16.ptr(7380, 7400, 1), new Range16.ptr(7405, 7410, 5), new Range16.ptr(7411, 7412, 1), new Range16.ptr(7416, 7417, 1), new Range16.ptr(7616, 7669, 1), new Range16.ptr(7676, 7679, 1), new Range16.ptr(8400, 8432, 1), new Range16.ptr(11503, 11505, 1), new Range16.ptr(11647, 11744, 97), new Range16.ptr(11745, 11775, 1), new Range16.ptr(12330, 12335, 1), new Range16.ptr(12441, 12442, 1), new Range16.ptr(42607, 42610, 1), new Range16.ptr(42612, 42621, 1), new Range16.ptr(42654, 42655, 1), new Range16.ptr(42736, 42737, 1), new Range16.ptr(43010, 43014, 4), new Range16.ptr(43019, 43043, 24), new Range16.ptr(43044, 43047, 1), new Range16.ptr(43136, 43137, 1), new Range16.ptr(43188, 43204, 1), new Range16.ptr(43232, 43249, 1), new Range16.ptr(43302, 43309, 1), new Range16.ptr(43335, 43347, 1), new Range16.ptr(43392, 43395, 1), new Range16.ptr(43443, 43456, 1), new Range16.ptr(43493, 43561, 68), new Range16.ptr(43562, 43574, 1), new Range16.ptr(43587, 43596, 9), new Range16.ptr(43597, 43643, 46), new Range16.ptr(43644, 43645, 1), new Range16.ptr(43696, 43698, 2), new Range16.ptr(43699, 43700, 1), new Range16.ptr(43703, 43704, 1), new Range16.ptr(43710, 43711, 1), new Range16.ptr(43713, 43755, 42), new Range16.ptr(43756, 43759, 1), new Range16.ptr(43765, 43766, 1), new Range16.ptr(44003, 44010, 1), new Range16.ptr(44012, 44013, 1), new Range16.ptr(64286, 65024, 738), new Range16.ptr(65025, 65039, 1), new Range16.ptr(65056, 65071, 1)]), new sliceType$1([new Range32.ptr(66045, 66272, 227), new Range32.ptr(66422, 66426, 1), new Range32.ptr(68097, 68099, 1), new Range32.ptr(68101, 68102, 1), new Range32.ptr(68108, 68111, 1), new Range32.ptr(68152, 68154, 1), new Range32.ptr(68159, 68325, 166), new Range32.ptr(68326, 69632, 1306), new Range32.ptr(69633, 69634, 1), new Range32.ptr(69688, 69702, 1), new Range32.ptr(69759, 69762, 1), new Range32.ptr(69808, 69818, 1), new Range32.ptr(69888, 69890, 1), new Range32.ptr(69927, 69940, 1), new Range32.ptr(70003, 70016, 13), new Range32.ptr(70017, 70018, 1), new Range32.ptr(70067, 70080, 1), new Range32.ptr(70090, 70092, 1), new Range32.ptr(70188, 70199, 1), new Range32.ptr(70367, 70378, 1), new Range32.ptr(70400, 70403, 1), new Range32.ptr(70460, 70462, 2), new Range32.ptr(70463, 70468, 1), new Range32.ptr(70471, 70472, 1), new Range32.ptr(70475, 70477, 1), new Range32.ptr(70487, 70498, 11), new Range32.ptr(70499, 70502, 3), new Range32.ptr(70503, 70508, 1), new Range32.ptr(70512, 70516, 1), new Range32.ptr(70832, 70851, 1), new Range32.ptr(71087, 71093, 1), new Range32.ptr(71096, 71104, 1), new Range32.ptr(71132, 71133, 1), new Range32.ptr(71216, 71232, 1), new Range32.ptr(71339, 71351, 1), new Range32.ptr(71453, 71467, 1), new Range32.ptr(92912, 92916, 1), new Range32.ptr(92976, 92982, 1), new Range32.ptr(94033, 94078, 1), new Range32.ptr(94095, 94098, 1), new Range32.ptr(113821, 113822, 1), new Range32.ptr(119141, 119145, 1), new Range32.ptr(119149, 119154, 1), new Range32.ptr(119163, 119170, 1), new Range32.ptr(119173, 119179, 1), new Range32.ptr(119210, 119213, 1), new Range32.ptr(119362, 119364, 1), new Range32.ptr(121344, 121398, 1), new Range32.ptr(121403, 121452, 1), new Range32.ptr(121461, 121476, 15), new Range32.ptr(121499, 121503, 1), new Range32.ptr(121505, 121519, 1), new Range32.ptr(125136, 125142, 1), new Range32.ptr(917760, 917999, 1)]), 0);
		_Mc = new RangeTable.ptr(new sliceType([new Range16.ptr(2307, 2363, 56), new Range16.ptr(2366, 2368, 1), new Range16.ptr(2377, 2380, 1), new Range16.ptr(2382, 2383, 1), new Range16.ptr(2434, 2435, 1), new Range16.ptr(2494, 2496, 1), new Range16.ptr(2503, 2504, 1), new Range16.ptr(2507, 2508, 1), new Range16.ptr(2519, 2563, 44), new Range16.ptr(2622, 2624, 1), new Range16.ptr(2691, 2750, 59), new Range16.ptr(2751, 2752, 1), new Range16.ptr(2761, 2763, 2), new Range16.ptr(2764, 2818, 54), new Range16.ptr(2819, 2878, 59), new Range16.ptr(2880, 2887, 7), new Range16.ptr(2888, 2891, 3), new Range16.ptr(2892, 2903, 11), new Range16.ptr(3006, 3007, 1), new Range16.ptr(3009, 3010, 1), new Range16.ptr(3014, 3016, 1), new Range16.ptr(3018, 3020, 1), new Range16.ptr(3031, 3073, 42), new Range16.ptr(3074, 3075, 1), new Range16.ptr(3137, 3140, 1), new Range16.ptr(3202, 3203, 1), new Range16.ptr(3262, 3264, 2), new Range16.ptr(3265, 3268, 1), new Range16.ptr(3271, 3272, 1), new Range16.ptr(3274, 3275, 1), new Range16.ptr(3285, 3286, 1), new Range16.ptr(3330, 3331, 1), new Range16.ptr(3390, 3392, 1), new Range16.ptr(3398, 3400, 1), new Range16.ptr(3402, 3404, 1), new Range16.ptr(3415, 3458, 43), new Range16.ptr(3459, 3535, 76), new Range16.ptr(3536, 3537, 1), new Range16.ptr(3544, 3551, 1), new Range16.ptr(3570, 3571, 1), new Range16.ptr(3902, 3903, 1), new Range16.ptr(3967, 4139, 172), new Range16.ptr(4140, 4145, 5), new Range16.ptr(4152, 4155, 3), new Range16.ptr(4156, 4182, 26), new Range16.ptr(4183, 4194, 11), new Range16.ptr(4195, 4196, 1), new Range16.ptr(4199, 4205, 1), new Range16.ptr(4227, 4228, 1), new Range16.ptr(4231, 4236, 1), new Range16.ptr(4239, 4250, 11), new Range16.ptr(4251, 4252, 1), new Range16.ptr(6070, 6078, 8), new Range16.ptr(6079, 6085, 1), new Range16.ptr(6087, 6088, 1), new Range16.ptr(6435, 6438, 1), new Range16.ptr(6441, 6443, 1), new Range16.ptr(6448, 6449, 1), new Range16.ptr(6451, 6456, 1), new Range16.ptr(6681, 6682, 1), new Range16.ptr(6741, 6743, 2), new Range16.ptr(6753, 6755, 2), new Range16.ptr(6756, 6765, 9), new Range16.ptr(6766, 6770, 1), new Range16.ptr(6916, 6965, 49), new Range16.ptr(6971, 6973, 2), new Range16.ptr(6974, 6977, 1), new Range16.ptr(6979, 6980, 1), new Range16.ptr(7042, 7073, 31), new Range16.ptr(7078, 7079, 1), new Range16.ptr(7082, 7143, 61), new Range16.ptr(7146, 7148, 1), new Range16.ptr(7150, 7154, 4), new Range16.ptr(7155, 7204, 49), new Range16.ptr(7205, 7211, 1), new Range16.ptr(7220, 7221, 1), new Range16.ptr(7393, 7410, 17), new Range16.ptr(7411, 12334, 4923), new Range16.ptr(12335, 43043, 30708), new Range16.ptr(43044, 43047, 3), new Range16.ptr(43136, 43137, 1), new Range16.ptr(43188, 43203, 1), new Range16.ptr(43346, 43347, 1), new Range16.ptr(43395, 43444, 49), new Range16.ptr(43445, 43450, 5), new Range16.ptr(43451, 43453, 2), new Range16.ptr(43454, 43456, 1), new Range16.ptr(43567, 43568, 1), new Range16.ptr(43571, 43572, 1), new Range16.ptr(43597, 43643, 46), new Range16.ptr(43645, 43755, 110), new Range16.ptr(43758, 43759, 1), new Range16.ptr(43765, 44003, 238), new Range16.ptr(44004, 44006, 2), new Range16.ptr(44007, 44009, 2), new Range16.ptr(44010, 44012, 2)]), new sliceType$1([new Range32.ptr(69632, 69634, 2), new Range32.ptr(69762, 69808, 46), new Range32.ptr(69809, 69810, 1), new Range32.ptr(69815, 69816, 1), new Range32.ptr(69932, 70018, 86), new Range32.ptr(70067, 70069, 1), new Range32.ptr(70079, 70080, 1), new Range32.ptr(70188, 70190, 1), new Range32.ptr(70194, 70195, 1), new Range32.ptr(70197, 70368, 171), new Range32.ptr(70369, 70370, 1), new Range32.ptr(70402, 70403, 1), new Range32.ptr(70462, 70463, 1), new Range32.ptr(70465, 70468, 1), new Range32.ptr(70471, 70472, 1), new Range32.ptr(70475, 70477, 1), new Range32.ptr(70487, 70498, 11), new Range32.ptr(70499, 70832, 333), new Range32.ptr(70833, 70834, 1), new Range32.ptr(70841, 70843, 2), new Range32.ptr(70844, 70846, 1), new Range32.ptr(70849, 71087, 238), new Range32.ptr(71088, 71089, 1), new Range32.ptr(71096, 71099, 1), new Range32.ptr(71102, 71216, 114), new Range32.ptr(71217, 71218, 1), new Range32.ptr(71227, 71228, 1), new Range32.ptr(71230, 71340, 110), new Range32.ptr(71342, 71343, 1), new Range32.ptr(71350, 71456, 106), new Range32.ptr(71457, 71462, 5), new Range32.ptr(94033, 94078, 1), new Range32.ptr(119141, 119142, 1), new Range32.ptr(119149, 119154, 1)]), 0);
		_Me = new RangeTable.ptr(new sliceType([new Range16.ptr(1160, 1161, 1), new Range16.ptr(6846, 8413, 1567), new Range16.ptr(8414, 8416, 1), new Range16.ptr(8418, 8420, 1), new Range16.ptr(42608, 42610, 1)]), sliceType$1.nil, 0);
		_Mn = new RangeTable.ptr(new sliceType([new Range16.ptr(768, 879, 1), new Range16.ptr(1155, 1159, 1), new Range16.ptr(1425, 1469, 1), new Range16.ptr(1471, 1473, 2), new Range16.ptr(1474, 1476, 2), new Range16.ptr(1477, 1479, 2), new Range16.ptr(1552, 1562, 1), new Range16.ptr(1611, 1631, 1), new Range16.ptr(1648, 1750, 102), new Range16.ptr(1751, 1756, 1), new Range16.ptr(1759, 1764, 1), new Range16.ptr(1767, 1768, 1), new Range16.ptr(1770, 1773, 1), new Range16.ptr(1809, 1840, 31), new Range16.ptr(1841, 1866, 1), new Range16.ptr(1958, 1968, 1), new Range16.ptr(2027, 2035, 1), new Range16.ptr(2070, 2073, 1), new Range16.ptr(2075, 2083, 1), new Range16.ptr(2085, 2087, 1), new Range16.ptr(2089, 2093, 1), new Range16.ptr(2137, 2139, 1), new Range16.ptr(2275, 2306, 1), new Range16.ptr(2362, 2364, 2), new Range16.ptr(2369, 2376, 1), new Range16.ptr(2381, 2385, 4), new Range16.ptr(2386, 2391, 1), new Range16.ptr(2402, 2403, 1), new Range16.ptr(2433, 2492, 59), new Range16.ptr(2497, 2500, 1), new Range16.ptr(2509, 2530, 21), new Range16.ptr(2531, 2561, 30), new Range16.ptr(2562, 2620, 58), new Range16.ptr(2625, 2626, 1), new Range16.ptr(2631, 2632, 1), new Range16.ptr(2635, 2637, 1), new Range16.ptr(2641, 2672, 31), new Range16.ptr(2673, 2677, 4), new Range16.ptr(2689, 2690, 1), new Range16.ptr(2748, 2753, 5), new Range16.ptr(2754, 2757, 1), new Range16.ptr(2759, 2760, 1), new Range16.ptr(2765, 2786, 21), new Range16.ptr(2787, 2817, 30), new Range16.ptr(2876, 2879, 3), new Range16.ptr(2881, 2884, 1), new Range16.ptr(2893, 2902, 9), new Range16.ptr(2914, 2915, 1), new Range16.ptr(2946, 3008, 62), new Range16.ptr(3021, 3072, 51), new Range16.ptr(3134, 3136, 1), new Range16.ptr(3142, 3144, 1), new Range16.ptr(3146, 3149, 1), new Range16.ptr(3157, 3158, 1), new Range16.ptr(3170, 3171, 1), new Range16.ptr(3201, 3260, 59), new Range16.ptr(3263, 3270, 7), new Range16.ptr(3276, 3277, 1), new Range16.ptr(3298, 3299, 1), new Range16.ptr(3329, 3393, 64), new Range16.ptr(3394, 3396, 1), new Range16.ptr(3405, 3426, 21), new Range16.ptr(3427, 3530, 103), new Range16.ptr(3538, 3540, 1), new Range16.ptr(3542, 3633, 91), new Range16.ptr(3636, 3642, 1), new Range16.ptr(3655, 3662, 1), new Range16.ptr(3761, 3764, 3), new Range16.ptr(3765, 3769, 1), new Range16.ptr(3771, 3772, 1), new Range16.ptr(3784, 3789, 1), new Range16.ptr(3864, 3865, 1), new Range16.ptr(3893, 3897, 2), new Range16.ptr(3953, 3966, 1), new Range16.ptr(3968, 3972, 1), new Range16.ptr(3974, 3975, 1), new Range16.ptr(3981, 3991, 1), new Range16.ptr(3993, 4028, 1), new Range16.ptr(4038, 4141, 103), new Range16.ptr(4142, 4144, 1), new Range16.ptr(4146, 4151, 1), new Range16.ptr(4153, 4154, 1), new Range16.ptr(4157, 4158, 1), new Range16.ptr(4184, 4185, 1), new Range16.ptr(4190, 4192, 1), new Range16.ptr(4209, 4212, 1), new Range16.ptr(4226, 4229, 3), new Range16.ptr(4230, 4237, 7), new Range16.ptr(4253, 4957, 704), new Range16.ptr(4958, 4959, 1), new Range16.ptr(5906, 5908, 1), new Range16.ptr(5938, 5940, 1), new Range16.ptr(5970, 5971, 1), new Range16.ptr(6002, 6003, 1), new Range16.ptr(6068, 6069, 1), new Range16.ptr(6071, 6077, 1), new Range16.ptr(6086, 6089, 3), new Range16.ptr(6090, 6099, 1), new Range16.ptr(6109, 6155, 46), new Range16.ptr(6156, 6157, 1), new Range16.ptr(6313, 6432, 119), new Range16.ptr(6433, 6434, 1), new Range16.ptr(6439, 6440, 1), new Range16.ptr(6450, 6457, 7), new Range16.ptr(6458, 6459, 1), new Range16.ptr(6679, 6680, 1), new Range16.ptr(6683, 6742, 59), new Range16.ptr(6744, 6750, 1), new Range16.ptr(6752, 6754, 2), new Range16.ptr(6757, 6764, 1), new Range16.ptr(6771, 6780, 1), new Range16.ptr(6783, 6832, 49), new Range16.ptr(6833, 6845, 1), new Range16.ptr(6912, 6915, 1), new Range16.ptr(6964, 6966, 2), new Range16.ptr(6967, 6970, 1), new Range16.ptr(6972, 6978, 6), new Range16.ptr(7019, 7027, 1), new Range16.ptr(7040, 7041, 1), new Range16.ptr(7074, 7077, 1), new Range16.ptr(7080, 7081, 1), new Range16.ptr(7083, 7085, 1), new Range16.ptr(7142, 7144, 2), new Range16.ptr(7145, 7149, 4), new Range16.ptr(7151, 7153, 1), new Range16.ptr(7212, 7219, 1), new Range16.ptr(7222, 7223, 1), new Range16.ptr(7376, 7378, 1), new Range16.ptr(7380, 7392, 1), new Range16.ptr(7394, 7400, 1), new Range16.ptr(7405, 7412, 7), new Range16.ptr(7416, 7417, 1), new Range16.ptr(7616, 7669, 1), new Range16.ptr(7676, 7679, 1), new Range16.ptr(8400, 8412, 1), new Range16.ptr(8417, 8421, 4), new Range16.ptr(8422, 8432, 1), new Range16.ptr(11503, 11505, 1), new Range16.ptr(11647, 11744, 97), new Range16.ptr(11745, 11775, 1), new Range16.ptr(12330, 12333, 1), new Range16.ptr(12441, 12442, 1), new Range16.ptr(42607, 42612, 5), new Range16.ptr(42613, 42621, 1), new Range16.ptr(42654, 42655, 1), new Range16.ptr(42736, 42737, 1), new Range16.ptr(43010, 43014, 4), new Range16.ptr(43019, 43045, 26), new Range16.ptr(43046, 43204, 158), new Range16.ptr(43232, 43249, 1), new Range16.ptr(43302, 43309, 1), new Range16.ptr(43335, 43345, 1), new Range16.ptr(43392, 43394, 1), new Range16.ptr(43443, 43446, 3), new Range16.ptr(43447, 43449, 1), new Range16.ptr(43452, 43493, 41), new Range16.ptr(43561, 43566, 1), new Range16.ptr(43569, 43570, 1), new Range16.ptr(43573, 43574, 1), new Range16.ptr(43587, 43596, 9), new Range16.ptr(43644, 43696, 52), new Range16.ptr(43698, 43700, 1), new Range16.ptr(43703, 43704, 1), new Range16.ptr(43710, 43711, 1), new Range16.ptr(43713, 43756, 43), new Range16.ptr(43757, 43766, 9), new Range16.ptr(44005, 44008, 3), new Range16.ptr(44013, 64286, 20273), new Range16.ptr(65024, 65039, 1), new Range16.ptr(65056, 65071, 1)]), new sliceType$1([new Range32.ptr(66045, 66272, 227), new Range32.ptr(66422, 66426, 1), new Range32.ptr(68097, 68099, 1), new Range32.ptr(68101, 68102, 1), new Range32.ptr(68108, 68111, 1), new Range32.ptr(68152, 68154, 1), new Range32.ptr(68159, 68325, 166), new Range32.ptr(68326, 69633, 1307), new Range32.ptr(69688, 69702, 1), new Range32.ptr(69759, 69761, 1), new Range32.ptr(69811, 69814, 1), new Range32.ptr(69817, 69818, 1), new Range32.ptr(69888, 69890, 1), new Range32.ptr(69927, 69931, 1), new Range32.ptr(69933, 69940, 1), new Range32.ptr(70003, 70016, 13), new Range32.ptr(70017, 70070, 53), new Range32.ptr(70071, 70078, 1), new Range32.ptr(70090, 70092, 1), new Range32.ptr(70191, 70193, 1), new Range32.ptr(70196, 70198, 2), new Range32.ptr(70199, 70367, 168), new Range32.ptr(70371, 70378, 1), new Range32.ptr(70400, 70401, 1), new Range32.ptr(70460, 70464, 4), new Range32.ptr(70502, 70508, 1), new Range32.ptr(70512, 70516, 1), new Range32.ptr(70835, 70840, 1), new Range32.ptr(70842, 70847, 5), new Range32.ptr(70848, 70850, 2), new Range32.ptr(70851, 71090, 239), new Range32.ptr(71091, 71093, 1), new Range32.ptr(71100, 71101, 1), new Range32.ptr(71103, 71104, 1), new Range32.ptr(71132, 71133, 1), new Range32.ptr(71219, 71226, 1), new Range32.ptr(71229, 71231, 2), new Range32.ptr(71232, 71339, 107), new Range32.ptr(71341, 71344, 3), new Range32.ptr(71345, 71349, 1), new Range32.ptr(71351, 71453, 102), new Range32.ptr(71454, 71455, 1), new Range32.ptr(71458, 71461, 1), new Range32.ptr(71463, 71467, 1), new Range32.ptr(92912, 92916, 1), new Range32.ptr(92976, 92982, 1), new Range32.ptr(94095, 94098, 1), new Range32.ptr(113821, 113822, 1), new Range32.ptr(119143, 119145, 1), new Range32.ptr(119163, 119170, 1), new Range32.ptr(119173, 119179, 1), new Range32.ptr(119210, 119213, 1), new Range32.ptr(119362, 119364, 1), new Range32.ptr(121344, 121398, 1), new Range32.ptr(121403, 121452, 1), new Range32.ptr(121461, 121476, 15), new Range32.ptr(121499, 121503, 1), new Range32.ptr(121505, 121519, 1), new Range32.ptr(125136, 125142, 1), new Range32.ptr(917760, 917999, 1)]), 0);
		_N = new RangeTable.ptr(new sliceType([new Range16.ptr(48, 57, 1), new Range16.ptr(178, 179, 1), new Range16.ptr(185, 188, 3), new Range16.ptr(189, 190, 1), new Range16.ptr(1632, 1641, 1), new Range16.ptr(1776, 1785, 1), new Range16.ptr(1984, 1993, 1), new Range16.ptr(2406, 2415, 1), new Range16.ptr(2534, 2543, 1), new Range16.ptr(2548, 2553, 1), new Range16.ptr(2662, 2671, 1), new Range16.ptr(2790, 2799, 1), new Range16.ptr(2918, 2927, 1), new Range16.ptr(2930, 2935, 1), new Range16.ptr(3046, 3058, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3192, 3198, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3430, 3445, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3664, 3673, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3872, 3891, 1), new Range16.ptr(4160, 4169, 1), new Range16.ptr(4240, 4249, 1), new Range16.ptr(4969, 4988, 1), new Range16.ptr(5870, 5872, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6128, 6137, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6470, 6479, 1), new Range16.ptr(6608, 6618, 1), new Range16.ptr(6784, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6992, 7001, 1), new Range16.ptr(7088, 7097, 1), new Range16.ptr(7232, 7241, 1), new Range16.ptr(7248, 7257, 1), new Range16.ptr(8304, 8308, 4), new Range16.ptr(8309, 8313, 1), new Range16.ptr(8320, 8329, 1), new Range16.ptr(8528, 8578, 1), new Range16.ptr(8581, 8585, 1), new Range16.ptr(9312, 9371, 1), new Range16.ptr(9450, 9471, 1), new Range16.ptr(10102, 10131, 1), new Range16.ptr(11517, 12295, 778), new Range16.ptr(12321, 12329, 1), new Range16.ptr(12344, 12346, 1), new Range16.ptr(12690, 12693, 1), new Range16.ptr(12832, 12841, 1), new Range16.ptr(12872, 12879, 1), new Range16.ptr(12881, 12895, 1), new Range16.ptr(12928, 12937, 1), new Range16.ptr(12977, 12991, 1), new Range16.ptr(42528, 42537, 1), new Range16.ptr(42726, 42735, 1), new Range16.ptr(43056, 43061, 1), new Range16.ptr(43216, 43225, 1), new Range16.ptr(43264, 43273, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43504, 43513, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(44016, 44025, 1), new Range16.ptr(65296, 65305, 1)]), new sliceType$1([new Range32.ptr(65799, 65843, 1), new Range32.ptr(65856, 65912, 1), new Range32.ptr(65930, 65931, 1), new Range32.ptr(66273, 66299, 1), new Range32.ptr(66336, 66339, 1), new Range32.ptr(66369, 66378, 9), new Range32.ptr(66513, 66517, 1), new Range32.ptr(66720, 66729, 1), new Range32.ptr(67672, 67679, 1), new Range32.ptr(67705, 67711, 1), new Range32.ptr(67751, 67759, 1), new Range32.ptr(67835, 67839, 1), new Range32.ptr(67862, 67867, 1), new Range32.ptr(68028, 68029, 1), new Range32.ptr(68032, 68047, 1), new Range32.ptr(68050, 68095, 1), new Range32.ptr(68160, 68167, 1), new Range32.ptr(68221, 68222, 1), new Range32.ptr(68253, 68255, 1), new Range32.ptr(68331, 68335, 1), new Range32.ptr(68440, 68447, 1), new Range32.ptr(68472, 68479, 1), new Range32.ptr(68521, 68527, 1), new Range32.ptr(68858, 68863, 1), new Range32.ptr(69216, 69246, 1), new Range32.ptr(69714, 69743, 1), new Range32.ptr(69872, 69881, 1), new Range32.ptr(69942, 69951, 1), new Range32.ptr(70096, 70105, 1), new Range32.ptr(70113, 70132, 1), new Range32.ptr(70384, 70393, 1), new Range32.ptr(70864, 70873, 1), new Range32.ptr(71248, 71257, 1), new Range32.ptr(71360, 71369, 1), new Range32.ptr(71472, 71483, 1), new Range32.ptr(71904, 71922, 1), new Range32.ptr(74752, 74862, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(93019, 93025, 1), new Range32.ptr(119648, 119665, 1), new Range32.ptr(120782, 120831, 1), new Range32.ptr(125127, 125135, 1), new Range32.ptr(127232, 127244, 1)]), 4);
		_Nd = new RangeTable.ptr(new sliceType([new Range16.ptr(48, 57, 1), new Range16.ptr(1632, 1641, 1), new Range16.ptr(1776, 1785, 1), new Range16.ptr(1984, 1993, 1), new Range16.ptr(2406, 2415, 1), new Range16.ptr(2534, 2543, 1), new Range16.ptr(2662, 2671, 1), new Range16.ptr(2790, 2799, 1), new Range16.ptr(2918, 2927, 1), new Range16.ptr(3046, 3055, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3430, 3439, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3664, 3673, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3872, 3881, 1), new Range16.ptr(4160, 4169, 1), new Range16.ptr(4240, 4249, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6470, 6479, 1), new Range16.ptr(6608, 6617, 1), new Range16.ptr(6784, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6992, 7001, 1), new Range16.ptr(7088, 7097, 1), new Range16.ptr(7232, 7241, 1), new Range16.ptr(7248, 7257, 1), new Range16.ptr(42528, 42537, 1), new Range16.ptr(43216, 43225, 1), new Range16.ptr(43264, 43273, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43504, 43513, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(44016, 44025, 1), new Range16.ptr(65296, 65305, 1)]), new sliceType$1([new Range32.ptr(66720, 66729, 1), new Range32.ptr(69734, 69743, 1), new Range32.ptr(69872, 69881, 1), new Range32.ptr(69942, 69951, 1), new Range32.ptr(70096, 70105, 1), new Range32.ptr(70384, 70393, 1), new Range32.ptr(70864, 70873, 1), new Range32.ptr(71248, 71257, 1), new Range32.ptr(71360, 71369, 1), new Range32.ptr(71472, 71481, 1), new Range32.ptr(71904, 71913, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(120782, 120831, 1)]), 1);
		_Nl = new RangeTable.ptr(new sliceType([new Range16.ptr(5870, 5872, 1), new Range16.ptr(8544, 8578, 1), new Range16.ptr(8581, 8584, 1), new Range16.ptr(12295, 12321, 26), new Range16.ptr(12322, 12329, 1), new Range16.ptr(12344, 12346, 1), new Range16.ptr(42726, 42735, 1)]), new sliceType$1([new Range32.ptr(65856, 65908, 1), new Range32.ptr(66369, 66378, 9), new Range32.ptr(66513, 66517, 1), new Range32.ptr(74752, 74862, 1)]), 0);
		_No = new RangeTable.ptr(new sliceType([new Range16.ptr(178, 179, 1), new Range16.ptr(185, 188, 3), new Range16.ptr(189, 190, 1), new Range16.ptr(2548, 2553, 1), new Range16.ptr(2930, 2935, 1), new Range16.ptr(3056, 3058, 1), new Range16.ptr(3192, 3198, 1), new Range16.ptr(3440, 3445, 1), new Range16.ptr(3882, 3891, 1), new Range16.ptr(4969, 4988, 1), new Range16.ptr(6128, 6137, 1), new Range16.ptr(6618, 8304, 1686), new Range16.ptr(8308, 8313, 1), new Range16.ptr(8320, 8329, 1), new Range16.ptr(8528, 8543, 1), new Range16.ptr(8585, 9312, 727), new Range16.ptr(9313, 9371, 1), new Range16.ptr(9450, 9471, 1), new Range16.ptr(10102, 10131, 1), new Range16.ptr(11517, 12690, 1173), new Range16.ptr(12691, 12693, 1), new Range16.ptr(12832, 12841, 1), new Range16.ptr(12872, 12879, 1), new Range16.ptr(12881, 12895, 1), new Range16.ptr(12928, 12937, 1), new Range16.ptr(12977, 12991, 1), new Range16.ptr(43056, 43061, 1)]), new sliceType$1([new Range32.ptr(65799, 65843, 1), new Range32.ptr(65909, 65912, 1), new Range32.ptr(65930, 65931, 1), new Range32.ptr(66273, 66299, 1), new Range32.ptr(66336, 66339, 1), new Range32.ptr(67672, 67679, 1), new Range32.ptr(67705, 67711, 1), new Range32.ptr(67751, 67759, 1), new Range32.ptr(67835, 67839, 1), new Range32.ptr(67862, 67867, 1), new Range32.ptr(68028, 68029, 1), new Range32.ptr(68032, 68047, 1), new Range32.ptr(68050, 68095, 1), new Range32.ptr(68160, 68167, 1), new Range32.ptr(68221, 68222, 1), new Range32.ptr(68253, 68255, 1), new Range32.ptr(68331, 68335, 1), new Range32.ptr(68440, 68447, 1), new Range32.ptr(68472, 68479, 1), new Range32.ptr(68521, 68527, 1), new Range32.ptr(68858, 68863, 1), new Range32.ptr(69216, 69246, 1), new Range32.ptr(69714, 69733, 1), new Range32.ptr(70113, 70132, 1), new Range32.ptr(71482, 71483, 1), new Range32.ptr(71914, 71922, 1), new Range32.ptr(93019, 93025, 1), new Range32.ptr(119648, 119665, 1), new Range32.ptr(125127, 125135, 1), new Range32.ptr(127232, 127244, 1)]), 3);
		_P = new RangeTable.ptr(new sliceType([new Range16.ptr(33, 35, 1), new Range16.ptr(37, 42, 1), new Range16.ptr(44, 47, 1), new Range16.ptr(58, 59, 1), new Range16.ptr(63, 64, 1), new Range16.ptr(91, 93, 1), new Range16.ptr(95, 123, 28), new Range16.ptr(125, 161, 36), new Range16.ptr(167, 171, 4), new Range16.ptr(182, 183, 1), new Range16.ptr(187, 191, 4), new Range16.ptr(894, 903, 9), new Range16.ptr(1370, 1375, 1), new Range16.ptr(1417, 1418, 1), new Range16.ptr(1470, 1472, 2), new Range16.ptr(1475, 1478, 3), new Range16.ptr(1523, 1524, 1), new Range16.ptr(1545, 1546, 1), new Range16.ptr(1548, 1549, 1), new Range16.ptr(1563, 1566, 3), new Range16.ptr(1567, 1642, 75), new Range16.ptr(1643, 1645, 1), new Range16.ptr(1748, 1792, 44), new Range16.ptr(1793, 1805, 1), new Range16.ptr(2039, 2041, 1), new Range16.ptr(2096, 2110, 1), new Range16.ptr(2142, 2404, 262), new Range16.ptr(2405, 2416, 11), new Range16.ptr(2800, 3572, 772), new Range16.ptr(3663, 3674, 11), new Range16.ptr(3675, 3844, 169), new Range16.ptr(3845, 3858, 1), new Range16.ptr(3860, 3898, 38), new Range16.ptr(3899, 3901, 1), new Range16.ptr(3973, 4048, 75), new Range16.ptr(4049, 4052, 1), new Range16.ptr(4057, 4058, 1), new Range16.ptr(4170, 4175, 1), new Range16.ptr(4347, 4960, 613), new Range16.ptr(4961, 4968, 1), new Range16.ptr(5120, 5741, 621), new Range16.ptr(5742, 5787, 45), new Range16.ptr(5788, 5867, 79), new Range16.ptr(5868, 5869, 1), new Range16.ptr(5941, 5942, 1), new Range16.ptr(6100, 6102, 1), new Range16.ptr(6104, 6106, 1), new Range16.ptr(6144, 6154, 1), new Range16.ptr(6468, 6469, 1), new Range16.ptr(6686, 6687, 1), new Range16.ptr(6816, 6822, 1), new Range16.ptr(6824, 6829, 1), new Range16.ptr(7002, 7008, 1), new Range16.ptr(7164, 7167, 1), new Range16.ptr(7227, 7231, 1), new Range16.ptr(7294, 7295, 1), new Range16.ptr(7360, 7367, 1), new Range16.ptr(7379, 8208, 829), new Range16.ptr(8209, 8231, 1), new Range16.ptr(8240, 8259, 1), new Range16.ptr(8261, 8273, 1), new Range16.ptr(8275, 8286, 1), new Range16.ptr(8317, 8318, 1), new Range16.ptr(8333, 8334, 1), new Range16.ptr(8968, 8971, 1), new Range16.ptr(9001, 9002, 1), new Range16.ptr(10088, 10101, 1), new Range16.ptr(10181, 10182, 1), new Range16.ptr(10214, 10223, 1), new Range16.ptr(10627, 10648, 1), new Range16.ptr(10712, 10715, 1), new Range16.ptr(10748, 10749, 1), new Range16.ptr(11513, 11516, 1), new Range16.ptr(11518, 11519, 1), new Range16.ptr(11632, 11776, 144), new Range16.ptr(11777, 11822, 1), new Range16.ptr(11824, 11842, 1), new Range16.ptr(12289, 12291, 1), new Range16.ptr(12296, 12305, 1), new Range16.ptr(12308, 12319, 1), new Range16.ptr(12336, 12349, 13), new Range16.ptr(12448, 12539, 91), new Range16.ptr(42238, 42239, 1), new Range16.ptr(42509, 42511, 1), new Range16.ptr(42611, 42622, 11), new Range16.ptr(42738, 42743, 1), new Range16.ptr(43124, 43127, 1), new Range16.ptr(43214, 43215, 1), new Range16.ptr(43256, 43258, 1), new Range16.ptr(43260, 43310, 50), new Range16.ptr(43311, 43359, 48), new Range16.ptr(43457, 43469, 1), new Range16.ptr(43486, 43487, 1), new Range16.ptr(43612, 43615, 1), new Range16.ptr(43742, 43743, 1), new Range16.ptr(43760, 43761, 1), new Range16.ptr(44011, 64830, 20819), new Range16.ptr(64831, 65040, 209), new Range16.ptr(65041, 65049, 1), new Range16.ptr(65072, 65106, 1), new Range16.ptr(65108, 65121, 1), new Range16.ptr(65123, 65128, 5), new Range16.ptr(65130, 65131, 1), new Range16.ptr(65281, 65283, 1), new Range16.ptr(65285, 65290, 1), new Range16.ptr(65292, 65295, 1), new Range16.ptr(65306, 65307, 1), new Range16.ptr(65311, 65312, 1), new Range16.ptr(65339, 65341, 1), new Range16.ptr(65343, 65371, 28), new Range16.ptr(65373, 65375, 2), new Range16.ptr(65376, 65381, 1)]), new sliceType$1([new Range32.ptr(65792, 65794, 1), new Range32.ptr(66463, 66512, 49), new Range32.ptr(66927, 67671, 744), new Range32.ptr(67871, 67903, 32), new Range32.ptr(68176, 68184, 1), new Range32.ptr(68223, 68336, 113), new Range32.ptr(68337, 68342, 1), new Range32.ptr(68409, 68415, 1), new Range32.ptr(68505, 68508, 1), new Range32.ptr(69703, 69709, 1), new Range32.ptr(69819, 69820, 1), new Range32.ptr(69822, 69825, 1), new Range32.ptr(69952, 69955, 1), new Range32.ptr(70004, 70005, 1), new Range32.ptr(70085, 70089, 1), new Range32.ptr(70093, 70107, 14), new Range32.ptr(70109, 70111, 1), new Range32.ptr(70200, 70205, 1), new Range32.ptr(70313, 70854, 541), new Range32.ptr(71105, 71127, 1), new Range32.ptr(71233, 71235, 1), new Range32.ptr(71484, 71486, 1), new Range32.ptr(74864, 74868, 1), new Range32.ptr(92782, 92783, 1), new Range32.ptr(92917, 92983, 66), new Range32.ptr(92984, 92987, 1), new Range32.ptr(92996, 113823, 20827), new Range32.ptr(121479, 121483, 1)]), 11);
		_Pc = new RangeTable.ptr(new sliceType([new Range16.ptr(95, 8255, 8160), new Range16.ptr(8256, 8276, 20), new Range16.ptr(65075, 65076, 1), new Range16.ptr(65101, 65103, 1), new Range16.ptr(65343, 65343, 1)]), sliceType$1.nil, 0);
		_Pd = new RangeTable.ptr(new sliceType([new Range16.ptr(45, 1418, 1373), new Range16.ptr(1470, 5120, 3650), new Range16.ptr(6150, 8208, 2058), new Range16.ptr(8209, 8213, 1), new Range16.ptr(11799, 11802, 3), new Range16.ptr(11834, 11835, 1), new Range16.ptr(11840, 12316, 476), new Range16.ptr(12336, 12448, 112), new Range16.ptr(65073, 65074, 1), new Range16.ptr(65112, 65123, 11), new Range16.ptr(65293, 65293, 1)]), sliceType$1.nil, 0);
		_Pe = new RangeTable.ptr(new sliceType([new Range16.ptr(41, 93, 52), new Range16.ptr(125, 3899, 3774), new Range16.ptr(3901, 5788, 1887), new Range16.ptr(8262, 8318, 56), new Range16.ptr(8334, 8969, 635), new Range16.ptr(8971, 9002, 31), new Range16.ptr(10089, 10101, 2), new Range16.ptr(10182, 10215, 33), new Range16.ptr(10217, 10223, 2), new Range16.ptr(10628, 10648, 2), new Range16.ptr(10713, 10715, 2), new Range16.ptr(10749, 11811, 1062), new Range16.ptr(11813, 11817, 2), new Range16.ptr(12297, 12305, 2), new Range16.ptr(12309, 12315, 2), new Range16.ptr(12318, 12319, 1), new Range16.ptr(64830, 65048, 218), new Range16.ptr(65078, 65092, 2), new Range16.ptr(65096, 65114, 18), new Range16.ptr(65116, 65118, 2), new Range16.ptr(65289, 65341, 52), new Range16.ptr(65373, 65379, 3)]), sliceType$1.nil, 1);
		_Pf = new RangeTable.ptr(new sliceType([new Range16.ptr(187, 8217, 8030), new Range16.ptr(8221, 8250, 29), new Range16.ptr(11779, 11781, 2), new Range16.ptr(11786, 11789, 3), new Range16.ptr(11805, 11809, 4)]), sliceType$1.nil, 0);
		_Pi = new RangeTable.ptr(new sliceType([new Range16.ptr(171, 8216, 8045), new Range16.ptr(8219, 8220, 1), new Range16.ptr(8223, 8249, 26), new Range16.ptr(11778, 11780, 2), new Range16.ptr(11785, 11788, 3), new Range16.ptr(11804, 11808, 4)]), sliceType$1.nil, 0);
		_Po = new RangeTable.ptr(new sliceType([new Range16.ptr(33, 35, 1), new Range16.ptr(37, 39, 1), new Range16.ptr(42, 46, 2), new Range16.ptr(47, 58, 11), new Range16.ptr(59, 63, 4), new Range16.ptr(64, 92, 28), new Range16.ptr(161, 167, 6), new Range16.ptr(182, 183, 1), new Range16.ptr(191, 894, 703), new Range16.ptr(903, 1370, 467), new Range16.ptr(1371, 1375, 1), new Range16.ptr(1417, 1472, 55), new Range16.ptr(1475, 1478, 3), new Range16.ptr(1523, 1524, 1), new Range16.ptr(1545, 1546, 1), new Range16.ptr(1548, 1549, 1), new Range16.ptr(1563, 1566, 3), new Range16.ptr(1567, 1642, 75), new Range16.ptr(1643, 1645, 1), new Range16.ptr(1748, 1792, 44), new Range16.ptr(1793, 1805, 1), new Range16.ptr(2039, 2041, 1), new Range16.ptr(2096, 2110, 1), new Range16.ptr(2142, 2404, 262), new Range16.ptr(2405, 2416, 11), new Range16.ptr(2800, 3572, 772), new Range16.ptr(3663, 3674, 11), new Range16.ptr(3675, 3844, 169), new Range16.ptr(3845, 3858, 1), new Range16.ptr(3860, 3973, 113), new Range16.ptr(4048, 4052, 1), new Range16.ptr(4057, 4058, 1), new Range16.ptr(4170, 4175, 1), new Range16.ptr(4347, 4960, 613), new Range16.ptr(4961, 4968, 1), new Range16.ptr(5741, 5742, 1), new Range16.ptr(5867, 5869, 1), new Range16.ptr(5941, 5942, 1), new Range16.ptr(6100, 6102, 1), new Range16.ptr(6104, 6106, 1), new Range16.ptr(6144, 6149, 1), new Range16.ptr(6151, 6154, 1), new Range16.ptr(6468, 6469, 1), new Range16.ptr(6686, 6687, 1), new Range16.ptr(6816, 6822, 1), new Range16.ptr(6824, 6829, 1), new Range16.ptr(7002, 7008, 1), new Range16.ptr(7164, 7167, 1), new Range16.ptr(7227, 7231, 1), new Range16.ptr(7294, 7295, 1), new Range16.ptr(7360, 7367, 1), new Range16.ptr(7379, 8214, 835), new Range16.ptr(8215, 8224, 9), new Range16.ptr(8225, 8231, 1), new Range16.ptr(8240, 8248, 1), new Range16.ptr(8251, 8254, 1), new Range16.ptr(8257, 8259, 1), new Range16.ptr(8263, 8273, 1), new Range16.ptr(8275, 8277, 2), new Range16.ptr(8278, 8286, 1), new Range16.ptr(11513, 11516, 1), new Range16.ptr(11518, 11519, 1), new Range16.ptr(11632, 11776, 144), new Range16.ptr(11777, 11782, 5), new Range16.ptr(11783, 11784, 1), new Range16.ptr(11787, 11790, 3), new Range16.ptr(11791, 11798, 1), new Range16.ptr(11800, 11801, 1), new Range16.ptr(11803, 11806, 3), new Range16.ptr(11807, 11818, 11), new Range16.ptr(11819, 11822, 1), new Range16.ptr(11824, 11833, 1), new Range16.ptr(11836, 11839, 1), new Range16.ptr(11841, 12289, 448), new Range16.ptr(12290, 12291, 1), new Range16.ptr(12349, 12539, 190), new Range16.ptr(42238, 42239, 1), new Range16.ptr(42509, 42511, 1), new Range16.ptr(42611, 42622, 11), new Range16.ptr(42738, 42743, 1), new Range16.ptr(43124, 43127, 1), new Range16.ptr(43214, 43215, 1), new Range16.ptr(43256, 43258, 1), new Range16.ptr(43260, 43310, 50), new Range16.ptr(43311, 43359, 48), new Range16.ptr(43457, 43469, 1), new Range16.ptr(43486, 43487, 1), new Range16.ptr(43612, 43615, 1), new Range16.ptr(43742, 43743, 1), new Range16.ptr(43760, 43761, 1), new Range16.ptr(44011, 65040, 21029), new Range16.ptr(65041, 65046, 1), new Range16.ptr(65049, 65072, 23), new Range16.ptr(65093, 65094, 1), new Range16.ptr(65097, 65100, 1), new Range16.ptr(65104, 65106, 1), new Range16.ptr(65108, 65111, 1), new Range16.ptr(65119, 65121, 1), new Range16.ptr(65128, 65130, 2), new Range16.ptr(65131, 65281, 150), new Range16.ptr(65282, 65283, 1), new Range16.ptr(65285, 65287, 1), new Range16.ptr(65290, 65294, 2), new Range16.ptr(65295, 65306, 11), new Range16.ptr(65307, 65311, 4), new Range16.ptr(65312, 65340, 28), new Range16.ptr(65377, 65380, 3), new Range16.ptr(65381, 65381, 1)]), new sliceType$1([new Range32.ptr(65792, 65792, 1), new Range32.ptr(65793, 65794, 1), new Range32.ptr(66463, 66512, 49), new Range32.ptr(66927, 67671, 744), new Range32.ptr(67871, 67903, 32), new Range32.ptr(68176, 68184, 1), new Range32.ptr(68223, 68336, 113), new Range32.ptr(68337, 68342, 1), new Range32.ptr(68409, 68415, 1), new Range32.ptr(68505, 68508, 1), new Range32.ptr(69703, 69709, 1), new Range32.ptr(69819, 69820, 1), new Range32.ptr(69822, 69825, 1), new Range32.ptr(69952, 69955, 1), new Range32.ptr(70004, 70005, 1), new Range32.ptr(70085, 70089, 1), new Range32.ptr(70093, 70107, 14), new Range32.ptr(70109, 70111, 1), new Range32.ptr(70200, 70205, 1), new Range32.ptr(70313, 70854, 541), new Range32.ptr(71105, 71127, 1), new Range32.ptr(71233, 71235, 1), new Range32.ptr(71484, 71486, 1), new Range32.ptr(74864, 74868, 1), new Range32.ptr(92782, 92783, 1), new Range32.ptr(92917, 92983, 66), new Range32.ptr(92984, 92987, 1), new Range32.ptr(92996, 113823, 20827), new Range32.ptr(121479, 121483, 1)]), 8);
		_Ps = new RangeTable.ptr(new sliceType([new Range16.ptr(40, 91, 51), new Range16.ptr(123, 3898, 3775), new Range16.ptr(3900, 5787, 1887), new Range16.ptr(8218, 8222, 4), new Range16.ptr(8261, 8317, 56), new Range16.ptr(8333, 8968, 635), new Range16.ptr(8970, 9001, 31), new Range16.ptr(10088, 10100, 2), new Range16.ptr(10181, 10214, 33), new Range16.ptr(10216, 10222, 2), new Range16.ptr(10627, 10647, 2), new Range16.ptr(10712, 10714, 2), new Range16.ptr(10748, 11810, 1062), new Range16.ptr(11812, 11816, 2), new Range16.ptr(11842, 12296, 454), new Range16.ptr(12298, 12304, 2), new Range16.ptr(12308, 12314, 2), new Range16.ptr(12317, 64831, 52514), new Range16.ptr(65047, 65077, 30), new Range16.ptr(65079, 65091, 2), new Range16.ptr(65095, 65113, 18), new Range16.ptr(65115, 65117, 2), new Range16.ptr(65288, 65339, 51), new Range16.ptr(65371, 65375, 4), new Range16.ptr(65378, 65378, 1)]), sliceType$1.nil, 1);
		_S = new RangeTable.ptr(new sliceType([new Range16.ptr(36, 43, 7), new Range16.ptr(60, 62, 1), new Range16.ptr(94, 96, 2), new Range16.ptr(124, 126, 2), new Range16.ptr(162, 166, 1), new Range16.ptr(168, 169, 1), new Range16.ptr(172, 174, 2), new Range16.ptr(175, 177, 1), new Range16.ptr(180, 184, 4), new Range16.ptr(215, 247, 32), new Range16.ptr(706, 709, 1), new Range16.ptr(722, 735, 1), new Range16.ptr(741, 747, 1), new Range16.ptr(749, 751, 2), new Range16.ptr(752, 767, 1), new Range16.ptr(885, 900, 15), new Range16.ptr(901, 1014, 113), new Range16.ptr(1154, 1421, 267), new Range16.ptr(1422, 1423, 1), new Range16.ptr(1542, 1544, 1), new Range16.ptr(1547, 1550, 3), new Range16.ptr(1551, 1758, 207), new Range16.ptr(1769, 1789, 20), new Range16.ptr(1790, 2038, 248), new Range16.ptr(2546, 2547, 1), new Range16.ptr(2554, 2555, 1), new Range16.ptr(2801, 2928, 127), new Range16.ptr(3059, 3066, 1), new Range16.ptr(3199, 3449, 250), new Range16.ptr(3647, 3841, 194), new Range16.ptr(3842, 3843, 1), new Range16.ptr(3859, 3861, 2), new Range16.ptr(3862, 3863, 1), new Range16.ptr(3866, 3871, 1), new Range16.ptr(3892, 3896, 2), new Range16.ptr(4030, 4037, 1), new Range16.ptr(4039, 4044, 1), new Range16.ptr(4046, 4047, 1), new Range16.ptr(4053, 4056, 1), new Range16.ptr(4254, 4255, 1), new Range16.ptr(5008, 5017, 1), new Range16.ptr(6107, 6464, 357), new Range16.ptr(6622, 6655, 1), new Range16.ptr(7009, 7018, 1), new Range16.ptr(7028, 7036, 1), new Range16.ptr(8125, 8127, 2), new Range16.ptr(8128, 8129, 1), new Range16.ptr(8141, 8143, 1), new Range16.ptr(8157, 8159, 1), new Range16.ptr(8173, 8175, 1), new Range16.ptr(8189, 8190, 1), new Range16.ptr(8260, 8274, 14), new Range16.ptr(8314, 8316, 1), new Range16.ptr(8330, 8332, 1), new Range16.ptr(8352, 8382, 1), new Range16.ptr(8448, 8449, 1), new Range16.ptr(8451, 8454, 1), new Range16.ptr(8456, 8457, 1), new Range16.ptr(8468, 8470, 2), new Range16.ptr(8471, 8472, 1), new Range16.ptr(8478, 8483, 1), new Range16.ptr(8485, 8489, 2), new Range16.ptr(8494, 8506, 12), new Range16.ptr(8507, 8512, 5), new Range16.ptr(8513, 8516, 1), new Range16.ptr(8522, 8525, 1), new Range16.ptr(8527, 8586, 59), new Range16.ptr(8587, 8592, 5), new Range16.ptr(8593, 8967, 1), new Range16.ptr(8972, 9000, 1), new Range16.ptr(9003, 9210, 1), new Range16.ptr(9216, 9254, 1), new Range16.ptr(9280, 9290, 1), new Range16.ptr(9372, 9449, 1), new Range16.ptr(9472, 10087, 1), new Range16.ptr(10132, 10180, 1), new Range16.ptr(10183, 10213, 1), new Range16.ptr(10224, 10626, 1), new Range16.ptr(10649, 10711, 1), new Range16.ptr(10716, 10747, 1), new Range16.ptr(10750, 11123, 1), new Range16.ptr(11126, 11157, 1), new Range16.ptr(11160, 11193, 1), new Range16.ptr(11197, 11208, 1), new Range16.ptr(11210, 11217, 1), new Range16.ptr(11244, 11247, 1), new Range16.ptr(11493, 11498, 1), new Range16.ptr(11904, 11929, 1), new Range16.ptr(11931, 12019, 1), new Range16.ptr(12032, 12245, 1), new Range16.ptr(12272, 12283, 1), new Range16.ptr(12292, 12306, 14), new Range16.ptr(12307, 12320, 13), new Range16.ptr(12342, 12343, 1), new Range16.ptr(12350, 12351, 1), new Range16.ptr(12443, 12444, 1), new Range16.ptr(12688, 12689, 1), new Range16.ptr(12694, 12703, 1), new Range16.ptr(12736, 12771, 1), new Range16.ptr(12800, 12830, 1), new Range16.ptr(12842, 12871, 1), new Range16.ptr(12880, 12896, 16), new Range16.ptr(12897, 12927, 1), new Range16.ptr(12938, 12976, 1), new Range16.ptr(12992, 13054, 1), new Range16.ptr(13056, 13311, 1), new Range16.ptr(19904, 19967, 1), new Range16.ptr(42128, 42182, 1), new Range16.ptr(42752, 42774, 1), new Range16.ptr(42784, 42785, 1), new Range16.ptr(42889, 42890, 1), new Range16.ptr(43048, 43051, 1), new Range16.ptr(43062, 43065, 1), new Range16.ptr(43639, 43641, 1), new Range16.ptr(43867, 64297, 20430), new Range16.ptr(64434, 64449, 1), new Range16.ptr(65020, 65021, 1), new Range16.ptr(65122, 65124, 2), new Range16.ptr(65125, 65126, 1), new Range16.ptr(65129, 65284, 155), new Range16.ptr(65291, 65308, 17), new Range16.ptr(65309, 65310, 1), new Range16.ptr(65342, 65344, 2), new Range16.ptr(65372, 65374, 2), new Range16.ptr(65504, 65510, 1), new Range16.ptr(65512, 65518, 1), new Range16.ptr(65532, 65533, 1)]), new sliceType$1([new Range32.ptr(65847, 65855, 1), new Range32.ptr(65913, 65929, 1), new Range32.ptr(65932, 65936, 4), new Range32.ptr(65937, 65947, 1), new Range32.ptr(65952, 66000, 48), new Range32.ptr(66001, 66044, 1), new Range32.ptr(67703, 67704, 1), new Range32.ptr(68296, 71487, 3191), new Range32.ptr(92988, 92991, 1), new Range32.ptr(92997, 113820, 20823), new Range32.ptr(118784, 119029, 1), new Range32.ptr(119040, 119078, 1), new Range32.ptr(119081, 119140, 1), new Range32.ptr(119146, 119148, 1), new Range32.ptr(119171, 119172, 1), new Range32.ptr(119180, 119209, 1), new Range32.ptr(119214, 119272, 1), new Range32.ptr(119296, 119361, 1), new Range32.ptr(119365, 119552, 187), new Range32.ptr(119553, 119638, 1), new Range32.ptr(120513, 120539, 26), new Range32.ptr(120571, 120597, 26), new Range32.ptr(120629, 120655, 26), new Range32.ptr(120687, 120713, 26), new Range32.ptr(120745, 120771, 26), new Range32.ptr(120832, 121343, 1), new Range32.ptr(121399, 121402, 1), new Range32.ptr(121453, 121460, 1), new Range32.ptr(121462, 121475, 1), new Range32.ptr(121477, 121478, 1), new Range32.ptr(126704, 126705, 1), new Range32.ptr(126976, 127019, 1), new Range32.ptr(127024, 127123, 1), new Range32.ptr(127136, 127150, 1), new Range32.ptr(127153, 127167, 1), new Range32.ptr(127169, 127183, 1), new Range32.ptr(127185, 127221, 1), new Range32.ptr(127248, 127278, 1), new Range32.ptr(127280, 127339, 1), new Range32.ptr(127344, 127386, 1), new Range32.ptr(127462, 127490, 1), new Range32.ptr(127504, 127546, 1), new Range32.ptr(127552, 127560, 1), new Range32.ptr(127568, 127569, 1), new Range32.ptr(127744, 128377, 1), new Range32.ptr(128379, 128419, 1), new Range32.ptr(128421, 128720, 1), new Range32.ptr(128736, 128748, 1), new Range32.ptr(128752, 128755, 1), new Range32.ptr(128768, 128883, 1), new Range32.ptr(128896, 128980, 1), new Range32.ptr(129024, 129035, 1), new Range32.ptr(129040, 129095, 1), new Range32.ptr(129104, 129113, 1), new Range32.ptr(129120, 129159, 1), new Range32.ptr(129168, 129197, 1), new Range32.ptr(129296, 129304, 1), new Range32.ptr(129408, 129412, 1), new Range32.ptr(129472, 129472, 1)]), 10);
		_Sc = new RangeTable.ptr(new sliceType([new Range16.ptr(36, 162, 126), new Range16.ptr(163, 165, 1), new Range16.ptr(1423, 1547, 124), new Range16.ptr(2546, 2547, 1), new Range16.ptr(2555, 2801, 246), new Range16.ptr(3065, 3647, 582), new Range16.ptr(6107, 8352, 2245), new Range16.ptr(8353, 8382, 1), new Range16.ptr(43064, 65020, 21956), new Range16.ptr(65129, 65284, 155), new Range16.ptr(65504, 65505, 1), new Range16.ptr(65509, 65510, 1)]), sliceType$1.nil, 2);
		_Sk = new RangeTable.ptr(new sliceType([new Range16.ptr(94, 96, 2), new Range16.ptr(168, 175, 7), new Range16.ptr(180, 184, 4), new Range16.ptr(706, 709, 1), new Range16.ptr(722, 735, 1), new Range16.ptr(741, 747, 1), new Range16.ptr(749, 751, 2), new Range16.ptr(752, 767, 1), new Range16.ptr(885, 900, 15), new Range16.ptr(901, 8125, 7224), new Range16.ptr(8127, 8129, 1), new Range16.ptr(8141, 8143, 1), new Range16.ptr(8157, 8159, 1), new Range16.ptr(8173, 8175, 1), new Range16.ptr(8189, 8190, 1), new Range16.ptr(12443, 12444, 1), new Range16.ptr(42752, 42774, 1), new Range16.ptr(42784, 42785, 1), new Range16.ptr(42889, 42890, 1), new Range16.ptr(43867, 64434, 20567), new Range16.ptr(64435, 64449, 1), new Range16.ptr(65342, 65344, 2), new Range16.ptr(65507, 65507, 1)]), new sliceType$1([new Range32.ptr(127995, 127995, 1), new Range32.ptr(127996, 127999, 1)]), 3);
		_Sm = new RangeTable.ptr(new sliceType([new Range16.ptr(43, 60, 17), new Range16.ptr(61, 62, 1), new Range16.ptr(124, 126, 2), new Range16.ptr(172, 177, 5), new Range16.ptr(215, 247, 32), new Range16.ptr(1014, 1542, 528), new Range16.ptr(1543, 1544, 1), new Range16.ptr(8260, 8274, 14), new Range16.ptr(8314, 8316, 1), new Range16.ptr(8330, 8332, 1), new Range16.ptr(8472, 8512, 40), new Range16.ptr(8513, 8516, 1), new Range16.ptr(8523, 8592, 69), new Range16.ptr(8593, 8596, 1), new Range16.ptr(8602, 8603, 1), new Range16.ptr(8608, 8614, 3), new Range16.ptr(8622, 8654, 32), new Range16.ptr(8655, 8658, 3), new Range16.ptr(8660, 8692, 32), new Range16.ptr(8693, 8959, 1), new Range16.ptr(8992, 8993, 1), new Range16.ptr(9084, 9115, 31), new Range16.ptr(9116, 9139, 1), new Range16.ptr(9180, 9185, 1), new Range16.ptr(9655, 9665, 10), new Range16.ptr(9720, 9727, 1), new Range16.ptr(9839, 10176, 337), new Range16.ptr(10177, 10180, 1), new Range16.ptr(10183, 10213, 1), new Range16.ptr(10224, 10239, 1), new Range16.ptr(10496, 10626, 1), new Range16.ptr(10649, 10711, 1), new Range16.ptr(10716, 10747, 1), new Range16.ptr(10750, 11007, 1), new Range16.ptr(11056, 11076, 1), new Range16.ptr(11079, 11084, 1), new Range16.ptr(64297, 65122, 825), new Range16.ptr(65124, 65126, 1), new Range16.ptr(65291, 65308, 17), new Range16.ptr(65309, 65310, 1), new Range16.ptr(65372, 65374, 2), new Range16.ptr(65506, 65513, 7), new Range16.ptr(65514, 65516, 1)]), new sliceType$1([new Range32.ptr(120513, 120539, 26), new Range32.ptr(120571, 120597, 26), new Range32.ptr(120629, 120655, 26), new Range32.ptr(120687, 120713, 26), new Range32.ptr(120745, 120771, 26), new Range32.ptr(126704, 126705, 1)]), 5);
		_So = new RangeTable.ptr(new sliceType([new Range16.ptr(166, 169, 3), new Range16.ptr(174, 176, 2), new Range16.ptr(1154, 1421, 267), new Range16.ptr(1422, 1550, 128), new Range16.ptr(1551, 1758, 207), new Range16.ptr(1769, 1789, 20), new Range16.ptr(1790, 2038, 248), new Range16.ptr(2554, 2928, 374), new Range16.ptr(3059, 3064, 1), new Range16.ptr(3066, 3199, 133), new Range16.ptr(3449, 3841, 392), new Range16.ptr(3842, 3843, 1), new Range16.ptr(3859, 3861, 2), new Range16.ptr(3862, 3863, 1), new Range16.ptr(3866, 3871, 1), new Range16.ptr(3892, 3896, 2), new Range16.ptr(4030, 4037, 1), new Range16.ptr(4039, 4044, 1), new Range16.ptr(4046, 4047, 1), new Range16.ptr(4053, 4056, 1), new Range16.ptr(4254, 4255, 1), new Range16.ptr(5008, 5017, 1), new Range16.ptr(6464, 6622, 158), new Range16.ptr(6623, 6655, 1), new Range16.ptr(7009, 7018, 1), new Range16.ptr(7028, 7036, 1), new Range16.ptr(8448, 8449, 1), new Range16.ptr(8451, 8454, 1), new Range16.ptr(8456, 8457, 1), new Range16.ptr(8468, 8470, 2), new Range16.ptr(8471, 8478, 7), new Range16.ptr(8479, 8483, 1), new Range16.ptr(8485, 8489, 2), new Range16.ptr(8494, 8506, 12), new Range16.ptr(8507, 8522, 15), new Range16.ptr(8524, 8525, 1), new Range16.ptr(8527, 8586, 59), new Range16.ptr(8587, 8597, 10), new Range16.ptr(8598, 8601, 1), new Range16.ptr(8604, 8607, 1), new Range16.ptr(8609, 8610, 1), new Range16.ptr(8612, 8613, 1), new Range16.ptr(8615, 8621, 1), new Range16.ptr(8623, 8653, 1), new Range16.ptr(8656, 8657, 1), new Range16.ptr(8659, 8661, 2), new Range16.ptr(8662, 8691, 1), new Range16.ptr(8960, 8967, 1), new Range16.ptr(8972, 8991, 1), new Range16.ptr(8994, 9000, 1), new Range16.ptr(9003, 9083, 1), new Range16.ptr(9085, 9114, 1), new Range16.ptr(9140, 9179, 1), new Range16.ptr(9186, 9210, 1), new Range16.ptr(9216, 9254, 1), new Range16.ptr(9280, 9290, 1), new Range16.ptr(9372, 9449, 1), new Range16.ptr(9472, 9654, 1), new Range16.ptr(9656, 9664, 1), new Range16.ptr(9666, 9719, 1), new Range16.ptr(9728, 9838, 1), new Range16.ptr(9840, 10087, 1), new Range16.ptr(10132, 10175, 1), new Range16.ptr(10240, 10495, 1), new Range16.ptr(11008, 11055, 1), new Range16.ptr(11077, 11078, 1), new Range16.ptr(11085, 11123, 1), new Range16.ptr(11126, 11157, 1), new Range16.ptr(11160, 11193, 1), new Range16.ptr(11197, 11208, 1), new Range16.ptr(11210, 11217, 1), new Range16.ptr(11244, 11247, 1), new Range16.ptr(11493, 11498, 1), new Range16.ptr(11904, 11929, 1), new Range16.ptr(11931, 12019, 1), new Range16.ptr(12032, 12245, 1), new Range16.ptr(12272, 12283, 1), new Range16.ptr(12292, 12306, 14), new Range16.ptr(12307, 12320, 13), new Range16.ptr(12342, 12343, 1), new Range16.ptr(12350, 12351, 1), new Range16.ptr(12688, 12689, 1), new Range16.ptr(12694, 12703, 1), new Range16.ptr(12736, 12771, 1), new Range16.ptr(12800, 12830, 1), new Range16.ptr(12842, 12871, 1), new Range16.ptr(12880, 12896, 16), new Range16.ptr(12897, 12927, 1), new Range16.ptr(12938, 12976, 1), new Range16.ptr(12992, 13054, 1), new Range16.ptr(13056, 13311, 1), new Range16.ptr(19904, 19967, 1), new Range16.ptr(42128, 42182, 1), new Range16.ptr(43048, 43051, 1), new Range16.ptr(43062, 43063, 1), new Range16.ptr(43065, 43639, 574), new Range16.ptr(43640, 43641, 1), new Range16.ptr(65021, 65508, 487), new Range16.ptr(65512, 65517, 5), new Range16.ptr(65518, 65532, 14), new Range16.ptr(65533, 65533, 1)]), new sliceType$1([new Range32.ptr(65847, 65847, 1), new Range32.ptr(65848, 65855, 1), new Range32.ptr(65913, 65929, 1), new Range32.ptr(65932, 65936, 4), new Range32.ptr(65937, 65947, 1), new Range32.ptr(65952, 66000, 48), new Range32.ptr(66001, 66044, 1), new Range32.ptr(67703, 67704, 1), new Range32.ptr(68296, 71487, 3191), new Range32.ptr(92988, 92991, 1), new Range32.ptr(92997, 113820, 20823), new Range32.ptr(118784, 119029, 1), new Range32.ptr(119040, 119078, 1), new Range32.ptr(119081, 119140, 1), new Range32.ptr(119146, 119148, 1), new Range32.ptr(119171, 119172, 1), new Range32.ptr(119180, 119209, 1), new Range32.ptr(119214, 119272, 1), new Range32.ptr(119296, 119361, 1), new Range32.ptr(119365, 119552, 187), new Range32.ptr(119553, 119638, 1), new Range32.ptr(120832, 121343, 1), new Range32.ptr(121399, 121402, 1), new Range32.ptr(121453, 121460, 1), new Range32.ptr(121462, 121475, 1), new Range32.ptr(121477, 121478, 1), new Range32.ptr(126976, 127019, 1), new Range32.ptr(127024, 127123, 1), new Range32.ptr(127136, 127150, 1), new Range32.ptr(127153, 127167, 1), new Range32.ptr(127169, 127183, 1), new Range32.ptr(127185, 127221, 1), new Range32.ptr(127248, 127278, 1), new Range32.ptr(127280, 127339, 1), new Range32.ptr(127344, 127386, 1), new Range32.ptr(127462, 127490, 1), new Range32.ptr(127504, 127546, 1), new Range32.ptr(127552, 127560, 1), new Range32.ptr(127568, 127569, 1), new Range32.ptr(127744, 127994, 1), new Range32.ptr(128000, 128377, 1), new Range32.ptr(128379, 128419, 1), new Range32.ptr(128421, 128720, 1), new Range32.ptr(128736, 128748, 1), new Range32.ptr(128752, 128755, 1), new Range32.ptr(128768, 128883, 1), new Range32.ptr(128896, 128980, 1), new Range32.ptr(129024, 129035, 1), new Range32.ptr(129040, 129095, 1), new Range32.ptr(129104, 129113, 1), new Range32.ptr(129120, 129159, 1), new Range32.ptr(129168, 129197, 1), new Range32.ptr(129296, 129304, 1), new Range32.ptr(129408, 129412, 1), new Range32.ptr(129472, 129472, 1)]), 2);
		_Z = new RangeTable.ptr(new sliceType([new Range16.ptr(32, 160, 128), new Range16.ptr(5760, 8192, 2432), new Range16.ptr(8193, 8202, 1), new Range16.ptr(8232, 8233, 1), new Range16.ptr(8239, 8287, 48), new Range16.ptr(12288, 12288, 1)]), sliceType$1.nil, 1);
		_Zl = new RangeTable.ptr(new sliceType([new Range16.ptr(8232, 8232, 1)]), sliceType$1.nil, 0);
		_Zp = new RangeTable.ptr(new sliceType([new Range16.ptr(8233, 8233, 1)]), sliceType$1.nil, 0);
		_Zs = new RangeTable.ptr(new sliceType([new Range16.ptr(32, 160, 128), new Range16.ptr(5760, 8192, 2432), new Range16.ptr(8193, 8202, 1), new Range16.ptr(8239, 8287, 48), new Range16.ptr(12288, 12288, 1)]), sliceType$1.nil, 1);
		$pkg.Cc = _Cc;
		$pkg.Cf = _Cf;
		$pkg.Co = _Co;
		$pkg.Cs = _Cs;
		$pkg.Digit = _Nd;
		$pkg.Nd = _Nd;
		$pkg.Letter = _L;
		$pkg.L = _L;
		$pkg.Lm = _Lm;
		$pkg.Lo = _Lo;
		$pkg.Ll = _Ll;
		$pkg.M = _M;
		$pkg.Mc = _Mc;
		$pkg.Me = _Me;
		$pkg.Mn = _Mn;
		$pkg.Nl = _Nl;
		$pkg.No = _No;
		$pkg.N = _N;
		$pkg.C = _C;
		$pkg.Pc = _Pc;
		$pkg.Pd = _Pd;
		$pkg.Pe = _Pe;
		$pkg.Pf = _Pf;
		$pkg.Pi = _Pi;
		$pkg.Po = _Po;
		$pkg.Ps = _Ps;
		$pkg.P = _P;
		$pkg.Sc = _Sc;
		$pkg.Sk = _Sk;
		$pkg.Sm = _Sm;
		$pkg.So = _So;
		$pkg.Z = _Z;
		$pkg.S = _S;
		$pkg.PrintRanges = new sliceType$2([$pkg.L, $pkg.M, $pkg.N, $pkg.P, $pkg.S]);
		$pkg.Lt = _Lt;
		$pkg.Upper = _Lu;
		$pkg.Lu = _Lu;
		$pkg.Zl = _Zl;
		$pkg.Zp = _Zp;
		$pkg.Zs = _Zs;
		$pkg.Categories = $makeMap($String.keyFor, [{ k: "C", v: $pkg.C }, { k: "Cc", v: $pkg.Cc }, { k: "Cf", v: $pkg.Cf }, { k: "Co", v: $pkg.Co }, { k: "Cs", v: $pkg.Cs }, { k: "L", v: $pkg.L }, { k: "Ll", v: $pkg.Ll }, { k: "Lm", v: $pkg.Lm }, { k: "Lo", v: $pkg.Lo }, { k: "Lt", v: $pkg.Lt }, { k: "Lu", v: $pkg.Lu }, { k: "M", v: $pkg.M }, { k: "Mc", v: $pkg.Mc }, { k: "Me", v: $pkg.Me }, { k: "Mn", v: $pkg.Mn }, { k: "N", v: $pkg.N }, { k: "Nd", v: $pkg.Nd }, { k: "Nl", v: $pkg.Nl }, { k: "No", v: $pkg.No }, { k: "P", v: $pkg.P }, { k: "Pc", v: $pkg.Pc }, { k: "Pd", v: $pkg.Pd }, { k: "Pe", v: $pkg.Pe }, { k: "Pf", v: $pkg.Pf }, { k: "Pi", v: $pkg.Pi }, { k: "Po", v: $pkg.Po }, { k: "Ps", v: $pkg.Ps }, { k: "S", v: $pkg.S }, { k: "Sc", v: $pkg.Sc }, { k: "Sk", v: $pkg.Sk }, { k: "Sm", v: $pkg.Sm }, { k: "So", v: $pkg.So }, { k: "Z", v: $pkg.Z }, { k: "Zl", v: $pkg.Zl }, { k: "Zp", v: $pkg.Zp }, { k: "Zs", v: $pkg.Zs }]);
		_Ahom = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(71424, 71449, 1), new Range32.ptr(71453, 71467, 1), new Range32.ptr(71472, 71487, 1)]), 0);
		_Anatolian_Hieroglyphs = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(82944, 83526, 1)]), 0);
		_Arabic = new RangeTable.ptr(new sliceType([new Range16.ptr(1536, 1540, 1), new Range16.ptr(1542, 1547, 1), new Range16.ptr(1549, 1562, 1), new Range16.ptr(1566, 1566, 1), new Range16.ptr(1568, 1599, 1), new Range16.ptr(1601, 1610, 1), new Range16.ptr(1622, 1647, 1), new Range16.ptr(1649, 1756, 1), new Range16.ptr(1758, 1791, 1), new Range16.ptr(1872, 1919, 1), new Range16.ptr(2208, 2228, 1), new Range16.ptr(2275, 2303, 1), new Range16.ptr(64336, 64449, 1), new Range16.ptr(64467, 64829, 1), new Range16.ptr(64848, 64911, 1), new Range16.ptr(64914, 64967, 1), new Range16.ptr(65008, 65021, 1), new Range16.ptr(65136, 65140, 1), new Range16.ptr(65142, 65276, 1)]), new sliceType$1([new Range32.ptr(69216, 69246, 1), new Range32.ptr(126464, 126467, 1), new Range32.ptr(126469, 126495, 1), new Range32.ptr(126497, 126498, 1), new Range32.ptr(126500, 126500, 1), new Range32.ptr(126503, 126503, 1), new Range32.ptr(126505, 126514, 1), new Range32.ptr(126516, 126519, 1), new Range32.ptr(126521, 126521, 1), new Range32.ptr(126523, 126523, 1), new Range32.ptr(126530, 126530, 1), new Range32.ptr(126535, 126535, 1), new Range32.ptr(126537, 126537, 1), new Range32.ptr(126539, 126539, 1), new Range32.ptr(126541, 126543, 1), new Range32.ptr(126545, 126546, 1), new Range32.ptr(126548, 126548, 1), new Range32.ptr(126551, 126551, 1), new Range32.ptr(126553, 126553, 1), new Range32.ptr(126555, 126555, 1), new Range32.ptr(126557, 126557, 1), new Range32.ptr(126559, 126559, 1), new Range32.ptr(126561, 126562, 1), new Range32.ptr(126564, 126564, 1), new Range32.ptr(126567, 126570, 1), new Range32.ptr(126572, 126578, 1), new Range32.ptr(126580, 126583, 1), new Range32.ptr(126585, 126588, 1), new Range32.ptr(126590, 126590, 1), new Range32.ptr(126592, 126601, 1), new Range32.ptr(126603, 126619, 1), new Range32.ptr(126625, 126627, 1), new Range32.ptr(126629, 126633, 1), new Range32.ptr(126635, 126651, 1), new Range32.ptr(126704, 126705, 1)]), 0);
		_Armenian = new RangeTable.ptr(new sliceType([new Range16.ptr(1329, 1366, 1), new Range16.ptr(1369, 1375, 1), new Range16.ptr(1377, 1415, 1), new Range16.ptr(1418, 1418, 1), new Range16.ptr(1421, 1423, 1), new Range16.ptr(64275, 64279, 1)]), sliceType$1.nil, 0);
		_Avestan = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68352, 68405, 1), new Range32.ptr(68409, 68415, 1)]), 0);
		_Balinese = new RangeTable.ptr(new sliceType([new Range16.ptr(6912, 6987, 1), new Range16.ptr(6992, 7036, 1)]), sliceType$1.nil, 0);
		_Bamum = new RangeTable.ptr(new sliceType([new Range16.ptr(42656, 42743, 1)]), new sliceType$1([new Range32.ptr(92160, 92728, 1)]), 0);
		_Bassa_Vah = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(92880, 92909, 1), new Range32.ptr(92912, 92917, 1)]), 0);
		_Batak = new RangeTable.ptr(new sliceType([new Range16.ptr(7104, 7155, 1), new Range16.ptr(7164, 7167, 1)]), sliceType$1.nil, 0);
		_Bengali = new RangeTable.ptr(new sliceType([new Range16.ptr(2432, 2435, 1), new Range16.ptr(2437, 2444, 1), new Range16.ptr(2447, 2448, 1), new Range16.ptr(2451, 2472, 1), new Range16.ptr(2474, 2480, 1), new Range16.ptr(2482, 2482, 1), new Range16.ptr(2486, 2489, 1), new Range16.ptr(2492, 2500, 1), new Range16.ptr(2503, 2504, 1), new Range16.ptr(2507, 2510, 1), new Range16.ptr(2519, 2519, 1), new Range16.ptr(2524, 2525, 1), new Range16.ptr(2527, 2531, 1), new Range16.ptr(2534, 2555, 1)]), sliceType$1.nil, 0);
		_Bopomofo = new RangeTable.ptr(new sliceType([new Range16.ptr(746, 747, 1), new Range16.ptr(12549, 12589, 1), new Range16.ptr(12704, 12730, 1)]), sliceType$1.nil, 0);
		_Brahmi = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(69632, 69709, 1), new Range32.ptr(69714, 69743, 1), new Range32.ptr(69759, 69759, 1)]), 0);
		_Braille = new RangeTable.ptr(new sliceType([new Range16.ptr(10240, 10495, 1)]), sliceType$1.nil, 0);
		_Buginese = new RangeTable.ptr(new sliceType([new Range16.ptr(6656, 6683, 1), new Range16.ptr(6686, 6687, 1)]), sliceType$1.nil, 0);
		_Buhid = new RangeTable.ptr(new sliceType([new Range16.ptr(5952, 5971, 1)]), sliceType$1.nil, 0);
		_Canadian_Aboriginal = new RangeTable.ptr(new sliceType([new Range16.ptr(5120, 5759, 1), new Range16.ptr(6320, 6389, 1)]), sliceType$1.nil, 0);
		_Carian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66208, 66256, 1)]), 0);
		_Caucasian_Albanian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66864, 66915, 1), new Range32.ptr(66927, 66927, 1)]), 0);
		_Chakma = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(69888, 69940, 1), new Range32.ptr(69942, 69955, 1)]), 0);
		_Cham = new RangeTable.ptr(new sliceType([new Range16.ptr(43520, 43574, 1), new Range16.ptr(43584, 43597, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(43612, 43615, 1)]), sliceType$1.nil, 0);
		_Cherokee = new RangeTable.ptr(new sliceType([new Range16.ptr(5024, 5109, 1), new Range16.ptr(5112, 5117, 1), new Range16.ptr(43888, 43967, 1)]), sliceType$1.nil, 0);
		_Common = new RangeTable.ptr(new sliceType([new Range16.ptr(0, 64, 1), new Range16.ptr(91, 96, 1), new Range16.ptr(123, 169, 1), new Range16.ptr(171, 185, 1), new Range16.ptr(187, 191, 1), new Range16.ptr(215, 215, 1), new Range16.ptr(247, 247, 1), new Range16.ptr(697, 735, 1), new Range16.ptr(741, 745, 1), new Range16.ptr(748, 767, 1), new Range16.ptr(884, 884, 1), new Range16.ptr(894, 894, 1), new Range16.ptr(901, 901, 1), new Range16.ptr(903, 903, 1), new Range16.ptr(1417, 1417, 1), new Range16.ptr(1541, 1541, 1), new Range16.ptr(1548, 1548, 1), new Range16.ptr(1563, 1564, 1), new Range16.ptr(1567, 1567, 1), new Range16.ptr(1600, 1600, 1), new Range16.ptr(1757, 1757, 1), new Range16.ptr(2404, 2405, 1), new Range16.ptr(3647, 3647, 1), new Range16.ptr(4053, 4056, 1), new Range16.ptr(4347, 4347, 1), new Range16.ptr(5867, 5869, 1), new Range16.ptr(5941, 5942, 1), new Range16.ptr(6146, 6147, 1), new Range16.ptr(6149, 6149, 1), new Range16.ptr(7379, 7379, 1), new Range16.ptr(7393, 7393, 1), new Range16.ptr(7401, 7404, 1), new Range16.ptr(7406, 7411, 1), new Range16.ptr(7413, 7414, 1), new Range16.ptr(8192, 8203, 1), new Range16.ptr(8206, 8292, 1), new Range16.ptr(8294, 8304, 1), new Range16.ptr(8308, 8318, 1), new Range16.ptr(8320, 8334, 1), new Range16.ptr(8352, 8382, 1), new Range16.ptr(8448, 8485, 1), new Range16.ptr(8487, 8489, 1), new Range16.ptr(8492, 8497, 1), new Range16.ptr(8499, 8525, 1), new Range16.ptr(8527, 8543, 1), new Range16.ptr(8585, 8587, 1), new Range16.ptr(8592, 9210, 1), new Range16.ptr(9216, 9254, 1), new Range16.ptr(9280, 9290, 1), new Range16.ptr(9312, 10239, 1), new Range16.ptr(10496, 11123, 1), new Range16.ptr(11126, 11157, 1), new Range16.ptr(11160, 11193, 1), new Range16.ptr(11197, 11208, 1), new Range16.ptr(11210, 11217, 1), new Range16.ptr(11244, 11247, 1), new Range16.ptr(11776, 11842, 1), new Range16.ptr(12272, 12283, 1), new Range16.ptr(12288, 12292, 1), new Range16.ptr(12294, 12294, 1), new Range16.ptr(12296, 12320, 1), new Range16.ptr(12336, 12343, 1), new Range16.ptr(12348, 12351, 1), new Range16.ptr(12443, 12444, 1), new Range16.ptr(12448, 12448, 1), new Range16.ptr(12539, 12540, 1), new Range16.ptr(12688, 12703, 1), new Range16.ptr(12736, 12771, 1), new Range16.ptr(12832, 12895, 1), new Range16.ptr(12927, 13007, 1), new Range16.ptr(13144, 13311, 1), new Range16.ptr(19904, 19967, 1), new Range16.ptr(42752, 42785, 1), new Range16.ptr(42888, 42890, 1), new Range16.ptr(43056, 43065, 1), new Range16.ptr(43310, 43310, 1), new Range16.ptr(43471, 43471, 1), new Range16.ptr(43867, 43867, 1), new Range16.ptr(64830, 64831, 1), new Range16.ptr(65040, 65049, 1), new Range16.ptr(65072, 65106, 1), new Range16.ptr(65108, 65126, 1), new Range16.ptr(65128, 65131, 1), new Range16.ptr(65279, 65279, 1), new Range16.ptr(65281, 65312, 1), new Range16.ptr(65339, 65344, 1), new Range16.ptr(65371, 65381, 1), new Range16.ptr(65392, 65392, 1), new Range16.ptr(65438, 65439, 1), new Range16.ptr(65504, 65510, 1), new Range16.ptr(65512, 65518, 1), new Range16.ptr(65529, 65533, 1)]), new sliceType$1([new Range32.ptr(65792, 65794, 1), new Range32.ptr(65799, 65843, 1), new Range32.ptr(65847, 65855, 1), new Range32.ptr(65936, 65947, 1), new Range32.ptr(66000, 66044, 1), new Range32.ptr(66273, 66299, 1), new Range32.ptr(113824, 113827, 1), new Range32.ptr(118784, 119029, 1), new Range32.ptr(119040, 119078, 1), new Range32.ptr(119081, 119142, 1), new Range32.ptr(119146, 119162, 1), new Range32.ptr(119171, 119172, 1), new Range32.ptr(119180, 119209, 1), new Range32.ptr(119214, 119272, 1), new Range32.ptr(119552, 119638, 1), new Range32.ptr(119648, 119665, 1), new Range32.ptr(119808, 119892, 1), new Range32.ptr(119894, 119964, 1), new Range32.ptr(119966, 119967, 1), new Range32.ptr(119970, 119970, 1), new Range32.ptr(119973, 119974, 1), new Range32.ptr(119977, 119980, 1), new Range32.ptr(119982, 119993, 1), new Range32.ptr(119995, 119995, 1), new Range32.ptr(119997, 120003, 1), new Range32.ptr(120005, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120094, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120134, 1), new Range32.ptr(120138, 120144, 1), new Range32.ptr(120146, 120485, 1), new Range32.ptr(120488, 120779, 1), new Range32.ptr(120782, 120831, 1), new Range32.ptr(126976, 127019, 1), new Range32.ptr(127024, 127123, 1), new Range32.ptr(127136, 127150, 1), new Range32.ptr(127153, 127167, 1), new Range32.ptr(127169, 127183, 1), new Range32.ptr(127185, 127221, 1), new Range32.ptr(127232, 127244, 1), new Range32.ptr(127248, 127278, 1), new Range32.ptr(127280, 127339, 1), new Range32.ptr(127344, 127386, 1), new Range32.ptr(127462, 127487, 1), new Range32.ptr(127489, 127490, 1), new Range32.ptr(127504, 127546, 1), new Range32.ptr(127552, 127560, 1), new Range32.ptr(127568, 127569, 1), new Range32.ptr(127744, 128377, 1), new Range32.ptr(128379, 128419, 1), new Range32.ptr(128421, 128720, 1), new Range32.ptr(128736, 128748, 1), new Range32.ptr(128752, 128755, 1), new Range32.ptr(128768, 128883, 1), new Range32.ptr(128896, 128980, 1), new Range32.ptr(129024, 129035, 1), new Range32.ptr(129040, 129095, 1), new Range32.ptr(129104, 129113, 1), new Range32.ptr(129120, 129159, 1), new Range32.ptr(129168, 129197, 1), new Range32.ptr(129296, 129304, 1), new Range32.ptr(129408, 129412, 1), new Range32.ptr(129472, 129472, 1), new Range32.ptr(917505, 917505, 1), new Range32.ptr(917536, 917631, 1)]), 7);
		_Coptic = new RangeTable.ptr(new sliceType([new Range16.ptr(994, 1007, 1), new Range16.ptr(11392, 11507, 1), new Range16.ptr(11513, 11519, 1)]), sliceType$1.nil, 0);
		_Cuneiform = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(73728, 74649, 1), new Range32.ptr(74752, 74862, 1), new Range32.ptr(74864, 74868, 1), new Range32.ptr(74880, 75075, 1)]), 0);
		_Cypriot = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(67584, 67589, 1), new Range32.ptr(67592, 67592, 1), new Range32.ptr(67594, 67637, 1), new Range32.ptr(67639, 67640, 1), new Range32.ptr(67644, 67644, 1), new Range32.ptr(67647, 67647, 1)]), 0);
		_Cyrillic = new RangeTable.ptr(new sliceType([new Range16.ptr(1024, 1156, 1), new Range16.ptr(1159, 1327, 1), new Range16.ptr(7467, 7467, 1), new Range16.ptr(7544, 7544, 1), new Range16.ptr(11744, 11775, 1), new Range16.ptr(42560, 42655, 1), new Range16.ptr(65070, 65071, 1)]), sliceType$1.nil, 0);
		_Deseret = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66560, 66639, 1)]), 0);
		_Devanagari = new RangeTable.ptr(new sliceType([new Range16.ptr(2304, 2384, 1), new Range16.ptr(2387, 2403, 1), new Range16.ptr(2406, 2431, 1), new Range16.ptr(43232, 43261, 1)]), sliceType$1.nil, 0);
		_Duployan = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(113664, 113770, 1), new Range32.ptr(113776, 113788, 1), new Range32.ptr(113792, 113800, 1), new Range32.ptr(113808, 113817, 1), new Range32.ptr(113820, 113823, 1)]), 0);
		_Egyptian_Hieroglyphs = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(77824, 78894, 1)]), 0);
		_Elbasan = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66816, 66855, 1)]), 0);
		_Ethiopic = new RangeTable.ptr(new sliceType([new Range16.ptr(4608, 4680, 1), new Range16.ptr(4682, 4685, 1), new Range16.ptr(4688, 4694, 1), new Range16.ptr(4696, 4696, 1), new Range16.ptr(4698, 4701, 1), new Range16.ptr(4704, 4744, 1), new Range16.ptr(4746, 4749, 1), new Range16.ptr(4752, 4784, 1), new Range16.ptr(4786, 4789, 1), new Range16.ptr(4792, 4798, 1), new Range16.ptr(4800, 4800, 1), new Range16.ptr(4802, 4805, 1), new Range16.ptr(4808, 4822, 1), new Range16.ptr(4824, 4880, 1), new Range16.ptr(4882, 4885, 1), new Range16.ptr(4888, 4954, 1), new Range16.ptr(4957, 4988, 1), new Range16.ptr(4992, 5017, 1), new Range16.ptr(11648, 11670, 1), new Range16.ptr(11680, 11686, 1), new Range16.ptr(11688, 11694, 1), new Range16.ptr(11696, 11702, 1), new Range16.ptr(11704, 11710, 1), new Range16.ptr(11712, 11718, 1), new Range16.ptr(11720, 11726, 1), new Range16.ptr(11728, 11734, 1), new Range16.ptr(11736, 11742, 1), new Range16.ptr(43777, 43782, 1), new Range16.ptr(43785, 43790, 1), new Range16.ptr(43793, 43798, 1), new Range16.ptr(43808, 43814, 1), new Range16.ptr(43816, 43822, 1)]), sliceType$1.nil, 0);
		_Georgian = new RangeTable.ptr(new sliceType([new Range16.ptr(4256, 4293, 1), new Range16.ptr(4295, 4295, 1), new Range16.ptr(4301, 4301, 1), new Range16.ptr(4304, 4346, 1), new Range16.ptr(4348, 4351, 1), new Range16.ptr(11520, 11557, 1), new Range16.ptr(11559, 11559, 1), new Range16.ptr(11565, 11565, 1)]), sliceType$1.nil, 0);
		_Glagolitic = new RangeTable.ptr(new sliceType([new Range16.ptr(11264, 11310, 1), new Range16.ptr(11312, 11358, 1)]), sliceType$1.nil, 0);
		_Gothic = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66352, 66378, 1)]), 0);
		_Grantha = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(70400, 70403, 1), new Range32.ptr(70405, 70412, 1), new Range32.ptr(70415, 70416, 1), new Range32.ptr(70419, 70440, 1), new Range32.ptr(70442, 70448, 1), new Range32.ptr(70450, 70451, 1), new Range32.ptr(70453, 70457, 1), new Range32.ptr(70460, 70468, 1), new Range32.ptr(70471, 70472, 1), new Range32.ptr(70475, 70477, 1), new Range32.ptr(70480, 70480, 1), new Range32.ptr(70487, 70487, 1), new Range32.ptr(70493, 70499, 1), new Range32.ptr(70502, 70508, 1), new Range32.ptr(70512, 70516, 1)]), 0);
		_Greek = new RangeTable.ptr(new sliceType([new Range16.ptr(880, 883, 1), new Range16.ptr(885, 887, 1), new Range16.ptr(890, 893, 1), new Range16.ptr(895, 895, 1), new Range16.ptr(900, 900, 1), new Range16.ptr(902, 902, 1), new Range16.ptr(904, 906, 1), new Range16.ptr(908, 908, 1), new Range16.ptr(910, 929, 1), new Range16.ptr(931, 993, 1), new Range16.ptr(1008, 1023, 1), new Range16.ptr(7462, 7466, 1), new Range16.ptr(7517, 7521, 1), new Range16.ptr(7526, 7530, 1), new Range16.ptr(7615, 7615, 1), new Range16.ptr(7936, 7957, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7968, 8005, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8016, 8023, 1), new Range16.ptr(8025, 8025, 1), new Range16.ptr(8027, 8027, 1), new Range16.ptr(8029, 8029, 1), new Range16.ptr(8031, 8061, 1), new Range16.ptr(8064, 8116, 1), new Range16.ptr(8118, 8132, 1), new Range16.ptr(8134, 8147, 1), new Range16.ptr(8150, 8155, 1), new Range16.ptr(8157, 8175, 1), new Range16.ptr(8178, 8180, 1), new Range16.ptr(8182, 8190, 1), new Range16.ptr(8486, 8486, 1), new Range16.ptr(43877, 43877, 1)]), new sliceType$1([new Range32.ptr(65856, 65932, 1), new Range32.ptr(65952, 65952, 1), new Range32.ptr(119296, 119365, 1)]), 0);
		_Gujarati = new RangeTable.ptr(new sliceType([new Range16.ptr(2689, 2691, 1), new Range16.ptr(2693, 2701, 1), new Range16.ptr(2703, 2705, 1), new Range16.ptr(2707, 2728, 1), new Range16.ptr(2730, 2736, 1), new Range16.ptr(2738, 2739, 1), new Range16.ptr(2741, 2745, 1), new Range16.ptr(2748, 2757, 1), new Range16.ptr(2759, 2761, 1), new Range16.ptr(2763, 2765, 1), new Range16.ptr(2768, 2768, 1), new Range16.ptr(2784, 2787, 1), new Range16.ptr(2790, 2801, 1), new Range16.ptr(2809, 2809, 1)]), sliceType$1.nil, 0);
		_Gurmukhi = new RangeTable.ptr(new sliceType([new Range16.ptr(2561, 2563, 1), new Range16.ptr(2565, 2570, 1), new Range16.ptr(2575, 2576, 1), new Range16.ptr(2579, 2600, 1), new Range16.ptr(2602, 2608, 1), new Range16.ptr(2610, 2611, 1), new Range16.ptr(2613, 2614, 1), new Range16.ptr(2616, 2617, 1), new Range16.ptr(2620, 2620, 1), new Range16.ptr(2622, 2626, 1), new Range16.ptr(2631, 2632, 1), new Range16.ptr(2635, 2637, 1), new Range16.ptr(2641, 2641, 1), new Range16.ptr(2649, 2652, 1), new Range16.ptr(2654, 2654, 1), new Range16.ptr(2662, 2677, 1)]), sliceType$1.nil, 0);
		_Han = new RangeTable.ptr(new sliceType([new Range16.ptr(11904, 11929, 1), new Range16.ptr(11931, 12019, 1), new Range16.ptr(12032, 12245, 1), new Range16.ptr(12293, 12293, 1), new Range16.ptr(12295, 12295, 1), new Range16.ptr(12321, 12329, 1), new Range16.ptr(12344, 12347, 1), new Range16.ptr(13312, 19893, 1), new Range16.ptr(19968, 40917, 1), new Range16.ptr(63744, 64109, 1), new Range16.ptr(64112, 64217, 1)]), new sliceType$1([new Range32.ptr(131072, 173782, 1), new Range32.ptr(173824, 177972, 1), new Range32.ptr(177984, 178205, 1), new Range32.ptr(178208, 183969, 1), new Range32.ptr(194560, 195101, 1)]), 0);
		_Hangul = new RangeTable.ptr(new sliceType([new Range16.ptr(4352, 4607, 1), new Range16.ptr(12334, 12335, 1), new Range16.ptr(12593, 12686, 1), new Range16.ptr(12800, 12830, 1), new Range16.ptr(12896, 12926, 1), new Range16.ptr(43360, 43388, 1), new Range16.ptr(44032, 55203, 1), new Range16.ptr(55216, 55238, 1), new Range16.ptr(55243, 55291, 1), new Range16.ptr(65440, 65470, 1), new Range16.ptr(65474, 65479, 1), new Range16.ptr(65482, 65487, 1), new Range16.ptr(65490, 65495, 1), new Range16.ptr(65498, 65500, 1)]), sliceType$1.nil, 0);
		_Hanunoo = new RangeTable.ptr(new sliceType([new Range16.ptr(5920, 5940, 1)]), sliceType$1.nil, 0);
		_Hatran = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(67808, 67826, 1), new Range32.ptr(67828, 67829, 1), new Range32.ptr(67835, 67839, 1)]), 0);
		_Hebrew = new RangeTable.ptr(new sliceType([new Range16.ptr(1425, 1479, 1), new Range16.ptr(1488, 1514, 1), new Range16.ptr(1520, 1524, 1), new Range16.ptr(64285, 64310, 1), new Range16.ptr(64312, 64316, 1), new Range16.ptr(64318, 64318, 1), new Range16.ptr(64320, 64321, 1), new Range16.ptr(64323, 64324, 1), new Range16.ptr(64326, 64335, 1)]), sliceType$1.nil, 0);
		_Hiragana = new RangeTable.ptr(new sliceType([new Range16.ptr(12353, 12438, 1), new Range16.ptr(12445, 12447, 1)]), new sliceType$1([new Range32.ptr(110593, 110593, 1), new Range32.ptr(127488, 127488, 1)]), 0);
		_Imperial_Aramaic = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(67648, 67669, 1), new Range32.ptr(67671, 67679, 1)]), 0);
		_Inherited = new RangeTable.ptr(new sliceType([new Range16.ptr(768, 879, 1), new Range16.ptr(1157, 1158, 1), new Range16.ptr(1611, 1621, 1), new Range16.ptr(1648, 1648, 1), new Range16.ptr(2385, 2386, 1), new Range16.ptr(6832, 6846, 1), new Range16.ptr(7376, 7378, 1), new Range16.ptr(7380, 7392, 1), new Range16.ptr(7394, 7400, 1), new Range16.ptr(7405, 7405, 1), new Range16.ptr(7412, 7412, 1), new Range16.ptr(7416, 7417, 1), new Range16.ptr(7616, 7669, 1), new Range16.ptr(7676, 7679, 1), new Range16.ptr(8204, 8205, 1), new Range16.ptr(8400, 8432, 1), new Range16.ptr(12330, 12333, 1), new Range16.ptr(12441, 12442, 1), new Range16.ptr(65024, 65039, 1), new Range16.ptr(65056, 65069, 1)]), new sliceType$1([new Range32.ptr(66045, 66045, 1), new Range32.ptr(66272, 66272, 1), new Range32.ptr(119143, 119145, 1), new Range32.ptr(119163, 119170, 1), new Range32.ptr(119173, 119179, 1), new Range32.ptr(119210, 119213, 1), new Range32.ptr(917760, 917999, 1)]), 0);
		_Inscriptional_Pahlavi = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68448, 68466, 1), new Range32.ptr(68472, 68479, 1)]), 0);
		_Inscriptional_Parthian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68416, 68437, 1), new Range32.ptr(68440, 68447, 1)]), 0);
		_Javanese = new RangeTable.ptr(new sliceType([new Range16.ptr(43392, 43469, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43486, 43487, 1)]), sliceType$1.nil, 0);
		_Kaithi = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(69760, 69825, 1)]), 0);
		_Kannada = new RangeTable.ptr(new sliceType([new Range16.ptr(3201, 3203, 1), new Range16.ptr(3205, 3212, 1), new Range16.ptr(3214, 3216, 1), new Range16.ptr(3218, 3240, 1), new Range16.ptr(3242, 3251, 1), new Range16.ptr(3253, 3257, 1), new Range16.ptr(3260, 3268, 1), new Range16.ptr(3270, 3272, 1), new Range16.ptr(3274, 3277, 1), new Range16.ptr(3285, 3286, 1), new Range16.ptr(3294, 3294, 1), new Range16.ptr(3296, 3299, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3313, 3314, 1)]), sliceType$1.nil, 0);
		_Katakana = new RangeTable.ptr(new sliceType([new Range16.ptr(12449, 12538, 1), new Range16.ptr(12541, 12543, 1), new Range16.ptr(12784, 12799, 1), new Range16.ptr(13008, 13054, 1), new Range16.ptr(13056, 13143, 1), new Range16.ptr(65382, 65391, 1), new Range16.ptr(65393, 65437, 1)]), new sliceType$1([new Range32.ptr(110592, 110592, 1)]), 0);
		_Kayah_Li = new RangeTable.ptr(new sliceType([new Range16.ptr(43264, 43309, 1), new Range16.ptr(43311, 43311, 1)]), sliceType$1.nil, 0);
		_Kharoshthi = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68096, 68099, 1), new Range32.ptr(68101, 68102, 1), new Range32.ptr(68108, 68115, 1), new Range32.ptr(68117, 68119, 1), new Range32.ptr(68121, 68147, 1), new Range32.ptr(68152, 68154, 1), new Range32.ptr(68159, 68167, 1), new Range32.ptr(68176, 68184, 1)]), 0);
		_Khmer = new RangeTable.ptr(new sliceType([new Range16.ptr(6016, 6109, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6128, 6137, 1), new Range16.ptr(6624, 6655, 1)]), sliceType$1.nil, 0);
		_Khojki = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(70144, 70161, 1), new Range32.ptr(70163, 70205, 1)]), 0);
		_Khudawadi = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(70320, 70378, 1), new Range32.ptr(70384, 70393, 1)]), 0);
		_Lao = new RangeTable.ptr(new sliceType([new Range16.ptr(3713, 3714, 1), new Range16.ptr(3716, 3716, 1), new Range16.ptr(3719, 3720, 1), new Range16.ptr(3722, 3722, 1), new Range16.ptr(3725, 3725, 1), new Range16.ptr(3732, 3735, 1), new Range16.ptr(3737, 3743, 1), new Range16.ptr(3745, 3747, 1), new Range16.ptr(3749, 3749, 1), new Range16.ptr(3751, 3751, 1), new Range16.ptr(3754, 3755, 1), new Range16.ptr(3757, 3769, 1), new Range16.ptr(3771, 3773, 1), new Range16.ptr(3776, 3780, 1), new Range16.ptr(3782, 3782, 1), new Range16.ptr(3784, 3789, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3804, 3807, 1)]), sliceType$1.nil, 0);
		_Latin = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(97, 122, 1), new Range16.ptr(170, 170, 1), new Range16.ptr(186, 186, 1), new Range16.ptr(192, 214, 1), new Range16.ptr(216, 246, 1), new Range16.ptr(248, 696, 1), new Range16.ptr(736, 740, 1), new Range16.ptr(7424, 7461, 1), new Range16.ptr(7468, 7516, 1), new Range16.ptr(7522, 7525, 1), new Range16.ptr(7531, 7543, 1), new Range16.ptr(7545, 7614, 1), new Range16.ptr(7680, 7935, 1), new Range16.ptr(8305, 8305, 1), new Range16.ptr(8319, 8319, 1), new Range16.ptr(8336, 8348, 1), new Range16.ptr(8490, 8491, 1), new Range16.ptr(8498, 8498, 1), new Range16.ptr(8526, 8526, 1), new Range16.ptr(8544, 8584, 1), new Range16.ptr(11360, 11391, 1), new Range16.ptr(42786, 42887, 1), new Range16.ptr(42891, 42925, 1), new Range16.ptr(42928, 42935, 1), new Range16.ptr(42999, 43007, 1), new Range16.ptr(43824, 43866, 1), new Range16.ptr(43868, 43876, 1), new Range16.ptr(64256, 64262, 1), new Range16.ptr(65313, 65338, 1), new Range16.ptr(65345, 65370, 1)]), sliceType$1.nil, 6);
		_Lepcha = new RangeTable.ptr(new sliceType([new Range16.ptr(7168, 7223, 1), new Range16.ptr(7227, 7241, 1), new Range16.ptr(7245, 7247, 1)]), sliceType$1.nil, 0);
		_Limbu = new RangeTable.ptr(new sliceType([new Range16.ptr(6400, 6430, 1), new Range16.ptr(6432, 6443, 1), new Range16.ptr(6448, 6459, 1), new Range16.ptr(6464, 6464, 1), new Range16.ptr(6468, 6479, 1)]), sliceType$1.nil, 0);
		_Linear_A = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(67072, 67382, 1), new Range32.ptr(67392, 67413, 1), new Range32.ptr(67424, 67431, 1)]), 0);
		_Linear_B = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(65536, 65547, 1), new Range32.ptr(65549, 65574, 1), new Range32.ptr(65576, 65594, 1), new Range32.ptr(65596, 65597, 1), new Range32.ptr(65599, 65613, 1), new Range32.ptr(65616, 65629, 1), new Range32.ptr(65664, 65786, 1)]), 0);
		_Lisu = new RangeTable.ptr(new sliceType([new Range16.ptr(42192, 42239, 1)]), sliceType$1.nil, 0);
		_Lycian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66176, 66204, 1)]), 0);
		_Lydian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(67872, 67897, 1), new Range32.ptr(67903, 67903, 1)]), 0);
		_Mahajani = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(69968, 70006, 1)]), 0);
		_Malayalam = new RangeTable.ptr(new sliceType([new Range16.ptr(3329, 3331, 1), new Range16.ptr(3333, 3340, 1), new Range16.ptr(3342, 3344, 1), new Range16.ptr(3346, 3386, 1), new Range16.ptr(3389, 3396, 1), new Range16.ptr(3398, 3400, 1), new Range16.ptr(3402, 3406, 1), new Range16.ptr(3415, 3415, 1), new Range16.ptr(3423, 3427, 1), new Range16.ptr(3430, 3445, 1), new Range16.ptr(3449, 3455, 1)]), sliceType$1.nil, 0);
		_Mandaic = new RangeTable.ptr(new sliceType([new Range16.ptr(2112, 2139, 1), new Range16.ptr(2142, 2142, 1)]), sliceType$1.nil, 0);
		_Manichaean = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68288, 68326, 1), new Range32.ptr(68331, 68342, 1)]), 0);
		_Meetei_Mayek = new RangeTable.ptr(new sliceType([new Range16.ptr(43744, 43766, 1), new Range16.ptr(43968, 44013, 1), new Range16.ptr(44016, 44025, 1)]), sliceType$1.nil, 0);
		_Mende_Kikakui = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(124928, 125124, 1), new Range32.ptr(125127, 125142, 1)]), 0);
		_Meroitic_Cursive = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68000, 68023, 1), new Range32.ptr(68028, 68047, 1), new Range32.ptr(68050, 68095, 1)]), 0);
		_Meroitic_Hieroglyphs = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(67968, 67999, 1)]), 0);
		_Miao = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(93952, 94020, 1), new Range32.ptr(94032, 94078, 1), new Range32.ptr(94095, 94111, 1)]), 0);
		_Modi = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(71168, 71236, 1), new Range32.ptr(71248, 71257, 1)]), 0);
		_Mongolian = new RangeTable.ptr(new sliceType([new Range16.ptr(6144, 6145, 1), new Range16.ptr(6148, 6148, 1), new Range16.ptr(6150, 6158, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6176, 6263, 1), new Range16.ptr(6272, 6314, 1)]), sliceType$1.nil, 0);
		_Mro = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(92736, 92766, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(92782, 92783, 1)]), 0);
		_Multani = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(70272, 70278, 1), new Range32.ptr(70280, 70280, 1), new Range32.ptr(70282, 70285, 1), new Range32.ptr(70287, 70301, 1), new Range32.ptr(70303, 70313, 1)]), 0);
		_Myanmar = new RangeTable.ptr(new sliceType([new Range16.ptr(4096, 4255, 1), new Range16.ptr(43488, 43518, 1), new Range16.ptr(43616, 43647, 1)]), sliceType$1.nil, 0);
		_Nabataean = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(67712, 67742, 1), new Range32.ptr(67751, 67759, 1)]), 0);
		_New_Tai_Lue = new RangeTable.ptr(new sliceType([new Range16.ptr(6528, 6571, 1), new Range16.ptr(6576, 6601, 1), new Range16.ptr(6608, 6618, 1), new Range16.ptr(6622, 6623, 1)]), sliceType$1.nil, 0);
		_Nko = new RangeTable.ptr(new sliceType([new Range16.ptr(1984, 2042, 1)]), sliceType$1.nil, 0);
		_Ogham = new RangeTable.ptr(new sliceType([new Range16.ptr(5760, 5788, 1)]), sliceType$1.nil, 0);
		_Ol_Chiki = new RangeTable.ptr(new sliceType([new Range16.ptr(7248, 7295, 1)]), sliceType$1.nil, 0);
		_Old_Hungarian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68736, 68786, 1), new Range32.ptr(68800, 68850, 1), new Range32.ptr(68858, 68863, 1)]), 0);
		_Old_Italic = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66304, 66339, 1)]), 0);
		_Old_North_Arabian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68224, 68255, 1)]), 0);
		_Old_Permic = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66384, 66426, 1)]), 0);
		_Old_Persian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66464, 66499, 1), new Range32.ptr(66504, 66517, 1)]), 0);
		_Old_South_Arabian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68192, 68223, 1)]), 0);
		_Old_Turkic = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68608, 68680, 1)]), 0);
		_Oriya = new RangeTable.ptr(new sliceType([new Range16.ptr(2817, 2819, 1), new Range16.ptr(2821, 2828, 1), new Range16.ptr(2831, 2832, 1), new Range16.ptr(2835, 2856, 1), new Range16.ptr(2858, 2864, 1), new Range16.ptr(2866, 2867, 1), new Range16.ptr(2869, 2873, 1), new Range16.ptr(2876, 2884, 1), new Range16.ptr(2887, 2888, 1), new Range16.ptr(2891, 2893, 1), new Range16.ptr(2902, 2903, 1), new Range16.ptr(2908, 2909, 1), new Range16.ptr(2911, 2915, 1), new Range16.ptr(2918, 2935, 1)]), sliceType$1.nil, 0);
		_Osmanya = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66688, 66717, 1), new Range32.ptr(66720, 66729, 1)]), 0);
		_Pahawh_Hmong = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(92928, 92997, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(93019, 93025, 1), new Range32.ptr(93027, 93047, 1), new Range32.ptr(93053, 93071, 1)]), 0);
		_Palmyrene = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(67680, 67711, 1)]), 0);
		_Pau_Cin_Hau = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(72384, 72440, 1)]), 0);
		_Phags_Pa = new RangeTable.ptr(new sliceType([new Range16.ptr(43072, 43127, 1)]), sliceType$1.nil, 0);
		_Phoenician = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(67840, 67867, 1), new Range32.ptr(67871, 67871, 1)]), 0);
		_Psalter_Pahlavi = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68480, 68497, 1), new Range32.ptr(68505, 68508, 1), new Range32.ptr(68521, 68527, 1)]), 0);
		_Rejang = new RangeTable.ptr(new sliceType([new Range16.ptr(43312, 43347, 1), new Range16.ptr(43359, 43359, 1)]), sliceType$1.nil, 0);
		_Runic = new RangeTable.ptr(new sliceType([new Range16.ptr(5792, 5866, 1), new Range16.ptr(5870, 5880, 1)]), sliceType$1.nil, 0);
		_Samaritan = new RangeTable.ptr(new sliceType([new Range16.ptr(2048, 2093, 1), new Range16.ptr(2096, 2110, 1)]), sliceType$1.nil, 0);
		_Saurashtra = new RangeTable.ptr(new sliceType([new Range16.ptr(43136, 43204, 1), new Range16.ptr(43214, 43225, 1)]), sliceType$1.nil, 0);
		_Sharada = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(70016, 70093, 1), new Range32.ptr(70096, 70111, 1)]), 0);
		_Shavian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66640, 66687, 1)]), 0);
		_Siddham = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(71040, 71093, 1), new Range32.ptr(71096, 71133, 1)]), 0);
		_SignWriting = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(120832, 121483, 1), new Range32.ptr(121499, 121503, 1), new Range32.ptr(121505, 121519, 1)]), 0);
		_Sinhala = new RangeTable.ptr(new sliceType([new Range16.ptr(3458, 3459, 1), new Range16.ptr(3461, 3478, 1), new Range16.ptr(3482, 3505, 1), new Range16.ptr(3507, 3515, 1), new Range16.ptr(3517, 3517, 1), new Range16.ptr(3520, 3526, 1), new Range16.ptr(3530, 3530, 1), new Range16.ptr(3535, 3540, 1), new Range16.ptr(3542, 3542, 1), new Range16.ptr(3544, 3551, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3570, 3572, 1)]), new sliceType$1([new Range32.ptr(70113, 70132, 1)]), 0);
		_Sora_Sompeng = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(69840, 69864, 1), new Range32.ptr(69872, 69881, 1)]), 0);
		_Sundanese = new RangeTable.ptr(new sliceType([new Range16.ptr(7040, 7103, 1), new Range16.ptr(7360, 7367, 1)]), sliceType$1.nil, 0);
		_Syloti_Nagri = new RangeTable.ptr(new sliceType([new Range16.ptr(43008, 43051, 1)]), sliceType$1.nil, 0);
		_Syriac = new RangeTable.ptr(new sliceType([new Range16.ptr(1792, 1805, 1), new Range16.ptr(1807, 1866, 1), new Range16.ptr(1869, 1871, 1)]), sliceType$1.nil, 0);
		_Tagalog = new RangeTable.ptr(new sliceType([new Range16.ptr(5888, 5900, 1), new Range16.ptr(5902, 5908, 1)]), sliceType$1.nil, 0);
		_Tagbanwa = new RangeTable.ptr(new sliceType([new Range16.ptr(5984, 5996, 1), new Range16.ptr(5998, 6000, 1), new Range16.ptr(6002, 6003, 1)]), sliceType$1.nil, 0);
		_Tai_Le = new RangeTable.ptr(new sliceType([new Range16.ptr(6480, 6509, 1), new Range16.ptr(6512, 6516, 1)]), sliceType$1.nil, 0);
		_Tai_Tham = new RangeTable.ptr(new sliceType([new Range16.ptr(6688, 6750, 1), new Range16.ptr(6752, 6780, 1), new Range16.ptr(6783, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6816, 6829, 1)]), sliceType$1.nil, 0);
		_Tai_Viet = new RangeTable.ptr(new sliceType([new Range16.ptr(43648, 43714, 1), new Range16.ptr(43739, 43743, 1)]), sliceType$1.nil, 0);
		_Takri = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(71296, 71351, 1), new Range32.ptr(71360, 71369, 1)]), 0);
		_Tamil = new RangeTable.ptr(new sliceType([new Range16.ptr(2946, 2947, 1), new Range16.ptr(2949, 2954, 1), new Range16.ptr(2958, 2960, 1), new Range16.ptr(2962, 2965, 1), new Range16.ptr(2969, 2970, 1), new Range16.ptr(2972, 2972, 1), new Range16.ptr(2974, 2975, 1), new Range16.ptr(2979, 2980, 1), new Range16.ptr(2984, 2986, 1), new Range16.ptr(2990, 3001, 1), new Range16.ptr(3006, 3010, 1), new Range16.ptr(3014, 3016, 1), new Range16.ptr(3018, 3021, 1), new Range16.ptr(3024, 3024, 1), new Range16.ptr(3031, 3031, 1), new Range16.ptr(3046, 3066, 1)]), sliceType$1.nil, 0);
		_Telugu = new RangeTable.ptr(new sliceType([new Range16.ptr(3072, 3075, 1), new Range16.ptr(3077, 3084, 1), new Range16.ptr(3086, 3088, 1), new Range16.ptr(3090, 3112, 1), new Range16.ptr(3114, 3129, 1), new Range16.ptr(3133, 3140, 1), new Range16.ptr(3142, 3144, 1), new Range16.ptr(3146, 3149, 1), new Range16.ptr(3157, 3158, 1), new Range16.ptr(3160, 3162, 1), new Range16.ptr(3168, 3171, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3192, 3199, 1)]), sliceType$1.nil, 0);
		_Thaana = new RangeTable.ptr(new sliceType([new Range16.ptr(1920, 1969, 1)]), sliceType$1.nil, 0);
		_Thai = new RangeTable.ptr(new sliceType([new Range16.ptr(3585, 3642, 1), new Range16.ptr(3648, 3675, 1)]), sliceType$1.nil, 0);
		_Tibetan = new RangeTable.ptr(new sliceType([new Range16.ptr(3840, 3911, 1), new Range16.ptr(3913, 3948, 1), new Range16.ptr(3953, 3991, 1), new Range16.ptr(3993, 4028, 1), new Range16.ptr(4030, 4044, 1), new Range16.ptr(4046, 4052, 1), new Range16.ptr(4057, 4058, 1)]), sliceType$1.nil, 0);
		_Tifinagh = new RangeTable.ptr(new sliceType([new Range16.ptr(11568, 11623, 1), new Range16.ptr(11631, 11632, 1), new Range16.ptr(11647, 11647, 1)]), sliceType$1.nil, 0);
		_Tirhuta = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(70784, 70855, 1), new Range32.ptr(70864, 70873, 1)]), 0);
		_Ugaritic = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66432, 66461, 1), new Range32.ptr(66463, 66463, 1)]), 0);
		_Vai = new RangeTable.ptr(new sliceType([new Range16.ptr(42240, 42539, 1)]), sliceType$1.nil, 0);
		_Warang_Citi = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(71840, 71922, 1), new Range32.ptr(71935, 71935, 1)]), 0);
		_Yi = new RangeTable.ptr(new sliceType([new Range16.ptr(40960, 42124, 1), new Range16.ptr(42128, 42182, 1)]), sliceType$1.nil, 0);
		$pkg.Ahom = _Ahom;
		$pkg.Anatolian_Hieroglyphs = _Anatolian_Hieroglyphs;
		$pkg.Arabic = _Arabic;
		$pkg.Armenian = _Armenian;
		$pkg.Avestan = _Avestan;
		$pkg.Balinese = _Balinese;
		$pkg.Bamum = _Bamum;
		$pkg.Bassa_Vah = _Bassa_Vah;
		$pkg.Batak = _Batak;
		$pkg.Bengali = _Bengali;
		$pkg.Bopomofo = _Bopomofo;
		$pkg.Brahmi = _Brahmi;
		$pkg.Braille = _Braille;
		$pkg.Buginese = _Buginese;
		$pkg.Buhid = _Buhid;
		$pkg.Canadian_Aboriginal = _Canadian_Aboriginal;
		$pkg.Carian = _Carian;
		$pkg.Caucasian_Albanian = _Caucasian_Albanian;
		$pkg.Chakma = _Chakma;
		$pkg.Cham = _Cham;
		$pkg.Cherokee = _Cherokee;
		$pkg.Common = _Common;
		$pkg.Coptic = _Coptic;
		$pkg.Cuneiform = _Cuneiform;
		$pkg.Cypriot = _Cypriot;
		$pkg.Cyrillic = _Cyrillic;
		$pkg.Deseret = _Deseret;
		$pkg.Devanagari = _Devanagari;
		$pkg.Duployan = _Duployan;
		$pkg.Egyptian_Hieroglyphs = _Egyptian_Hieroglyphs;
		$pkg.Elbasan = _Elbasan;
		$pkg.Ethiopic = _Ethiopic;
		$pkg.Georgian = _Georgian;
		$pkg.Glagolitic = _Glagolitic;
		$pkg.Gothic = _Gothic;
		$pkg.Grantha = _Grantha;
		$pkg.Greek = _Greek;
		$pkg.Gujarati = _Gujarati;
		$pkg.Gurmukhi = _Gurmukhi;
		$pkg.Han = _Han;
		$pkg.Hangul = _Hangul;
		$pkg.Hanunoo = _Hanunoo;
		$pkg.Hatran = _Hatran;
		$pkg.Hebrew = _Hebrew;
		$pkg.Hiragana = _Hiragana;
		$pkg.Imperial_Aramaic = _Imperial_Aramaic;
		$pkg.Inherited = _Inherited;
		$pkg.Inscriptional_Pahlavi = _Inscriptional_Pahlavi;
		$pkg.Inscriptional_Parthian = _Inscriptional_Parthian;
		$pkg.Javanese = _Javanese;
		$pkg.Kaithi = _Kaithi;
		$pkg.Kannada = _Kannada;
		$pkg.Katakana = _Katakana;
		$pkg.Kayah_Li = _Kayah_Li;
		$pkg.Kharoshthi = _Kharoshthi;
		$pkg.Khmer = _Khmer;
		$pkg.Khojki = _Khojki;
		$pkg.Khudawadi = _Khudawadi;
		$pkg.Lao = _Lao;
		$pkg.Latin = _Latin;
		$pkg.Lepcha = _Lepcha;
		$pkg.Limbu = _Limbu;
		$pkg.Linear_A = _Linear_A;
		$pkg.Linear_B = _Linear_B;
		$pkg.Lisu = _Lisu;
		$pkg.Lycian = _Lycian;
		$pkg.Lydian = _Lydian;
		$pkg.Mahajani = _Mahajani;
		$pkg.Malayalam = _Malayalam;
		$pkg.Mandaic = _Mandaic;
		$pkg.Manichaean = _Manichaean;
		$pkg.Meetei_Mayek = _Meetei_Mayek;
		$pkg.Mende_Kikakui = _Mende_Kikakui;
		$pkg.Meroitic_Cursive = _Meroitic_Cursive;
		$pkg.Meroitic_Hieroglyphs = _Meroitic_Hieroglyphs;
		$pkg.Miao = _Miao;
		$pkg.Modi = _Modi;
		$pkg.Mongolian = _Mongolian;
		$pkg.Mro = _Mro;
		$pkg.Multani = _Multani;
		$pkg.Myanmar = _Myanmar;
		$pkg.Nabataean = _Nabataean;
		$pkg.New_Tai_Lue = _New_Tai_Lue;
		$pkg.Nko = _Nko;
		$pkg.Ogham = _Ogham;
		$pkg.Ol_Chiki = _Ol_Chiki;
		$pkg.Old_Hungarian = _Old_Hungarian;
		$pkg.Old_Italic = _Old_Italic;
		$pkg.Old_North_Arabian = _Old_North_Arabian;
		$pkg.Old_Permic = _Old_Permic;
		$pkg.Old_Persian = _Old_Persian;
		$pkg.Old_South_Arabian = _Old_South_Arabian;
		$pkg.Old_Turkic = _Old_Turkic;
		$pkg.Oriya = _Oriya;
		$pkg.Osmanya = _Osmanya;
		$pkg.Pahawh_Hmong = _Pahawh_Hmong;
		$pkg.Palmyrene = _Palmyrene;
		$pkg.Pau_Cin_Hau = _Pau_Cin_Hau;
		$pkg.Phags_Pa = _Phags_Pa;
		$pkg.Phoenician = _Phoenician;
		$pkg.Psalter_Pahlavi = _Psalter_Pahlavi;
		$pkg.Rejang = _Rejang;
		$pkg.Runic = _Runic;
		$pkg.Samaritan = _Samaritan;
		$pkg.Saurashtra = _Saurashtra;
		$pkg.Sharada = _Sharada;
		$pkg.Shavian = _Shavian;
		$pkg.Siddham = _Siddham;
		$pkg.SignWriting = _SignWriting;
		$pkg.Sinhala = _Sinhala;
		$pkg.Sora_Sompeng = _Sora_Sompeng;
		$pkg.Sundanese = _Sundanese;
		$pkg.Syloti_Nagri = _Syloti_Nagri;
		$pkg.Syriac = _Syriac;
		$pkg.Tagalog = _Tagalog;
		$pkg.Tagbanwa = _Tagbanwa;
		$pkg.Tai_Le = _Tai_Le;
		$pkg.Tai_Tham = _Tai_Tham;
		$pkg.Tai_Viet = _Tai_Viet;
		$pkg.Takri = _Takri;
		$pkg.Tamil = _Tamil;
		$pkg.Telugu = _Telugu;
		$pkg.Thaana = _Thaana;
		$pkg.Thai = _Thai;
		$pkg.Tibetan = _Tibetan;
		$pkg.Tifinagh = _Tifinagh;
		$pkg.Tirhuta = _Tirhuta;
		$pkg.Ugaritic = _Ugaritic;
		$pkg.Vai = _Vai;
		$pkg.Warang_Citi = _Warang_Citi;
		$pkg.Yi = _Yi;
		$pkg.Scripts = $makeMap($String.keyFor, [{ k: "Ahom", v: $pkg.Ahom }, { k: "Anatolian_Hieroglyphs", v: $pkg.Anatolian_Hieroglyphs }, { k: "Arabic", v: $pkg.Arabic }, { k: "Armenian", v: $pkg.Armenian }, { k: "Avestan", v: $pkg.Avestan }, { k: "Balinese", v: $pkg.Balinese }, { k: "Bamum", v: $pkg.Bamum }, { k: "Bassa_Vah", v: $pkg.Bassa_Vah }, { k: "Batak", v: $pkg.Batak }, { k: "Bengali", v: $pkg.Bengali }, { k: "Bopomofo", v: $pkg.Bopomofo }, { k: "Brahmi", v: $pkg.Brahmi }, { k: "Braille", v: $pkg.Braille }, { k: "Buginese", v: $pkg.Buginese }, { k: "Buhid", v: $pkg.Buhid }, { k: "Canadian_Aboriginal", v: $pkg.Canadian_Aboriginal }, { k: "Carian", v: $pkg.Carian }, { k: "Caucasian_Albanian", v: $pkg.Caucasian_Albanian }, { k: "Chakma", v: $pkg.Chakma }, { k: "Cham", v: $pkg.Cham }, { k: "Cherokee", v: $pkg.Cherokee }, { k: "Common", v: $pkg.Common }, { k: "Coptic", v: $pkg.Coptic }, { k: "Cuneiform", v: $pkg.Cuneiform }, { k: "Cypriot", v: $pkg.Cypriot }, { k: "Cyrillic", v: $pkg.Cyrillic }, { k: "Deseret", v: $pkg.Deseret }, { k: "Devanagari", v: $pkg.Devanagari }, { k: "Duployan", v: $pkg.Duployan }, { k: "Egyptian_Hieroglyphs", v: $pkg.Egyptian_Hieroglyphs }, { k: "Elbasan", v: $pkg.Elbasan }, { k: "Ethiopic", v: $pkg.Ethiopic }, { k: "Georgian", v: $pkg.Georgian }, { k: "Glagolitic", v: $pkg.Glagolitic }, { k: "Gothic", v: $pkg.Gothic }, { k: "Grantha", v: $pkg.Grantha }, { k: "Greek", v: $pkg.Greek }, { k: "Gujarati", v: $pkg.Gujarati }, { k: "Gurmukhi", v: $pkg.Gurmukhi }, { k: "Han", v: $pkg.Han }, { k: "Hangul", v: $pkg.Hangul }, { k: "Hanunoo", v: $pkg.Hanunoo }, { k: "Hatran", v: $pkg.Hatran }, { k: "Hebrew", v: $pkg.Hebrew }, { k: "Hiragana", v: $pkg.Hiragana }, { k: "Imperial_Aramaic", v: $pkg.Imperial_Aramaic }, { k: "Inherited", v: $pkg.Inherited }, { k: "Inscriptional_Pahlavi", v: $pkg.Inscriptional_Pahlavi }, { k: "Inscriptional_Parthian", v: $pkg.Inscriptional_Parthian }, { k: "Javanese", v: $pkg.Javanese }, { k: "Kaithi", v: $pkg.Kaithi }, { k: "Kannada", v: $pkg.Kannada }, { k: "Katakana", v: $pkg.Katakana }, { k: "Kayah_Li", v: $pkg.Kayah_Li }, { k: "Kharoshthi", v: $pkg.Kharoshthi }, { k: "Khmer", v: $pkg.Khmer }, { k: "Khojki", v: $pkg.Khojki }, { k: "Khudawadi", v: $pkg.Khudawadi }, { k: "Lao", v: $pkg.Lao }, { k: "Latin", v: $pkg.Latin }, { k: "Lepcha", v: $pkg.Lepcha }, { k: "Limbu", v: $pkg.Limbu }, { k: "Linear_A", v: $pkg.Linear_A }, { k: "Linear_B", v: $pkg.Linear_B }, { k: "Lisu", v: $pkg.Lisu }, { k: "Lycian", v: $pkg.Lycian }, { k: "Lydian", v: $pkg.Lydian }, { k: "Mahajani", v: $pkg.Mahajani }, { k: "Malayalam", v: $pkg.Malayalam }, { k: "Mandaic", v: $pkg.Mandaic }, { k: "Manichaean", v: $pkg.Manichaean }, { k: "Meetei_Mayek", v: $pkg.Meetei_Mayek }, { k: "Mende_Kikakui", v: $pkg.Mende_Kikakui }, { k: "Meroitic_Cursive", v: $pkg.Meroitic_Cursive }, { k: "Meroitic_Hieroglyphs", v: $pkg.Meroitic_Hieroglyphs }, { k: "Miao", v: $pkg.Miao }, { k: "Modi", v: $pkg.Modi }, { k: "Mongolian", v: $pkg.Mongolian }, { k: "Mro", v: $pkg.Mro }, { k: "Multani", v: $pkg.Multani }, { k: "Myanmar", v: $pkg.Myanmar }, { k: "Nabataean", v: $pkg.Nabataean }, { k: "New_Tai_Lue", v: $pkg.New_Tai_Lue }, { k: "Nko", v: $pkg.Nko }, { k: "Ogham", v: $pkg.Ogham }, { k: "Ol_Chiki", v: $pkg.Ol_Chiki }, { k: "Old_Hungarian", v: $pkg.Old_Hungarian }, { k: "Old_Italic", v: $pkg.Old_Italic }, { k: "Old_North_Arabian", v: $pkg.Old_North_Arabian }, { k: "Old_Permic", v: $pkg.Old_Permic }, { k: "Old_Persian", v: $pkg.Old_Persian }, { k: "Old_South_Arabian", v: $pkg.Old_South_Arabian }, { k: "Old_Turkic", v: $pkg.Old_Turkic }, { k: "Oriya", v: $pkg.Oriya }, { k: "Osmanya", v: $pkg.Osmanya }, { k: "Pahawh_Hmong", v: $pkg.Pahawh_Hmong }, { k: "Palmyrene", v: $pkg.Palmyrene }, { k: "Pau_Cin_Hau", v: $pkg.Pau_Cin_Hau }, { k: "Phags_Pa", v: $pkg.Phags_Pa }, { k: "Phoenician", v: $pkg.Phoenician }, { k: "Psalter_Pahlavi", v: $pkg.Psalter_Pahlavi }, { k: "Rejang", v: $pkg.Rejang }, { k: "Runic", v: $pkg.Runic }, { k: "Samaritan", v: $pkg.Samaritan }, { k: "Saurashtra", v: $pkg.Saurashtra }, { k: "Sharada", v: $pkg.Sharada }, { k: "Shavian", v: $pkg.Shavian }, { k: "Siddham", v: $pkg.Siddham }, { k: "SignWriting", v: $pkg.SignWriting }, { k: "Sinhala", v: $pkg.Sinhala }, { k: "Sora_Sompeng", v: $pkg.Sora_Sompeng }, { k: "Sundanese", v: $pkg.Sundanese }, { k: "Syloti_Nagri", v: $pkg.Syloti_Nagri }, { k: "Syriac", v: $pkg.Syriac }, { k: "Tagalog", v: $pkg.Tagalog }, { k: "Tagbanwa", v: $pkg.Tagbanwa }, { k: "Tai_Le", v: $pkg.Tai_Le }, { k: "Tai_Tham", v: $pkg.Tai_Tham }, { k: "Tai_Viet", v: $pkg.Tai_Viet }, { k: "Takri", v: $pkg.Takri }, { k: "Tamil", v: $pkg.Tamil }, { k: "Telugu", v: $pkg.Telugu }, { k: "Thaana", v: $pkg.Thaana }, { k: "Thai", v: $pkg.Thai }, { k: "Tibetan", v: $pkg.Tibetan }, { k: "Tifinagh", v: $pkg.Tifinagh }, { k: "Tirhuta", v: $pkg.Tirhuta }, { k: "Ugaritic", v: $pkg.Ugaritic }, { k: "Vai", v: $pkg.Vai }, { k: "Warang_Citi", v: $pkg.Warang_Citi }, { k: "Yi", v: $pkg.Yi }]);
		_White_Space = new RangeTable.ptr(new sliceType([new Range16.ptr(9, 13, 1), new Range16.ptr(32, 32, 1), new Range16.ptr(133, 133, 1), new Range16.ptr(160, 160, 1), new Range16.ptr(5760, 5760, 1), new Range16.ptr(8192, 8202, 1), new Range16.ptr(8232, 8233, 1), new Range16.ptr(8239, 8239, 1), new Range16.ptr(8287, 8287, 1), new Range16.ptr(12288, 12288, 1)]), sliceType$1.nil, 4);
		$pkg.White_Space = _White_Space;
		_CaseRanges = new sliceType$3([new CaseRange.ptr(65, 90, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(97, 122, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(181, 181, $toNativeArray($kindInt32, [743, 0, 743])), new CaseRange.ptr(192, 214, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(216, 222, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(224, 246, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(248, 254, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(255, 255, $toNativeArray($kindInt32, [121, 0, 121])), new CaseRange.ptr(256, 303, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(304, 304, $toNativeArray($kindInt32, [0, -199, 0])), new CaseRange.ptr(305, 305, $toNativeArray($kindInt32, [-232, 0, -232])), new CaseRange.ptr(306, 311, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(313, 328, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(330, 375, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(376, 376, $toNativeArray($kindInt32, [0, -121, 0])), new CaseRange.ptr(377, 382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(383, 383, $toNativeArray($kindInt32, [-300, 0, -300])), new CaseRange.ptr(384, 384, $toNativeArray($kindInt32, [195, 0, 195])), new CaseRange.ptr(385, 385, $toNativeArray($kindInt32, [0, 210, 0])), new CaseRange.ptr(386, 389, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(390, 390, $toNativeArray($kindInt32, [0, 206, 0])), new CaseRange.ptr(391, 392, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(393, 394, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(395, 396, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(398, 398, $toNativeArray($kindInt32, [0, 79, 0])), new CaseRange.ptr(399, 399, $toNativeArray($kindInt32, [0, 202, 0])), new CaseRange.ptr(400, 400, $toNativeArray($kindInt32, [0, 203, 0])), new CaseRange.ptr(401, 402, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(403, 403, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(404, 404, $toNativeArray($kindInt32, [0, 207, 0])), new CaseRange.ptr(405, 405, $toNativeArray($kindInt32, [97, 0, 97])), new CaseRange.ptr(406, 406, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(407, 407, $toNativeArray($kindInt32, [0, 209, 0])), new CaseRange.ptr(408, 409, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(410, 410, $toNativeArray($kindInt32, [163, 0, 163])), new CaseRange.ptr(412, 412, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(413, 413, $toNativeArray($kindInt32, [0, 213, 0])), new CaseRange.ptr(414, 414, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(415, 415, $toNativeArray($kindInt32, [0, 214, 0])), new CaseRange.ptr(416, 421, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(422, 422, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(423, 424, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(425, 425, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(428, 429, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(430, 430, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(431, 432, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(433, 434, $toNativeArray($kindInt32, [0, 217, 0])), new CaseRange.ptr(435, 438, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(439, 439, $toNativeArray($kindInt32, [0, 219, 0])), new CaseRange.ptr(440, 441, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(444, 445, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(447, 447, $toNativeArray($kindInt32, [56, 0, 56])), new CaseRange.ptr(452, 452, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(453, 453, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(454, 454, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(455, 455, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(456, 456, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(457, 457, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(458, 458, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(459, 459, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(460, 460, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(461, 476, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(477, 477, $toNativeArray($kindInt32, [-79, 0, -79])), new CaseRange.ptr(478, 495, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(497, 497, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(498, 498, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(499, 499, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(500, 501, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(502, 502, $toNativeArray($kindInt32, [0, -97, 0])), new CaseRange.ptr(503, 503, $toNativeArray($kindInt32, [0, -56, 0])), new CaseRange.ptr(504, 543, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(544, 544, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(546, 563, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(570, 570, $toNativeArray($kindInt32, [0, 10795, 0])), new CaseRange.ptr(571, 572, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(573, 573, $toNativeArray($kindInt32, [0, -163, 0])), new CaseRange.ptr(574, 574, $toNativeArray($kindInt32, [0, 10792, 0])), new CaseRange.ptr(575, 576, $toNativeArray($kindInt32, [10815, 0, 10815])), new CaseRange.ptr(577, 578, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(579, 579, $toNativeArray($kindInt32, [0, -195, 0])), new CaseRange.ptr(580, 580, $toNativeArray($kindInt32, [0, 69, 0])), new CaseRange.ptr(581, 581, $toNativeArray($kindInt32, [0, 71, 0])), new CaseRange.ptr(582, 591, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(592, 592, $toNativeArray($kindInt32, [10783, 0, 10783])), new CaseRange.ptr(593, 593, $toNativeArray($kindInt32, [10780, 0, 10780])), new CaseRange.ptr(594, 594, $toNativeArray($kindInt32, [10782, 0, 10782])), new CaseRange.ptr(595, 595, $toNativeArray($kindInt32, [-210, 0, -210])), new CaseRange.ptr(596, 596, $toNativeArray($kindInt32, [-206, 0, -206])), new CaseRange.ptr(598, 599, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(601, 601, $toNativeArray($kindInt32, [-202, 0, -202])), new CaseRange.ptr(603, 603, $toNativeArray($kindInt32, [-203, 0, -203])), new CaseRange.ptr(604, 604, $toNativeArray($kindInt32, [42319, 0, 42319])), new CaseRange.ptr(608, 608, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(609, 609, $toNativeArray($kindInt32, [42315, 0, 42315])), new CaseRange.ptr(611, 611, $toNativeArray($kindInt32, [-207, 0, -207])), new CaseRange.ptr(613, 613, $toNativeArray($kindInt32, [42280, 0, 42280])), new CaseRange.ptr(614, 614, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(616, 616, $toNativeArray($kindInt32, [-209, 0, -209])), new CaseRange.ptr(617, 617, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(619, 619, $toNativeArray($kindInt32, [10743, 0, 10743])), new CaseRange.ptr(620, 620, $toNativeArray($kindInt32, [42305, 0, 42305])), new CaseRange.ptr(623, 623, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(625, 625, $toNativeArray($kindInt32, [10749, 0, 10749])), new CaseRange.ptr(626, 626, $toNativeArray($kindInt32, [-213, 0, -213])), new CaseRange.ptr(629, 629, $toNativeArray($kindInt32, [-214, 0, -214])), new CaseRange.ptr(637, 637, $toNativeArray($kindInt32, [10727, 0, 10727])), new CaseRange.ptr(640, 640, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(643, 643, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(647, 647, $toNativeArray($kindInt32, [42282, 0, 42282])), new CaseRange.ptr(648, 648, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(649, 649, $toNativeArray($kindInt32, [-69, 0, -69])), new CaseRange.ptr(650, 651, $toNativeArray($kindInt32, [-217, 0, -217])), new CaseRange.ptr(652, 652, $toNativeArray($kindInt32, [-71, 0, -71])), new CaseRange.ptr(658, 658, $toNativeArray($kindInt32, [-219, 0, -219])), new CaseRange.ptr(669, 669, $toNativeArray($kindInt32, [42261, 0, 42261])), new CaseRange.ptr(670, 670, $toNativeArray($kindInt32, [42258, 0, 42258])), new CaseRange.ptr(837, 837, $toNativeArray($kindInt32, [84, 0, 84])), new CaseRange.ptr(880, 883, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(886, 887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(891, 893, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(895, 895, $toNativeArray($kindInt32, [0, 116, 0])), new CaseRange.ptr(902, 902, $toNativeArray($kindInt32, [0, 38, 0])), new CaseRange.ptr(904, 906, $toNativeArray($kindInt32, [0, 37, 0])), new CaseRange.ptr(908, 908, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(910, 911, $toNativeArray($kindInt32, [0, 63, 0])), new CaseRange.ptr(913, 929, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(931, 939, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(940, 940, $toNativeArray($kindInt32, [-38, 0, -38])), new CaseRange.ptr(941, 943, $toNativeArray($kindInt32, [-37, 0, -37])), new CaseRange.ptr(945, 961, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(962, 962, $toNativeArray($kindInt32, [-31, 0, -31])), new CaseRange.ptr(963, 971, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(972, 972, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(973, 974, $toNativeArray($kindInt32, [-63, 0, -63])), new CaseRange.ptr(975, 975, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(976, 976, $toNativeArray($kindInt32, [-62, 0, -62])), new CaseRange.ptr(977, 977, $toNativeArray($kindInt32, [-57, 0, -57])), new CaseRange.ptr(981, 981, $toNativeArray($kindInt32, [-47, 0, -47])), new CaseRange.ptr(982, 982, $toNativeArray($kindInt32, [-54, 0, -54])), new CaseRange.ptr(983, 983, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(984, 1007, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1008, 1008, $toNativeArray($kindInt32, [-86, 0, -86])), new CaseRange.ptr(1009, 1009, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1010, 1010, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(1011, 1011, $toNativeArray($kindInt32, [-116, 0, -116])), new CaseRange.ptr(1012, 1012, $toNativeArray($kindInt32, [0, -60, 0])), new CaseRange.ptr(1013, 1013, $toNativeArray($kindInt32, [-96, 0, -96])), new CaseRange.ptr(1015, 1016, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1017, 1017, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(1018, 1019, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1021, 1023, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(1024, 1039, $toNativeArray($kindInt32, [0, 80, 0])), new CaseRange.ptr(1040, 1071, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(1072, 1103, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(1104, 1119, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1120, 1153, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1162, 1215, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1216, 1216, $toNativeArray($kindInt32, [0, 15, 0])), new CaseRange.ptr(1217, 1230, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1231, 1231, $toNativeArray($kindInt32, [-15, 0, -15])), new CaseRange.ptr(1232, 1327, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1329, 1366, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(1377, 1414, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(4256, 4293, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4295, 4295, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4301, 4301, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(5024, 5103, $toNativeArray($kindInt32, [0, 38864, 0])), new CaseRange.ptr(5104, 5109, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(5112, 5117, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(7545, 7545, $toNativeArray($kindInt32, [35332, 0, 35332])), new CaseRange.ptr(7549, 7549, $toNativeArray($kindInt32, [3814, 0, 3814])), new CaseRange.ptr(7680, 7829, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7835, 7835, $toNativeArray($kindInt32, [-59, 0, -59])), new CaseRange.ptr(7838, 7838, $toNativeArray($kindInt32, [0, -7615, 0])), new CaseRange.ptr(7840, 7935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7936, 7943, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7944, 7951, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7952, 7957, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7960, 7965, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7968, 7975, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7976, 7983, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7984, 7991, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7992, 7999, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8000, 8005, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8008, 8013, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8017, 8017, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8019, 8019, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8021, 8021, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8023, 8023, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8025, 8025, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8027, 8027, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8029, 8029, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8031, 8031, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8032, 8039, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8040, 8047, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8048, 8049, $toNativeArray($kindInt32, [74, 0, 74])), new CaseRange.ptr(8050, 8053, $toNativeArray($kindInt32, [86, 0, 86])), new CaseRange.ptr(8054, 8055, $toNativeArray($kindInt32, [100, 0, 100])), new CaseRange.ptr(8056, 8057, $toNativeArray($kindInt32, [128, 0, 128])), new CaseRange.ptr(8058, 8059, $toNativeArray($kindInt32, [112, 0, 112])), new CaseRange.ptr(8060, 8061, $toNativeArray($kindInt32, [126, 0, 126])), new CaseRange.ptr(8064, 8071, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8072, 8079, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8080, 8087, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8088, 8095, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8096, 8103, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8104, 8111, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8112, 8113, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8115, 8115, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8120, 8121, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8122, 8123, $toNativeArray($kindInt32, [0, -74, 0])), new CaseRange.ptr(8124, 8124, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8126, 8126, $toNativeArray($kindInt32, [-7205, 0, -7205])), new CaseRange.ptr(8131, 8131, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8136, 8139, $toNativeArray($kindInt32, [0, -86, 0])), new CaseRange.ptr(8140, 8140, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8144, 8145, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8152, 8153, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8154, 8155, $toNativeArray($kindInt32, [0, -100, 0])), new CaseRange.ptr(8160, 8161, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8165, 8165, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(8168, 8169, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8170, 8171, $toNativeArray($kindInt32, [0, -112, 0])), new CaseRange.ptr(8172, 8172, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(8179, 8179, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8184, 8185, $toNativeArray($kindInt32, [0, -128, 0])), new CaseRange.ptr(8186, 8187, $toNativeArray($kindInt32, [0, -126, 0])), new CaseRange.ptr(8188, 8188, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8486, 8486, $toNativeArray($kindInt32, [0, -7517, 0])), new CaseRange.ptr(8490, 8490, $toNativeArray($kindInt32, [0, -8383, 0])), new CaseRange.ptr(8491, 8491, $toNativeArray($kindInt32, [0, -8262, 0])), new CaseRange.ptr(8498, 8498, $toNativeArray($kindInt32, [0, 28, 0])), new CaseRange.ptr(8526, 8526, $toNativeArray($kindInt32, [-28, 0, -28])), new CaseRange.ptr(8544, 8559, $toNativeArray($kindInt32, [0, 16, 0])), new CaseRange.ptr(8560, 8575, $toNativeArray($kindInt32, [-16, 0, -16])), new CaseRange.ptr(8579, 8580, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(9398, 9423, $toNativeArray($kindInt32, [0, 26, 0])), new CaseRange.ptr(9424, 9449, $toNativeArray($kindInt32, [-26, 0, -26])), new CaseRange.ptr(11264, 11310, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(11312, 11358, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(11360, 11361, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11362, 11362, $toNativeArray($kindInt32, [0, -10743, 0])), new CaseRange.ptr(11363, 11363, $toNativeArray($kindInt32, [0, -3814, 0])), new CaseRange.ptr(11364, 11364, $toNativeArray($kindInt32, [0, -10727, 0])), new CaseRange.ptr(11365, 11365, $toNativeArray($kindInt32, [-10795, 0, -10795])), new CaseRange.ptr(11366, 11366, $toNativeArray($kindInt32, [-10792, 0, -10792])), new CaseRange.ptr(11367, 11372, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11373, 11373, $toNativeArray($kindInt32, [0, -10780, 0])), new CaseRange.ptr(11374, 11374, $toNativeArray($kindInt32, [0, -10749, 0])), new CaseRange.ptr(11375, 11375, $toNativeArray($kindInt32, [0, -10783, 0])), new CaseRange.ptr(11376, 11376, $toNativeArray($kindInt32, [0, -10782, 0])), new CaseRange.ptr(11378, 11379, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11381, 11382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11390, 11391, $toNativeArray($kindInt32, [0, -10815, 0])), new CaseRange.ptr(11392, 11491, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11499, 11502, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11506, 11507, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11520, 11557, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11559, 11559, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11565, 11565, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(42560, 42605, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42624, 42651, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42786, 42799, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42802, 42863, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42873, 42876, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42877, 42877, $toNativeArray($kindInt32, [0, -35332, 0])), new CaseRange.ptr(42878, 42887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42891, 42892, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42893, 42893, $toNativeArray($kindInt32, [0, -42280, 0])), new CaseRange.ptr(42896, 42899, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42902, 42921, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42922, 42922, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42923, 42923, $toNativeArray($kindInt32, [0, -42319, 0])), new CaseRange.ptr(42924, 42924, $toNativeArray($kindInt32, [0, -42315, 0])), new CaseRange.ptr(42925, 42925, $toNativeArray($kindInt32, [0, -42305, 0])), new CaseRange.ptr(42928, 42928, $toNativeArray($kindInt32, [0, -42258, 0])), new CaseRange.ptr(42929, 42929, $toNativeArray($kindInt32, [0, -42282, 0])), new CaseRange.ptr(42930, 42930, $toNativeArray($kindInt32, [0, -42261, 0])), new CaseRange.ptr(42931, 42931, $toNativeArray($kindInt32, [0, 928, 0])), new CaseRange.ptr(42932, 42935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(43859, 43859, $toNativeArray($kindInt32, [-928, 0, -928])), new CaseRange.ptr(43888, 43967, $toNativeArray($kindInt32, [-38864, 0, -38864])), new CaseRange.ptr(65313, 65338, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(65345, 65370, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(66560, 66599, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66600, 66639, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(68736, 68786, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(68800, 68850, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(71840, 71871, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(71872, 71903, $toNativeArray($kindInt32, [-32, 0, -32]))]);
		$pkg.CaseRanges = _CaseRanges;
		properties = $toNativeArray($kindUint8, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 130, 130, 130, 136, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 130, 136, 136, 136, 130, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 130, 130, 130, 136, 130, 136, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 130, 136, 130, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 130, 136, 136, 136, 136, 136, 130, 136, 136, 224, 130, 136, 0, 136, 136, 136, 136, 132, 132, 136, 192, 130, 130, 136, 132, 224, 130, 132, 132, 132, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 136, 160, 160, 160, 160, 160, 160, 160, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 136, 192, 192, 192, 192, 192, 192, 192, 192]);
		caseOrbit = new sliceType$4([new foldPair.ptr(75, 107), new foldPair.ptr(83, 115), new foldPair.ptr(107, 8490), new foldPair.ptr(115, 383), new foldPair.ptr(181, 924), new foldPair.ptr(197, 229), new foldPair.ptr(223, 7838), new foldPair.ptr(229, 8491), new foldPair.ptr(304, 304), new foldPair.ptr(305, 305), new foldPair.ptr(383, 83), new foldPair.ptr(452, 453), new foldPair.ptr(453, 454), new foldPair.ptr(454, 452), new foldPair.ptr(455, 456), new foldPair.ptr(456, 457), new foldPair.ptr(457, 455), new foldPair.ptr(458, 459), new foldPair.ptr(459, 460), new foldPair.ptr(460, 458), new foldPair.ptr(497, 498), new foldPair.ptr(498, 499), new foldPair.ptr(499, 497), new foldPair.ptr(837, 921), new foldPair.ptr(914, 946), new foldPair.ptr(917, 949), new foldPair.ptr(920, 952), new foldPair.ptr(921, 953), new foldPair.ptr(922, 954), new foldPair.ptr(924, 956), new foldPair.ptr(928, 960), new foldPair.ptr(929, 961), new foldPair.ptr(931, 962), new foldPair.ptr(934, 966), new foldPair.ptr(937, 969), new foldPair.ptr(946, 976), new foldPair.ptr(949, 1013), new foldPair.ptr(952, 977), new foldPair.ptr(953, 8126), new foldPair.ptr(954, 1008), new foldPair.ptr(956, 181), new foldPair.ptr(960, 982), new foldPair.ptr(961, 1009), new foldPair.ptr(962, 963), new foldPair.ptr(963, 931), new foldPair.ptr(966, 981), new foldPair.ptr(969, 8486), new foldPair.ptr(976, 914), new foldPair.ptr(977, 1012), new foldPair.ptr(981, 934), new foldPair.ptr(982, 928), new foldPair.ptr(1008, 922), new foldPair.ptr(1009, 929), new foldPair.ptr(1012, 920), new foldPair.ptr(1013, 917), new foldPair.ptr(7776, 7777), new foldPair.ptr(7777, 7835), new foldPair.ptr(7835, 7776), new foldPair.ptr(7838, 223), new foldPair.ptr(8126, 837), new foldPair.ptr(8486, 937), new foldPair.ptr(8490, 75), new foldPair.ptr(8491, 197)]);
		foldCommon = new RangeTable.ptr(new sliceType([new Range16.ptr(924, 956, 32)]), sliceType$1.nil, 0);
		foldGreek = new RangeTable.ptr(new sliceType([new Range16.ptr(181, 837, 656)]), sliceType$1.nil, 0);
		foldInherited = new RangeTable.ptr(new sliceType([new Range16.ptr(921, 953, 32), new Range16.ptr(8126, 8126, 1)]), sliceType$1.nil, 0);
		foldL = new RangeTable.ptr(new sliceType([new Range16.ptr(837, 837, 1)]), sliceType$1.nil, 0);
		foldLl = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(192, 214, 1), new Range16.ptr(216, 222, 1), new Range16.ptr(256, 302, 2), new Range16.ptr(306, 310, 2), new Range16.ptr(313, 327, 2), new Range16.ptr(330, 376, 2), new Range16.ptr(377, 381, 2), new Range16.ptr(385, 386, 1), new Range16.ptr(388, 390, 2), new Range16.ptr(391, 393, 2), new Range16.ptr(394, 395, 1), new Range16.ptr(398, 401, 1), new Range16.ptr(403, 404, 1), new Range16.ptr(406, 408, 1), new Range16.ptr(412, 413, 1), new Range16.ptr(415, 416, 1), new Range16.ptr(418, 422, 2), new Range16.ptr(423, 425, 2), new Range16.ptr(428, 430, 2), new Range16.ptr(431, 433, 2), new Range16.ptr(434, 435, 1), new Range16.ptr(437, 439, 2), new Range16.ptr(440, 444, 4), new Range16.ptr(452, 453, 1), new Range16.ptr(455, 456, 1), new Range16.ptr(458, 459, 1), new Range16.ptr(461, 475, 2), new Range16.ptr(478, 494, 2), new Range16.ptr(497, 498, 1), new Range16.ptr(500, 502, 2), new Range16.ptr(503, 504, 1), new Range16.ptr(506, 562, 2), new Range16.ptr(570, 571, 1), new Range16.ptr(573, 574, 1), new Range16.ptr(577, 579, 2), new Range16.ptr(580, 582, 1), new Range16.ptr(584, 590, 2), new Range16.ptr(837, 880, 43), new Range16.ptr(882, 886, 4), new Range16.ptr(895, 902, 7), new Range16.ptr(904, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 913, 2), new Range16.ptr(914, 929, 1), new Range16.ptr(931, 939, 1), new Range16.ptr(975, 984, 9), new Range16.ptr(986, 1006, 2), new Range16.ptr(1012, 1015, 3), new Range16.ptr(1017, 1018, 1), new Range16.ptr(1021, 1071, 1), new Range16.ptr(1120, 1152, 2), new Range16.ptr(1162, 1216, 2), new Range16.ptr(1217, 1229, 2), new Range16.ptr(1232, 1326, 2), new Range16.ptr(1329, 1366, 1), new Range16.ptr(4256, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(5024, 5109, 1), new Range16.ptr(7680, 7828, 2), new Range16.ptr(7838, 7934, 2), new Range16.ptr(7944, 7951, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7976, 7983, 1), new Range16.ptr(7992, 7999, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8040, 8047, 1), new Range16.ptr(8072, 8079, 1), new Range16.ptr(8088, 8095, 1), new Range16.ptr(8104, 8111, 1), new Range16.ptr(8120, 8124, 1), new Range16.ptr(8136, 8140, 1), new Range16.ptr(8152, 8155, 1), new Range16.ptr(8168, 8172, 1), new Range16.ptr(8184, 8188, 1), new Range16.ptr(8486, 8490, 4), new Range16.ptr(8491, 8498, 7), new Range16.ptr(8579, 11264, 2685), new Range16.ptr(11265, 11310, 1), new Range16.ptr(11360, 11362, 2), new Range16.ptr(11363, 11364, 1), new Range16.ptr(11367, 11373, 2), new Range16.ptr(11374, 11376, 1), new Range16.ptr(11378, 11381, 3), new Range16.ptr(11390, 11392, 1), new Range16.ptr(11394, 11490, 2), new Range16.ptr(11499, 11501, 2), new Range16.ptr(11506, 42560, 31054), new Range16.ptr(42562, 42604, 2), new Range16.ptr(42624, 42650, 2), new Range16.ptr(42786, 42798, 2), new Range16.ptr(42802, 42862, 2), new Range16.ptr(42873, 42877, 2), new Range16.ptr(42878, 42886, 2), new Range16.ptr(42891, 42893, 2), new Range16.ptr(42896, 42898, 2), new Range16.ptr(42902, 42922, 2), new Range16.ptr(42923, 42925, 1), new Range16.ptr(42928, 42932, 1), new Range16.ptr(42934, 65313, 22379), new Range16.ptr(65314, 65338, 1)]), new sliceType$1([new Range32.ptr(66560, 66599, 1), new Range32.ptr(68736, 68786, 1), new Range32.ptr(71840, 71871, 1)]), 3);
		foldLt = new RangeTable.ptr(new sliceType([new Range16.ptr(452, 454, 2), new Range16.ptr(455, 457, 2), new Range16.ptr(458, 460, 2), new Range16.ptr(497, 499, 2), new Range16.ptr(8064, 8071, 1), new Range16.ptr(8080, 8087, 1), new Range16.ptr(8096, 8103, 1), new Range16.ptr(8115, 8131, 16), new Range16.ptr(8179, 8179, 1)]), sliceType$1.nil, 0);
		foldLu = new RangeTable.ptr(new sliceType([new Range16.ptr(97, 122, 1), new Range16.ptr(181, 223, 42), new Range16.ptr(224, 246, 1), new Range16.ptr(248, 255, 1), new Range16.ptr(257, 303, 2), new Range16.ptr(307, 311, 2), new Range16.ptr(314, 328, 2), new Range16.ptr(331, 375, 2), new Range16.ptr(378, 382, 2), new Range16.ptr(383, 384, 1), new Range16.ptr(387, 389, 2), new Range16.ptr(392, 396, 4), new Range16.ptr(402, 405, 3), new Range16.ptr(409, 410, 1), new Range16.ptr(414, 417, 3), new Range16.ptr(419, 421, 2), new Range16.ptr(424, 429, 5), new Range16.ptr(432, 436, 4), new Range16.ptr(438, 441, 3), new Range16.ptr(445, 447, 2), new Range16.ptr(453, 454, 1), new Range16.ptr(456, 457, 1), new Range16.ptr(459, 460, 1), new Range16.ptr(462, 476, 2), new Range16.ptr(477, 495, 2), new Range16.ptr(498, 499, 1), new Range16.ptr(501, 505, 4), new Range16.ptr(507, 543, 2), new Range16.ptr(547, 563, 2), new Range16.ptr(572, 575, 3), new Range16.ptr(576, 578, 2), new Range16.ptr(583, 591, 2), new Range16.ptr(592, 596, 1), new Range16.ptr(598, 599, 1), new Range16.ptr(601, 603, 2), new Range16.ptr(604, 608, 4), new Range16.ptr(609, 613, 2), new Range16.ptr(614, 616, 2), new Range16.ptr(617, 619, 2), new Range16.ptr(620, 623, 3), new Range16.ptr(625, 626, 1), new Range16.ptr(629, 637, 8), new Range16.ptr(640, 643, 3), new Range16.ptr(647, 652, 1), new Range16.ptr(658, 669, 11), new Range16.ptr(670, 837, 167), new Range16.ptr(881, 883, 2), new Range16.ptr(887, 891, 4), new Range16.ptr(892, 893, 1), new Range16.ptr(940, 943, 1), new Range16.ptr(945, 974, 1), new Range16.ptr(976, 977, 1), new Range16.ptr(981, 983, 1), new Range16.ptr(985, 1007, 2), new Range16.ptr(1008, 1011, 1), new Range16.ptr(1013, 1019, 3), new Range16.ptr(1072, 1119, 1), new Range16.ptr(1121, 1153, 2), new Range16.ptr(1163, 1215, 2), new Range16.ptr(1218, 1230, 2), new Range16.ptr(1231, 1327, 2), new Range16.ptr(1377, 1414, 1), new Range16.ptr(5112, 5117, 1), new Range16.ptr(7545, 7549, 4), new Range16.ptr(7681, 7829, 2), new Range16.ptr(7835, 7841, 6), new Range16.ptr(7843, 7935, 2), new Range16.ptr(7936, 7943, 1), new Range16.ptr(7952, 7957, 1), new Range16.ptr(7968, 7975, 1), new Range16.ptr(7984, 7991, 1), new Range16.ptr(8000, 8005, 1), new Range16.ptr(8017, 8023, 2), new Range16.ptr(8032, 8039, 1), new Range16.ptr(8048, 8061, 1), new Range16.ptr(8112, 8113, 1), new Range16.ptr(8126, 8144, 18), new Range16.ptr(8145, 8160, 15), new Range16.ptr(8161, 8165, 4), new Range16.ptr(8526, 8580, 54), new Range16.ptr(11312, 11358, 1), new Range16.ptr(11361, 11365, 4), new Range16.ptr(11366, 11372, 2), new Range16.ptr(11379, 11382, 3), new Range16.ptr(11393, 11491, 2), new Range16.ptr(11500, 11502, 2), new Range16.ptr(11507, 11520, 13), new Range16.ptr(11521, 11557, 1), new Range16.ptr(11559, 11565, 6), new Range16.ptr(42561, 42605, 2), new Range16.ptr(42625, 42651, 2), new Range16.ptr(42787, 42799, 2), new Range16.ptr(42803, 42863, 2), new Range16.ptr(42874, 42876, 2), new Range16.ptr(42879, 42887, 2), new Range16.ptr(42892, 42897, 5), new Range16.ptr(42899, 42903, 4), new Range16.ptr(42905, 42921, 2), new Range16.ptr(42933, 42935, 2), new Range16.ptr(43859, 43888, 29), new Range16.ptr(43889, 43967, 1), new Range16.ptr(65345, 65370, 1)]), new sliceType$1([new Range32.ptr(66600, 66639, 1), new Range32.ptr(68800, 68850, 1), new Range32.ptr(71872, 71903, 1)]), 4);
		foldM = new RangeTable.ptr(new sliceType([new Range16.ptr(921, 953, 32), new Range16.ptr(8126, 8126, 1)]), sliceType$1.nil, 0);
		foldMn = new RangeTable.ptr(new sliceType([new Range16.ptr(921, 953, 32), new Range16.ptr(8126, 8126, 1)]), sliceType$1.nil, 0);
		$pkg.FoldCategory = $makeMap($String.keyFor, [{ k: "Common", v: foldCommon }, { k: "Greek", v: foldGreek }, { k: "Inherited", v: foldInherited }, { k: "L", v: foldL }, { k: "Ll", v: foldLl }, { k: "Lt", v: foldLt }, { k: "Lu", v: foldLu }, { k: "M", v: foldM }, { k: "Mn", v: foldMn }]);
		$pkg.FoldScript = $makeMap($String.keyFor, []);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, $init, decodeRuneInternal, decodeRuneInStringInternal, DecodeRune, DecodeRuneInString, DecodeLastRune, DecodeLastRuneInString, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart, ValidString;
	decodeRuneInternal = function(p) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c0, c1, c2, c3, n, p, r, short$1, size;
		r = 0;
		size = 0;
		short$1 = false;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			_tmp$2 = true;
			r = _tmp;
			size = _tmp$1;
			short$1 = _tmp$2;
			return [r, size, short$1];
		}
		c0 = (0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]);
		if (c0 < 128) {
			_tmp$3 = (c0 >> 0);
			_tmp$4 = 1;
			_tmp$5 = false;
			r = _tmp$3;
			size = _tmp$4;
			short$1 = _tmp$5;
			return [r, size, short$1];
		}
		if (c0 < 192) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			_tmp$8 = false;
			r = _tmp$6;
			size = _tmp$7;
			short$1 = _tmp$8;
			return [r, size, short$1];
		}
		if (n < 2) {
			_tmp$9 = 65533;
			_tmp$10 = 1;
			_tmp$11 = true;
			r = _tmp$9;
			size = _tmp$10;
			short$1 = _tmp$11;
			return [r, size, short$1];
		}
		c1 = (1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]);
		if (c1 < 128 || 192 <= c1) {
			_tmp$12 = 65533;
			_tmp$13 = 1;
			_tmp$14 = false;
			r = _tmp$12;
			size = _tmp$13;
			short$1 = _tmp$14;
			return [r, size, short$1];
		}
		if (c0 < 224) {
			r = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);
			if (r <= 127) {
				_tmp$15 = 65533;
				_tmp$16 = 1;
				_tmp$17 = false;
				r = _tmp$15;
				size = _tmp$16;
				short$1 = _tmp$17;
				return [r, size, short$1];
			}
			_tmp$18 = r;
			_tmp$19 = 2;
			_tmp$20 = false;
			r = _tmp$18;
			size = _tmp$19;
			short$1 = _tmp$20;
			return [r, size, short$1];
		}
		if (n < 3) {
			_tmp$21 = 65533;
			_tmp$22 = 1;
			_tmp$23 = true;
			r = _tmp$21;
			size = _tmp$22;
			short$1 = _tmp$23;
			return [r, size, short$1];
		}
		c2 = (2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]);
		if (c2 < 128 || 192 <= c2) {
			_tmp$24 = 65533;
			_tmp$25 = 1;
			_tmp$26 = false;
			r = _tmp$24;
			size = _tmp$25;
			short$1 = _tmp$26;
			return [r, size, short$1];
		}
		if (c0 < 240) {
			r = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);
			if (r <= 2047) {
				_tmp$27 = 65533;
				_tmp$28 = 1;
				_tmp$29 = false;
				r = _tmp$27;
				size = _tmp$28;
				short$1 = _tmp$29;
				return [r, size, short$1];
			}
			if (55296 <= r && r <= 57343) {
				_tmp$30 = 65533;
				_tmp$31 = 1;
				_tmp$32 = false;
				r = _tmp$30;
				size = _tmp$31;
				short$1 = _tmp$32;
				return [r, size, short$1];
			}
			_tmp$33 = r;
			_tmp$34 = 3;
			_tmp$35 = false;
			r = _tmp$33;
			size = _tmp$34;
			short$1 = _tmp$35;
			return [r, size, short$1];
		}
		if (n < 4) {
			_tmp$36 = 65533;
			_tmp$37 = 1;
			_tmp$38 = true;
			r = _tmp$36;
			size = _tmp$37;
			short$1 = _tmp$38;
			return [r, size, short$1];
		}
		c3 = (3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3]);
		if (c3 < 128 || 192 <= c3) {
			_tmp$39 = 65533;
			_tmp$40 = 1;
			_tmp$41 = false;
			r = _tmp$39;
			size = _tmp$40;
			short$1 = _tmp$41;
			return [r, size, short$1];
		}
		if (c0 < 248) {
			r = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);
			if (r <= 65535 || 1114111 < r) {
				_tmp$42 = 65533;
				_tmp$43 = 1;
				_tmp$44 = false;
				r = _tmp$42;
				size = _tmp$43;
				short$1 = _tmp$44;
				return [r, size, short$1];
			}
			_tmp$45 = r;
			_tmp$46 = 4;
			_tmp$47 = false;
			r = _tmp$45;
			size = _tmp$46;
			short$1 = _tmp$47;
			return [r, size, short$1];
		}
		_tmp$48 = 65533;
		_tmp$49 = 1;
		_tmp$50 = false;
		r = _tmp$48;
		size = _tmp$49;
		short$1 = _tmp$50;
		return [r, size, short$1];
	};
	decodeRuneInStringInternal = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c0, c1, c2, c3, n, r, s, short$1, size;
		r = 0;
		size = 0;
		short$1 = false;
		n = s.length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			_tmp$2 = true;
			r = _tmp;
			size = _tmp$1;
			short$1 = _tmp$2;
			return [r, size, short$1];
		}
		c0 = s.charCodeAt(0);
		if (c0 < 128) {
			_tmp$3 = (c0 >> 0);
			_tmp$4 = 1;
			_tmp$5 = false;
			r = _tmp$3;
			size = _tmp$4;
			short$1 = _tmp$5;
			return [r, size, short$1];
		}
		if (c0 < 192) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			_tmp$8 = false;
			r = _tmp$6;
			size = _tmp$7;
			short$1 = _tmp$8;
			return [r, size, short$1];
		}
		if (n < 2) {
			_tmp$9 = 65533;
			_tmp$10 = 1;
			_tmp$11 = true;
			r = _tmp$9;
			size = _tmp$10;
			short$1 = _tmp$11;
			return [r, size, short$1];
		}
		c1 = s.charCodeAt(1);
		if (c1 < 128 || 192 <= c1) {
			_tmp$12 = 65533;
			_tmp$13 = 1;
			_tmp$14 = false;
			r = _tmp$12;
			size = _tmp$13;
			short$1 = _tmp$14;
			return [r, size, short$1];
		}
		if (c0 < 224) {
			r = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);
			if (r <= 127) {
				_tmp$15 = 65533;
				_tmp$16 = 1;
				_tmp$17 = false;
				r = _tmp$15;
				size = _tmp$16;
				short$1 = _tmp$17;
				return [r, size, short$1];
			}
			_tmp$18 = r;
			_tmp$19 = 2;
			_tmp$20 = false;
			r = _tmp$18;
			size = _tmp$19;
			short$1 = _tmp$20;
			return [r, size, short$1];
		}
		if (n < 3) {
			_tmp$21 = 65533;
			_tmp$22 = 1;
			_tmp$23 = true;
			r = _tmp$21;
			size = _tmp$22;
			short$1 = _tmp$23;
			return [r, size, short$1];
		}
		c2 = s.charCodeAt(2);
		if (c2 < 128 || 192 <= c2) {
			_tmp$24 = 65533;
			_tmp$25 = 1;
			_tmp$26 = false;
			r = _tmp$24;
			size = _tmp$25;
			short$1 = _tmp$26;
			return [r, size, short$1];
		}
		if (c0 < 240) {
			r = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);
			if (r <= 2047) {
				_tmp$27 = 65533;
				_tmp$28 = 1;
				_tmp$29 = false;
				r = _tmp$27;
				size = _tmp$28;
				short$1 = _tmp$29;
				return [r, size, short$1];
			}
			if (55296 <= r && r <= 57343) {
				_tmp$30 = 65533;
				_tmp$31 = 1;
				_tmp$32 = false;
				r = _tmp$30;
				size = _tmp$31;
				short$1 = _tmp$32;
				return [r, size, short$1];
			}
			_tmp$33 = r;
			_tmp$34 = 3;
			_tmp$35 = false;
			r = _tmp$33;
			size = _tmp$34;
			short$1 = _tmp$35;
			return [r, size, short$1];
		}
		if (n < 4) {
			_tmp$36 = 65533;
			_tmp$37 = 1;
			_tmp$38 = true;
			r = _tmp$36;
			size = _tmp$37;
			short$1 = _tmp$38;
			return [r, size, short$1];
		}
		c3 = s.charCodeAt(3);
		if (c3 < 128 || 192 <= c3) {
			_tmp$39 = 65533;
			_tmp$40 = 1;
			_tmp$41 = false;
			r = _tmp$39;
			size = _tmp$40;
			short$1 = _tmp$41;
			return [r, size, short$1];
		}
		if (c0 < 248) {
			r = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);
			if (r <= 65535 || 1114111 < r) {
				_tmp$42 = 65533;
				_tmp$43 = 1;
				_tmp$44 = false;
				r = _tmp$42;
				size = _tmp$43;
				short$1 = _tmp$44;
				return [r, size, short$1];
			}
			_tmp$45 = r;
			_tmp$46 = 4;
			_tmp$47 = false;
			r = _tmp$45;
			size = _tmp$46;
			short$1 = _tmp$47;
			return [r, size, short$1];
		}
		_tmp$48 = 65533;
		_tmp$49 = 1;
		_tmp$50 = false;
		r = _tmp$48;
		size = _tmp$49;
		short$1 = _tmp$50;
		return [r, size, short$1];
	};
	DecodeRune = function(p) {
		var $ptr, _tuple, p, r, size;
		r = 0;
		size = 0;
		_tuple = decodeRuneInternal(p);
		r = _tuple[0];
		size = _tuple[1];
		return [r, size];
	};
	$pkg.DecodeRune = DecodeRune;
	DecodeRuneInString = function(s) {
		var $ptr, _tuple, r, s, size;
		r = 0;
		size = 0;
		_tuple = decodeRuneInStringInternal(s);
		r = _tuple[0];
		size = _tuple[1];
		return [r, size];
	};
	$pkg.DecodeRuneInString = DecodeRuneInString;
	DecodeLastRune = function(p) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, p, r, size, start;
		r = 0;
		size = 0;
		end = p.$length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]) >> 0);
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRune($subslice(p, start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRune = DecodeLastRune;
	DecodeLastRuneInString = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, r, s, size, start;
		r = 0;
		size = 0;
		end = s.length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (s.charCodeAt(start) >> 0);
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(s.charCodeAt(start))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRuneInString(s.substring(start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRuneInString = DecodeLastRuneInString;
	RuneLen = function(r) {
		var $ptr, r;
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	$pkg.RuneLen = RuneLen;
	EncodeRune = function(p, r) {
		var $ptr, i, p, r;
		i = (r >>> 0);
		if (i <= 127) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (r << 24 >>> 24));
			return 1;
		} else if (i <= 2047) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((192 | ((r >> 6 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 2;
		} else if (i > 1114111 || 55296 <= i && i <= 57343) {
			r = 65533;
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 3;
		} else if (i <= 65535) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 3;
		} else {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((240 | ((r >> 18 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | ((((r >> 12 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = ((128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 4;
		}
	};
	$pkg.EncodeRune = EncodeRune;
	RuneCount = function(p) {
		var $ptr, _tuple, i, n, p, size;
		i = 0;
		n = 0;
		n = 0;
		while (true) {
			if (!(i < p.$length)) { break; }
			if (((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]) < 128) {
				i = i + (1) >> 0;
			} else {
				_tuple = DecodeRune($subslice(p, i));
				size = _tuple[1];
				i = i + (size) >> 0;
			}
			n = n + (1) >> 0;
		}
		return n;
	};
	$pkg.RuneCount = RuneCount;
	RuneCountInString = function(s) {
		var $ptr, _i, _ref, _rune, n, s;
		n = 0;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			n = n + (1) >> 0;
			_i += _rune[1];
		}
		return n;
	};
	$pkg.RuneCountInString = RuneCountInString;
	RuneStart = function(b) {
		var $ptr, b;
		return !((((b & 192) >>> 0) === 128));
	};
	$pkg.RuneStart = RuneStart;
	ValidString = function(s) {
		var $ptr, _i, _ref, _rune, _tuple, i, r, s, size;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			r = _rune[0];
			if (r === 65533) {
				_tuple = DecodeRuneInString(s.substring(i));
				size = _tuple[1];
				if (size === 1) {
					return false;
				}
			}
			_i += _rune[1];
		}
		return true;
	};
	$pkg.ValidString = ValidString;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, $init, errors, io, unicode, utf8, Buffer, readOp, ptrType, sliceType, arrayType, arrayType$1, IndexByte, Equal, makeSlice, NewBuffer, Index, HasPrefix, EqualFold;
	errors = $packages["errors"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Buffer = $pkg.Buffer = $newType(0, $kindStruct, "bytes.Buffer", "Buffer", "bytes", function(buf_, off_, runeBytes_, bootstrap_, lastRead_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.off = 0;
			this.runeBytes = arrayType.zero();
			this.bootstrap = arrayType$1.zero();
			this.lastRead = 0;
			return;
		}
		this.buf = buf_;
		this.off = off_;
		this.runeBytes = runeBytes_;
		this.bootstrap = bootstrap_;
		this.lastRead = lastRead_;
	});
	readOp = $pkg.readOp = $newType(4, $kindInt, "bytes.readOp", "readOp", "bytes", null);
	ptrType = $ptrType(Buffer);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	IndexByte = function(s, c) {
		var $ptr, _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	$pkg.IndexByte = IndexByte;
	Equal = function(a, b) {
		var $ptr, _i, _ref, a, b, c, i;
		if (!((a.$length === b.$length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((c === ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i])))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$pkg.Equal = Equal;
	Buffer.ptr.prototype.Bytes = function() {
		var $ptr, b;
		b = this;
		return $subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	Buffer.ptr.prototype.String = function() {
		var $ptr, b;
		b = this;
		if (b === ptrType.nil) {
			return "<nil>";
		}
		return $bytesToString($subslice(b.buf, b.off));
	};
	Buffer.prototype.String = function() { return this.$val.String(); };
	Buffer.ptr.prototype.Len = function() {
		var $ptr, b;
		b = this;
		return b.buf.$length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.$val.Len(); };
	Buffer.ptr.prototype.Cap = function() {
		var $ptr, b;
		b = this;
		return b.buf.$capacity;
	};
	Buffer.prototype.Cap = function() { return this.$val.Cap(); };
	Buffer.ptr.prototype.Truncate = function(n) {
		var $ptr, b, n;
		b = this;
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			$panic(new $String("bytes.Buffer: truncation out of range"));
		} else if (n === 0) {
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };
	Buffer.ptr.prototype.Reset = function() {
		var $ptr, b;
		b = this;
		b.Truncate(0);
	};
	Buffer.prototype.Reset = function() { return this.$val.Reset(); };
	Buffer.ptr.prototype.grow = function(n) {
		var $ptr, _q, b, buf, m, n;
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Truncate(0);
		}
		if ((b.buf.$length + n >> 0) > b.buf.$capacity) {
			buf = sliceType.nil;
			if (b.buf === sliceType.nil && n <= 64) {
				buf = $subslice(new sliceType(b.bootstrap), 0);
			} else if ((m + n >> 0) <= (_q = b.buf.$capacity / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) {
				$copySlice(b.buf, $subslice(b.buf, b.off));
				buf = $subslice(b.buf, 0, m);
			} else {
				buf = makeSlice(($imul(2, b.buf.$capacity)) + n >> 0);
				$copySlice(buf, $subslice(b.buf, b.off));
			}
			b.buf = buf;
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, ((b.off + m >> 0) + n >> 0));
		return b.off + m >> 0;
	};
	Buffer.prototype.grow = function(n) { return this.$val.grow(n); };
	Buffer.ptr.prototype.Grow = function(n) {
		var $ptr, b, m, n;
		b = this;
		if (n < 0) {
			$panic(new $String("bytes.Buffer.Grow: negative count"));
		}
		m = b.grow(n);
		b.buf = $subslice(b.buf, 0, m);
	};
	Buffer.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Buffer.ptr.prototype.Write = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, m, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		m = b.grow(p.$length);
		_tmp = $copySlice($subslice(b.buf, m), p);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.Write = function(p) { return this.$val.Write(p); };
	Buffer.ptr.prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, b, err, m, n, s;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		m = b.grow(s.length);
		_tmp = $copyString($subslice(b.buf, m), s);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Buffer.ptr.prototype.ReadFrom = function(r) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, free, m, n, newBuf, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; free = $f.free; m = $f.m; n = $f.n; newBuf = $f.newBuf; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
		}
		/* while (true) { */ case 1:
			free = b.buf.$capacity - b.buf.$length >> 0;
			if (free < 512) {
				newBuf = b.buf;
				if ((b.off + free >> 0) < 512) {
					newBuf = makeSlice(($imul(2, b.buf.$capacity)) + 512 >> 0);
				}
				$copySlice(newBuf, $subslice(b.buf, b.off));
				b.buf = $subslice(newBuf, 0, (b.buf.$length - b.off >> 0));
				b.off = 0;
			}
			_r = r.Read($subslice(b.buf, b.buf.$length, b.buf.$capacity)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			b.buf = $subslice(b.buf, 0, (b.buf.$length + m >> 0));
			n = (x = new $Int64(0, m), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if ($interfaceIsEqual(e, io.EOF)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.ReadFrom }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.free = free; $f.m = m; $f.n = n; $f.newBuf = newBuf; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	makeSlice = function(n) {
		var $ptr, n, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			var $ptr;
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				$panic($pkg.ErrTooLarge);
			}
		}), []]);
		return $makeSlice(sliceType, n);
		/* */ } catch(err) { $err = err; return sliceType.nil; } finally { $callDeferred($deferred, $err); }
	};
	Buffer.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, m, n, nBytes, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; n = $f.n; nBytes = $f.nBytes; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		/* */ if (b.off < b.buf.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.off < b.buf.$length) { */ case 1:
			nBytes = b.Len();
			_r = w.Write($subslice(b.buf, b.off)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (m > nBytes) {
				$panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = new $Int64(0, m);
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				return [n, err];
			}
			if (!((m === nBytes))) {
				_tmp$2 = n;
				_tmp$3 = io.ErrShortWrite;
				n = _tmp$2;
				err = _tmp$3;
				return [n, err];
			}
		/* } */ case 2:
		b.Truncate(0);
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.n = n; $f.nBytes = nBytes; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Buffer.ptr.prototype.WriteByte = function(c) {
		var $ptr, b, c, m, x;
		b = this;
		b.lastRead = 0;
		m = b.grow(1);
		(x = b.buf, ((m < 0 || m >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + m] = c));
		return $ifaceNil;
	};
	Buffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Buffer.ptr.prototype.WriteRune = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, r;
		n = 0;
		err = $ifaceNil;
		b = this;
		if (r < 128) {
			b.WriteByte((r << 24 >>> 24));
			_tmp = 1;
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		n = utf8.EncodeRune($subslice(new sliceType(b.runeBytes), 0), r);
		b.Write($subslice(new sliceType(b.runeBytes), 0, n));
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Buffer.ptr.prototype.Read = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			if (p.$length === 0) {
				return [n, err];
			}
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		n = $copySlice(p, $subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.$val.Read(p); };
	Buffer.ptr.prototype.Next = function(n) {
		var $ptr, b, data, m, n;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = $subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.$val.Next(n); };
	Buffer.ptr.prototype.ReadByte = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, c, err, x, x$1;
		c = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0;
			_tmp$1 = io.EOF;
			c = _tmp;
			err = _tmp$1;
			return [c, err];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		b.off = b.off + (1) >> 0;
		b.lastRead = 2;
		_tmp$2 = c;
		_tmp$3 = $ifaceNil;
		c = _tmp$2;
		err = _tmp$3;
		return [c, err];
	};
	Buffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Buffer.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, b, c, err, n, r, size, x, x$1;
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [r, size, err];
		}
		b.lastRead = 1;
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		if (c < 128) {
			b.off = b.off + (1) >> 0;
			_tmp$3 = (c >> 0);
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			r = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [r, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(b.buf, b.off));
		r = _tuple[0];
		n = _tuple[1];
		b.off = b.off + (n) >> 0;
		_tmp$6 = r;
		_tmp$7 = n;
		_tmp$8 = $ifaceNil;
		r = _tmp$6;
		size = _tmp$7;
		err = _tmp$8;
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Buffer.ptr.prototype.UnreadRune = function() {
		var $ptr, _tuple, b, n;
		b = this;
		if (!((b.lastRead === 1))) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not ReadRune");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			_tuple = utf8.DecodeLastRune($subslice(b.buf, 0, b.off));
			n = _tuple[1];
			b.off = b.off - (n) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Buffer.ptr.prototype.UnreadByte = function() {
		var $ptr, b;
		b = this;
		if (!((b.lastRead === 1)) && !((b.lastRead === 2))) {
			return errors.New("bytes.Buffer: UnreadByte: previous operation was not a read");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - (1) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Buffer.ptr.prototype.ReadBytes = function(delim) {
		var $ptr, _tuple, b, delim, err, line, slice;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		line = $appendSlice(line, slice);
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Buffer.ptr.prototype.readSlice = function(delim) {
		var $ptr, _tmp, _tmp$1, b, delim, end, err, i, line;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		i = IndexByte($subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.$length;
			err = io.EOF;
		}
		line = $subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = 2;
		_tmp = line;
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };
	Buffer.ptr.prototype.ReadString = function(delim) {
		var $ptr, _tmp, _tmp$1, _tuple, b, delim, err, line, slice;
		line = "";
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		_tmp = $bytesToString(slice);
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	NewBuffer = function(buf) {
		var $ptr, buf;
		return new Buffer.ptr(buf, 0, arrayType.zero(), arrayType$1.zero(), 0);
	};
	$pkg.NewBuffer = NewBuffer;
	Index = function(s, sep) {
		var $ptr, c, i, n, o, s, sep, t;
		n = sep.$length;
		if (n === 0) {
			return 0;
		}
		if (n > s.$length) {
			return -1;
		}
		c = (0 >= sep.$length ? $throwRuntimeError("index out of range") : sep.$array[sep.$offset + 0]);
		if (n === 1) {
			return IndexByte(s, c);
		}
		i = 0;
		t = $subslice(s, 0, ((s.$length - n >> 0) + 1 >> 0));
		while (true) {
			if (!(i < t.$length)) { break; }
			if (!((((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]) === c))) {
				o = IndexByte($subslice(t, i), c);
				if (o < 0) {
					break;
				}
				i = i + (o) >> 0;
			}
			if (Equal($subslice(s, i, (i + n >> 0)), sep)) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return -1;
	};
	$pkg.Index = Index;
	HasPrefix = function(s, prefix) {
		var $ptr, prefix, s;
		return s.$length >= prefix.$length && Equal($subslice(s, 0, prefix.$length), prefix);
	};
	$pkg.HasPrefix = HasPrefix;
	EqualFold = function(s, t) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, r, r$1, r$2, s, size, size$1, sr, t, tr;
		while (true) {
			if (!(!((s.$length === 0)) && !((t.$length === 0)))) { break; }
			_tmp = 0;
			_tmp$1 = 0;
			sr = _tmp;
			tr = _tmp$1;
			if ((0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]) < 128) {
				_tmp$2 = ((0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]) >> 0);
				_tmp$3 = $subslice(s, 1);
				sr = _tmp$2;
				s = _tmp$3;
			} else {
				_tuple = utf8.DecodeRune(s);
				r = _tuple[0];
				size = _tuple[1];
				_tmp$4 = r;
				_tmp$5 = $subslice(s, size);
				sr = _tmp$4;
				s = _tmp$5;
			}
			if ((0 >= t.$length ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 0]) < 128) {
				_tmp$6 = ((0 >= t.$length ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 0]) >> 0);
				_tmp$7 = $subslice(t, 1);
				tr = _tmp$6;
				t = _tmp$7;
			} else {
				_tuple$1 = utf8.DecodeRune(t);
				r$1 = _tuple$1[0];
				size$1 = _tuple$1[1];
				_tmp$8 = r$1;
				_tmp$9 = $subslice(t, size$1);
				tr = _tmp$8;
				t = _tmp$9;
			}
			if (tr === sr) {
				continue;
			}
			if (tr < sr) {
				_tmp$10 = sr;
				_tmp$11 = tr;
				tr = _tmp$10;
				sr = _tmp$11;
			}
			if (tr < 128 && 65 <= sr && sr <= 90) {
				if (tr === ((sr + 97 >> 0) - 65 >> 0)) {
					continue;
				}
				return false;
			}
			r$2 = unicode.SimpleFold(sr);
			while (true) {
				if (!(!((r$2 === sr)) && r$2 < tr)) { break; }
				r$2 = unicode.SimpleFold(r$2);
			}
			if (r$2 === tr) {
				continue;
			}
			return false;
		}
		return s.$length === t.$length;
	};
	$pkg.EqualFold = EqualFold;
	ptrType.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "grow", name: "grow", pkg: "bytes", typ: $funcType([$Int], [$Int], false)}, {prop: "Grow", name: "Grow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "readSlice", name: "readSlice", pkg: "bytes", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}];
	Buffer.init([{prop: "buf", name: "buf", pkg: "bytes", typ: sliceType, tag: ""}, {prop: "off", name: "off", pkg: "bytes", typ: $Int, tag: ""}, {prop: "runeBytes", name: "runeBytes", pkg: "bytes", typ: arrayType, tag: ""}, {prop: "bootstrap", name: "bootstrap", pkg: "bytes", typ: arrayType$1, tag: ""}, {prop: "lastRead", name: "lastRead", pkg: "bytes", typ: readOp, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, $init, bytes, errors, js, runtime, sync, mmapper, Errno, _C_int, Timespec, Stat_t, Dirent, sliceType, sliceType$1, ptrType$2, arrayType$1, sliceType$5, ptrType$12, arrayType$10, arrayType$13, arrayType$14, arrayType$15, structType, ptrType$26, mapType, funcType, funcType$1, ptrType$30, arrayType$17, warningPrinted, lineBuffer, syscallModule, alreadyTriedToLoad, minusOne, envOnce, envLock, env, envs, minRoutingSockaddrLen, mapper, errEAGAIN, errEINVAL, errENOENT, errors$1, init, printWarning, printToConsole, use, runtime_envs, syscall, Syscall, Syscall6, BytePtrFromString, copyenv, Getenv, CloseOnExec, rsaAlignOf, itoa, uitoa, ByteSliceFromString, ReadDirent, Sysctl, nametomib, ParseDirent, errnoErr, Read, Write, sysctl, fcntl, Chmod, Close, Exit, Fchdir, Fchmod, Fchown, Fstat, Fsync, Ftruncate, Getdirentries, Lstat, Open, Pread, Pwrite, read, Seek, Stat, write, mmap, munmap;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	mmapper = $pkg.mmapper = $newType(0, $kindStruct, "syscall.mmapper", "mmapper", "syscall", function(Mutex_, active_, mmap_, munmap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Mutex = new sync.Mutex.ptr(0, 0);
			this.active = false;
			this.mmap = $throwNilPointerError;
			this.munmap = $throwNilPointerError;
			return;
		}
		this.Mutex = Mutex_;
		this.active = active_;
		this.mmap = mmap_;
		this.munmap = munmap_;
	});
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", "Errno", "syscall", null);
	_C_int = $pkg._C_int = $newType(4, $kindInt32, "syscall._C_int", "_C_int", "syscall", null);
	Timespec = $pkg.Timespec = $newType(0, $kindStruct, "syscall.Timespec", "Timespec", "syscall", function(Sec_, Nsec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Sec = new $Int64(0, 0);
			this.Nsec = new $Int64(0, 0);
			return;
		}
		this.Sec = Sec_;
		this.Nsec = Nsec_;
	});
	Stat_t = $pkg.Stat_t = $newType(0, $kindStruct, "syscall.Stat_t", "Stat_t", "syscall", function(Dev_, Mode_, Nlink_, Ino_, Uid_, Gid_, Rdev_, Pad_cgo_0_, Atimespec_, Mtimespec_, Ctimespec_, Birthtimespec_, Size_, Blocks_, Blksize_, Flags_, Gen_, Lspare_, Qspare_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dev = 0;
			this.Mode = 0;
			this.Nlink = 0;
			this.Ino = new $Uint64(0, 0);
			this.Uid = 0;
			this.Gid = 0;
			this.Rdev = 0;
			this.Pad_cgo_0 = arrayType$1.zero();
			this.Atimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Mtimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Ctimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Birthtimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Size = new $Int64(0, 0);
			this.Blocks = new $Int64(0, 0);
			this.Blksize = 0;
			this.Flags = 0;
			this.Gen = 0;
			this.Lspare = 0;
			this.Qspare = arrayType$17.zero();
			return;
		}
		this.Dev = Dev_;
		this.Mode = Mode_;
		this.Nlink = Nlink_;
		this.Ino = Ino_;
		this.Uid = Uid_;
		this.Gid = Gid_;
		this.Rdev = Rdev_;
		this.Pad_cgo_0 = Pad_cgo_0_;
		this.Atimespec = Atimespec_;
		this.Mtimespec = Mtimespec_;
		this.Ctimespec = Ctimespec_;
		this.Birthtimespec = Birthtimespec_;
		this.Size = Size_;
		this.Blocks = Blocks_;
		this.Blksize = Blksize_;
		this.Flags = Flags_;
		this.Gen = Gen_;
		this.Lspare = Lspare_;
		this.Qspare = Qspare_;
	});
	Dirent = $pkg.Dirent = $newType(0, $kindStruct, "syscall.Dirent", "Dirent", "syscall", function(Ino_, Seekoff_, Reclen_, Namlen_, Type_, Name_, Pad_cgo_0_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Ino = new $Uint64(0, 0);
			this.Seekoff = new $Uint64(0, 0);
			this.Reclen = 0;
			this.Namlen = 0;
			this.Type = 0;
			this.Name = arrayType$14.zero();
			this.Pad_cgo_0 = arrayType$15.zero();
			return;
		}
		this.Ino = Ino_;
		this.Seekoff = Seekoff_;
		this.Reclen = Reclen_;
		this.Namlen = Namlen_;
		this.Type = Type_;
		this.Name = Name_;
		this.Pad_cgo_0 = Pad_cgo_0_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($String);
	ptrType$2 = $ptrType($Uint8);
	arrayType$1 = $arrayType($Uint8, 4);
	sliceType$5 = $sliceType(_C_int);
	ptrType$12 = $ptrType($Uintptr);
	arrayType$10 = $arrayType($Uint8, 32);
	arrayType$13 = $arrayType(_C_int, 14);
	arrayType$14 = $arrayType($Int8, 1024);
	arrayType$15 = $arrayType($Uint8, 3);
	structType = $structType([{prop: "addr", name: "addr", pkg: "syscall", typ: $Uintptr, tag: ""}, {prop: "len", name: "len", pkg: "syscall", typ: $Int, tag: ""}, {prop: "cap", name: "cap", pkg: "syscall", typ: $Int, tag: ""}]);
	ptrType$26 = $ptrType(mmapper);
	mapType = $mapType(ptrType$2, sliceType);
	funcType = $funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false);
	funcType$1 = $funcType([$Uintptr, $Uintptr], [$error], false);
	ptrType$30 = $ptrType(Timespec);
	arrayType$17 = $arrayType($Int64, 2);
	init = function() {
		var $ptr;
		$flushConsole = (function() {
			var $ptr;
			if (!((lineBuffer.$length === 0))) {
				$global.console.log($externalize($bytesToString(lineBuffer), $String));
				lineBuffer = sliceType.nil;
			}
		});
	};
	printWarning = function() {
		var $ptr;
		if (!warningPrinted) {
			$global.console.error($externalize("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md", $String));
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var $ptr, b, goPrintToConsole, i;
		goPrintToConsole = $global.goPrintToConsole;
		if (!(goPrintToConsole === undefined)) {
			goPrintToConsole(b);
			return;
		}
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = bytes.IndexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize($bytesToString($subslice(lineBuffer, 0, i)), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	use = function(p) {
		var $ptr, p;
	};
	runtime_envs = function() {
		var $ptr, envkeys, envs$1, i, jsEnv, key, process;
		process = $global.process;
		if (process === undefined) {
			return sliceType$1.nil;
		}
		jsEnv = process.env;
		envkeys = $global.Object.keys(jsEnv);
		envs$1 = $makeSlice(sliceType$1, $parseInt(envkeys.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(envkeys.length))) { break; }
			key = $internalize(envkeys[i], $String);
			((i < 0 || i >= envs$1.$length) ? $throwRuntimeError("index out of range") : envs$1.$array[envs$1.$offset + i] = key + "=" + $internalize(jsEnv[$externalize(key, $String)], $String));
			i = i + (1) >> 0;
		}
		return envs$1;
	};
	syscall = function(name) {
		var $ptr, name, require, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			var $ptr;
			$recover();
		}), []]);
		if (syscallModule === null) {
			if (alreadyTriedToLoad) {
				return null;
			}
			alreadyTriedToLoad = true;
			require = $global.require;
			if (require === undefined) {
				$panic(new $String(""));
			}
			syscallModule = require($externalize("syscall", $String));
		}
		return syscallModule[$externalize(name, $String)];
		/* */ } catch(err) { $err = err; return null; } finally { $callDeferred($deferred, $err); }
	};
	Syscall = function(trap, a1, a2, a3) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a1, a2, a3, array, err, f, r, r1, r2, slice, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0);
			_tmp$1 = (($parseInt(r[1]) >> 0) >>> 0);
			_tmp$2 = (($parseInt(r[2]) >> 0) >>> 0);
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if ((trap === 4) && ((a1 === 1) || (a1 === 2))) {
			array = a2;
			slice = $makeSlice(sliceType, $parseInt(array.length));
			slice.$array = array;
			printToConsole(slice);
			_tmp$3 = ($parseInt(array.length) >>> 0);
			_tmp$4 = 0;
			_tmp$5 = 0;
			r1 = _tmp$3;
			r2 = _tmp$4;
			err = _tmp$5;
			return [r1, r2, err];
		}
		if (trap === 1) {
			runtime.Goexit();
		}
		printWarning();
		_tmp$6 = (minusOne >>> 0);
		_tmp$7 = 0;
		_tmp$8 = 13;
		r1 = _tmp$6;
		r2 = _tmp$7;
		err = _tmp$8;
		return [r1, r2, err];
	};
	$pkg.Syscall = Syscall;
	Syscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a1, a2, a3, a4, a5, a6, err, f, r, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall6");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3, a4, a5, a6);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0);
			_tmp$1 = (($parseInt(r[1]) >> 0) >>> 0);
			_tmp$2 = (($parseInt(r[2]) >> 0) >>> 0);
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if (!((trap === 202))) {
			printWarning();
		}
		_tmp$3 = (minusOne >>> 0);
		_tmp$4 = 0;
		_tmp$5 = 13;
		r1 = _tmp$3;
		r2 = _tmp$4;
		err = _tmp$5;
		return [r1, r2, err];
	};
	$pkg.Syscall6 = Syscall6;
	BytePtrFromString = function(s) {
		var $ptr, _i, _ref, array, b, i, s;
		array = new ($global.Uint8Array)(s.length + 1 >> 0);
		_ref = new sliceType($stringToBytes(s));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === 0) {
				return [ptrType$2.nil, new Errno(22)];
			}
			array[i] = b;
			_i++;
		}
		array[s.length] = 0;
		return [array, $ifaceNil];
	};
	$pkg.BytePtrFromString = BytePtrFromString;
	copyenv = function() {
		var $ptr, _entry, _i, _key, _ref, _tuple, i, j, key, ok, s;
		env = {};
		_ref = envs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			j = 0;
			while (true) {
				if (!(j < s.length)) { break; }
				if (s.charCodeAt(j) === 61) {
					key = s.substring(0, j);
					_tuple = (_entry = env[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [0, false]);
					ok = _tuple[1];
					if (!ok) {
						_key = key; (env || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: i };
					} else {
						((i < 0 || i >= envs.$length) ? $throwRuntimeError("index out of range") : envs.$array[envs.$offset + i] = "");
					}
					break;
				}
				j = j + (1) >> 0;
			}
			_i++;
		}
	};
	Getenv = function(key) {
		var $ptr, _entry, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, found, i, i$1, key, ok, s, value, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; found = $f.found; i = $f.i; i$1 = $f.i$1; key = $f.key; ok = $f.ok; s = $f.s; value = $f.value; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		value = "";
		found = false;
		$r = envOnce.Do(copyenv); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (key.length === 0) {
			_tmp = "";
			_tmp$1 = false;
			value = _tmp;
			found = _tmp$1;
			return [value, found];
		}
		$r = envLock.RLock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(envLock, "RUnlock"), []]);
		_tuple = (_entry = env[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		i = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			_tmp$2 = "";
			_tmp$3 = false;
			value = _tmp$2;
			found = _tmp$3;
			return [value, found];
		}
		s = ((i < 0 || i >= envs.$length) ? $throwRuntimeError("index out of range") : envs.$array[envs.$offset + i]);
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			if (s.charCodeAt(i$1) === 61) {
				_tmp$4 = s.substring((i$1 + 1 >> 0));
				_tmp$5 = true;
				value = _tmp$4;
				found = _tmp$5;
				return [value, found];
			}
			i$1 = i$1 + (1) >> 0;
		}
		_tmp$6 = "";
		_tmp$7 = false;
		value = _tmp$6;
		found = _tmp$7;
		return [value, found];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [value, found]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Getenv }; } $f.$ptr = $ptr; $f._entry = _entry; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.found = found; $f.i = i; $f.i$1 = i$1; $f.key = key; $f.ok = ok; $f.s = s; $f.value = value; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.Getenv = Getenv;
	CloseOnExec = function(fd) {
		var $ptr, fd;
		fcntl(fd, 2, 1);
	};
	$pkg.CloseOnExec = CloseOnExec;
	rsaAlignOf = function(salen) {
		var $ptr, salen, salign;
		salign = 8;
		salign = 4;
		if (salen === 0) {
			return salign;
		}
		return (((salen + salign >> 0) - 1 >> 0)) & (~((salign - 1 >> 0)) >> 0);
	};
	itoa = function(val) {
		var $ptr, val;
		if (val < 0) {
			return "-" + uitoa((-val >>> 0));
		}
		return uitoa((val >>> 0));
	};
	uitoa = function(val) {
		var $ptr, _q, _r, buf, i, val;
		buf = arrayType$10.zero();
		i = 31;
		while (true) {
			if (!(val >= 10)) { break; }
			((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = (((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			i = i - (1) >> 0;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = ((val + 48 >>> 0) << 24 >>> 24));
		return $bytesToString($subslice(new sliceType(buf), i));
	};
	ByteSliceFromString = function(s) {
		var $ptr, a, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === 0) {
				return [sliceType.nil, new Errno(22)];
			}
			i = i + (1) >> 0;
		}
		a = $makeSlice(sliceType, (s.length + 1 >> 0));
		$copyString(a, s);
		return [a, $ifaceNil];
	};
	$pkg.ByteSliceFromString = ByteSliceFromString;
	Timespec.ptr.prototype.Unix = function() {
		var $ptr, _tmp, _tmp$1, nsec, sec, ts;
		sec = new $Int64(0, 0);
		nsec = new $Int64(0, 0);
		ts = this;
		_tmp = ts.Sec;
		_tmp$1 = ts.Nsec;
		sec = _tmp;
		nsec = _tmp$1;
		return [sec, nsec];
	};
	Timespec.prototype.Unix = function() { return this.$val.Unix(); };
	Timespec.ptr.prototype.Nano = function() {
		var $ptr, ts, x, x$1;
		ts = this;
		return (x = $mul64(ts.Sec, new $Int64(0, 1000000000)), x$1 = ts.Nsec, new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Timespec.prototype.Nano = function() { return this.$val.Nano(); };
	ReadDirent = function(fd, buf) {
		var $ptr, _tuple, base, buf, err, fd, n;
		n = 0;
		err = $ifaceNil;
		base = new Uint8Array(8);
		_tuple = Getdirentries(fd, buf, base);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	$pkg.ReadDirent = ReadDirent;
	Sysctl = function(name) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, buf, err, mib, n, n$24ptr, name, value, x;
		value = "";
		err = $ifaceNil;
		_tuple = nametomib(name);
		mib = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = "";
			_tmp$1 = err;
			value = _tmp;
			err = _tmp$1;
			return [value, err];
		}
		n = 0;
		err = sysctl(mib, ptrType$2.nil, (n$24ptr || (n$24ptr = new ptrType$12(function() { return n; }, function($v) { n = $v; }))), ptrType$2.nil, 0);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = "";
			_tmp$3 = err;
			value = _tmp$2;
			err = _tmp$3;
			return [value, err];
		}
		if (n === 0) {
			_tmp$4 = "";
			_tmp$5 = $ifaceNil;
			value = _tmp$4;
			err = _tmp$5;
			return [value, err];
		}
		buf = $makeSlice(sliceType, n);
		err = sysctl(mib, $indexPtr(buf.$array, buf.$offset + 0, ptrType$2), (n$24ptr || (n$24ptr = new ptrType$12(function() { return n; }, function($v) { n = $v; }))), ptrType$2.nil, 0);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$6 = "";
			_tmp$7 = err;
			value = _tmp$6;
			err = _tmp$7;
			return [value, err];
		}
		if (n > 0 && ((x = n - 1 >>> 0, ((x < 0 || x >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + x])) === 0)) {
			n = n - (1) >>> 0;
		}
		_tmp$8 = $bytesToString($subslice(buf, 0, n));
		_tmp$9 = $ifaceNil;
		value = _tmp$8;
		err = _tmp$9;
		return [value, err];
	};
	$pkg.Sysctl = Sysctl;
	nametomib = function(name) {
		var $ptr, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, buf, bytes$1, err, mib, n, n$24ptr, name, p;
		mib = sliceType$5.nil;
		err = $ifaceNil;
		buf = arrayType$13.zero();
		n = 48;
		p = $sliceToArray(new sliceType(buf));
		_tuple = ByteSliceFromString(name);
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = sliceType$5.nil;
			_tmp$1 = err;
			mib = _tmp;
			err = _tmp$1;
			return [mib, err];
		}
		err = sysctl(new sliceType$5([0, 3]), p, (n$24ptr || (n$24ptr = new ptrType$12(function() { return n; }, function($v) { n = $v; }))), $indexPtr(bytes$1.$array, bytes$1.$offset + 0, ptrType$2), (name.length >>> 0));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = sliceType$5.nil;
			_tmp$3 = err;
			mib = _tmp$2;
			err = _tmp$3;
			return [mib, err];
		}
		_tmp$4 = $subslice(new sliceType$5(buf), 0, (_q = n / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")));
		_tmp$5 = $ifaceNil;
		mib = _tmp$4;
		err = _tmp$5;
		return [mib, err];
	};
	ParseDirent = function(buf, max, names) {
		var $ptr, _array, _struct, _tmp, _tmp$1, _tmp$2, _view, buf, bytes$1, consumed, count, dirent, max, name, names, newnames, origlen, x;
		consumed = 0;
		count = 0;
		newnames = sliceType$1.nil;
		origlen = buf.$length;
		while (true) {
			if (!(!((max === 0)) && buf.$length > 0)) { break; }
			dirent = (_array = $sliceToArray(buf), _struct = new Dirent.ptr(new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, arrayType$14.zero(), arrayType$15.zero()), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Ino = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Seekoff = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Reclen = _view.getUint16(16, true), _struct.Namlen = _view.getUint16(18, true), _struct.Type = _view.getUint8(20, true), _struct.Name = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 21, _array.buffer.byteLength)), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 1045, _array.buffer.byteLength)), _struct);
			if (dirent.Reclen === 0) {
				buf = sliceType.nil;
				break;
			}
			buf = $subslice(buf, dirent.Reclen);
			if ((x = dirent.Ino, (x.$high === 0 && x.$low === 0))) {
				continue;
			}
			bytes$1 = $sliceToArray(new sliceType(dirent.Name));
			name = $bytesToString($subslice(new sliceType(bytes$1), 0, dirent.Namlen));
			if (name === "." || name === "..") {
				continue;
			}
			max = max - (1) >> 0;
			count = count + (1) >> 0;
			names = $append(names, name);
		}
		_tmp = origlen - buf.$length >> 0;
		_tmp$1 = count;
		_tmp$2 = names;
		consumed = _tmp;
		count = _tmp$1;
		newnames = _tmp$2;
		return [consumed, count, newnames];
	};
	$pkg.ParseDirent = ParseDirent;
	mmapper.ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {
		var $ptr, _key, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, addr, b, data, err, errno, fd, flags, length, m, offset, p, prot, sl, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; addr = $f.addr; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; fd = $f.fd; flags = $f.flags; length = $f.length; m = $f.m; offset = $f.offset; p = $f.p; prot = $f.prot; sl = $f.sl; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		sl = [sl];
		data = sliceType.nil;
		err = $ifaceNil;
		m = this;
		if (length <= 0) {
			_tmp = sliceType.nil;
			_tmp$1 = new Errno(22);
			data = _tmp;
			err = _tmp$1;
			return [data, err];
		}
		_r = m.mmap(0, (length >>> 0), prot, flags, fd, offset); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		addr = _tuple[0];
		errno = _tuple[1];
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			_tmp$2 = sliceType.nil;
			_tmp$3 = errno;
			data = _tmp$2;
			err = _tmp$3;
			return [data, err];
		}
		sl[0] = new structType.ptr(addr, length, length);
		b = sl[0];
		p = $indexPtr(b.$array, b.$offset + (b.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		_key = p; (m.active || $throwRuntimeError("assignment to entry in nil map"))[ptrType$2.keyFor(_key)] = { k: _key, v: b };
		_tmp$4 = b;
		_tmp$5 = $ifaceNil;
		data = _tmp$4;
		err = _tmp$5;
		return [data, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [data, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Mmap }; } $f.$ptr = $ptr; $f._key = _key; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.addr = addr; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.fd = fd; $f.flags = flags; $f.length = length; $f.m = m; $f.offset = offset; $f.p = p; $f.prot = prot; $f.sl = sl; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.$val.Mmap(fd, offset, length, prot, flags); };
	mmapper.ptr.prototype.Munmap = function(data) {
		var $ptr, _entry, _r, b, data, err, errno, m, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; m = $f.m; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = $ifaceNil;
		m = this;
		if ((data.$length === 0) || !((data.$length === data.$capacity))) {
			err = new Errno(22);
			return err;
		}
		p = $indexPtr(data.$array, data.$offset + (data.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		b = (_entry = m.active[ptrType$2.keyFor(p)], _entry !== undefined ? _entry.v : sliceType.nil);
		if (b === sliceType.nil || !($indexPtr(b.$array, b.$offset + 0, ptrType$2) === $indexPtr(data.$array, data.$offset + 0, ptrType$2))) {
			err = new Errno(22);
			return err;
		}
		_r = m.munmap($sliceToArray(b), (b.$length >>> 0)); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errno = _r;
		/* */ if (!($interfaceIsEqual(errno, $ifaceNil))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!($interfaceIsEqual(errno, $ifaceNil))) { */ case 3:
			err = errno;
			return err;
		/* } */ case 4:
		delete m.active[ptrType$2.keyFor(p)];
		err = $ifaceNil;
		return err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Munmap }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.m = m; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Munmap = function(data) { return this.$val.Munmap(data); };
	Errno.prototype.Error = function() {
		var $ptr, e, s;
		e = this.$val;
		if (0 <= (e >> 0) && (e >> 0) < 106) {
			s = ((e < 0 || e >= errors$1.length) ? $throwRuntimeError("index out of range") : errors$1[e]);
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa((e >> 0));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var $ptr, e;
		e = this.$val;
		return (e === 4) || (e === 24) || (e === 54) || (e === 53) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var $ptr, e;
		e = this.$val;
		return (e === 35) || (e === 35) || (e === 60);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	errnoErr = function(e) {
		var $ptr, _ref, e;
		_ref = e;
		if (_ref === 0) {
			return $ifaceNil;
		} else if (_ref === 35) {
			return errEAGAIN;
		} else if (_ref === 22) {
			return errEINVAL;
		} else if (_ref === 2) {
			return errENOENT;
		}
		return new Errno(e);
	};
	Read = function(fd, p) {
		var $ptr, _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		_tuple = read(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	$pkg.Read = Read;
	Write = function(fd, p) {
		var $ptr, _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		_tuple = write(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	$pkg.Write = Write;
	sysctl = function(mib, old, oldlen, new$1, newlen) {
		var $ptr, _p0, _tuple, e1, err, mib, new$1, newlen, old, oldlen;
		err = $ifaceNil;
		_p0 = 0;
		if (mib.$length > 0) {
			_p0 = $sliceToArray(mib);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(202, _p0, (mib.$length >>> 0), old, oldlen, new$1, newlen);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	fcntl = function(fd, cmd, arg) {
		var $ptr, _tuple, arg, cmd, e1, err, fd, r0, val;
		val = 0;
		err = $ifaceNil;
		_tuple = Syscall(92, (fd >>> 0), (cmd >>> 0), (arg >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		val = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [val, err];
	};
	Chmod = function(path, mode) {
		var $ptr, _p0, _tuple, _tuple$1, e1, err, mode, path;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple$1 = Syscall(15, _p0, (mode >>> 0), 0);
		e1 = _tuple$1[2];
		use(_p0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Chmod = Chmod;
	Close = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(6, (fd >>> 0), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Close = Close;
	Exit = function(code) {
		var $ptr, code;
		Syscall(1, (code >>> 0), 0, 0);
		return;
	};
	$pkg.Exit = Exit;
	Fchdir = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(13, (fd >>> 0), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchdir = Fchdir;
	Fchmod = function(fd, mode) {
		var $ptr, _tuple, e1, err, fd, mode;
		err = $ifaceNil;
		_tuple = Syscall(124, (fd >>> 0), (mode >>> 0), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchmod = Fchmod;
	Fchown = function(fd, uid, gid) {
		var $ptr, _tuple, e1, err, fd, gid, uid;
		err = $ifaceNil;
		_tuple = Syscall(123, (fd >>> 0), (uid >>> 0), (gid >>> 0));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchown = Fchown;
	Fstat = function(fd, stat) {
		var $ptr, _array, _struct, _tuple, _view, e1, err, fd, stat;
		err = $ifaceNil;
		_array = new Uint8Array(144);
		_tuple = Syscall(339, (fd >>> 0), _array, 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fstat = Fstat;
	Fsync = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(95, (fd >>> 0), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fsync = Fsync;
	Ftruncate = function(fd, length) {
		var $ptr, _tuple, e1, err, fd, length;
		err = $ifaceNil;
		_tuple = Syscall(201, (fd >>> 0), (length.$low >>> 0), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Ftruncate = Ftruncate;
	Getdirentries = function(fd, buf, basep) {
		var $ptr, _p0, _tuple, basep, buf, e1, err, fd, n, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = $sliceToArray(buf);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(344, (fd >>> 0), _p0, (buf.$length >>> 0), basep, 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Getdirentries = Getdirentries;
	Lstat = function(path, stat) {
		var $ptr, _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err, path, stat;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(340, _p0, _array, 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		e1 = _tuple$1[2];
		use(_p0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Lstat = Lstat;
	Open = function(path, mode, perm) {
		var $ptr, _p0, _tuple, _tuple$1, e1, err, fd, mode, path, perm, r0;
		fd = 0;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [fd, err];
		}
		_tuple$1 = Syscall(5, _p0, (mode >>> 0), (perm >>> 0));
		r0 = _tuple$1[0];
		e1 = _tuple$1[2];
		use(_p0);
		fd = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [fd, err];
	};
	$pkg.Open = Open;
	Pread = function(fd, p, offset) {
		var $ptr, _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(153, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pread = Pread;
	Pwrite = function(fd, p, offset) {
		var $ptr, _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(154, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pwrite = Pwrite;
	read = function(fd, p) {
		var $ptr, _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(3, (fd >>> 0), _p0, (p.$length >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	Seek = function(fd, offset, whence) {
		var $ptr, _tuple, e1, err, fd, newoffset, offset, r0, whence;
		newoffset = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = Syscall(199, (fd >>> 0), (offset.$low >>> 0), (whence >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		newoffset = new $Int64(0, r0.constructor === Number ? r0 : 1);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [newoffset, err];
	};
	$pkg.Seek = Seek;
	Stat = function(path, stat) {
		var $ptr, _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err, path, stat;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(338, _p0, _array, 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		e1 = _tuple$1[2];
		use(_p0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Stat = Stat;
	write = function(fd, p) {
		var $ptr, _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(4, (fd >>> 0), _p0, (p.$length >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	mmap = function(addr, length, prot, flag, fd, pos) {
		var $ptr, _tuple, addr, e1, err, fd, flag, length, pos, prot, r0, ret;
		ret = 0;
		err = $ifaceNil;
		_tuple = Syscall6(197, addr, length, (prot >>> 0), (flag >>> 0), (fd >>> 0), (pos.$low >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		ret = r0;
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [ret, err];
	};
	munmap = function(addr, length) {
		var $ptr, _tuple, addr, e1, err, length;
		err = $ifaceNil;
		_tuple = Syscall(73, addr, length, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	ptrType$26.methods = [{prop: "Mmap", name: "Mmap", pkg: "", typ: $funcType([$Int, $Int64, $Int, $Int, $Int], [sliceType, $error], false)}, {prop: "Munmap", name: "Munmap", pkg: "", typ: $funcType([sliceType], [$error], false)}];
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$30.methods = [{prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64, $Int64], false)}, {prop: "Nano", name: "Nano", pkg: "", typ: $funcType([], [$Int64], false)}];
	mmapper.init([{prop: "Mutex", name: "", pkg: "", typ: sync.Mutex, tag: ""}, {prop: "active", name: "active", pkg: "syscall", typ: mapType, tag: ""}, {prop: "mmap", name: "mmap", pkg: "syscall", typ: funcType, tag: ""}, {prop: "munmap", name: "munmap", pkg: "syscall", typ: funcType$1, tag: ""}]);
	Timespec.init([{prop: "Sec", name: "Sec", pkg: "", typ: $Int64, tag: ""}, {prop: "Nsec", name: "Nsec", pkg: "", typ: $Int64, tag: ""}]);
	Stat_t.init([{prop: "Dev", name: "Dev", pkg: "", typ: $Int32, tag: ""}, {prop: "Mode", name: "Mode", pkg: "", typ: $Uint16, tag: ""}, {prop: "Nlink", name: "Nlink", pkg: "", typ: $Uint16, tag: ""}, {prop: "Ino", name: "Ino", pkg: "", typ: $Uint64, tag: ""}, {prop: "Uid", name: "Uid", pkg: "", typ: $Uint32, tag: ""}, {prop: "Gid", name: "Gid", pkg: "", typ: $Uint32, tag: ""}, {prop: "Rdev", name: "Rdev", pkg: "", typ: $Int32, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", pkg: "", typ: arrayType$1, tag: ""}, {prop: "Atimespec", name: "Atimespec", pkg: "", typ: Timespec, tag: ""}, {prop: "Mtimespec", name: "Mtimespec", pkg: "", typ: Timespec, tag: ""}, {prop: "Ctimespec", name: "Ctimespec", pkg: "", typ: Timespec, tag: ""}, {prop: "Birthtimespec", name: "Birthtimespec", pkg: "", typ: Timespec, tag: ""}, {prop: "Size", name: "Size", pkg: "", typ: $Int64, tag: ""}, {prop: "Blocks", name: "Blocks", pkg: "", typ: $Int64, tag: ""}, {prop: "Blksize", name: "Blksize", pkg: "", typ: $Int32, tag: ""}, {prop: "Flags", name: "Flags", pkg: "", typ: $Uint32, tag: ""}, {prop: "Gen", name: "Gen", pkg: "", typ: $Uint32, tag: ""}, {prop: "Lspare", name: "Lspare", pkg: "", typ: $Int32, tag: ""}, {prop: "Qspare", name: "Qspare", pkg: "", typ: arrayType$17, tag: ""}]);
	Dirent.init([{prop: "Ino", name: "Ino", pkg: "", typ: $Uint64, tag: ""}, {prop: "Seekoff", name: "Seekoff", pkg: "", typ: $Uint64, tag: ""}, {prop: "Reclen", name: "Reclen", pkg: "", typ: $Uint16, tag: ""}, {prop: "Namlen", name: "Namlen", pkg: "", typ: $Uint16, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: $Uint8, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: arrayType$14, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", pkg: "", typ: arrayType$15, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		lineBuffer = sliceType.nil;
		syscallModule = null;
		envOnce = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
		envLock = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
		env = false;
		warningPrinted = false;
		alreadyTriedToLoad = false;
		minusOne = -1;
		envs = runtime_envs();
		$pkg.Stdin = 0;
		$pkg.Stdout = 1;
		$pkg.Stderr = 2;
		errEAGAIN = new Errno(35);
		errEINVAL = new Errno(22);
		errENOENT = new Errno(2);
		errors$1 = $toNativeArray($kindString, ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "device not configured", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource deadlock avoided", "cannot allocate memory", "permission denied", "bad address", "block device required", "resource busy", "file exists", "cross-device link", "operation not supported by device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "result too large", "resource temporarily unavailable", "operation now in progress", "operation already in progress", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol family", "address already in use", "can't assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "socket is already connected", "socket is not connected", "can't send after socket shutdown", "too many references: can't splice", "operation timed out", "connection refused", "too many levels of symbolic links", "file name too long", "host is down", "no route to host", "directory not empty", "too many processes", "too many users", "disc quota exceeded", "stale NFS file handle", "too many levels of remote in path", "RPC struct is bad", "RPC version wrong", "RPC prog. not avail", "program version wrong", "bad procedure for program", "no locks available", "function not implemented", "inappropriate file type or format", "authentication error", "need authenticator", "device power is off", "device error", "value too large to be stored in data type", "bad executable (or shared library)", "bad CPU type in executable", "shared library version mismatch", "malformed Mach-o file", "operation canceled", "identifier removed", "no message of desired type", "illegal byte sequence", "attribute not found", "bad message", "EMULTIHOP (Reserved)", "no message available on STREAM", "ENOLINK (Reserved)", "no STREAM resources", "not a STREAM", "protocol error", "STREAM ioctl timeout", "operation not supported on socket", "policy not found", "state not recoverable", "previous owner died"]);
		mapper = new mmapper.ptr(new sync.Mutex.ptr(0, 0), {}, mmap, munmap);
		minRoutingSockaddrLen = rsaAlignOf(0);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, $init, Mutex, RWMutex, WaitGroup, Once, ptrType, ptrType$1, ptrType$2, funcType, ptrType$3;
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "nosync.Mutex", "Mutex", "github.com/gopherjs/gopherjs/nosync", function(locked_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.locked = false;
			return;
		}
		this.locked = locked_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "nosync.RWMutex", "RWMutex", "github.com/gopherjs/gopherjs/nosync", function(writeLocked_, readLockCounter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.writeLocked = false;
			this.readLockCounter = 0;
			return;
		}
		this.writeLocked = writeLocked_;
		this.readLockCounter = readLockCounter_;
	});
	WaitGroup = $pkg.WaitGroup = $newType(0, $kindStruct, "nosync.WaitGroup", "WaitGroup", "github.com/gopherjs/gopherjs/nosync", function(counter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.counter = 0;
			return;
		}
		this.counter = counter_;
	});
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", "Once", "github.com/gopherjs/gopherjs/nosync", function(doing_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.doing = false;
			this.done = false;
			return;
		}
		this.doing = doing_;
		this.done = done_;
	});
	ptrType = $ptrType(Mutex);
	ptrType$1 = $ptrType(RWMutex);
	ptrType$2 = $ptrType(WaitGroup);
	funcType = $funcType([], [], false);
	ptrType$3 = $ptrType(Once);
	Mutex.ptr.prototype.Lock = function() {
		var $ptr, m;
		m = this;
		if (m.locked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		m.locked = true;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var $ptr, m;
		m = this;
		if (!m.locked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		m.locked = false;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.Lock = function() {
		var $ptr, rw;
		rw = this;
		if (!((rw.readLockCounter === 0)) || rw.writeLocked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		rw.writeLocked = true;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var $ptr, rw;
		rw = this;
		if (!rw.writeLocked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		rw.writeLocked = false;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLock = function() {
		var $ptr, rw;
		rw = this;
		if (rw.writeLocked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		rw.readLockCounter = rw.readLockCounter + (1) >> 0;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var $ptr, rw;
		rw = this;
		if (rw.readLockCounter === 0) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		rw.readLockCounter = rw.readLockCounter - (1) >> 0;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	WaitGroup.ptr.prototype.Add = function(delta) {
		var $ptr, delta, wg;
		wg = this;
		wg.counter = wg.counter + (delta) >> 0;
		if (wg.counter < 0) {
			$panic(new $String("sync: negative WaitGroup counter"));
		}
	};
	WaitGroup.prototype.Add = function(delta) { return this.$val.Add(delta); };
	WaitGroup.ptr.prototype.Done = function() {
		var $ptr, wg;
		wg = this;
		wg.Add(-1);
	};
	WaitGroup.prototype.Done = function() { return this.$val.Done(); };
	WaitGroup.ptr.prototype.Wait = function() {
		var $ptr, wg;
		wg = this;
		if (!((wg.counter === 0))) {
			$panic(new $String("sync: WaitGroup counter not zero"));
		}
	};
	WaitGroup.prototype.Wait = function() { return this.$val.Wait(); };
	Once.ptr.prototype.Do = function(f) {
		var $ptr, f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = [o];
		o[0] = this;
		if (o[0].done) {
			return;
		}
		if (o[0].doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o[0].doing = true;
		$deferred.push([(function(o) { return function() {
			var $ptr;
			o[0].doing = false;
			o[0].done = true;
		}; })(o), []]);
		$r = f(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	ptrType.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$1.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$2.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Done", name: "Done", pkg: "", typ: $funcType([], [], false)}, {prop: "Wait", name: "Wait", pkg: "", typ: $funcType([], [], false)}];
	ptrType$3.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType], [], false)}];
	Mutex.init([{prop: "locked", name: "locked", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Bool, tag: ""}]);
	RWMutex.init([{prop: "writeLocked", name: "writeLocked", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Bool, tag: ""}, {prop: "readLockCounter", name: "readLockCounter", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Int, tag: ""}]);
	WaitGroup.init([{prop: "counter", name: "counter", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Int, tag: ""}]);
	Once.init([{prop: "doing", name: "doing", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Bool, tag: ""}, {prop: "done", name: "done", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, $init, errors, js, io, unicode, utf8, sliceType, sliceType$3, IndexByte, Index, LastIndex, Count, explode, ContainsRune, IndexRune, genSplit, SplitN, Join, HasPrefix, Map, Repeat, ToUpper, ToLower, TrimLeftFunc, TrimRightFunc, TrimFunc, indexFunc, lastIndexFunc, makeCutsetFunc, Trim, TrimLeft, TrimRight, TrimSpace, Replace;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	sliceType = $sliceType($Uint8);
	sliceType$3 = $sliceType($String);
	IndexByte = function(s, c) {
		var $ptr, c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	$pkg.IndexByte = IndexByte;
	Index = function(s, sep) {
		var $ptr, s, sep;
		return $parseInt(s.indexOf(sep)) >> 0;
	};
	$pkg.Index = Index;
	LastIndex = function(s, sep) {
		var $ptr, s, sep;
		return $parseInt(s.lastIndexOf(sep)) >> 0;
	};
	$pkg.LastIndex = LastIndex;
	Count = function(s, sep) {
		var $ptr, n, pos, s, sep;
		n = 0;
		if (sep.length === 0) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length > s.length) {
			return 0;
		} else if (sep.length === s.length) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		while (true) {
			pos = Index(s, sep);
			if (pos === -1) {
				break;
			}
			n = n + (1) >> 0;
			s = s.substring((pos + sep.length >> 0));
		}
		return n;
	};
	$pkg.Count = Count;
	explode = function(s, n) {
		var $ptr, _tmp, _tmp$1, _tuple, a, ch, cur, i, l, n, s, size;
		if (n === 0) {
			return sliceType$3.nil;
		}
		l = utf8.RuneCountInString(s);
		if (n <= 0 || n > l) {
			n = l;
		}
		a = $makeSlice(sliceType$3, n);
		size = 0;
		ch = 0;
		_tmp = 0;
		_tmp$1 = 0;
		i = _tmp;
		cur = _tmp$1;
		while (true) {
			if (!((i + 1 >> 0) < n)) { break; }
			_tuple = utf8.DecodeRuneInString(s.substring(cur));
			ch = _tuple[0];
			size = _tuple[1];
			if (ch === 65533) {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = "\xEF\xBF\xBD");
			} else {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = s.substring(cur, (cur + size >> 0)));
			}
			cur = cur + (size) >> 0;
			i = i + (1) >> 0;
		}
		if (cur < s.length) {
			((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = s.substring(cur));
		}
		return a;
	};
	ContainsRune = function(s, r) {
		var $ptr, r, s;
		return IndexRune(s, r) >= 0;
	};
	$pkg.ContainsRune = ContainsRune;
	IndexRune = function(s, r) {
		var $ptr, _i, _ref, _rune, c, i, r, s;
		if (r < 128) {
			return IndexByte(s, (r << 24 >>> 24));
		} else {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				c = _rune[0];
				if (c === r) {
					return i;
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	$pkg.IndexRune = IndexRune;
	genSplit = function(s, sep, sepSave, n) {
		var $ptr, a, c, i, n, na, s, sep, sepSave, start;
		if (n === 0) {
			return sliceType$3.nil;
		}
		if (sep === "") {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		c = sep.charCodeAt(0);
		start = 0;
		a = $makeSlice(sliceType$3, n);
		na = 0;
		i = 0;
		while (true) {
			if (!((i + sep.length >> 0) <= s.length && (na + 1 >> 0) < n)) { break; }
			if ((s.charCodeAt(i) === c) && ((sep.length === 1) || s.substring(i, (i + sep.length >> 0)) === sep)) {
				((na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = s.substring(start, (i + sepSave >> 0)));
				na = na + (1) >> 0;
				start = i + sep.length >> 0;
				i = i + ((sep.length - 1 >> 0)) >> 0;
			}
			i = i + (1) >> 0;
		}
		((na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = s.substring(start));
		return $subslice(a, 0, (na + 1 >> 0));
	};
	SplitN = function(s, sep, n) {
		var $ptr, n, s, sep;
		return genSplit(s, sep, 0, n);
	};
	$pkg.SplitN = SplitN;
	Join = function(a, sep) {
		var $ptr, _i, _ref, a, b, bp, i, n, s, sep;
		if (a.$length === 0) {
			return "";
		}
		if (a.$length === 1) {
			return (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]);
		}
		n = $imul(sep.length, ((a.$length - 1 >> 0)));
		i = 0;
		while (true) {
			if (!(i < a.$length)) { break; }
			n = n + (((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i]).length) >> 0;
			i = i + (1) >> 0;
		}
		b = $makeSlice(sliceType, n);
		bp = $copyString(b, (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]));
		_ref = $subslice(a, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			bp = bp + ($copyString($subslice(b, bp), sep)) >> 0;
			bp = bp + ($copyString($subslice(b, bp), s)) >> 0;
			_i++;
		}
		return $bytesToString(b);
	};
	$pkg.Join = Join;
	HasPrefix = function(s, prefix) {
		var $ptr, prefix, s;
		return s.length >= prefix.length && s.substring(0, prefix.length) === prefix;
	};
	$pkg.HasPrefix = HasPrefix;
	Map = function(mapping, s) {
		var $ptr, _i, _r, _ref, _rune, b, c, i, mapping, maxbytes, nb, nbytes, r, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _rune = $f._rune; b = $f.b; c = $f.c; i = $f.i; mapping = $f.mapping; maxbytes = $f.maxbytes; nb = $f.nb; nbytes = $f.nbytes; r = $f.r; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		maxbytes = s.length;
		nbytes = 0;
		b = sliceType.nil;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			_r = mapping(c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (b === sliceType.nil) {
				if (r === c) {
					_i += _rune[1];
					/* continue; */ $s = 1; continue;
				}
				b = $makeSlice(sliceType, maxbytes);
				nbytes = $copyString(b, s.substring(0, i));
			}
			if (r >= 0) {
				wid = 1;
				if (r >= 128) {
					wid = utf8.RuneLen(r);
				}
				if ((nbytes + wid >> 0) > maxbytes) {
					maxbytes = ($imul(maxbytes, 2)) + 4 >> 0;
					nb = $makeSlice(sliceType, maxbytes);
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		if (b === sliceType.nil) {
			return s;
		}
		return $bytesToString($subslice(b, 0, nbytes));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._rune = _rune; $f.b = b; $f.c = c; $f.i = i; $f.mapping = mapping; $f.maxbytes = maxbytes; $f.nb = nb; $f.nbytes = nbytes; $f.r = r; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Map = Map;
	Repeat = function(s, count) {
		var $ptr, b, bp, count, s;
		b = $makeSlice(sliceType, ($imul(s.length, count)));
		bp = $copyString(b, s);
		while (true) {
			if (!(bp < b.$length)) { break; }
			$copySlice($subslice(b, bp), $subslice(b, 0, bp));
			bp = $imul(bp, (2));
		}
		return $bytesToString(b);
	};
	$pkg.Repeat = Repeat;
	ToUpper = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Map(unicode.ToUpper, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ToUpper }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToUpper = ToUpper;
	ToLower = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Map(unicode.ToLower, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ToLower }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToLower = ToLower;
	TrimLeftFunc = function(s, f) {
		var $ptr, _r, f, i, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = indexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i === -1) {
			return "";
		}
		return s.substring(i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimLeftFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimLeftFunc = TrimLeftFunc;
	TrimRightFunc = function(s, f) {
		var $ptr, _r, _tuple, f, i, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = lastIndexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i >= 0 && s.charCodeAt(i) >= 128) {
			_tuple = utf8.DecodeRuneInString(s.substring(i));
			wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + (1) >> 0;
		}
		return s.substring(0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimRightFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRightFunc = TrimRightFunc;
	TrimFunc = function(s, f) {
		var $ptr, _r, _r$1, f, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimLeftFunc(s, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = TrimRightFunc(_r, f); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimFunc = TrimFunc;
	indexFunc = function(s, f, truth) {
		var $ptr, _r, _tuple, f, r, s, start, truth, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; r = $f.r; s = $f.s; start = $f.start; truth = $f.truth; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = 0;
		/* while (true) { */ case 1:
			/* if (!(start < s.length)) { break; } */ if(!(start < s.length)) { $s = 2; continue; }
			wid = 1;
			r = (s.charCodeAt(start) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s.substring(start));
				r = _tuple[0];
				wid = _tuple[1];
			}
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				return start;
			/* } */ case 4:
			start = start + (wid) >> 0;
		/* } */ $s = 1; continue; case 2:
		return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: indexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.r = r; $f.s = s; $f.start = start; $f.truth = truth; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	lastIndexFunc = function(s, f, truth) {
		var $ptr, _r, _tuple, f, i, r, s, size, truth, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; r = $f.r; s = $f.s; size = $f.size; truth = $f.truth; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = s.length;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_tuple = utf8.DecodeLastRuneInString(s.substring(0, i));
			r = _tuple[0];
			size = _tuple[1];
			i = i - (size) >> 0;
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				return i;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lastIndexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.r = r; $f.s = s; $f.size = size; $f.truth = truth; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeCutsetFunc = function(cutset) {
		var $ptr, cutset;
		return (function(r) {
			var $ptr, r;
			return IndexRune(cutset, r) >= 0;
		});
	};
	Trim = function(s, cutset) {
		var $ptr, _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (s === "" || cutset === "") {
			return s;
		}
		_r = TrimFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Trim }; } $f.$ptr = $ptr; $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Trim = Trim;
	TrimLeft = function(s, cutset) {
		var $ptr, _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (s === "" || cutset === "") {
			return s;
		}
		_r = TrimLeftFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimLeft }; } $f.$ptr = $ptr; $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimLeft = TrimLeft;
	TrimRight = function(s, cutset) {
		var $ptr, _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (s === "" || cutset === "") {
			return s;
		}
		_r = TrimRightFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimRight }; } $f.$ptr = $ptr; $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRight = TrimRight;
	TrimSpace = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimFunc(s, unicode.IsSpace); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimSpace }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimSpace = TrimSpace;
	Replace = function(s, old, new$1, n) {
		var $ptr, _tuple, i, j, m, n, new$1, old, s, start, t, w, wid;
		if (old === new$1 || (n === 0)) {
			return s;
		}
		m = Count(s, old);
		if (m === 0) {
			return s;
		} else if (n < 0 || m < n) {
			n = m;
		}
		t = $makeSlice(sliceType, (s.length + ($imul(n, ((new$1.length - old.length >> 0)))) >> 0));
		w = 0;
		start = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRuneInString(s.substring(start));
					wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index(s.substring(start), old)) >> 0;
			}
			w = w + ($copyString($subslice(t, w), s.substring(start, j))) >> 0;
			w = w + ($copyString($subslice(t, w), new$1)) >> 0;
			start = j + old.length >> 0;
			i = i + (1) >> 0;
		}
		w = w + ($copyString($subslice(t, w), s.substring(start))) >> 0;
		return $bytesToString($subslice(t, 0, w));
	};
	$pkg.Replace = Replace;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, $init, errors, js, nosync, runtime, strings, syscall, ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, sliceType, sliceType$1, ptrType, sliceType$2, arrayType, sliceType$3, arrayType$1, arrayType$2, ptrType$1, arrayType$4, ptrType$3, ptrType$6, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, unitMap, months, days, daysBefore, utcLoc, utcLoc$24ptr, localLoc, localLoc$24ptr, localOnce, zoneinfo, badData, _tuple, _r, init, initLocal, runtimeNano, now, startsWithLowerCase, nextStdChunk, match, lookup, appendInt, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, ParseDuration, absWeekday, absClock, fmtFrac, fmtInt, absDate, Now, Unix, isLeap, norm, Date, div, FixedZone;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	runtime = $packages["runtime"];
	strings = $packages["strings"];
	syscall = $packages["syscall"];
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", "ParseError", "time", function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Layout = "";
			this.Value = "";
			this.LayoutElem = "";
			this.ValueElem = "";
			this.Message = "";
			return;
		}
		this.Layout = Layout_;
		this.Value = Value_;
		this.LayoutElem = LayoutElem_;
		this.ValueElem = ValueElem_;
		this.Message = Message_;
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", "Time", "time", function(sec_, nsec_, loc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sec = new $Int64(0, 0);
			this.nsec = 0;
			this.loc = ptrType$1.nil;
			return;
		}
		this.sec = sec_;
		this.nsec = nsec_;
		this.loc = loc_;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", "Month", "time", null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", "Weekday", "time", null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", "Duration", "time", null);
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", "Location", "time", function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.zone = sliceType.nil;
			this.tx = sliceType$1.nil;
			this.cacheStart = new $Int64(0, 0);
			this.cacheEnd = new $Int64(0, 0);
			this.cacheZone = ptrType.nil;
			return;
		}
		this.name = name_;
		this.zone = zone_;
		this.tx = tx_;
		this.cacheStart = cacheStart_;
		this.cacheEnd = cacheEnd_;
		this.cacheZone = cacheZone_;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", "zone", "time", function(name_, offset_, isDST_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.offset = 0;
			this.isDST = false;
			return;
		}
		this.name = name_;
		this.offset = offset_;
		this.isDST = isDST_;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", "zoneTrans", "time", function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.when = new $Int64(0, 0);
			this.index = 0;
			this.isstd = false;
			this.isutc = false;
			return;
		}
		this.when = when_;
		this.index = index_;
		this.isstd = isstd_;
		this.isutc = isutc_;
	});
	sliceType = $sliceType(zone);
	sliceType$1 = $sliceType(zoneTrans);
	ptrType = $ptrType(zone);
	sliceType$2 = $sliceType($String);
	arrayType = $arrayType($Uint8, 20);
	sliceType$3 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 9);
	arrayType$2 = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(Location);
	arrayType$4 = $arrayType($Uint8, 32);
	ptrType$3 = $ptrType(ParseError);
	ptrType$6 = $ptrType(Time);
	init = function() {
		var $ptr;
		Unix(new $Int64(0, 0), new $Int64(0, 0));
	};
	initLocal = function() {
		var $ptr, d, i, j, s;
		d = new ($global.Date)();
		s = $internalize(d, $String);
		i = strings.IndexByte(s, 40);
		j = strings.IndexByte(s, 41);
		if ((i === -1) || (j === -1)) {
			localLoc.name = "UTC";
			return;
		}
		localLoc.name = s.substring((i + 1 >> 0), j);
		localLoc.zone = new sliceType([new zone.ptr(localLoc.name, $imul(($parseInt(d.getTimezoneOffset()) >> 0), -60), false)]);
	};
	runtimeNano = function() {
		var $ptr;
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	now = function() {
		var $ptr, _tmp, _tmp$1, n, nsec, sec, x;
		sec = new $Int64(0, 0);
		nsec = 0;
		n = runtimeNano();
		_tmp = $div64(n, new $Int64(0, 1000000000), false);
		_tmp$1 = ((x = $div64(n, new $Int64(0, 1000000000), true), x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
		sec = _tmp;
		nsec = _tmp$1;
		return [sec, nsec];
	};
	startsWithLowerCase = function(str) {
		var $ptr, c, str;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$9, c, ch, i, j, layout, prefix, std, std$1, suffix, x;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (true) {
			if (!(i < layout.length)) { break; }
			c = (layout.charCodeAt(i) >> 0);
			_ref = c;
			if (_ref === 74) {
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "January") {
						_tmp = layout.substring(0, i);
						_tmp$1 = 257;
						_tmp$2 = layout.substring((i + 7 >> 0));
						prefix = _tmp;
						std = _tmp$1;
						suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
						_tmp$3 = layout.substring(0, i);
						_tmp$4 = 258;
						_tmp$5 = layout.substring((i + 3 >> 0));
						prefix = _tmp$3;
						std = _tmp$4;
						suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_ref === 77) {
				if (layout.length >= (i + 3 >> 0)) {
					if (layout.substring(i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = layout.substring(0, i);
							_tmp$7 = 261;
							_tmp$8 = layout.substring((i + 6 >> 0));
							prefix = _tmp$6;
							std = _tmp$7;
							suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
							_tmp$9 = layout.substring(0, i);
							_tmp$10 = 262;
							_tmp$11 = layout.substring((i + 3 >> 0));
							prefix = _tmp$9;
							std = _tmp$10;
							suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if (layout.substring(i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = layout.substring(0, i);
						_tmp$13 = 21;
						_tmp$14 = layout.substring((i + 3 >> 0));
						prefix = _tmp$12;
						std = _tmp$13;
						suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_ref === 48) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = layout.substring(0, i);
					_tmp$16 = (x = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x < 0 || x >= std0x.length) ? $throwRuntimeError("index out of range") : std0x[x]));
					_tmp$17 = layout.substring((i + 2 >> 0));
					prefix = _tmp$15;
					std = _tmp$16;
					suffix = _tmp$17;
					return [prefix, std, suffix];
				}
			} else if (_ref === 49) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$18 = layout.substring(0, i);
					_tmp$19 = 522;
					_tmp$20 = layout.substring((i + 2 >> 0));
					prefix = _tmp$18;
					std = _tmp$19;
					suffix = _tmp$20;
					return [prefix, std, suffix];
				}
				_tmp$21 = layout.substring(0, i);
				_tmp$22 = 259;
				_tmp$23 = layout.substring((i + 1 >> 0));
				prefix = _tmp$21;
				std = _tmp$22;
				suffix = _tmp$23;
				return [prefix, std, suffix];
			} else if (_ref === 50) {
				if (layout.length >= (i + 4 >> 0) && layout.substring(i, (i + 4 >> 0)) === "2006") {
					_tmp$24 = layout.substring(0, i);
					_tmp$25 = 273;
					_tmp$26 = layout.substring((i + 4 >> 0));
					prefix = _tmp$24;
					std = _tmp$25;
					suffix = _tmp$26;
					return [prefix, std, suffix];
				}
				_tmp$27 = layout.substring(0, i);
				_tmp$28 = 263;
				_tmp$29 = layout.substring((i + 1 >> 0));
				prefix = _tmp$27;
				std = _tmp$28;
				suffix = _tmp$29;
				return [prefix, std, suffix];
			} else if (_ref === 95) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					_tmp$30 = layout.substring(0, i);
					_tmp$31 = 264;
					_tmp$32 = layout.substring((i + 2 >> 0));
					prefix = _tmp$30;
					std = _tmp$31;
					suffix = _tmp$32;
					return [prefix, std, suffix];
				}
			} else if (_ref === 51) {
				_tmp$33 = layout.substring(0, i);
				_tmp$34 = 523;
				_tmp$35 = layout.substring((i + 1 >> 0));
				prefix = _tmp$33;
				std = _tmp$34;
				suffix = _tmp$35;
				return [prefix, std, suffix];
			} else if (_ref === 52) {
				_tmp$36 = layout.substring(0, i);
				_tmp$37 = 525;
				_tmp$38 = layout.substring((i + 1 >> 0));
				prefix = _tmp$36;
				std = _tmp$37;
				suffix = _tmp$38;
				return [prefix, std, suffix];
			} else if (_ref === 53) {
				_tmp$39 = layout.substring(0, i);
				_tmp$40 = 527;
				_tmp$41 = layout.substring((i + 1 >> 0));
				prefix = _tmp$39;
				std = _tmp$40;
				suffix = _tmp$41;
				return [prefix, std, suffix];
			} else if (_ref === 80) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$42 = layout.substring(0, i);
					_tmp$43 = 531;
					_tmp$44 = layout.substring((i + 2 >> 0));
					prefix = _tmp$42;
					std = _tmp$43;
					suffix = _tmp$44;
					return [prefix, std, suffix];
				}
			} else if (_ref === 112) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$45 = layout.substring(0, i);
					_tmp$46 = 532;
					_tmp$47 = layout.substring((i + 2 >> 0));
					prefix = _tmp$45;
					std = _tmp$46;
					suffix = _tmp$47;
					return [prefix, std, suffix];
				}
			} else if (_ref === 45) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "-070000") {
					_tmp$48 = layout.substring(0, i);
					_tmp$49 = 27;
					_tmp$50 = layout.substring((i + 7 >> 0));
					prefix = _tmp$48;
					std = _tmp$49;
					suffix = _tmp$50;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$51 = layout.substring(0, i);
					_tmp$52 = 30;
					_tmp$53 = layout.substring((i + 9 >> 0));
					prefix = _tmp$51;
					std = _tmp$52;
					suffix = _tmp$53;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "-0700") {
					_tmp$54 = layout.substring(0, i);
					_tmp$55 = 26;
					_tmp$56 = layout.substring((i + 5 >> 0));
					prefix = _tmp$54;
					std = _tmp$55;
					suffix = _tmp$56;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "-07:00") {
					_tmp$57 = layout.substring(0, i);
					_tmp$58 = 29;
					_tmp$59 = layout.substring((i + 6 >> 0));
					prefix = _tmp$57;
					std = _tmp$58;
					suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "-07") {
					_tmp$60 = layout.substring(0, i);
					_tmp$61 = 28;
					_tmp$62 = layout.substring((i + 3 >> 0));
					prefix = _tmp$60;
					std = _tmp$61;
					suffix = _tmp$62;
					return [prefix, std, suffix];
				}
			} else if (_ref === 90) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "Z070000") {
					_tmp$63 = layout.substring(0, i);
					_tmp$64 = 23;
					_tmp$65 = layout.substring((i + 7 >> 0));
					prefix = _tmp$63;
					std = _tmp$64;
					suffix = _tmp$65;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$66 = layout.substring(0, i);
					_tmp$67 = 25;
					_tmp$68 = layout.substring((i + 9 >> 0));
					prefix = _tmp$66;
					std = _tmp$67;
					suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "Z0700") {
					_tmp$69 = layout.substring(0, i);
					_tmp$70 = 22;
					_tmp$71 = layout.substring((i + 5 >> 0));
					prefix = _tmp$69;
					std = _tmp$70;
					suffix = _tmp$71;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$72 = layout.substring(0, i);
					_tmp$73 = 24;
					_tmp$74 = layout.substring((i + 6 >> 0));
					prefix = _tmp$72;
					std = _tmp$73;
					suffix = _tmp$74;
					return [prefix, std, suffix];
				}
			} else if (_ref === 46) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (true) {
						if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 31;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 32;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$75 = layout.substring(0, i);
						_tmp$76 = std$1;
						_tmp$77 = layout.substring(j);
						prefix = _tmp$75;
						std = _tmp$76;
						suffix = _tmp$77;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$78 = layout;
		_tmp$79 = 0;
		_tmp$80 = "";
		prefix = _tmp$78;
		std = _tmp$79;
		suffix = _tmp$80;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var $ptr, c1, c2, i, s1, s2;
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var $ptr, _i, _ref, i, tab, v, val;
		_ref = tab;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match(val.substring(0, v.length), v)) {
				return [i, val.substring(v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendInt = function(b, x, width) {
		var $ptr, _q, b, buf, i, q, u, w, width, x;
		u = (x >>> 0);
		if (x < 0) {
			b = $append(b, 45);
			u = (-x >>> 0);
		}
		buf = arrayType.zero();
		i = 20;
		while (true) {
			if (!(u >= 10)) { break; }
			i = i - (1) >> 0;
			q = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = (((48 + u >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24));
			u = q;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = ((48 + u >>> 0) << 24 >>> 24));
		w = 20 - i >> 0;
		while (true) {
			if (!(w < width)) { break; }
			b = $append(b, 48);
			w = w + (1) >> 0;
		}
		return $appendSlice(b, $subslice(new sliceType$3(buf), i));
	};
	atoi = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple$1, err, neg, q, rem, s, x;
		x = 0;
		err = $ifaceNil;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = s.substring(1);
		}
		_tuple$1 = leadingInt(s);
		q = _tuple$1[0];
		rem = _tuple$1[1];
		err = _tuple$1[2];
		x = ((q.$low + ((q.$high >> 31) * 4294967296)) >> 0);
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0;
			_tmp$1 = atoiError;
			x = _tmp;
			err = _tmp$1;
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tmp$2 = x;
		_tmp$3 = $ifaceNil;
		x = _tmp$2;
		err = _tmp$3;
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var $ptr, _q, _r$1, b, buf, n, nanosec, start, trim, u, x;
		u = nanosec;
		buf = arrayType$1.zero();
		start = 9;
		while (true) {
			if (!(start > 0)) { break; }
			start = start - (1) >> 0;
			((start < 0 || start >= buf.length) ? $throwRuntimeError("index out of range") : buf[start] = (((_r$1 = u % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (true) {
				if (!(n > 0 && ((x = n - 1 >> 0, ((x < 0 || x >= buf.length) ? $throwRuntimeError("index out of range") : buf[x])) === 48))) { break; }
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Format("2006-01-02 15:04:05.999999999 -0700 MST"); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.Format = function(layout) {
		var $ptr, _r$1, b, buf, layout, max, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; b = $f.b; buf = $f.buf; layout = $f.layout; max = $f.max; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		b = sliceType$3.nil;
		max = layout.length + 10 >> 0;
		if (max < 64) {
			buf = arrayType$2.zero();
			b = $subslice(new sliceType$3(buf), 0, 0);
		} else {
			b = $makeSlice(sliceType$3, 0, max);
		}
		_r$1 = t.AppendFormat(b, layout); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b = _r$1;
		return $bytesToString(b);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Format }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.b = b; $f.buf = buf; $f.layout = layout; $f.max = max; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	Time.ptr.prototype.AppendFormat = function(b, layout) {
		var $ptr, _q, _q$1, _q$2, _q$3, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _tuple$1, _tuple$2, _tuple$3, _tuple$4, abs, absoffset, b, day, hour, hr, hr$1, layout, m, min, month, name, offset, prefix, s, sec, std, suffix, t, y, year, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; abs = $f.abs; absoffset = $f.absoffset; b = $f.b; day = $f.day; hour = $f.hour; hr = $f.hr; hr$1 = $f.hr$1; layout = $f.layout; m = $f.m; min = $f.min; month = $f.month; name = $f.name; offset = $f.offset; prefix = $f.prefix; s = $f.s; sec = $f.sec; std = $f.std; suffix = $f.suffix; t = $f.t; y = $f.y; year = $f.year; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		name = _tuple$1[0];
		offset = _tuple$1[1];
		abs = _tuple$1[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		while (true) {
			if (!(!(layout === ""))) { break; }
			_tuple$2 = nextStdChunk(layout);
			prefix = _tuple$2[0];
			std = _tuple$2[1];
			suffix = _tuple$2[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, prefix);
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$3 = absDate(abs, true);
				year = _tuple$3[0];
				month = _tuple$3[1];
				day = _tuple$3[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$4 = absClock(abs);
				hour = _tuple$4[0];
				min = _tuple$4[1];
				sec = _tuple$4[2];
			}
			_ref = std & 65535;
			switch (0) { default: if (_ref === 274) {
				y = year;
				if (y < 0) {
					y = -y;
				}
				b = appendInt(b, (_r$2 = y % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")), 2);
			} else if (_ref === 273) {
				b = appendInt(b, year, 4);
			} else if (_ref === 258) {
				b = $appendSlice(b, new Month(month).String().substring(0, 3));
			} else if (_ref === 257) {
				m = new Month(month).String();
				b = $appendSlice(b, m);
			} else if (_ref === 259) {
				b = appendInt(b, (month >> 0), 0);
			} else if (_ref === 260) {
				b = appendInt(b, (month >> 0), 2);
			} else if (_ref === 262) {
				b = $appendSlice(b, new Weekday(absWeekday(abs)).String().substring(0, 3));
			} else if (_ref === 261) {
				s = new Weekday(absWeekday(abs)).String();
				b = $appendSlice(b, s);
			} else if (_ref === 263) {
				b = appendInt(b, day, 0);
			} else if (_ref === 264) {
				if (day < 10) {
					b = $append(b, 32);
				}
				b = appendInt(b, day, 0);
			} else if (_ref === 265) {
				b = appendInt(b, day, 2);
			} else if (_ref === 522) {
				b = appendInt(b, hour, 2);
			} else if (_ref === 523) {
				hr = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
				if (hr === 0) {
					hr = 12;
				}
				b = appendInt(b, hr, 0);
			} else if (_ref === 524) {
				hr$1 = (_r$4 = hour % 12, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
				if (hr$1 === 0) {
					hr$1 = 12;
				}
				b = appendInt(b, hr$1, 2);
			} else if (_ref === 525) {
				b = appendInt(b, min, 0);
			} else if (_ref === 526) {
				b = appendInt(b, min, 2);
			} else if (_ref === 527) {
				b = appendInt(b, sec, 2);
			} else if (_ref === 528) {
				b = appendInt(b, sec, 2);
			} else if (_ref === 531) {
				if (hour >= 12) {
					b = $appendSlice(b, "PM");
				} else {
					b = $appendSlice(b, "AM");
				}
			} else if (_ref === 532) {
				if (hour >= 12) {
					b = $appendSlice(b, "pm");
				} else {
					b = $appendSlice(b, "am");
				}
			} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 29 || _ref === 27 || _ref === 30) {
				if ((offset === 0) && ((std === 22) || (std === 24) || (std === 23) || (std === 25))) {
					b = $append(b, 90);
					break;
				}
				zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				absoffset = offset;
				if (zone$1 < 0) {
					b = $append(b, 45);
					zone$1 = -zone$1;
					absoffset = -absoffset;
				} else {
					b = $append(b, 43);
				}
				b = appendInt(b, (_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
				if ((std === 24) || (std === 29) || (std === 25) || (std === 30)) {
					b = $append(b, 58);
				}
				b = appendInt(b, (_r$5 = zone$1 % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")), 2);
				if ((std === 23) || (std === 27) || (std === 30) || (std === 25)) {
					if ((std === 30) || (std === 25)) {
						b = $append(b, 58);
					}
					b = appendInt(b, (_r$6 = absoffset % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")), 2);
				}
			} else if (_ref === 21) {
				if (!(name === "")) {
					b = $appendSlice(b, name);
					break;
				}
				zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
				if (zone$2 < 0) {
					b = $append(b, 45);
					zone$2 = -zone$2;
				} else {
					b = $append(b, 43);
				}
				b = appendInt(b, (_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
				b = appendInt(b, (_r$7 = zone$2 % 60, _r$7 === _r$7 ? _r$7 : $throwRuntimeError("integer divide by zero")), 2);
			} else if (_ref === 31 || _ref === 32) {
				b = formatNano(b, (t.Nanosecond() >>> 0), std >> 16 >> 0, (std & 65535) === 32);
			} }
		}
		return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AppendFormat }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.abs = abs; $f.absoffset = absoffset; $f.b = b; $f.day = day; $f.hour = hour; $f.hr = hr; $f.hr$1 = hr$1; $f.layout = layout; $f.m = m; $f.min = min; $f.month = month; $f.name = name; $f.offset = offset; $f.prefix = prefix; $f.s = s; $f.sec = sec; $f.std = std; $f.suffix = suffix; $f.t = t; $f.y = y; $f.year = year; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AppendFormat = function(b, layout) { return this.$val.AppendFormat(b, layout); };
	quote = function(s) {
		var $ptr, s;
		return "\"" + s + "\"";
	};
	ParseError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var $ptr, c, i, s;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var $ptr, fixed, s;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), s.substring(1), $ifaceNil];
		}
		return [($imul(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), 10)) + ((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0) >> 0, s.substring(2), $ifaceNil];
	};
	cutspace = function(s) {
		var $ptr, s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
			s = s.substring(1);
		}
		return s;
	};
	skip = function(value, prefix) {
		var $ptr, prefix, value;
		while (true) {
			if (!(prefix.length > 0)) { break; }
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = prefix.substring(1);
			value = value.substring(1);
		}
		return [value, $ifaceNil];
	};
	Parse = function(layout, value) {
		var $ptr, _r$1, layout, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; layout = $f.layout; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.layout = layout; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(layout, value, defaultLocation, local) {
		var $ptr, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, day, defaultLocation, err, hour, hour$1, hr, i, layout, local, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x, x$1, x$2, x$3, x$4, x$5, year, z, zoneName, zoneOffset, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$19 = $f._tuple$19; _tuple$2 = $f._tuple$2; _tuple$20 = $f._tuple$20; _tuple$21 = $f._tuple$21; _tuple$22 = $f._tuple$22; _tuple$23 = $f._tuple$23; _tuple$24 = $f._tuple$24; _tuple$25 = $f._tuple$25; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; alayout = $f.alayout; amSet = $f.amSet; avalue = $f.avalue; day = $f.day; defaultLocation = $f.defaultLocation; err = $f.err; hour = $f.hour; hour$1 = $f.hour$1; hr = $f.hr; i = $f.i; layout = $f.layout; local = $f.local; min = $f.min; min$1 = $f.min$1; mm = $f.mm; month = $f.month; n = $f.n; n$1 = $f.n$1; name = $f.name; ndigit = $f.ndigit; nsec = $f.nsec; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pmSet = $f.pmSet; prefix = $f.prefix; rangeErrString = $f.rangeErrString; sec = $f.sec; seconds = $f.seconds; sign = $f.sign; ss = $f.ss; std = $f.std; stdstr = $f.stdstr; suffix = $f.suffix; t = $f.t; t$1 = $f.t$1; value = $f.value; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; year = $f.year; z = $f.z; zoneName = $f.zoneName; zoneOffset = $f.zoneOffset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = layout;
		_tmp$1 = value;
		alayout = _tmp;
		avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$1.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple$1 = nextStdChunk(layout);
			prefix = _tuple$1[0];
			std = _tuple$1[1];
			suffix = _tuple$1[2];
			stdstr = layout.substring(prefix.length, (layout.length - suffix.length >> 0));
			_tuple$2 = skip(value, prefix);
			value = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			_ref = std & 65535;
			switch (0) { default: if (_ref === 274) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$2 = value.substring(0, 2);
				_tmp$3 = value.substring(2);
				p = _tmp$2;
				value = _tmp$3;
				_tuple$3 = atoi(p);
				year = _tuple$3[0];
				err = _tuple$3[1];
				if (year >= 69) {
					year = year + (1900) >> 0;
				} else {
					year = year + (2000) >> 0;
				}
			} else if (_ref === 273) {
				if (value.length < 4 || !isDigit(value, 0)) {
					err = errBad;
					break;
				}
				_tmp$4 = value.substring(0, 4);
				_tmp$5 = value.substring(4);
				p = _tmp$4;
				value = _tmp$5;
				_tuple$4 = atoi(p);
				year = _tuple$4[0];
				err = _tuple$4[1];
			} else if (_ref === 258) {
				_tuple$5 = lookup(shortMonthNames, value);
				month = _tuple$5[0];
				value = _tuple$5[1];
				err = _tuple$5[2];
			} else if (_ref === 257) {
				_tuple$6 = lookup(longMonthNames, value);
				month = _tuple$6[0];
				value = _tuple$6[1];
				err = _tuple$6[2];
			} else if (_ref === 259 || _ref === 260) {
				_tuple$7 = getnum(value, std === 260);
				month = _tuple$7[0];
				value = _tuple$7[1];
				err = _tuple$7[2];
				if (month <= 0 || 12 < month) {
					rangeErrString = "month";
				}
			} else if (_ref === 262) {
				_tuple$8 = lookup(shortDayNames, value);
				value = _tuple$8[1];
				err = _tuple$8[2];
			} else if (_ref === 261) {
				_tuple$9 = lookup(longDayNames, value);
				value = _tuple$9[1];
				err = _tuple$9[2];
			} else if (_ref === 263 || _ref === 264 || _ref === 265) {
				if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
					value = value.substring(1);
				}
				_tuple$10 = getnum(value, std === 265);
				day = _tuple$10[0];
				value = _tuple$10[1];
				err = _tuple$10[2];
				if (day < 0 || 31 < day) {
					rangeErrString = "day";
				}
			} else if (_ref === 522) {
				_tuple$11 = getnum(value, false);
				hour = _tuple$11[0];
				value = _tuple$11[1];
				err = _tuple$11[2];
				if (hour < 0 || 24 <= hour) {
					rangeErrString = "hour";
				}
			} else if (_ref === 523 || _ref === 524) {
				_tuple$12 = getnum(value, std === 524);
				hour = _tuple$12[0];
				value = _tuple$12[1];
				err = _tuple$12[2];
				if (hour < 0 || 12 < hour) {
					rangeErrString = "hour";
				}
			} else if (_ref === 525 || _ref === 526) {
				_tuple$13 = getnum(value, std === 526);
				min = _tuple$13[0];
				value = _tuple$13[1];
				err = _tuple$13[2];
				if (min < 0 || 60 <= min) {
					rangeErrString = "minute";
				}
			} else if (_ref === 527 || _ref === 528) {
				_tuple$14 = getnum(value, std === 528);
				sec = _tuple$14[0];
				value = _tuple$14[1];
				err = _tuple$14[2];
				if (sec < 0 || 60 <= sec) {
					rangeErrString = "second";
				}
				if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
					_tuple$15 = nextStdChunk(layout);
					std = _tuple$15[1];
					std = std & (65535);
					if ((std === 31) || (std === 32)) {
						break;
					}
					n = 2;
					while (true) {
						if (!(n < value.length && isDigit(value, n))) { break; }
						n = n + (1) >> 0;
					}
					_tuple$16 = parseNanoseconds(value, n);
					nsec = _tuple$16[0];
					rangeErrString = _tuple$16[1];
					err = _tuple$16[2];
					value = value.substring(n);
				}
			} else if (_ref === 531) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$6 = value.substring(0, 2);
				_tmp$7 = value.substring(2);
				p = _tmp$6;
				value = _tmp$7;
				_ref$1 = p;
				if (_ref$1 === "PM") {
					pmSet = true;
				} else if (_ref$1 === "AM") {
					amSet = true;
				} else {
					err = errBad;
				}
			} else if (_ref === 532) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$8 = value.substring(0, 2);
				_tmp$9 = value.substring(2);
				p = _tmp$8;
				value = _tmp$9;
				_ref$2 = p;
				if (_ref$2 === "pm") {
					pmSet = true;
				} else if (_ref$2 === "am") {
					amSet = true;
				} else {
					err = errBad;
				}
			} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 28 || _ref === 29 || _ref === 27 || _ref === 30) {
				if (((std === 22) || (std === 24)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
					value = value.substring(1);
					z = $pkg.UTC;
					break;
				}
				_tmp$10 = "";
				_tmp$11 = "";
				_tmp$12 = "";
				_tmp$13 = "";
				sign = _tmp$10;
				hour$1 = _tmp$11;
				min$1 = _tmp$12;
				seconds = _tmp$13;
				if ((std === 24) || (std === 29)) {
					if (value.length < 6) {
						err = errBad;
						break;
					}
					if (!((value.charCodeAt(3) === 58))) {
						err = errBad;
						break;
					}
					_tmp$14 = value.substring(0, 1);
					_tmp$15 = value.substring(1, 3);
					_tmp$16 = value.substring(4, 6);
					_tmp$17 = "00";
					_tmp$18 = value.substring(6);
					sign = _tmp$14;
					hour$1 = _tmp$15;
					min$1 = _tmp$16;
					seconds = _tmp$17;
					value = _tmp$18;
				} else if (std === 28) {
					if (value.length < 3) {
						err = errBad;
						break;
					}
					_tmp$19 = value.substring(0, 1);
					_tmp$20 = value.substring(1, 3);
					_tmp$21 = "00";
					_tmp$22 = "00";
					_tmp$23 = value.substring(3);
					sign = _tmp$19;
					hour$1 = _tmp$20;
					min$1 = _tmp$21;
					seconds = _tmp$22;
					value = _tmp$23;
				} else if ((std === 25) || (std === 30)) {
					if (value.length < 9) {
						err = errBad;
						break;
					}
					if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
						err = errBad;
						break;
					}
					_tmp$24 = value.substring(0, 1);
					_tmp$25 = value.substring(1, 3);
					_tmp$26 = value.substring(4, 6);
					_tmp$27 = value.substring(7, 9);
					_tmp$28 = value.substring(9);
					sign = _tmp$24;
					hour$1 = _tmp$25;
					min$1 = _tmp$26;
					seconds = _tmp$27;
					value = _tmp$28;
				} else if ((std === 23) || (std === 27)) {
					if (value.length < 7) {
						err = errBad;
						break;
					}
					_tmp$29 = value.substring(0, 1);
					_tmp$30 = value.substring(1, 3);
					_tmp$31 = value.substring(3, 5);
					_tmp$32 = value.substring(5, 7);
					_tmp$33 = value.substring(7);
					sign = _tmp$29;
					hour$1 = _tmp$30;
					min$1 = _tmp$31;
					seconds = _tmp$32;
					value = _tmp$33;
				} else {
					if (value.length < 5) {
						err = errBad;
						break;
					}
					_tmp$34 = value.substring(0, 1);
					_tmp$35 = value.substring(1, 3);
					_tmp$36 = value.substring(3, 5);
					_tmp$37 = "00";
					_tmp$38 = value.substring(5);
					sign = _tmp$34;
					hour$1 = _tmp$35;
					min$1 = _tmp$36;
					seconds = _tmp$37;
					value = _tmp$38;
				}
				_tmp$39 = 0;
				_tmp$40 = 0;
				_tmp$41 = 0;
				hr = _tmp$39;
				mm = _tmp$40;
				ss = _tmp$41;
				_tuple$17 = atoi(hour$1);
				hr = _tuple$17[0];
				err = _tuple$17[1];
				if ($interfaceIsEqual(err, $ifaceNil)) {
					_tuple$18 = atoi(min$1);
					mm = _tuple$18[0];
					err = _tuple$18[1];
				}
				if ($interfaceIsEqual(err, $ifaceNil)) {
					_tuple$19 = atoi(seconds);
					ss = _tuple$19[0];
					err = _tuple$19[1];
				}
				zoneOffset = ($imul(((($imul(hr, 60)) + mm >> 0)), 60)) + ss >> 0;
				_ref$3 = sign.charCodeAt(0);
				if (_ref$3 === 43) {
				} else if (_ref$3 === 45) {
					zoneOffset = -zoneOffset;
				} else {
					err = errBad;
				}
			} else if (_ref === 21) {
				if (value.length >= 3 && value.substring(0, 3) === "UTC") {
					z = $pkg.UTC;
					value = value.substring(3);
					break;
				}
				_tuple$20 = parseTimeZone(value);
				n$1 = _tuple$20[0];
				ok = _tuple$20[1];
				if (!ok) {
					err = errBad;
					break;
				}
				_tmp$42 = value.substring(0, n$1);
				_tmp$43 = value.substring(n$1);
				zoneName = _tmp$42;
				value = _tmp$43;
			} else if (_ref === 31) {
				ndigit = 1 + ((std >> 16 >> 0)) >> 0;
				if (value.length < ndigit) {
					err = errBad;
					break;
				}
				_tuple$21 = parseNanoseconds(value, ndigit);
				nsec = _tuple$21[0];
				rangeErrString = _tuple$21[1];
				err = _tuple$21[2];
				value = value.substring(ndigit);
			} else if (_ref === 32) {
				if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
					break;
				}
				i = 0;
				while (true) {
					if (!(i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57)) { break; }
					i = i + (1) >> 0;
				}
				_tuple$22 = parseNanoseconds(value, 1 + i >> 0);
				nsec = _tuple$22[0];
				rangeErrString = _tuple$22[1];
				err = _tuple$22[2];
				value = value.substring((1 + i >> 0));
			} }
			if (!(rangeErrString === "")) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		/* */ if (!(z === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z === ptrType$1.nil)) { */ case 1:
			_r$1 = Date(year, (month >> 0), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return [_r$1, $ifaceNil];
		/* } */ case 2:
		/* */ if (!((zoneOffset === -1))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((zoneOffset === -1))) { */ case 5:
			_r$2 = Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			t = $clone(_r$2, Time);
			t.sec = (x = t.sec, x$1 = new $Int64(0, zoneOffset), new $Int64(x.$high - x$1.$high, x.$low - x$1.$low));
			_r$3 = local.lookup((x$2 = t.sec, new $Int64(x$2.$high + -15, x$2.$low + 2288912640))); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$23 = _r$3;
			name = _tuple$23[0];
			offset = _tuple$23[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.loc = local;
				return [t, $ifaceNil];
			}
			t.loc = FixedZone(zoneName, zoneOffset);
			return [t, $ifaceNil];
		/* } */ case 6:
		/* */ if (!(zoneName === "")) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!(zoneName === "")) { */ case 9:
			_r$4 = Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			t$1 = $clone(_r$4, Time);
			_r$5 = local.lookupName(zoneName, (x$3 = t$1.sec, new $Int64(x$3.$high + -15, x$3.$low + 2288912640))); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$24 = _r$5;
			offset$1 = _tuple$24[0];
			ok$1 = _tuple$24[2];
			if (ok$1) {
				t$1.sec = (x$4 = t$1.sec, x$5 = new $Int64(0, offset$1), new $Int64(x$4.$high - x$5.$high, x$4.$low - x$5.$low));
				t$1.loc = local;
				return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && zoneName.substring(0, 3) === "GMT") {
				_tuple$25 = atoi(zoneName.substring(3));
				offset$1 = _tuple$25[0];
				offset$1 = $imul(offset$1, (3600));
			}
			t$1.loc = FixedZone(zoneName, offset$1);
			return [t$1, $ifaceNil];
		/* } */ case 10:
		_r$6 = Date(year, (month >> 0), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ $s = 14; case 14:
		return [_r$6, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$19 = _tuple$19; $f._tuple$2 = _tuple$2; $f._tuple$20 = _tuple$20; $f._tuple$21 = _tuple$21; $f._tuple$22 = _tuple$22; $f._tuple$23 = _tuple$23; $f._tuple$24 = _tuple$24; $f._tuple$25 = _tuple$25; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.alayout = alayout; $f.amSet = amSet; $f.avalue = avalue; $f.day = day; $f.defaultLocation = defaultLocation; $f.err = err; $f.hour = hour; $f.hour$1 = hour$1; $f.hr = hr; $f.i = i; $f.layout = layout; $f.local = local; $f.min = min; $f.min$1 = min$1; $f.mm = mm; $f.month = month; $f.n = n; $f.n$1 = n$1; $f.name = name; $f.ndigit = ndigit; $f.nsec = nsec; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pmSet = pmSet; $f.prefix = prefix; $f.rangeErrString = rangeErrString; $f.sec = sec; $f.seconds = seconds; $f.sign = sign; $f.ss = ss; $f.std = std; $f.stdstr = stdstr; $f.suffix = suffix; $f.t = t; $f.t$1 = t$1; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.year = year; $f.z = z; $f.zoneName = zoneName; $f.zoneOffset = zoneOffset; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseTimeZone = function(value) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, value;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tmp = 0;
			_tmp$1 = false;
			length = _tmp;
			ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && (value.substring(0, 4) === "ChST" || value.substring(0, 4) === "MeST")) {
			_tmp$2 = 4;
			_tmp$3 = true;
			length = _tmp$2;
			ok = _tmp$3;
			return [length, ok];
		}
		if (value.substring(0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length;
			_tmp$5 = true;
			length = _tmp$4;
			ok = _tmp$5;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (true) {
			if (!(nUpper < 6)) { break; }
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_ref = nUpper;
		if (_ref === 0 || _ref === 1 || _ref === 2 || _ref === 6) {
			_tmp$6 = 0;
			_tmp$7 = false;
			length = _tmp$6;
			ok = _tmp$7;
			return [length, ok];
		} else if (_ref === 5) {
			if (value.charCodeAt(4) === 84) {
				_tmp$8 = 5;
				_tmp$9 = true;
				length = _tmp$8;
				ok = _tmp$9;
				return [length, ok];
			}
		} else if (_ref === 4) {
			if (value.charCodeAt(3) === 84) {
				_tmp$10 = 4;
				_tmp$11 = true;
				length = _tmp$10;
				ok = _tmp$11;
				return [length, ok];
			}
		} else if (_ref === 3) {
			_tmp$12 = 3;
			_tmp$13 = true;
			length = _tmp$12;
			ok = _tmp$13;
			return [length, ok];
		}
		_tmp$14 = 0;
		_tmp$15 = false;
		length = _tmp$14;
		ok = _tmp$15;
		return [length, ok];
	};
	parseGMT = function(value) {
		var $ptr, _tuple$1, err, rem, sign, value, x;
		value = value.substring(3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple$1 = leadingInt(value.substring(1));
		x = _tuple$1[0];
		rem = _tuple$1[1];
		err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 3;
		}
		if (sign === 45) {
			x = new $Int64(-x.$high, -x.$low);
		}
		if ((x.$high === 0 && x.$low === 0) || (x.$high < -1 || (x.$high === -1 && x.$low < 4294967282)) || (0 < x.$high || (0 === x.$high && 12 < x.$low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var $ptr, _tuple$1, err, i, nbytes, ns, rangeErrString, scaleDigits, value;
		ns = 0;
		rangeErrString = "";
		err = $ifaceNil;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple$1 = atoi(value.substring(1, nbytes));
		ns = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (true) {
			if (!(i < scaleDigits)) { break; }
			ns = $imul(ns, (10));
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, c, err, i, rem, s, x, x$1, x$2, x$3;
		x = new $Int64(0, 0);
		rem = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.$high > 214748364 || (x.$high === 214748364 && x.$low > 3435973836))) {
				_tmp = new $Int64(0, 0);
				_tmp$1 = "";
				_tmp$2 = errLeadingInt;
				x = _tmp;
				rem = _tmp$1;
				err = _tmp$2;
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = new $Int64(0, c), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), new $Int64(x$1.$high - 0, x$1.$low - 48));
			if ((x.$high < 0 || (x.$high === 0 && x.$low < 0))) {
				_tmp$3 = new $Int64(0, 0);
				_tmp$4 = "";
				_tmp$5 = errLeadingInt;
				x = _tmp$3;
				rem = _tmp$4;
				err = _tmp$5;
				return [x, rem, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = x;
		_tmp$7 = s.substring(i);
		_tmp$8 = $ifaceNil;
		x = _tmp$6;
		rem = _tmp$7;
		err = _tmp$8;
		return [x, rem, err];
	};
	ParseDuration = function(s) {
		var $ptr, _entry, _tmp, _tmp$1, _tuple$1, _tuple$2, _tuple$3, c, c$1, d, err, f, i, n, neg, ok, orig, pl, pl$1, post, pre, s, scale, u, unit, v, x, x$1, x$2;
		orig = s;
		d = new $Int64(0, 0);
		neg = false;
		if (!(s === "")) {
			c = s.charCodeAt(0);
			if ((c === 45) || (c === 43)) {
				neg = c === 45;
				s = s.substring(1);
			}
		}
		if (s === "0") {
			return [new Duration(0, 0), $ifaceNil];
		}
		if (s === "") {
			return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
		}
		while (true) {
			if (!(!(s === ""))) { break; }
			_tmp = new $Int64(0, 0);
			_tmp$1 = new $Int64(0, 0);
			v = _tmp;
			f = _tmp$1;
			scale = 1;
			err = $ifaceNil;
			if (!((s.charCodeAt(0) === 46) || 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			pl = s.length;
			_tuple$1 = leadingInt(s);
			v = _tuple$1[0];
			s = _tuple$1[1];
			err = _tuple$1[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			pre = !((pl === s.length));
			post = false;
			if (!(s === "") && (s.charCodeAt(0) === 46)) {
				s = s.substring(1);
				pl$1 = s.length;
				_tuple$2 = leadingInt(s);
				f = _tuple$2[0];
				s = _tuple$2[1];
				err = _tuple$2[2];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
				}
				n = pl$1 - s.length >> 0;
				while (true) {
					if (!(n > 0)) { break; }
					scale = scale * (10);
					n = n - (1) >> 0;
				}
				post = !((pl$1 === s.length));
			}
			if (!pre && !post) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			i = 0;
			while (true) {
				if (!(i < s.length)) { break; }
				c$1 = s.charCodeAt(i);
				if ((c$1 === 46) || 48 <= c$1 && c$1 <= 57) {
					break;
				}
				i = i + (1) >> 0;
			}
			if (i === 0) {
				return [new Duration(0, 0), errors.New("time: missing unit in duration " + orig)];
			}
			u = s.substring(0, i);
			s = s.substring(i);
			_tuple$3 = (_entry = unitMap[$String.keyFor(u)], _entry !== undefined ? [_entry.v, true] : [new $Int64(0, 0), false]);
			unit = _tuple$3[0];
			ok = _tuple$3[1];
			if (!ok) {
				return [new Duration(0, 0), errors.New("time: unknown unit " + u + " in duration " + orig)];
			}
			if ((x = $div64(new $Int64(2147483647, 4294967295), unit, false), (v.$high > x.$high || (v.$high === x.$high && v.$low > x.$low)))) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			v = $mul64(v, (unit));
			if ((f.$high > 0 || (f.$high === 0 && f.$low > 0))) {
				v = (x$1 = new $Int64(0, $flatten64(f) * ($flatten64(unit) / scale)), new $Int64(v.$high + x$1.$high, v.$low + x$1.$low));
				if ((v.$high < 0 || (v.$high === 0 && v.$low < 0))) {
					return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
				}
			}
			d = (x$2 = v, new $Int64(d.$high + x$2.$high, d.$low + x$2.$low));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0))) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
		}
		if (neg) {
			d = new $Int64(-d.$high, -d.$low);
		}
		return [new Duration(d.$high, d.$low), $ifaceNil];
	};
	$pkg.ParseDuration = ParseDuration;
	Time.ptr.prototype.After = function(u) {
		var $ptr, t, u, x, x$1, x$2, x$3;
		u = $clone(u, Time);
		t = $clone(this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low > x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec > u.nsec;
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var $ptr, t, u, x, x$1, x$2, x$3;
		u = $clone(u, Time);
		t = $clone(this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high < x$1.$high || (x.$high === x$1.$high && x.$low < x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec < u.nsec;
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var $ptr, t, u, x, x$1;
		u = $clone(u, Time);
		t = $clone(this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high === x$1.$high && x.$low === x$1.$low)) && (t.nsec === u.nsec);
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var $ptr, m, x;
		m = this.$val;
		return (x = m - 1 >> 0, ((x < 0 || x >= months.length) ? $throwRuntimeError("index out of range") : months[x]));
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var $ptr, d;
		d = this.$val;
		return ((d < 0 || d >= days.length) ? $throwRuntimeError("index out of range") : days[d]);
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var $ptr, t, x;
		t = $clone(this, Time);
		return (x = t.sec, (x.$high === 0 && x.$low === 0)) && (t.nsec === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var $ptr, _r$1, _r$2, _tuple$1, l, offset, sec, t, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; l = $f.l; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		l = t.loc;
		/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:
			_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			l = _r$1;
		/* } */ case 2:
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 6:
				sec = (x$3 = new $Int64(0, l.cacheZone.offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
				$s = 8; continue;
			/* } else { */ case 7:
				_r$2 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				offset = _tuple$1[1];
				sec = (x$4 = new $Int64(0, offset), new $Int64(sec.$high + x$4.$high, sec.$low + x$4.$low));
			/* } */ case 8:
		/* } */ case 5:
		return (x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.abs }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.l = l; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var $ptr, _r$1, _r$2, _tuple$1, abs, l, name, offset, sec, t, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; abs = $f.abs; l = $f.l; name = $f.name; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		abs = new $Uint64(0, 0);
		t = $clone(this, Time);
		l = t.loc;
		/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:
			_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			l = _r$1;
		/* } */ case 2:
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 7:
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$2 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				name = _tuple$1[0];
				offset = _tuple$1[1];
			/* } */ case 9:
			sec = (x$3 = new $Int64(0, offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			$s = 6; continue;
		/* } else { */ case 5:
			name = "UTC";
		/* } */ case 6:
		abs = (x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low));
		return [name, offset, abs];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.locabs }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.abs = abs; $f.l = l; $f.name = name; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var $ptr, _r$1, _tuple$1, day, month, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; day = $f.day; month = $f.month; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		return [year, month, day];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.day = day; $f.month = month; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var $ptr, _r$1, _tuple$1, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		return year;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Year }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var $ptr, _r$1, _tuple$1, month, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; month = $f.month; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		month = _tuple$1[1];
		return month;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Month }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.month = month; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var $ptr, _r$1, _tuple$1, day, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; day = $f.day; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		day = _tuple$1[2];
		return day;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Day }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.day = day; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var $ptr, _r$1, _r$2, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absWeekday(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Weekday }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var $ptr, _q, abs, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return ((_q = (sec.$low >> 0) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
	};
	Time.ptr.prototype.ISOWeek = function() {
		var $ptr, _q, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple$1, day, dec31wday, jan1wday, month, t, wday, week, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple$1 = $f._tuple$1; day = $f.day; dec31wday = $f.dec31wday; jan1wday = $f.jan1wday; month = $f.month; t = $f.t; wday = $f.wday; week = $f.week; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		week = 0;
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		yday = _tuple$1[3];
		_r$3 = t.Weekday(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		wday = (_r$2 = ((_r$3 + 6 >> 0) >> 0) % 7, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$4 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + (1) >> 0;
		}
		if (week === 0) {
			year = year - (1) >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + (1) >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$5 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + (1) >> 0;
				week = 1;
			}
		}
		return [year, week];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.ISOWeek }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple$1 = _tuple$1; $f.day = day; $f.dec31wday = dec31wday; $f.jan1wday = jan1wday; $f.month = month; $f.t = t; $f.wday = wday; $f.week = week; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var $ptr, _r$1, _r$2, _tuple$1, hour, min, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; hour = $f.hour; min = $f.min; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hour = 0;
		min = 0;
		sec = 0;
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absClock(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		hour = _tuple$1[0];
		min = _tuple$1[1];
		sec = _tuple$1[2];
		/* */ $s = 3; case 3:
		return [hour, min, sec];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Clock }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.hour = hour; $f.min = min; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var $ptr, _q, _q$1, abs, hour, min, sec;
		hour = 0;
		min = 0;
		sec = 0;
		sec = ($div64(abs, new $Uint64(0, 86400), true).$low >> 0);
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(hour, 3600))) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(min, 60))) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var $ptr, _q, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return (_q = ($div64(_r$1, new $Uint64(0, 86400), true).$low >> 0) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Hour }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var $ptr, _q, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return (_q = ($div64(_r$1, new $Uint64(0, 3600), true).$low >> 0) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Minute }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return ($div64(_r$1, new $Uint64(0, 60), true).$low >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Second }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var $ptr, t;
		t = $clone(this, Time);
		return (t.nsec >> 0);
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var $ptr, _r$1, _tuple$1, t, yday, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; t = $f.t; yday = $f.yday; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		yday = _tuple$1[3];
		return yday + 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.YearDay }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.t = t; $f.yday = yday; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var $ptr, _tuple$1, _tuple$2, buf, d, neg, prec, u, w;
		d = this;
		buf = arrayType$4.zero();
		w = 32;
		u = new $Uint64(d.$high, d.$low);
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115);
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 110);
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109);
			}
			_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec);
			w = _tuple$1[0];
			u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115);
			_tuple$2 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9);
			w = _tuple$2[0];
			u = _tuple$2[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109);
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 104);
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
		}
		return $bytesToString($subslice(new sliceType$3(buf), w));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var $ptr, _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;
		nw = 0;
		nv = new $Uint64(0, 0);
		w = buf.$length;
		print = false;
		i = 0;
		while (true) {
			if (!(i < prec)) { break; }
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = ((digit.$low << 24 >>> 24) + 48 << 24 >>> 24));
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
		}
		_tmp = w;
		_tmp$1 = v;
		nw = _tmp;
		nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var $ptr, buf, v, w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48);
		} else {
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = (($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24) + 48 << 24 >>> 24));
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var $ptr, d;
		d = this;
		return new $Int64(d.$high, d.$low);
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var $ptr, d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return $flatten64(sec) + $flatten64(nsec) * 1e-09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var $ptr, d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return $flatten64(min) + $flatten64(nsec) * 1.6666666666666667e-11;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var $ptr, d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return $flatten64(hour) + $flatten64(nsec) * 2.777777777777778e-13;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Time.ptr.prototype.Add = function(d) {
		var $ptr, d, nsec, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		t = $clone(this, Time);
		t.sec = (x = t.sec, x$1 = (x$2 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$2.$high, x$2.$low)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		nsec = t.nsec + ((x$3 = $div64(d, new Duration(0, 1000000000), true), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0) >> 0;
		if (nsec >= 1000000000) {
			t.sec = (x$4 = t.sec, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			t.sec = (x$6 = t.sec, x$7 = new $Int64(0, 1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.nsec = nsec;
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var $ptr, d, t, u, x, x$1, x$2, x$3, x$4;
		u = $clone(u, Time);
		t = $clone(this, Time);
		d = (x = $mul64((x$1 = (x$2 = t.sec, x$3 = u.sec, new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low)), new Duration(x$1.$high, x$1.$low)), new Duration(0, 1000000000)), x$4 = new Duration(0, (t.nsec - u.nsec >> 0)), new Duration(x.$high + x$4.$high, x.$low + x$4.$low));
		if (u.Add(d).Equal(t)) {
			return d;
		} else if (t.Before(u)) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.ptr.prototype.AddDate = function(years, months$1, days$1) {
		var $ptr, _r$1, _r$2, _r$3, _tuple$1, _tuple$2, day, days$1, hour, min, month, months$1, sec, t, year, years, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; day = $f.day; days$1 = $f.days$1; hour = $f.hour; min = $f.min; month = $f.month; months$1 = $f.months$1; sec = $f.sec; t = $f.t; year = $f.year; years = $f.years; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		_r$2 = t.Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		hour = _tuple$2[0];
		min = _tuple$2[1];
		sec = _tuple$2[2];
		_r$3 = Date(year + years >> 0, month + (months$1 >> 0) >> 0, day + days$1 >> 0, hour, min, sec, (t.nsec >> 0), t.loc); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 4; case 4:
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AddDate }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.day = day; $f.days$1 = days$1; $f.hour = hour; $f.min = min; $f.month = month; $f.months$1 = months$1; $f.sec = sec; $f.t = t; $f.year = year; $f.years = years; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
	Time.ptr.prototype.date = function(full) {
		var $ptr, _r$1, _r$2, _tuple$1, day, full, month, t, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; day = $f.day; full = $f.full; month = $f.month; t = $f.t; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absDate(_r$1, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		yday = _tuple$1[3];
		/* */ $s = 3; case 3:
		return [year, month, day, yday];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.day = day; $f.full = full; $f.month = month; $f.t = t; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var $ptr, _q, abs, begin, d, day, end, full, month, n, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x.$high, d.$low - x.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$1.$high, n.$low - x$1.$low));
		y = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$2.$high, y.$low + x$2.$low));
		d = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$3.$high, d.$low - x$3.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$4.$high, y.$low + x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$5.$high, d.$low - x$5.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$6.$high, n.$low - x$6.$low));
		y = (x$7 = n, new $Uint64(y.$high + x$7.$high, y.$low + x$7.$low));
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$8.$high, d.$low - x$8.$low));
		year = ((x$9 = (x$10 = new $Int64(y.$high, y.$low), new $Int64(x$10.$high + -69, x$10.$low + 4075721025)), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0);
		yday = (d.$low >> 0);
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if (day === 59) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = ((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
		end = ((x$11 = month + 1 >> 0, ((x$11 < 0 || x$11 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$11])) >> 0);
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = (((month < 0 || month >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[month]) >> 0);
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	Now = function() {
		var $ptr, _tuple$1, nsec, sec;
		_tuple$1 = now();
		sec = _tuple$1[0];
		nsec = _tuple$1[1];
		return new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), nsec, $pkg.Local);
	};
	$pkg.Now = Now;
	Time.ptr.prototype.UTC = function() {
		var $ptr, t;
		t = $clone(this, Time);
		t.loc = $pkg.UTC;
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var $ptr, t;
		t = $clone(this, Time);
		t.loc = $pkg.Local;
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var $ptr, loc, t;
		t = $clone(this, Time);
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.loc = loc;
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var $ptr, l, t;
		t = $clone(this, Time);
		l = t.loc;
		if (l === ptrType$1.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var $ptr, _r$1, _tuple$1, name, offset, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; name = $f.name; offset = $f.offset; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		t = $clone(this, Time);
		_r$1 = t.loc.lookup((x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640))); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		name = _tuple$1[0];
		offset = _tuple$1[1];
		return [name, offset];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Zone }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.name = name; $f.offset = offset; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.Unix = function() {
		var $ptr, t, x;
		t = $clone(this, Time);
		return (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixNano = function() {
		var $ptr, t, x, x$1, x$2;
		t = $clone(this, Time);
		return (x = $mul64(((x$1 = t.sec, new $Int64(x$1.$high + -15, x$1.$low + 2288912640))), new $Int64(0, 1000000000)), x$2 = new $Int64(0, t.nsec), new $Int64(x.$high + x$2.$high, x.$low + x$2.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var $ptr, _q, _r$1, _r$2, _tuple$1, enc, offset, offsetMin, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; enc = $f.enc; offset = $f.offset; offsetMin = $f.offsetMin; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		offsetMin = 0;
		/* */ if (t.Location() === utcLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (t.Location() === utcLoc) { */ case 1:
			offsetMin = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = t.Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			offset = _tuple$1[1];
			if (!(((_r$2 = offset % 60, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0))) {
				return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = (offset << 16 >> 16);
		/* } */ case 3:
		enc = new sliceType$3([1, ($shiftRightInt64(t.sec, 56).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 48).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 40).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 32).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 24).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 16).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 8).$low << 24 >>> 24), (t.sec.$low << 24 >>> 24), ((t.nsec >> 24 >> 0) << 24 >>> 24), ((t.nsec >> 16 >> 0) << 24 >>> 24), ((t.nsec >> 8 >> 0) << 24 >>> 24), (t.nsec << 24 >>> 24), ((offsetMin >> 8 << 16 >> 16) << 24 >>> 24), (offsetMin << 24 >>> 24)]);
		return [enc, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalBinary }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.enc = enc; $f.offset = offset; $f.offsetMin = offsetMin; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data$1) {
		var $ptr, _r$1, _tuple$1, buf, data$1, localoff, offset, t, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; buf = $f.buf; data$1 = $f.data$1; localoff = $f.localoff; offset = $f.offset; t = $f.t; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		buf = data$1;
		if (buf.$length === 0) {
			return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!(((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) === 1))) {
			return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.$length === 15))) {
			return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		t.sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Int64(0, (7 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 7])), x$7 = $shiftLeft64(new $Int64(0, (6 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 6])), 8), new $Int64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Int64(0, (5 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 5])), 16), new $Int64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Int64(0, (4 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 4])), 24), new $Int64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Int64(0, (3 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3])), 32), new $Int64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Int64(0, (2 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2])), 40), new $Int64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Int64(0, (1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1])), 48), new $Int64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64(new $Int64(0, (0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0])), 56), new $Int64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		buf = $subslice(buf, 8);
		t.nsec = ((((3 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3]) >> 0) | (((2 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2]) >> 0) << 8 >> 0)) | (((1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) >> 0) << 16 >> 0)) | (((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) >> 0) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = $imul(((((1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) << 16 >> 16) | (((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) << 16 >> 16) << 8 << 16 >> 16)) >> 0), 60);
		/* */ if (offset === -60) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset === -60) { */ case 1:
			t.loc = utcLoc;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = $pkg.Local.lookup((x$14 = t.sec, new $Int64(x$14.$high + -15, x$14.$low + 2288912640))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			localoff = _tuple$1[1];
			/* */ if (offset === localoff) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (offset === localoff) { */ case 5:
				t.loc = $pkg.Local;
				$s = 7; continue;
			/* } else { */ case 6:
				t.loc = FixedZone("", offset);
			/* } */ case 7:
		/* } */ case 3:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalBinary }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.data$1 = data$1; $f.localoff = localoff; $f.offset = offset; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalBinary = function(data$1) { return this.$val.UnmarshalBinary(data$1); };
	Time.ptr.prototype.GobEncode = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobEncode }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data$1) {
		var $ptr, _r$1, data$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; data$1 = $f.data$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = t.UnmarshalBinary(data$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobDecode }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.data$1 = data$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobDecode = function(data$1) { return this.$val.GobDecode(data$1); };
	Time.ptr.prototype.MarshalJSON = function() {
		var $ptr, _r$1, _r$2, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		y = _r$1;
		/* */ if (y < 0 || y >= 10000) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (y < 0 || y >= 10000) { */ case 2:
			return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		/* } */ case 3:
		_r$2 = t.Format("\"2006-01-02T15:04:05.999999999Z07:00\""); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return [new sliceType$3($stringToBytes(_r$2)), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalJSON }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data$1) {
		var $ptr, _r$1, _tuple$1, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		t = this;
		_r$1 = Parse("\"2006-01-02T15:04:05Z07:00\"", $bytesToString(data$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		Time.copy(t, _tuple$1[0]);
		err = _tuple$1[1];
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalJSON }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalJSON = function(data$1) { return this.$val.UnmarshalJSON(data$1); };
	Time.ptr.prototype.MarshalText = function() {
		var $ptr, _r$1, _r$2, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		y = _r$1;
		/* */ if (y < 0 || y >= 10000) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (y < 0 || y >= 10000) { */ case 2:
			return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		/* } */ case 3:
		_r$2 = t.Format("2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return [new sliceType$3($stringToBytes(_r$2)), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalText }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data$1) {
		var $ptr, _r$1, _tuple$1, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		t = this;
		_r$1 = Parse("2006-01-02T15:04:05Z07:00", $bytesToString(data$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		Time.copy(t, _tuple$1[0]);
		err = _tuple$1[1];
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalText }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalText = function(data$1) { return this.$val.UnmarshalText(data$1); };
	Unix = function(sec, nsec) {
		var $ptr, n, nsec, sec, x, x$1, x$2, x$3;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x = n, new $Int64(sec.$high + x.$high, sec.$low + x.$low));
			nsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$1.$high, nsec.$low - x$1.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$2 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$2.$high, nsec.$low + x$2.$low));
				sec = (x$3 = new $Int64(0, 1), new $Int64(sec.$high - x$3.$high, sec.$low - x$3.$low));
			}
		}
		return new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), ((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0), $pkg.Local);
	};
	$pkg.Unix = Unix;
	isLeap = function(year) {
		var $ptr, _r$1, _r$2, _r$3, year;
		return ((_r$1 = year % 4, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$2 = year % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$3 = year % 400, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var $ptr, _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (($imul(n, base))) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (($imul(n$1, base))) >> 0;
		}
		_tmp = hi;
		_tmp$1 = lo;
		nhi = _tmp;
		nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var $ptr, _r$1, _r$2, _r$3, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, abs, d, day, end, hour, loc, m, min, month, n, nsec, offset, sec, start, unix, utc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; abs = $f.abs; d = $f.d; day = $f.day; end = $f.end; hour = $f.hour; loc = $f.loc; m = $f.m; min = $f.min; month = $f.month; n = $f.n; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; start = $f.start; unix = $f.unix; utc = $f.utc; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = (month >> 0) - 1 >> 0;
		_tuple$1 = norm(year, m, 12);
		year = _tuple$1[0];
		m = _tuple$1[1];
		month = (m >> 0) + 1 >> 0;
		_tuple$2 = norm(sec, nsec, 1000000000);
		sec = _tuple$2[0];
		nsec = _tuple$2[1];
		_tuple$3 = norm(min, sec, 60);
		min = _tuple$3[0];
		sec = _tuple$3[1];
		_tuple$4 = norm(hour, min, 60);
		hour = _tuple$4[0];
		min = _tuple$4[1];
		_tuple$5 = norm(day, hour, 24);
		day = _tuple$5[0];
		hour = _tuple$5[1];
		y = (x = (x$1 = new $Int64(0, year), new $Int64(x$1.$high - -69, x$1.$low - 4075721025)), new $Uint64(x.$high, x.$low));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$2.$high, y.$low - x$2.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$5.$high, y.$low - x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$6.$high, d.$low + x$6.$low));
		n = y;
		d = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		d = (x$8 = new $Uint64(0, (x$9 = month - 1 >> 0, ((x$9 < 0 || x$9 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$9]))), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$10 = new $Uint64(0, 1), new $Uint64(d.$high + x$10.$high, d.$low + x$10.$low));
		}
		d = (x$11 = new $Uint64(0, (day - 1 >> 0)), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$12 = new $Uint64(0, ((($imul(hour, 3600)) + ($imul(min, 60)) >> 0) + sec >> 0)), new $Uint64(abs.$high + x$12.$high, abs.$low + x$12.$low));
		unix = (x$13 = new $Int64(abs.$high, abs.$low), new $Int64(x$13.$high + -2147483647, x$13.$low + 3844486912));
		_r$1 = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$6 = _r$1;
		offset = _tuple$6[1];
		start = _tuple$6[3];
		end = _tuple$6[4];
		/* */ if (!((offset === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((offset === 0))) { */ case 2:
			utc = (x$14 = new $Int64(0, offset), new $Int64(unix.$high - x$14.$high, unix.$low - x$14.$low));
			/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { $s = 4; continue; }
			/* */ if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { */ case 4:
				_r$2 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$7 = _r$2;
				offset = _tuple$7[1];
				$s = 6; continue;
			/* } else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 5:
				_r$3 = loc.lookup(end); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$8 = _r$3;
				offset = _tuple$8[1];
			/* } */ case 6:
			unix = (x$15 = new $Int64(0, offset), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));
		/* } */ case 3:
		return new Time.ptr(new $Int64(unix.$high + 14, unix.$low + 2006054656), (nsec >> 0), loc);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f.abs = abs; $f.d = d; $f.day = day; $f.end = end; $f.hour = hour; $f.loc = loc; $f.m = m; $f.min = min; $f.month = month; $f.n = n; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.start = start; $f.unix = unix; $f.utc = utc; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Date = Date;
	Time.ptr.prototype.Truncate = function(d) {
		var $ptr, _tuple$1, d, r, t;
		t = $clone(this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div(t, d);
		r = _tuple$1[1];
		return t.Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var $ptr, _tuple$1, d, r, t, x;
		t = $clone(this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div(t, d);
		r = _tuple$1[1];
		if ((x = new Duration(r.$high + r.$high, r.$low + r.$low), (x.$high < d.$high || (x.$high === d.$high && x.$low < d.$low)))) {
			return t.Add(new Duration(-r.$high, -r.$low));
		}
		return t.Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var $ptr, _q, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, t, tmp, u0, u0x, u1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		qmod2 = 0;
		r = new Duration(0, 0);
		t = $clone(t, Time);
		neg = false;
		nsec = t.nsec;
		if ((x = t.sec, (x.$high < 0 || (x.$high === 0 && x.$low < 0)))) {
			neg = true;
			t.sec = (x$1 = t.sec, new $Int64(-x$1.$high, -x$1.$low));
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				t.sec = (x$2 = t.sec, x$3 = new $Int64(0, 1), new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$4 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$4.$high === 0 && x$4.$low === 0))) {
			qmod2 = ((_q = nsec / ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) & 1;
			r = new Duration(0, (_r$1 = nsec % ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")));
		} else if ((x$5 = $div64(d, new Duration(0, 1000000000), true), (x$5.$high === 0 && x$5.$low === 0))) {
			d1 = (x$6 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$6.$high, x$6.$low));
			qmod2 = ((x$7 = $div64(t.sec, d1, false), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0) & 1;
			r = (x$8 = $mul64((x$9 = $div64(t.sec, d1, true), new Duration(x$9.$high, x$9.$low)), new Duration(0, 1000000000)), x$10 = new Duration(0, nsec), new Duration(x$8.$high + x$10.$high, x$8.$low + x$10.$low));
		} else {
			sec = (x$11 = t.sec, new $Uint64(x$11.$high, x$11.$low));
			tmp = $mul64(($shiftRightUint64(sec, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64(new $Uint64(sec.$high & 0, (sec.$low & 4294967295) >>> 0), new $Uint64(0, 1000000000));
			_tmp = u0;
			_tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low);
			u0x = _tmp;
			u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$12 = new $Uint64(0, 1), new $Uint64(u1.$high + x$12.$high, u1.$low + x$12.$low));
			}
			_tmp$2 = u0;
			_tmp$3 = (x$13 = new $Uint64(0, nsec), new $Uint64(u0.$high + x$13.$high, u0.$low + x$13.$low));
			u0x = _tmp$2;
			u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$14 = new $Uint64(0, 1), new $Uint64(u1.$high + x$14.$high, u1.$low + x$14.$low));
			}
			d1$1 = new $Uint64(d.$high, d.$low);
			while (true) {
				if (!(!((x$15 = $shiftRightUint64(d1$1, 63), (x$15.$high === 0 && x$15.$low === 1))))) { break; }
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0;
					_tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low);
					u0x = _tmp$4;
					u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$16 = new $Uint64(0, 1), new $Uint64(u1.$high - x$16.$high, u1.$low - x$16.$low));
					}
					u1 = (x$17 = d1$1, new $Uint64(u1.$high - x$17.$high, u1.$low - x$17.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$18 = new $Uint64(d.$high, d.$low), (d0.$high === x$18.$high && d0.$low === x$18.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$19 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$19.$high, (d0.$low | x$19.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = new Duration(u0.$high, u0.$low);
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	Location.ptr.prototype.get = function() {
		var $ptr, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$1.nil) {
			return utcLoc;
		}
		/* */ if (l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === localLoc) { */ case 1:
			$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		return l;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.get }; } $f.$ptr = $ptr; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var $ptr, _r$1, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$1.name;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = function(name, offset) {
		var $ptr, l, name, offset, x;
		l = new Location.ptr(name, new sliceType([new zone.ptr(name, offset, false)]), new sliceType$1([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x = l.zone, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		return l;
	};
	$pkg.FixedZone = FixedZone;
	Location.ptr.prototype.lookup = function(sec) {
		var $ptr, _q, _r$1, end, hi, isDST, l, lim, lo, m, name, offset, sec, start, tx, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, zone$1, zone$2, zone$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; end = $f.end; hi = $f.hi; isDST = $f.isDST; l = $f.l; lim = $f.lim; lo = $f.lo; m = $f.m; name = $f.name; offset = $f.offset; sec = $f.sec; start = $f.start; tx = $f.tx; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; zone$1 = $f.zone$1; zone$2 = $f.zone$2; zone$3 = $f.zone$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		isDST = false;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		l = _r$1;
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			return [name, offset, isDST, start, end];
		}
		if ((l.tx.$length === 0) || (x$2 = (x$3 = l.tx, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).when, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			zone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5]));
			name = zone$2.name;
			offset = zone$2.offset;
			isDST = zone$2.isDST;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$6 = l.tx, (0 >= x$6.$length ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while (true) {
			if (!((hi - lo >> 0) > 1)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + x$8]));
		name = zone$3.name;
		offset = zone$3.offset;
		isDST = zone$3.isDST;
		start = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).when;
		return [name, offset, isDST, start, end];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookup }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.end = end; $f.hi = hi; $f.isDST = isDST; $f.l = l; $f.lim = lim; $f.lo = lo; $f.m = m; $f.name = name; $f.offset = offset; $f.sec = sec; $f.start = start; $f.tx = tx; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.zone$3 = zone$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var $ptr, _i, _ref, l, x, x$1, x$2, x$3, x$4, x$5, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])).index, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).isDST) {
			zi = ((x$3 = l.tx, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).index >> 0) - 1 >> 0;
			while (true) {
				if (!(zi >= 0)) { break; }
				if (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			zi$1 = _i;
			if (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var $ptr, _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	Location.ptr.prototype.lookupName = function(name, unix) {
		var $ptr, _i, _i$1, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple$1, i, i$1, isDST, isDST$1, l, nam, name, offset, offset$1, ok, unix, x, x$1, x$2, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple$1 = $f._tuple$1; i = $f.i; i$1 = $f.i$1; isDST = $f.isDST; isDST$1 = $f.isDST$1; l = $f.l; nam = $f.nam; name = $f.name; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; unix = $f.unix; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = 0;
		isDST = false;
		ok = false;
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		l = _r$1;
		_ref = l.zone;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			zone$1 = (x = l.zone, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			/* */ if (zone$1.name === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (zone$1.name === name) { */ case 4:
				_r$2 = l.lookup((x$1 = new $Int64(0, zone$1.offset), new $Int64(unix.$high - x$1.$high, unix.$low - x$1.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				nam = _tuple$1[0];
				offset$1 = _tuple$1[1];
				isDST$1 = _tuple$1[2];
				if (nam === zone$1.name) {
					_tmp = offset$1;
					_tmp$1 = isDST$1;
					_tmp$2 = true;
					offset = _tmp;
					isDST = _tmp$1;
					ok = _tmp$2;
					return [offset, isDST, ok];
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		_ref$1 = l.zone;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			zone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$3 = zone$2.offset;
				_tmp$4 = zone$2.isDST;
				_tmp$5 = true;
				offset = _tmp$3;
				isDST = _tmp$4;
				ok = _tmp$5;
				return [offset, isDST, ok];
			}
			_i$1++;
		}
		return [offset, isDST, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookupName }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple$1 = _tuple$1; $f.i = i; $f.i$1 = i$1; $f.isDST = isDST; $f.isDST$1 = isDST$1; $f.l = l; $f.nam = nam; $f.name = name; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.unix = unix; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Time.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "AppendFormat", name: "AppendFormat", pkg: "", typ: $funcType([sliceType$3, $String], [sliceType$3], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$1], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}];
	ptrType$6.methods = [{prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}];
	ptrType$1.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$1], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Bool, $Int64, $Int64], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool, $Bool], false)}];
	ParseError.init([{prop: "Layout", name: "Layout", pkg: "", typ: $String, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", pkg: "", typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", pkg: "", typ: $String, tag: ""}, {prop: "Message", name: "Message", pkg: "", typ: $String, tag: ""}]);
	Time.init([{prop: "sec", name: "sec", pkg: "time", typ: $Int64, tag: ""}, {prop: "nsec", name: "nsec", pkg: "time", typ: $Int32, tag: ""}, {prop: "loc", name: "loc", pkg: "time", typ: ptrType$1, tag: ""}]);
	Location.init([{prop: "name", name: "name", pkg: "time", typ: $String, tag: ""}, {prop: "zone", name: "zone", pkg: "time", typ: sliceType, tag: ""}, {prop: "tx", name: "tx", pkg: "time", typ: sliceType$1, tag: ""}, {prop: "cacheStart", name: "cacheStart", pkg: "time", typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", pkg: "time", typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", pkg: "time", typ: ptrType, tag: ""}]);
	zone.init([{prop: "name", name: "name", pkg: "time", typ: $String, tag: ""}, {prop: "offset", name: "offset", pkg: "time", typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", pkg: "time", typ: $Bool, tag: ""}]);
	zoneTrans.init([{prop: "when", name: "when", pkg: "time", typ: $Int64, tag: ""}, {prop: "index", name: "index", pkg: "time", typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", pkg: "time", typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", pkg: "time", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		localLoc = new Location.ptr("", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		localOnce = new nosync.Once.ptr(false, false);
		std0x = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);
		longDayNames = new sliceType$2(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType$2(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType$2(["---", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType$2(["---", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = $toNativeArray($kindString, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = $toNativeArray($kindString, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		unitMap = $makeMap($String.keyFor, [{ k: "ns", v: new $Int64(0, 1) }, { k: "us", v: new $Int64(0, 1000) }, { k: "\xC2\xB5s", v: new $Int64(0, 1000) }, { k: "\xCE\xBCs", v: new $Int64(0, 1000) }, { k: "ms", v: new $Int64(0, 1000000) }, { k: "s", v: new $Int64(0, 1000000000) }, { k: "m", v: new $Int64(13, 4165425152) }, { k: "h", v: new $Int64(838, 817405952) }]);
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.ptr("UTC", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		_r = syscall.Getenv("ZONEINFO"); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		zoneinfo = _tuple[0];
		badData = errors.New("malformed time zone information");
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, $init, errors, js, io, runtime, sync, atomic, syscall, time, PathError, SyscallError, LinkError, File, file, dirInfo, FileInfo, FileMode, fileStat, sliceType, ptrType, sliceType$1, sliceType$2, ptrType$2, ptrType$3, ptrType$4, arrayType, ptrType$11, funcType$1, ptrType$12, arrayType$2, ptrType$14, arrayType$5, ptrType$15, ptrType$16, errFinished, lstat, useSyscallwd, supportsCloseOnExec, runtime_args, init, runtime_beforeExit, NewSyscallError, IsNotExist, isNotExist, Open, fixCount, sigpipe, syscallMode, Chmod, NewFile, epipecheck, OpenFile, Stat, Lstat, basename, init$1, useSyscallwdDarwin, init$2, Exit, fileInfoFromStat, timespecToTime, init$3;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	PathError = $pkg.PathError = $newType(0, $kindStruct, "os.PathError", "PathError", "os", function(Op_, Path_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Path = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Path = Path_;
		this.Err = Err_;
	});
	SyscallError = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", "SyscallError", "os", function(Syscall_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Syscall = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Syscall = Syscall_;
		this.Err = Err_;
	});
	LinkError = $pkg.LinkError = $newType(0, $kindStruct, "os.LinkError", "LinkError", "os", function(Op_, Old_, New_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Old = "";
			this.New = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Old = Old_;
		this.New = New_;
		this.Err = Err_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", "File", "os", function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$11.nil;
			return;
		}
		this.file = file_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", "file", "os", function(fd_, name_, dirinfo_, nepipe_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fd = 0;
			this.name = "";
			this.dirinfo = ptrType.nil;
			this.nepipe = 0;
			return;
		}
		this.fd = fd_;
		this.name = name_;
		this.dirinfo = dirinfo_;
		this.nepipe = nepipe_;
	});
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", "dirInfo", "os", function(buf_, nbuf_, bufp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType$1.nil;
			this.nbuf = 0;
			this.bufp = 0;
			return;
		}
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.bufp = bufp_;
	});
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "os.FileInfo", "FileInfo", "os", null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "os.FileMode", "FileMode", "os", null);
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", "fileStat", "os", function(name_, size_, mode_, modTime_, sys_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.size = new $Int64(0, 0);
			this.mode = 0;
			this.modTime = new time.Time.ptr(new $Int64(0, 0), 0, ptrType$14.nil);
			this.sys = $ifaceNil;
			return;
		}
		this.name = name_;
		this.size = size_;
		this.mode = mode_;
		this.modTime = modTime_;
		this.sys = sys_;
	});
	sliceType = $sliceType($String);
	ptrType = $ptrType(dirInfo);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType(FileInfo);
	ptrType$2 = $ptrType(File);
	ptrType$3 = $ptrType(PathError);
	ptrType$4 = $ptrType(LinkError);
	arrayType = $arrayType($Uint8, 4);
	ptrType$11 = $ptrType(file);
	funcType$1 = $funcType([ptrType$11], [$error], false);
	ptrType$12 = $ptrType($Int32);
	arrayType$2 = $arrayType($Int64, 2);
	ptrType$14 = $ptrType(time.Location);
	arrayType$5 = $arrayType($Uint8, 32);
	ptrType$15 = $ptrType(fileStat);
	ptrType$16 = $ptrType(SyscallError);
	runtime_args = function() {
		var $ptr;
		return $pkg.Args;
	};
	init = function() {
		var $ptr, argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			$pkg.Args = $makeSlice(sliceType, ($parseInt(argv.length) - 1 >> 0));
			i = 0;
			while (true) {
				if (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }
				((i < 0 || i >= $pkg.Args.$length) ? $throwRuntimeError("index out of range") : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));
				i = i + (1) >> 0;
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType(["?"]);
		}
	};
	runtime_beforeExit = function() {
		var $ptr;
	};
	File.ptr.prototype.readdirnames = function(n) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, d, err, errno, f, n, names, nb, nc, size;
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f.file.dirinfo === ptrType.nil) {
			f.file.dirinfo = new dirInfo.ptr(sliceType$1.nil, 0, 0);
			f.file.dirinfo.buf = $makeSlice(sliceType$1, 4096);
		}
		d = f.file.dirinfo;
		size = n;
		if (size <= 0) {
			size = 100;
			n = -1;
		}
		names = $makeSlice(sliceType, 0, size);
		while (true) {
			if (!(!((n === 0)))) { break; }
			if (d.bufp >= d.nbuf) {
				d.bufp = 0;
				errno = $ifaceNil;
				_tuple$1 = syscall.ReadDirent(f.file.fd, d.buf);
				_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
				d.nbuf = _tuple[0];
				errno = _tuple[1];
				if (!($interfaceIsEqual(errno, $ifaceNil))) {
					_tmp = names;
					_tmp$1 = NewSyscallError("readdirent", errno);
					names = _tmp;
					err = _tmp$1;
					return [names, err];
				}
				if (d.nbuf <= 0) {
					break;
				}
			}
			_tmp$2 = 0;
			_tmp$3 = 0;
			nb = _tmp$2;
			nc = _tmp$3;
			_tuple$2 = syscall.ParseDirent($subslice(d.buf, d.bufp, d.nbuf), n, names);
			nb = _tuple$2[0];
			nc = _tuple$2[1];
			names = _tuple$2[2];
			d.bufp = d.bufp + (nb) >> 0;
			n = n - (nc) >> 0;
		}
		if (n >= 0 && (names.$length === 0)) {
			_tmp$4 = names;
			_tmp$5 = io.EOF;
			names = _tmp$4;
			err = _tmp$5;
			return [names, err];
		}
		_tmp$6 = names;
		_tmp$7 = $ifaceNil;
		names = _tmp$6;
		err = _tmp$7;
		return [names, err];
	};
	File.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };
	File.ptr.prototype.Readdir = function(n) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, err, f, fi, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; fi = $f.fi; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fi = sliceType$2.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = sliceType$2.nil;
			_tmp$1 = $pkg.ErrInvalid;
			fi = _tmp;
			err = _tmp$1;
			return [fi, err];
		}
		_r = f.readdir(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		fi = _tuple[0];
		err = _tuple[1];
		/* */ $s = 2; case 2:
		return [fi, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdir }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.fi = fi; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var $ptr, _tmp, _tmp$1, _tuple, err, f, n, names;
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = sliceType.nil;
			_tmp$1 = $pkg.ErrInvalid;
			names = _tmp;
			err = _tmp$1;
			return [names, err];
		}
		_tuple = f.readdirnames(n);
		names = _tuple[0];
		err = _tuple[1];
		return [names, err];
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	PathError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return e.Op + " " + e.Path + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return e.Syscall + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	NewSyscallError = function(syscall$1, err) {
		var $ptr, err, syscall$1;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return $ifaceNil;
		}
		return new SyscallError.ptr(syscall$1, err);
	};
	$pkg.NewSyscallError = NewSyscallError;
	IsNotExist = function(err) {
		var $ptr, err;
		return isNotExist(err);
	};
	$pkg.IsNotExist = IsNotExist;
	isNotExist = function(err) {
		var $ptr, _ref, err, pe, pe$1, pe$2;
		_ref = err;
		if (_ref === $ifaceNil) {
			pe = _ref;
			return false;
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			pe$1 = _ref.$val;
			err = pe$1.Err;
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			pe$2 = _ref.$val;
			err = pe$2.Err;
		}
		return $interfaceIsEqual(err, new syscall.Errno(2)) || $interfaceIsEqual(err, $pkg.ErrNotExist);
	};
	File.ptr.prototype.Name = function() {
		var $ptr, f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	LinkError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return e.Op + " " + e.Old + " " + e.New + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LinkError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	LinkError.prototype.Error = function() { return this.$val.Error(); };
	File.ptr.prototype.Read = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		_tuple = f.read(b);
		n = _tuple[0];
		e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if ((n === 0) && b.$length > 0 && $interfaceIsEqual(e, $ifaceNil)) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("read", f.file.name, e);
		}
		_tmp$4 = n;
		_tmp$5 = err;
		n = _tmp$4;
		err = _tmp$5;
		return [n, err];
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, f, m, n, off, x;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		while (true) {
			if (!(b.$length > 0)) { break; }
			_tuple = f.pread(b, off);
			m = _tuple[0];
			e = _tuple[1];
			if ((m === 0) && $interfaceIsEqual(e, $ifaceNil)) {
				_tmp$2 = n;
				_tmp$3 = io.EOF;
				n = _tmp$2;
				err = _tmp$3;
				return [n, err];
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("read", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.Write = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		_tuple = f.write(b);
		n = _tuple[0];
		e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("write", f.file.name, e);
		}
		_tmp$2 = n;
		_tmp$3 = err;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tuple, b, e, err, f, m, n, off, x;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		while (true) {
			if (!(b.$length > 0)) { break; }
			_tuple = f.pwrite(b, off);
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("write", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, f, offset, r, ret, whence;
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = $pkg.ErrInvalid;
			ret = _tmp;
			err = _tmp$1;
			return [ret, err];
		}
		_tuple = f.seek(offset, whence);
		r = _tuple[0];
		e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = new PathError.ptr("seek", f.file.name, e);
			ret = _tmp$2;
			err = _tmp$3;
			return [ret, err];
		}
		_tmp$4 = r;
		_tmp$5 = $ifaceNil;
		ret = _tmp$4;
		err = _tmp$5;
		return [ret, err];
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.ptr.prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, _tuple, err, f, n, s;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		_tuple = f.Write(new sliceType$1($stringToBytes(s)));
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	File.ptr.prototype.Chdir = function() {
		var $ptr, e, f;
		f = this;
		if (f === ptrType$2.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchdir(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chdir", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	Open = function(name) {
		var $ptr, name;
		return OpenFile(name, 0, 0);
	};
	$pkg.Open = Open;
	fixCount = function(n, err) {
		var $ptr, err, n;
		if (n < 0) {
			n = 0;
		}
		return [n, err];
	};
	sigpipe = function() {
		$panic("Native function not implemented: os.sigpipe");
	};
	syscallMode = function(i) {
		var $ptr, i, o;
		o = 0;
		o = (o | ((new FileMode(i).Perm() >>> 0))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	Chmod = function(name, mode) {
		var $ptr, e, mode, name;
		e = syscall.Chmod(name, syscallMode(mode));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chmod", name, e);
		}
		return $ifaceNil;
	};
	$pkg.Chmod = Chmod;
	File.ptr.prototype.Chmod = function(mode) {
		var $ptr, e, f, mode;
		f = this;
		if (f === ptrType$2.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchmod(f.file.fd, syscallMode(mode));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chmod", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var $ptr, e, f, gid, uid;
		f = this;
		if (f === ptrType$2.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchown(f.file.fd, uid, gid);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chown", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var $ptr, e, f, size;
		f = this;
		if (f === ptrType$2.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Ftruncate(f.file.fd, size);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("truncate", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var $ptr, e, f;
		f = this;
		if (f === ptrType$2.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fsync(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return NewSyscallError("fsync", e);
		}
		return $ifaceNil;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Fd = function() {
		var $ptr, f;
		f = this;
		if (f === ptrType$2.nil) {
			return 4294967295;
		}
		return (f.file.fd >>> 0);
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	NewFile = function(fd, name) {
		var $ptr, f, fd, fdi, name;
		fdi = (fd >> 0);
		if (fdi < 0) {
			return ptrType$2.nil;
		}
		f = new File.ptr(new file.ptr(fdi, name, ptrType.nil, 0));
		runtime.SetFinalizer(f.file, new funcType$1($methodExpr(ptrType$11, "close")));
		return f;
	};
	$pkg.NewFile = NewFile;
	epipecheck = function(file$1, e) {
		var $ptr, e, file$1;
		if ($interfaceIsEqual(e, new syscall.Errno(32))) {
			if (atomic.AddInt32((file$1.$ptr_nepipe || (file$1.$ptr_nepipe = new ptrType$12(function() { return this.$target.file.nepipe; }, function($v) { this.$target.file.nepipe = $v; }, file$1))), 1) >= 10) {
				sigpipe();
			}
		} else {
			atomic.StoreInt32((file$1.$ptr_nepipe || (file$1.$ptr_nepipe = new ptrType$12(function() { return this.$target.file.nepipe; }, function($v) { this.$target.file.nepipe = $v; }, file$1))), 0);
		}
	};
	OpenFile = function(name, flag, perm) {
		var $ptr, _tuple, _tuple$1, chmod, e, err, flag, name, perm, r;
		chmod = false;
		if (true && !(((flag & 512) === 0)) && !((((perm & 1048576) >>> 0) === 0))) {
			_tuple = Stat(name);
			err = _tuple[1];
			if (IsNotExist(err)) {
				chmod = true;
			}
		}
		_tuple$1 = syscall.Open(name, flag | 16777216, syscallMode(perm));
		r = _tuple$1[0];
		e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [ptrType$2.nil, new PathError.ptr("open", name, e)];
		}
		if (chmod) {
			Chmod(name, perm);
		}
		if (!supportsCloseOnExec) {
			syscall.CloseOnExec(r);
		}
		return [NewFile((r >>> 0), name), $ifaceNil];
	};
	$pkg.OpenFile = OpenFile;
	File.ptr.prototype.Close = function() {
		var $ptr, f;
		f = this;
		if (f === ptrType$2.nil) {
			return $pkg.ErrInvalid;
		}
		return f.file.close();
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	file.ptr.prototype.close = function() {
		var $ptr, e, err, file$1;
		file$1 = this;
		if (file$1 === ptrType$11.nil || file$1.fd < 0) {
			return new syscall.Errno(22);
		}
		err = $ifaceNil;
		e = syscall.Close(file$1.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("close", file$1.name, e);
		}
		file$1.fd = -1;
		runtime.SetFinalizer(file$1, $ifaceNil);
		return err;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.Stat = function() {
		var $ptr, err, f, stat;
		f = this;
		if (f === ptrType$2.nil) {
			return [$ifaceNil, $pkg.ErrInvalid];
		}
		stat = new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$2.zero());
		err = syscall.Fstat(f.file.fd, stat);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("stat", f.file.name, err)];
		}
		return [fileInfoFromStat(stat, f.file.name), $ifaceNil];
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	Stat = function(name) {
		var $ptr, err, name, stat;
		stat = new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$2.zero());
		err = syscall.Stat(name, stat);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("stat", name, err)];
		}
		return [fileInfoFromStat(stat, name), $ifaceNil];
	};
	$pkg.Stat = Stat;
	Lstat = function(name) {
		var $ptr, err, name, stat;
		stat = new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$2.zero());
		err = syscall.Lstat(name, stat);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("lstat", name, err)];
		}
		return [fileInfoFromStat(stat, name), $ifaceNil];
	};
	$pkg.Lstat = Lstat;
	File.ptr.prototype.readdir = function(n) {
		var $ptr, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, dirname, err, f, fi, filename, fip, lerr, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dirname = $f.dirname; err = $f.err; f = $f.f; fi = $f.fi; filename = $f.filename; fip = $f.fip; lerr = $f.lerr; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fi = sliceType$2.nil;
		err = $ifaceNil;
		f = this;
		dirname = f.file.name;
		if (dirname === "") {
			dirname = ".";
		}
		_tuple = f.Readdirnames(n);
		names = _tuple[0];
		err = _tuple[1];
		fi = $makeSlice(sliceType$2, 0, names.$length);
		_ref = names;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			filename = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = lstat(dirname + "/" + filename); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			fip = _tuple$1[0];
			lerr = _tuple$1[1];
			if (IsNotExist(lerr)) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			if (!($interfaceIsEqual(lerr, $ifaceNil))) {
				_tmp = fi;
				_tmp$1 = lerr;
				fi = _tmp;
				err = _tmp$1;
				return [fi, err];
			}
			fi = $append(fi, fip);
			_i++;
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = fi;
		_tmp$3 = err;
		fi = _tmp$2;
		err = _tmp$3;
		return [fi, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdir }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dirname = dirname; $f.err = err; $f.f = f; $f.fi = fi; $f.filename = filename; $f.fip = fip; $f.lerr = lerr; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdir = function(n) { return this.$val.readdir(n); };
	File.ptr.prototype.read = function(b) {
		var $ptr, _tuple, _tuple$1, b, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (true && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Read(f.file.fd, b);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var $ptr, _tuple, _tuple$1, b, err, f, n, off;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (true && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Pread(f.file.fd, b, off);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.write = function(b) {
		var $ptr, _tmp, _tmp$1, _tuple, _tuple$1, b, bcap, err, err$1, f, m, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		while (true) {
			bcap = b;
			if (true && bcap.$length > 1073741824) {
				bcap = $subslice(bcap, 0, 1073741824);
			}
			_tuple$1 = syscall.Write(f.file.fd, bcap);
			_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
			m = _tuple[0];
			err$1 = _tuple[1];
			n = n + (m) >> 0;
			if (0 < m && m < bcap.$length || $interfaceIsEqual(err$1, new syscall.Errno(4))) {
				b = $subslice(b, m);
				continue;
			}
			if (true && !((bcap.$length === b.$length)) && $interfaceIsEqual(err$1, $ifaceNil)) {
				b = $subslice(b, m);
				continue;
			}
			_tmp = n;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var $ptr, _tuple, _tuple$1, b, err, f, n, off;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (true && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Pwrite(f.file.fd, b, off);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	File.ptr.prototype.seek = function(offset, whence) {
		var $ptr, _tuple, err, f, offset, ret, whence;
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		_tuple = syscall.Seek(f.file.fd, offset, whence);
		ret = _tuple[0];
		err = _tuple[1];
		return [ret, err];
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	basename = function(name) {
		var $ptr, i, name;
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i > 0 && (name.charCodeAt(i) === 47))) { break; }
			name = name.substring(0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (name.charCodeAt(i) === 47) {
				name = name.substring((i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	init$1 = function() {
		var $ptr;
		useSyscallwd = useSyscallwdDarwin;
	};
	useSyscallwdDarwin = function(err) {
		var $ptr, err;
		return !($interfaceIsEqual(err, new syscall.Errno(45)));
	};
	init$2 = function() {
		var $ptr;
		$pkg.Args = runtime_args();
	};
	Exit = function(code) {
		var $ptr, code;
		if (code === 0) {
			runtime_beforeExit();
		}
		syscall.Exit(code);
	};
	$pkg.Exit = Exit;
	fileInfoFromStat = function(st, name) {
		var $ptr, _ref, fs, name, st;
		fs = new fileStat.ptr(basename(name), st.Size, 0, $clone(timespecToTime(st.Mtimespec), time.Time), st);
		fs.mode = (((st.Mode & 511) >>> 0) >>> 0);
		_ref = (st.Mode & 61440) >>> 0;
		if (_ref === 24576 || _ref === 57344) {
			fs.mode = (fs.mode | (67108864)) >>> 0;
		} else if (_ref === 8192) {
			fs.mode = (fs.mode | (69206016)) >>> 0;
		} else if (_ref === 16384) {
			fs.mode = (fs.mode | (2147483648)) >>> 0;
		} else if (_ref === 4096) {
			fs.mode = (fs.mode | (33554432)) >>> 0;
		} else if (_ref === 40960) {
			fs.mode = (fs.mode | (134217728)) >>> 0;
		} else if (_ref === 32768) {
		} else if (_ref === 49152) {
			fs.mode = (fs.mode | (16777216)) >>> 0;
		}
		if (!((((st.Mode & 1024) >>> 0) === 0))) {
			fs.mode = (fs.mode | (4194304)) >>> 0;
		}
		if (!((((st.Mode & 2048) >>> 0) === 0))) {
			fs.mode = (fs.mode | (8388608)) >>> 0;
		}
		if (!((((st.Mode & 512) >>> 0) === 0))) {
			fs.mode = (fs.mode | (1048576)) >>> 0;
		}
		return fs;
	};
	timespecToTime = function(ts) {
		var $ptr, ts;
		ts = $clone(ts, syscall.Timespec);
		return time.Unix(ts.Sec, ts.Nsec);
	};
	init$3 = function() {
		var $ptr, _i, _ref, _rune, _tuple, err, i, osver;
		_tuple = syscall.Sysctl("kern.osrelease");
		osver = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return;
		}
		i = 0;
		_ref = osver;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			if (!((osver.charCodeAt(i) === 46))) {
				_i += _rune[1];
				continue;
			}
			_i += _rune[1];
		}
		if (i > 2 || (i === 2) && osver.charCodeAt(0) >= 49 && osver.charCodeAt(1) >= 49) {
			supportsCloseOnExec = true;
		}
	};
	FileMode.prototype.String = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = arrayType$5.zero();
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = ((31 - i >> 0) >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c << 24 >>> 24));
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = ((8 - i$1 >> 0) >>> 0), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c$1 << 24 >>> 24));
			} else {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return $bytesToString($subslice(new sliceType$1(buf), 0, w));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var $ptr, m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var $ptr, m;
		m = this.$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var $ptr, m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	fileStat.ptr.prototype.Name = function() {
		var $ptr, fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var $ptr, fs;
		fs = this;
		return new FileMode(fs.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.ptr.prototype.Size = function() {
		var $ptr, fs;
		fs = this;
		return fs.size;
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var $ptr, fs;
		fs = this;
		return fs.mode;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var $ptr, fs;
		fs = this;
		return fs.modTime;
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var $ptr, fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$16.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "readdirnames", name: "readdirnames", pkg: "os", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Readdir", name: "Readdir", pkg: "", typ: $funcType([$Int], [sliceType$2, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", typ: $funcType([FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fd", name: "Fd", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [FileInfo, $error], false)}, {prop: "readdir", name: "readdir", pkg: "os", typ: $funcType([$Int], [sliceType$2, $error], false)}, {prop: "read", name: "read", pkg: "os", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "pread", name: "pread", pkg: "os", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "write", name: "write", pkg: "os", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "seek", name: "seek", pkg: "os", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}];
	ptrType$11.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [$error], false)}];
	FileMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([], [FileMode], false)}];
	ptrType$15.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	PathError.init([{prop: "Op", name: "Op", pkg: "", typ: $String, tag: ""}, {prop: "Path", name: "Path", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	SyscallError.init([{prop: "Syscall", name: "Syscall", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	LinkError.init([{prop: "Op", name: "Op", pkg: "", typ: $String, tag: ""}, {prop: "Old", name: "Old", pkg: "", typ: $String, tag: ""}, {prop: "New", name: "New", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	File.init([{prop: "file", name: "", pkg: "os", typ: ptrType$11, tag: ""}]);
	file.init([{prop: "fd", name: "fd", pkg: "os", typ: $Int, tag: ""}, {prop: "name", name: "name", pkg: "os", typ: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", pkg: "os", typ: ptrType, tag: ""}, {prop: "nepipe", name: "nepipe", pkg: "os", typ: $Int32, tag: ""}]);
	dirInfo.init([{prop: "buf", name: "buf", pkg: "os", typ: sliceType$1, tag: ""}, {prop: "nbuf", name: "nbuf", pkg: "os", typ: $Int, tag: ""}, {prop: "bufp", name: "bufp", pkg: "os", typ: $Int, tag: ""}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	fileStat.init([{prop: "name", name: "name", pkg: "os", typ: $String, tag: ""}, {prop: "size", name: "size", pkg: "os", typ: $Int64, tag: ""}, {prop: "mode", name: "mode", pkg: "os", typ: FileMode, tag: ""}, {prop: "modTime", name: "modTime", pkg: "os", typ: time.Time, tag: ""}, {prop: "sys", name: "sys", pkg: "os", typ: $emptyInterface, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Args = sliceType.nil;
		supportsCloseOnExec = false;
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		errFinished = errors.New("os: process already finished");
		$pkg.Stdin = NewFile((syscall.Stdin >>> 0), "/dev/stdin");
		$pkg.Stdout = NewFile((syscall.Stdout >>> 0), "/dev/stdout");
		$pkg.Stderr = NewFile((syscall.Stderr >>> 0), "/dev/stderr");
		useSyscallwd = (function(param) {
			var $ptr, param;
			return true;
		});
		lstat = Lstat;
		init();
		init$1();
		init$2();
		init$3();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, $init, errors, math, utf8, NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, arrayType, ptrType, sliceType$6, arrayType$1, arrayType$2, ptrType$1, arrayType$3, arrayType$4, ptrType$2, ptrType$3, ptrType$4, optimize, powtab, float64pow10, float32pow10, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float32info$24ptr, float64info, float64info$24ptr, isPrint16, isNotPrint16, isPrint32, isNotPrint32, shifts, ParseBool, FormatBool, equalIgnoreCase, special, readFloat, atof64exact, atof32exact, atof32, atof64, ParseFloat, syntaxError, rangeError, ParseUint, ParseInt, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, FormatFloat, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, min, max, FormatUint, FormatInt, Itoa, AppendInt, AppendUint, formatBits, quoteWith, Quote, QuoteToASCII, QuoteRune, AppendQuoteRune, QuoteRuneToASCII, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint;
	errors = $packages["errors"];
	math = $packages["math"];
	utf8 = $packages["unicode/utf8"];
	NumError = $pkg.NumError = $newType(0, $kindStruct, "strconv.NumError", "NumError", "strconv", function(Func_, Num_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Func = "";
			this.Num = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Func = Func_;
		this.Num = Num_;
		this.Err = Err_;
	});
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", "decimal", "strconv", function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = arrayType.zero();
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			this.trunc = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
		this.trunc = trunc_;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", "leftCheat", "strconv", function(delta_, cutoff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.delta = 0;
			this.cutoff = "";
			return;
		}
		this.delta = delta_;
		this.cutoff = cutoff_;
	});
	extFloat = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", "extFloat", "strconv", function(mant_, exp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mant = new $Uint64(0, 0);
			this.exp = 0;
			this.neg = false;
			return;
		}
		this.mant = mant_;
		this.exp = exp_;
		this.neg = neg_;
	});
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", "floatInfo", "strconv", function(mantbits_, expbits_, bias_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mantbits = 0;
			this.expbits = 0;
			this.bias = 0;
			return;
		}
		this.mantbits = mantbits_;
		this.expbits = expbits_;
		this.bias = bias_;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", "decimalSlice", "strconv", function(d_, nd_, dp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = sliceType$6.nil;
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
	});
	sliceType = $sliceType($Int);
	sliceType$1 = $sliceType($Float64);
	sliceType$2 = $sliceType($Float32);
	sliceType$3 = $sliceType(leftCheat);
	sliceType$4 = $sliceType($Uint16);
	sliceType$5 = $sliceType($Uint32);
	arrayType = $arrayType($Uint8, 800);
	ptrType = $ptrType(NumError);
	sliceType$6 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 24);
	arrayType$2 = $arrayType($Uint8, 32);
	ptrType$1 = $ptrType(floatInfo);
	arrayType$3 = $arrayType($Uint8, 65);
	arrayType$4 = $arrayType($Uint8, 4);
	ptrType$2 = $ptrType(decimal);
	ptrType$3 = $ptrType(decimalSlice);
	ptrType$4 = $ptrType(extFloat);
	ParseBool = function(str) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, err, str, value;
		value = false;
		err = $ifaceNil;
		_ref = str;
		if (_ref === "1" || _ref === "t" || _ref === "T" || _ref === "true" || _ref === "TRUE" || _ref === "True") {
			_tmp = true;
			_tmp$1 = $ifaceNil;
			value = _tmp;
			err = _tmp$1;
			return [value, err];
		} else if (_ref === "0" || _ref === "f" || _ref === "F" || _ref === "false" || _ref === "FALSE" || _ref === "False") {
			_tmp$2 = false;
			_tmp$3 = $ifaceNil;
			value = _tmp$2;
			err = _tmp$3;
			return [value, err];
		}
		_tmp$4 = false;
		_tmp$5 = syntaxError("ParseBool", str);
		value = _tmp$4;
		err = _tmp$5;
		return [value, err];
	};
	$pkg.ParseBool = ParseBool;
	FormatBool = function(b) {
		var $ptr, b;
		if (b) {
			return "true";
		}
		return "false";
	};
	$pkg.FormatBool = FormatBool;
	equalIgnoreCase = function(s1, s2) {
		var $ptr, c1, c2, i, s1, s2;
		if (!((s1.length === s2.length))) {
			return false;
		}
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			if (65 <= c1 && c1 <= 90) {
				c1 = c1 + (32) << 24 >>> 24;
			}
			c2 = s2.charCodeAt(i);
			if (65 <= c2 && c2 <= 90) {
				c2 = c2 + (32) << 24 >>> 24;
			}
			if (!((c1 === c2))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	special = function(s) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, f, ok, s;
		f = 0;
		ok = false;
		if (s.length === 0) {
			return [f, ok];
		}
		_ref = s.charCodeAt(0);
		if (_ref === 43) {
			if (equalIgnoreCase(s, "+inf") || equalIgnoreCase(s, "+infinity")) {
				_tmp = math.Inf(1);
				_tmp$1 = true;
				f = _tmp;
				ok = _tmp$1;
				return [f, ok];
			}
		} else if (_ref === 45) {
			if (equalIgnoreCase(s, "-inf") || equalIgnoreCase(s, "-infinity")) {
				_tmp$2 = math.Inf(-1);
				_tmp$3 = true;
				f = _tmp$2;
				ok = _tmp$3;
				return [f, ok];
			}
		} else if (_ref === 110 || _ref === 78) {
			if (equalIgnoreCase(s, "nan")) {
				_tmp$4 = math.NaN();
				_tmp$5 = true;
				f = _tmp$4;
				ok = _tmp$5;
				return [f, ok];
			}
		} else if (_ref === 105 || _ref === 73) {
			if (equalIgnoreCase(s, "inf") || equalIgnoreCase(s, "infinity")) {
				_tmp$6 = math.Inf(1);
				_tmp$7 = true;
				f = _tmp$6;
				ok = _tmp$7;
				return [f, ok];
			}
		} else {
			return [f, ok];
		}
		return [f, ok];
	};
	decimal.ptr.prototype.set = function(s) {
		var $ptr, b, e, esign, i, ok, s, sawdigits, sawdot, x, x$1;
		ok = false;
		b = this;
		i = 0;
		b.neg = false;
		b.trunc = false;
		if (i >= s.length) {
			return ok;
		}
		if (s.charCodeAt(i) === 43) {
			i = i + (1) >> 0;
		} else if (s.charCodeAt(i) === 45) {
			b.neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === 46) {
				if (sawdot) {
					return ok;
				}
				sawdot = true;
				b.dp = b.nd;
				i = i + (1) >> 0;
				continue;
			} else if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				sawdigits = true;
				if ((s.charCodeAt(i) === 48) && (b.nd === 0)) {
					b.dp = b.dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				if (b.nd < 800) {
					(x = b.d, x$1 = b.nd, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = s.charCodeAt(i)));
					b.nd = b.nd + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					b.trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return ok;
		}
		if (!sawdot) {
			b.dp = b.nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return ok;
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return ok;
			}
			e = 0;
			while (true) {
				if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
				if (e < 10000) {
					e = (($imul(e, 10)) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			b.dp = b.dp + (($imul(e, esign))) >> 0;
		}
		if (!((i === s.length))) {
			return ok;
		}
		ok = true;
		return ok;
	};
	decimal.prototype.set = function(s) { return this.$val.set(s); };
	readFloat = function(s) {
		var $ptr, c, dp, e, esign, exp, i, mantissa, nd, ndMant, neg, ok, s, sawdigits, sawdot, trunc, x;
		mantissa = new $Uint64(0, 0);
		exp = 0;
		neg = false;
		trunc = false;
		ok = false;
		i = 0;
		if (i >= s.length) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (s.charCodeAt(i) === 43) {
			i = i + (1) >> 0;
		} else if (s.charCodeAt(i) === 45) {
			neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		nd = 0;
		ndMant = 0;
		dp = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c === 46) {
				if (sawdot) {
					return [mantissa, exp, neg, trunc, ok];
				}
				sawdot = true;
				dp = nd;
				i = i + (1) >> 0;
				continue;
			} else if (48 <= c && c <= 57) {
				sawdigits = true;
				if ((c === 48) && (nd === 0)) {
					dp = dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				nd = nd + (1) >> 0;
				if (ndMant < 19) {
					mantissa = $mul64(mantissa, (new $Uint64(0, 10)));
					mantissa = (x = new $Uint64(0, (c - 48 << 24 >>> 24)), new $Uint64(mantissa.$high + x.$high, mantissa.$low + x.$low));
					ndMant = ndMant + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (!sawdot) {
			dp = nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return [mantissa, exp, neg, trunc, ok];
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return [mantissa, exp, neg, trunc, ok];
			}
			e = 0;
			while (true) {
				if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
				if (e < 10000) {
					e = (($imul(e, 10)) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			dp = dp + (($imul(e, esign))) >> 0;
		}
		if (!((i === s.length))) {
			return [mantissa, exp, neg, trunc, ok];
		}
		exp = dp - ndMant >> 0;
		ok = true;
		return [mantissa, exp, neg, trunc, ok];
	};
	decimal.ptr.prototype.floatBits = function(flt) {
		var $ptr, _tmp, _tmp$1, b, bits, d, exp, flt, mant, n, n$1, n$2, overflow, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, y$1, y$2, y$3, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		b = new $Uint64(0, 0);
		overflow = false;
		d = this;
		exp = 0;
		mant = new $Uint64(0, 0);
		/* */ if (d.nd === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.nd === 0) { */ case 1:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 2:
		/* */ if (d.dp > 310) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (d.dp > 310) { */ case 4:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 5:
		/* */ if (d.dp < -330) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (d.dp < -330) { */ case 7:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 8:
		exp = 0;
		while (true) {
			if (!(d.dp > 0)) { break; }
			n = 0;
			if (d.dp >= powtab.$length) {
				n = 27;
			} else {
				n = (x = d.dp, ((x < 0 || x >= powtab.$length) ? $throwRuntimeError("index out of range") : powtab.$array[powtab.$offset + x]));
			}
			d.Shift(-n);
			exp = exp + (n) >> 0;
		}
		while (true) {
			if (!(d.dp < 0 || (d.dp === 0) && d.d[0] < 53)) { break; }
			n$1 = 0;
			if (-d.dp >= powtab.$length) {
				n$1 = 27;
			} else {
				n$1 = (x$1 = -d.dp, ((x$1 < 0 || x$1 >= powtab.$length) ? $throwRuntimeError("index out of range") : powtab.$array[powtab.$offset + x$1]));
			}
			d.Shift(n$1);
			exp = exp - (n$1) >> 0;
		}
		exp = exp - (1) >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n$2 = (flt.bias + 1 >> 0) - exp >> 0;
			d.Shift(-n$2);
			exp = exp + (n$2) >> 0;
		}
		/* */ if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { */ case 9:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 10:
		d.Shift(((1 + flt.mantbits >>> 0) >> 0));
		mant = d.RoundedInteger();
		/* */ if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { */ case 11:
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
			/* */ if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { */ case 13:
				/* goto overflow */ $s = 6; continue;
			/* } */ case 14:
		/* } */ case 12:
		if ((x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$4.$high, (mant.$low & x$4.$low) >>> 0)), (x$3.$high === 0 && x$3.$low === 0))) {
			exp = flt.bias;
		}
		/* goto out */ $s = 3; continue;
		/* overflow: */ case 6:
		mant = new $Uint64(0, 0);
		exp = (((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
		overflow = true;
		/* out: */ case 3:
		bits = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$6.$high - 0, x$6.$low - 1)), new $Uint64(mant.$high & x$5.$high, (mant.$low & x$5.$low) >>> 0));
		bits = (x$7 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$3 = flt.expbits, y$3 < 32 ? (1 << y$3) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$7.$high, (bits.$low | x$7.$low) >>> 0));
		if (d.neg) {
			bits = (x$8 = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), flt.mantbits), flt.expbits), new $Uint64(bits.$high | x$8.$high, (bits.$low | x$8.$low) >>> 0));
		}
		_tmp = bits;
		_tmp$1 = overflow;
		b = _tmp;
		overflow = _tmp$1;
		return [b, overflow];
		/* */ } return; }
	};
	decimal.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	atof64exact = function(mantissa, exp, neg) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float64info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if (exp === 0) {
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 37) {
			if (exp > 22) {
				f = f * ((x$1 = exp - 22 >> 0, ((x$1 < 0 || x$1 >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + x$1])));
				exp = 22;
			}
			if (f > 1e+15 || f < -1e+15) {
				return [f, ok];
			}
			_tmp$2 = f * ((exp < 0 || exp >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + exp]);
			_tmp$3 = true;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -22) {
			_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + x$2]));
			_tmp$5 = true;
			f = _tmp$4;
			ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32exact = function(mantissa, exp, neg) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float32info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if (exp === 0) {
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 17) {
			if (exp > 10) {
				f = $fround(f * ((x$1 = exp - 10 >> 0, ((x$1 < 0 || x$1 >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + x$1]))));
				exp = 10;
			}
			if (f > 1e+07 || f < -1e+07) {
				return [f, ok];
			}
			_tmp$2 = $fround(f * ((exp < 0 || exp >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + exp]));
			_tmp$3 = true;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -10) {
			_tmp$4 = $fround(f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + x$2])));
			_tmp$5 = true;
			f = _tmp$4;
			ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32 = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
		f = 0;
		err = $ifaceNil;
		_tuple = special(s);
		val = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			_tmp = $fround(val);
			_tmp$1 = $ifaceNil;
			f = _tmp;
			err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s);
			mantissa = _tuple$1[0];
			exp = _tuple$1[1];
			neg = _tuple$1[2];
			trunc = _tuple$1[3];
			ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof32exact(mantissa, exp, neg);
					f$1 = _tuple$2[0];
					ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1;
						_tmp$3 = $ifaceNil;
						f = _tmp$2;
						err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr(new $Uint64(0, 0), 0, false);
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float32info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float32info);
					b = _tuple$3[0];
					ovf = _tuple$3[1];
					f = math.Float32frombits((b.$low >>> 0));
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f;
					_tmp$5 = err;
					f = _tmp$4;
					err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		if (!d.set(s)) {
			_tmp$6 = 0;
			_tmp$7 = syntaxError("ParseFloat", s);
			f = _tmp$6;
			err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float32info);
		b$1 = _tuple$4[0];
		ovf$1 = _tuple$4[1];
		f = math.Float32frombits((b$1.$low >>> 0));
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f;
		_tmp$9 = err;
		f = _tmp$8;
		err = _tmp$9;
		return [f, err];
	};
	atof64 = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
		f = 0;
		err = $ifaceNil;
		_tuple = special(s);
		val = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			_tmp = val;
			_tmp$1 = $ifaceNil;
			f = _tmp;
			err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s);
			mantissa = _tuple$1[0];
			exp = _tuple$1[1];
			neg = _tuple$1[2];
			trunc = _tuple$1[3];
			ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof64exact(mantissa, exp, neg);
					f$1 = _tuple$2[0];
					ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1;
						_tmp$3 = $ifaceNil;
						f = _tmp$2;
						err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr(new $Uint64(0, 0), 0, false);
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float64info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float64info);
					b = _tuple$3[0];
					ovf = _tuple$3[1];
					f = math.Float64frombits(b);
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f;
					_tmp$5 = err;
					f = _tmp$4;
					err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		if (!d.set(s)) {
			_tmp$6 = 0;
			_tmp$7 = syntaxError("ParseFloat", s);
			f = _tmp$6;
			err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float64info);
		b$1 = _tuple$4[0];
		ovf$1 = _tuple$4[1];
		f = math.Float64frombits(b$1);
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f;
		_tmp$9 = err;
		f = _tmp$8;
		err = _tmp$9;
		return [f, err];
	};
	ParseFloat = function(s, bitSize) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, bitSize, err, err1, err1$1, f, f1, f1$1, s;
		f = 0;
		err = $ifaceNil;
		if (bitSize === 32) {
			_tuple = atof32(s);
			f1 = _tuple[0];
			err1 = _tuple[1];
			_tmp = f1;
			_tmp$1 = err1;
			f = _tmp;
			err = _tmp$1;
			return [f, err];
		}
		_tuple$1 = atof64(s);
		f1$1 = _tuple$1[0];
		err1$1 = _tuple$1[1];
		_tmp$2 = f1$1;
		_tmp$3 = err1$1;
		f = _tmp$2;
		err = _tmp$3;
		return [f, err];
	};
	$pkg.ParseFloat = ParseFloat;
	NumError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NumError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	NumError.prototype.Error = function() { return this.$val.Error(); };
	syntaxError = function(fn, str) {
		var $ptr, fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		var $ptr, fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrRange);
	};
	ParseUint = function(s, base, bitSize) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, base, bitSize, cutoff, d, err, i, maxVal, n, n1, s, v, x, x$1, x$2, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		n = new $Uint64(0, 0);
		err = $ifaceNil;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		cutoff = _tmp;
		maxVal = _tmp$1;
		if (bitSize === 0) {
			bitSize = 32;
		}
		i = 0;
		/* */ if (s.length < 1) { $s = 1; continue; }
		/* */ if (2 <= base && base <= 36) { $s = 2; continue; }
		/* */ if (base === 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (s.length < 1) { */ case 1:
			err = $pkg.ErrSyntax;
			/* goto Error */ $s = 6; continue;
			$s = 5; continue;
		/* } else if (2 <= base && base <= 36) { */ case 2:
			$s = 5; continue;
		/* } else if (base === 0) { */ case 3:
			/* */ if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { $s = 7; continue; }
			/* */ if (s.charCodeAt(0) === 48) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { */ case 7:
				/* */ if (s.length < 3) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (s.length < 3) { */ case 11:
					err = $pkg.ErrSyntax;
					/* goto Error */ $s = 6; continue;
				/* } */ case 12:
				base = 16;
				i = 2;
				$s = 10; continue;
			/* } else if (s.charCodeAt(0) === 48) { */ case 8:
				base = 8;
				i = 1;
				$s = 10; continue;
			/* } else { */ case 9:
				base = 10;
			/* } */ case 10:
			$s = 5; continue;
		/* } else { */ case 4:
			err = errors.New("invalid base " + Itoa(base));
			/* goto Error */ $s = 6; continue;
		/* } */ case 5:
		_ref = base;
		if (_ref === 10) {
			cutoff = new $Uint64(429496729, 2576980378);
		} else if (_ref === 16) {
			cutoff = new $Uint64(268435456, 0);
		} else {
			cutoff = (x = $div64(new $Uint64(4294967295, 4294967295), new $Uint64(0, base), false), new $Uint64(x.$high + 0, x.$low + 1));
		}
		maxVal = (x$1 = $shiftLeft64(new $Uint64(0, 1), (bitSize >>> 0)), new $Uint64(x$1.$high - 0, x$1.$low - 1));
		/* while (true) { */ case 13:
			/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 14; continue; }
			v = 0;
			d = s.charCodeAt(i);
			/* */ if (48 <= d && d <= 57) { $s = 15; continue; }
			/* */ if (97 <= d && d <= 122) { $s = 16; continue; }
			/* */ if (65 <= d && d <= 90) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (48 <= d && d <= 57) { */ case 15:
				v = d - 48 << 24 >>> 24;
				$s = 19; continue;
			/* } else if (97 <= d && d <= 122) { */ case 16:
				v = (d - 97 << 24 >>> 24) + 10 << 24 >>> 24;
				$s = 19; continue;
			/* } else if (65 <= d && d <= 90) { */ case 17:
				v = (d - 65 << 24 >>> 24) + 10 << 24 >>> 24;
				$s = 19; continue;
			/* } else { */ case 18:
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 6; continue;
			/* } */ case 19:
			/* */ if (v >= (base << 24 >>> 24)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (v >= (base << 24 >>> 24)) { */ case 20:
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 6; continue;
			/* } */ case 21:
			/* */ if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { */ case 22:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 6; continue;
			/* } */ case 23:
			n = $mul64(n, (new $Uint64(0, base)));
			n1 = (x$2 = new $Uint64(0, v), new $Uint64(n.$high + x$2.$high, n.$low + x$2.$low));
			/* */ if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { */ case 24:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 6; continue;
			/* } */ case 25:
			n = n1;
			i = i + (1) >> 0;
		/* } */ $s = 13; continue; case 14:
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
		/* Error: */ case 6:
		_tmp$4 = n;
		_tmp$5 = new NumError.ptr("ParseUint", s, err);
		n = _tmp$4;
		err = _tmp$5;
		return [n, err];
		/* */ $s = -1; case -1: } return; }
	};
	$pkg.ParseUint = ParseUint;
	ParseInt = function(s, base, bitSize) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, base, bitSize, cutoff, err, i, n, neg, s, s0, un, x, x$1;
		i = new $Int64(0, 0);
		err = $ifaceNil;
		if (bitSize === 0) {
			bitSize = 32;
		}
		if (s.length === 0) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = syntaxError("ParseInt", s);
			i = _tmp;
			err = _tmp$1;
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = s.substring(1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = s.substring(1);
		}
		un = new $Uint64(0, 0);
		_tuple = ParseUint(s, base, bitSize);
		un = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ptrType).Err, $pkg.ErrRange))) {
			$assertType(err, ptrType).Func = "ParseInt";
			$assertType(err, ptrType).Num = s0;
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = err;
			i = _tmp$2;
			err = _tmp$3;
			return [i, err];
		}
		cutoff = $shiftLeft64(new $Uint64(0, 1), ((bitSize - 1 >> 0) >>> 0));
		if (!neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low >= cutoff.$low))) {
			_tmp$4 = (x = new $Uint64(cutoff.$high - 0, cutoff.$low - 1), new $Int64(x.$high, x.$low));
			_tmp$5 = rangeError("ParseInt", s0);
			i = _tmp$4;
			err = _tmp$5;
			return [i, err];
		}
		if (neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low > cutoff.$low))) {
			_tmp$6 = (x$1 = new $Int64(cutoff.$high, cutoff.$low), new $Int64(-x$1.$high, -x$1.$low));
			_tmp$7 = rangeError("ParseInt", s0);
			i = _tmp$6;
			err = _tmp$7;
			return [i, err];
		}
		n = new $Int64(un.$high, un.$low);
		if (neg) {
			n = new $Int64(-n.$high, -n.$low);
		}
		_tmp$8 = n;
		_tmp$9 = $ifaceNil;
		i = _tmp$8;
		err = _tmp$9;
		return [i, err];
	};
	$pkg.ParseInt = ParseInt;
	decimal.ptr.prototype.String = function() {
		var $ptr, a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = $makeSlice(sliceType$6, n);
		w = 0;
		if (a.nd === 0) {
			return "0";
		} else if (a.dp <= 0) {
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48);
			w = w + (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return $bytesToString($subslice(buf, 0, w));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var $ptr, _i, _ref, dst, i;
		_ref = dst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + i] = 48);
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var $ptr, a, x, x$1;
		while (true) {
			if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) === 48))) { break; }
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var $ptr, a, buf, n, v, v1, x, x$1, x$2;
		a = this;
		buf = arrayType$1.zero();
		n = 0;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (true) {
			if (!(n >= 0)) { break; }
			(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = ((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n])));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var $ptr, a, c, c$1, dig, dig$1, k, n, r, w, x, x$1, x$2, x$3, y, y$1, y$2, y$3, y$4, y$5;
		r = 0;
		w = 0;
		n = 0;
		while (true) {
			if (!(((y = k, y < 32 ? (n >>> y) : 0) >>> 0) === 0)) { break; }
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (true) {
					if (!(((y$1 = k, y$1 < 32 ? (n >>> y$1) : 0) >>> 0) === 0)) { break; }
					n = n * 10 >>> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = ((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >>> 0);
			n = ((n * 10 >>> 0) + c >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		while (true) {
			if (!(r < a.nd)) { break; }
			c$1 = ((x$1 = a.d, ((r < 0 || r >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[r])) >>> 0);
			dig = (y$2 = k, y$2 < 32 ? (n >>> y$2) : 0) >>> 0;
			n = n - (((y$3 = k, y$3 < 32 ? (dig << y$3) : 0) >>> 0)) >>> 0;
			(x$2 = a.d, ((w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((dig + 48 >>> 0) << 24 >>> 24)));
			w = w + (1) >> 0;
			n = ((n * 10 >>> 0) + c$1 >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			dig$1 = (y$4 = k, y$4 < 32 ? (n >>> y$4) : 0) >>> 0;
			n = n - (((y$5 = k, y$5 < 32 ? (dig$1 << y$5) : 0) >>> 0)) >>> 0;
			if (w < 800) {
				(x$3 = a.d, ((w < 0 || w >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[w] = ((dig$1 + 48 >>> 0) << 24 >>> 24)));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >>> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var $ptr, b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var $ptr, _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (true) {
			if (!(r >= 0)) { break; }
			n = n + (((y = k, y < 32 ? (((((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >>> 0) - 48 >>> 0)) << y) : 0) >>> 0)) >>> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, ((w < 0 || w >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[w] = ((rem + 48 >>> 0) << 24 >>> 24)));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((rem$1 + 48 >>> 0) << 24 >>> 24)));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var $ptr, a, k;
		a = this;
		if (a.nd === 0) {
		} else if (k > 0) {
			while (true) {
				if (!(k > 28)) { break; }
				leftShift(a, 28);
				k = k - (28) >> 0;
			}
			leftShift(a, (k >>> 0));
		} else if (k < 0) {
			while (true) {
				if (!(k < -28)) { break; }
				rightShift(a, 28);
				k = k + (28) >> 0;
			}
			rightShift(a, (-k >>> 0));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var $ptr, _r, a, nd, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? $throwRuntimeError("index out of range") : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var $ptr, a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var $ptr, a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var $ptr, a, c, i, nd, x, x$1, x$2;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			c = (x = a.d, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i]));
			if (c < 57) {
				(x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i] = ((x$1 = a.d, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[i])) + (1) << 24 >>> 24)));
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var $ptr, a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < a.dp && i < a.nd)) { break; }
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i])) - 48 << 24 >>> 24)), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (true) {
			if (!(i < a.dp)) { break; }
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	extFloat.ptr.prototype.floatBits = function(flt) {
		var $ptr, bits, exp, f, flt, mant, n, overflow, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2;
		bits = new $Uint64(0, 0);
		overflow = false;
		f = this;
		f.Normalize();
		exp = f.exp + 63 >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n = (flt.bias + 1 >> 0) - exp >> 0;
			f.mant = $shiftRightUint64(f.mant, ((n >>> 0)));
			exp = exp + (n) >> 0;
		}
		mant = $shiftRightUint64(f.mant, ((63 - flt.mantbits >>> 0)));
		if (!((x = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, 1), ((62 - flt.mantbits >>> 0))), new $Uint64(x$1.$high & x$2.$high, (x$1.$low & x$2.$low) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			mant = (x$3 = new $Uint64(0, 1), new $Uint64(mant.$high + x$3.$high, mant.$low + x$3.$low));
		}
		if ((x$4 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$4.$high && mant.$low === x$4.$low))) {
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
		}
		if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {
			mant = new $Uint64(0, 0);
			exp = (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
			overflow = true;
		} else if ((x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$6.$high, (mant.$low & x$6.$low) >>> 0)), (x$5.$high === 0 && x$5.$low === 0))) {
			exp = flt.bias;
		}
		bits = (x$7 = (x$8 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$8.$high - 0, x$8.$low - 1)), new $Uint64(mant.$high & x$7.$high, (mant.$low & x$7.$low) >>> 0));
		bits = (x$9 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$9.$high, (bits.$low | x$9.$low) >>> 0));
		if (f.neg) {
			bits = (x$10 = $shiftLeft64(new $Uint64(0, 1), ((flt.mantbits + flt.expbits >>> 0))), new $Uint64(bits.$high | x$10.$high, (bits.$low | x$10.$low) >>> 0));
		}
		return [bits, overflow];
	};
	extFloat.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	extFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var $ptr, _tmp, _tmp$1, exp, expBiased, f, flt, lower, mant, neg, upper, x, x$1, x$2, x$3, x$4;
		lower = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		upper = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		f = this;
		f.mant = mant;
		f.exp = exp - (flt.mantbits >> 0) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, (-f.exp >>> 0))), (-f.exp >>> 0)), (mant.$high === x.$high && mant.$low === x.$low))) {
			f.mant = $shiftRightUint64(f.mant, ((-f.exp >>> 0)));
			f.exp = 0;
			_tmp = $clone(f, extFloat);
			_tmp$1 = $clone(f, extFloat);
			extFloat.copy(lower, _tmp);
			extFloat.copy(upper, _tmp$1);
			return [lower, upper];
		}
		expBiased = exp - flt.bias >> 0;
		extFloat.copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg));
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
			extFloat.copy(lower, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg));
		} else {
			extFloat.copy(lower, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg));
		}
		return [lower, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.ptr.prototype.Normalize = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, exp, f, mant, shift, x, x$1, x$2, x$3, x$4, x$5;
		shift = 0;
		f = this;
		_tmp = f.mant;
		_tmp$1 = f.exp;
		mant = _tmp;
		exp = _tmp$1;
		if ((mant.$high === 0 && mant.$low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = $shiftRightUint64(mant, 32), (x.$high === 0 && x.$low === 0))) {
			mant = $shiftLeft64(mant, (32));
			exp = exp - (32) >> 0;
		}
		if ((x$1 = $shiftRightUint64(mant, 48), (x$1.$high === 0 && x$1.$low === 0))) {
			mant = $shiftLeft64(mant, (16));
			exp = exp - (16) >> 0;
		}
		if ((x$2 = $shiftRightUint64(mant, 56), (x$2.$high === 0 && x$2.$low === 0))) {
			mant = $shiftLeft64(mant, (8));
			exp = exp - (8) >> 0;
		}
		if ((x$3 = $shiftRightUint64(mant, 60), (x$3.$high === 0 && x$3.$low === 0))) {
			mant = $shiftLeft64(mant, (4));
			exp = exp - (4) >> 0;
		}
		if ((x$4 = $shiftRightUint64(mant, 62), (x$4.$high === 0 && x$4.$low === 0))) {
			mant = $shiftLeft64(mant, (2));
			exp = exp - (2) >> 0;
		}
		if ((x$5 = $shiftRightUint64(mant, 63), (x$5.$high === 0 && x$5.$low === 0))) {
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		shift = ((f.exp - exp >> 0) >>> 0);
		_tmp$2 = mant;
		_tmp$3 = exp;
		f.mant = _tmp$2;
		f.exp = _tmp$3;
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.ptr.prototype.Multiply = function(g) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, cross1, cross2, f, fhi, flo, g, ghi, glo, rem, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		g = $clone(g, extFloat);
		f = this;
		_tmp = $shiftRightUint64(f.mant, 32);
		_tmp$1 = new $Uint64(0, (f.mant.$low >>> 0));
		fhi = _tmp;
		flo = _tmp$1;
		_tmp$2 = $shiftRightUint64(g.mant, 32);
		_tmp$3 = new $Uint64(0, (g.mant.$low >>> 0));
		ghi = _tmp$2;
		glo = _tmp$3;
		cross1 = $mul64(fhi, glo);
		cross2 = $mul64(flo, ghi);
		f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));
		rem = (x$4 = (x$5 = new $Uint64(0, (cross1.$low >>> 0)), x$6 = new $Uint64(0, (cross2.$low >>> 0)), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		rem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));
		f.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var $ptr, _q, _r, adjExp, denormalExp, errors$1, exp10, extrabits, f, flt, halfway, i, mant_extra, mantissa, neg, ok, shift, trunc, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
		ok = false;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + (4) >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {
			f.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[adjExp])));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? $throwRuntimeError("index out of range") : smallPowersOfTen[adjExp]));
			errors$1 = errors$1 + (4) >> 0;
		}
		f.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		if (errors$1 > 0) {
			errors$1 = errors$1 + (1) >> 0;
		}
		errors$1 = errors$1 + (4) >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = (((63 - flt.mantbits >>> 0) + 1 >>> 0) + ((denormalExp - f.exp >> 0) >>> 0) >>> 0);
		} else {
			extrabits = (63 - flt.mantbits >>> 0);
		}
		halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		if ((x$5 = (x$6 = new $Int64(halfway.$high, halfway.$low), x$7 = new $Int64(0, errors$1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = new $Int64(mant_extra.$high, mant_extra.$low), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = new $Int64(mant_extra.$high, mant_extra.$low), x$10 = (x$11 = new $Int64(halfway.$high, halfway.$low), x$12 = new $Int64(0, errors$1), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.ptr.prototype.frexp10 = function() {
		var $ptr, _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10, f, i, index;
		exp10 = 0;
		index = 0;
		f = this;
		approxExp10 = (_q = ($imul(((-46 - f.exp >> 0)), 28)) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]).exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + (1) >> 0;
			} else if (exp > -32) {
				i = i - (1) >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		_tmp = -((-348 + ($imul(i, 8)) >> 0));
		_tmp$1 = i;
		exp10 = _tmp;
		index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var $ptr, _tuple, a, b, c, exp10, i;
		exp10 = 0;
		_tuple = c.frexp10();
		exp10 = _tuple[0];
		i = _tuple[1];
		a.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		b.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		return exp10;
	};
	extFloat.ptr.prototype.FixedDecimal = function(d, n) {
		var $CE$B5, $ptr, _q, _q$1, _tmp, _tmp$1, _tuple, buf, d, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, n, nd, needed, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10();
		exp10 = _tuple[0];
		shift = (-f.exp >>> 0);
		integer = ($shiftRightUint64(f.mant, shift).$low >>> 0);
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		$CE$B5 = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0;
		_tmp$1 = new $Uint64(0, 1);
		i = _tmp;
		pow = _tmp$1;
		while (true) {
			if (!(i < 20)) { break; }
			if ((x$3 = new $Uint64(0, integer), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$4]));
			integer = (_q = integer / ((pow10.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - (($imul(integer, (pow10.$low >>> 0)) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = arrayType$2.zero();
		pos = 32;
		v = integer;
		while (true) {
			if (!(v > 0)) { break; }
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (($imul(10, v1) >>> 0)) >>> 0;
			pos = pos - (1) >> 0;
			((pos < 0 || pos >= buf.length) ? $throwRuntimeError("index out of range") : buf[pos] = ((v + 48 >>> 0) << 24 >>> 24));
			v = v1;
		}
		i$1 = pos;
		while (true) {
			if (!(i$1 < 32)) { break; }
			(x$5 = d.d, x$6 = i$1 - pos >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + x$6] = ((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
				$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (true) {
				if (!(needed > 0)) { break; }
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				$CE$B5 = $mul64($CE$B5, (new $Uint64(0, 10)));
				if ((x$7 = $mul64(new $Uint64(0, 2), $CE$B5), x$8 = $shiftLeft64(new $Uint64(0, 1), shift), (x$7.$high > x$8.$high || (x$7.$high === x$8.$high && x$7.$low > x$8.$low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$9 = d.d, ((nd < 0 || nd >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + nd] = (new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24)));
				fraction = (x$10 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$10.$high, fraction.$low - x$10.$low));
				nd = nd + (1) >> 0;
				needed = needed - (1) >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$11 = $shiftLeft64(new $Uint64(0, rest), shift), new $Uint64(x$11.$high | fraction.$high, (x$11.$low | fraction.$low) >>> 0)), pow10, shift, $CE$B5);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (!(((x$12 = d.d, ((i$2 < 0 || i$2 >= x$12.$length) ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, $CE$B5) {
		var $CE$B5, $ptr, d, den, i, num, shift, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
			$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), $CE$B5), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + $CE$B5.$high, num.$low + $CE$B5.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - $CE$B5.$high, num.$low - $CE$B5.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
			i = d.nd - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + i])) === 57) {
					d.nd = d.nd - (1) >> 0;
				} else {
					break;
				}
				i = i - (1) >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 >= x$8.$length ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + 0] = 49));
				d.nd = 1;
				d.dp = d.dp + (1) >> 0;
			} else {
				(x$10 = d.d, ((i < 0 || i >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + i] = ((x$9 = d.d, ((i < 0 || i >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + i])) + (1) << 24 >>> 24)));
			}
			return true;
		}
		return false;
	};
	extFloat.ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var $ptr, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, d, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, lower, multiplier, n, nd, pow, pow$1, shift, targetDiff, upper, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
			buf = arrayType$1.zero();
			n = 23;
			v = f.mant;
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
				((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));
				n = n - (1) >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (true) {
				if (!(i < nd)) { break; }
				(x$3 = d.d, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? $throwRuntimeError("index out of range") : buf[x$2]))));
				i = i + (1) >> 0;
			}
			_tmp = nd;
			_tmp$1 = nd;
			d.nd = _tmp;
			d.dp = _tmp$1;
			while (true) {
				if (!(d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])) === 48))) { break; }
				d.nd = d.nd - (1) >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, (((f.exp - upper.exp >> 0) >>> 0)));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = $shiftLeft64(lower.mant, (((lower.exp - upper.exp >> 0) >>> 0)));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		lower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		shift = (-upper.exp >>> 0);
		integer = ($shiftRightUint64(upper.mant, shift).$low >>> 0);
		fraction = (x$10 = upper.mant, x$11 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
		allowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
		integerDigits = 0;
		_tmp$2 = 0;
		_tmp$3 = new $Uint64(0, 1);
		i$1 = _tmp$2;
		pow = _tmp$3;
		while (true) {
			if (!(i$1 < 20)) { break; }
			if ((x$16 = new $Uint64(0, integer), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < integerDigits)) { break; }
			pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$17]));
			digit = (_q = integer / (pow$1.$low >>> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$18 = d.d, ((i$2 < 0 || i$2 >= x$18.$length) ? $throwRuntimeError("index out of range") : x$18.$array[x$18.$offset + i$2] = ((digit + 48 >>> 0) << 24 >>> 24)));
			integer = integer - (($imul(digit, (pow$1.$low >>> 0)) >>> 0)) >>> 0;
			currentDiff = (x$19 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$19.$high + fraction.$high, x$19.$low + fraction.$low));
			if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + (1) >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, (new $Uint64(0, 10)));
			multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
			digit$1 = ($shiftRightUint64(fraction, shift).$low >> 0);
			(x$20 = d.d, x$21 = d.nd, ((x$21 < 0 || x$21 >= x$20.$length) ? $throwRuntimeError("index out of range") : x$20.$array[x$20.$offset + x$21] = ((digit$1 + 48 >> 0) << 24 >>> 24)));
			d.nd = d.nd + (1) >> 0;
			fraction = (x$22 = $shiftLeft64(new $Uint64(0, digit$1), shift), new $Uint64(fraction.$high - x$22.$high, fraction.$low - x$22.$low));
			if ((x$23 = $mul64(allowance, multiplier), (fraction.$high < x$23.$high || (fraction.$high === x$23.$high && fraction.$low < x$23.$low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var $ptr, _index, currentDiff, d, maxDiff, targetDiff, ulpBinary, ulpDecimal, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
			return false;
		}
		while (true) {
			if (!((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low))))) { break; }
			_index = d.nd - 1 >> 0;
			(x$5 = d.d, ((_index < 0 || _index >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + _index] = ((x$4 = d.d, ((_index < 0 || _index >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + _index])) - (1) << 24 >>> 24)));
			currentDiff = (x$6 = ulpDecimal, new $Uint64(currentDiff.$high + x$6.$high, currentDiff.$low + x$6.$low));
		}
		if ((x$7 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$8 = (x$9 = (x$10 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$10.$high, targetDiff.$low + x$10.$low)), new $Uint64(x$9.$high + ulpBinary.$high, x$9.$low + ulpBinary.$low)), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low <= x$8.$low)))) {
			return false;
		}
		if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$11 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$11.$high || (currentDiff.$high === x$11.$high && currentDiff.$low > x$11.$low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$12 = d.d, (0 >= x$12.$length ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	FormatFloat = function(f, fmt, prec, bitSize) {
		var $ptr, bitSize, f, fmt, prec;
		return $bytesToString(genericFtoa($makeSlice(sliceType$6, 0, max(prec + 4 >> 0, 24)), f, fmt, prec, bitSize));
	};
	$pkg.FormatFloat = FormatFloat;
	AppendFloat = function(dst, f, fmt, prec, bitSize) {
		var $ptr, bitSize, dst, f, fmt, prec;
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	$pkg.AppendFloat = AppendFloat;
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var $ptr, _ref, _ref$1, _ref$2, _ref$3, _tuple, bitSize, bits, buf, buf$1, digits, digs, dst, exp, f, f$1, flt, fmt, lower, mant, neg, ok, prec, s, shortest, upper, val, x, x$1, x$2, x$3, y, y$1;
		bits = new $Uint64(0, 0);
		flt = ptrType$1.nil;
		_ref = bitSize;
		if (_ref === 32) {
			bits = new $Uint64(0, math.Float32bits($fround(val)));
			flt = float32info;
		} else if (_ref === 64) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = ($shiftRightUint64(bits, flt.mantbits).$low >> 0) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits.$high & x$1.$high, (bits.$low & x$1.$low) >>> 0));
		_ref$1 = exp;
		if (_ref$1 === (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, s);
		} else if (_ref$1 === 0) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.ptr(new $Uint64(0, 0), 0, false);
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt);
			lower = $clone(_tuple[0], extFloat);
			upper = $clone(_tuple[1], extFloat);
			buf = arrayType$2.zero();
			digs.d = new sliceType$6(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_ref$2 = fmt;
			if (_ref$2 === 101 || _ref$2 === 69) {
				prec = max(digs.nd - 1 >> 0, 0);
			} else if (_ref$2 === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if (_ref$2 === 103 || _ref$2 === 71) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_ref$3 = fmt;
			if (_ref$3 === 101 || _ref$3 === 69) {
				digits = digits + (1) >> 0;
			} else if (_ref$3 === 103 || _ref$3 === 71) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = arrayType$1.zero();
				digs.d = new sliceType$6(buf$1);
				f$1 = new extFloat.ptr(mant, exp - (flt.mantbits >> 0) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, digs, prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var $ptr, _ref, _ref$1, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		d.Assign(mant);
		d.Shift(exp - (flt.mantbits >> 0) >> 0);
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
			_ref = fmt;
			if (_ref === 101 || _ref === 69) {
				prec = digs.nd - 1 >> 0;
			} else if (_ref === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if (_ref === 103 || _ref === 71) {
				prec = digs.nd;
			}
		} else {
			_ref$1 = fmt;
			if (_ref$1 === 101 || _ref$1 === 69) {
				d.Round(prec + 1 >> 0);
			} else if (_ref$1 === 102) {
				d.Round(d.dp + prec >> 0);
			} else if (_ref$1 === 103 || _ref$1 === 71) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
		}
		return formatDigits(dst, shortest, neg, digs, prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var $ptr, _ref, digs, dst, eprec, exp, fmt, neg, prec, shortest;
		digs = $clone(digs, decimalSlice);
		_ref = fmt;
		if (_ref === 101 || _ref === 69) {
			return fmtE(dst, neg, digs, prec, fmt);
		} else if (_ref === 102) {
			return fmtF(dst, neg, digs, prec);
		} else if (_ref === 103 || _ref === 71) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, digs, prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, digs, max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var $ptr, _tmp, _tmp$1, _tmp$2, d, exp, explo, flt, i, inclusive, l, lower, m, mant, mantlo, minexp, okdown, okup, u, upper, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && ($imul(332, ((d.dp - d.nd >> 0)))) >= ($imul(100, ((exp - (flt.mantbits >> 0) >> 0))))) {
			return;
		}
		upper = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		lower.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower.Shift((explo - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		i = 0;
		while (true) {
			if (!(i < d.nd)) { break; }
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = 0;
			l = _tmp;
			m = _tmp$1;
			u = _tmp$2;
			if (i < lower.nd) {
				l = (x$5 = lower.d, ((i < 0 || i >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[i]));
			} else {
				l = 48;
			}
			m = (x$6 = d.d, ((i < 0 || i >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[i]));
			if (i < upper.nd) {
				u = (x$7 = upper.d, ((i < 0 || i >= x$7.length) ? $throwRuntimeError("index out of range") : x$7[i]));
			} else {
				u = 48;
			}
			okdown = !((l === m)) || (inclusive && (l === m) && ((i + 1 >> 0) === lower.nd));
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var $ptr, _q, _q$1, _q$2, _r, _r$1, _r$2, ch, d, dst, exp, fmt, i, m, neg, prec, x;
		d = $clone(d, decimalSlice);
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = min(d.nd, prec + 1 >> 0);
			if (i < m) {
				dst = $appendSlice(dst, $subslice(d.d, i, m));
				i = m;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		if (exp < 10) {
			dst = $append(dst, 48, (exp << 24 >>> 24) + 48 << 24 >>> 24);
		} else if (exp < 100) {
			dst = $append(dst, ((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24, ((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24);
		} else {
			dst = $append(dst, ((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24, (_r$1 = ((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, ((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var $ptr, ch, d, dst, i, j, m, neg, prec, x;
		d = $clone(d, decimalSlice);
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			m = min(d.nd, d.dp);
			dst = $appendSlice(dst, $subslice(d.d, 0, m));
			while (true) {
				if (!(m < d.dp)) { break; }
				dst = $append(dst, 48);
				m = m + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				ch = 48;
				j = d.dp + i >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x = d.d, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]));
				}
				dst = $append(dst, ch);
				i = i + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var $ptr, _tuple, _tuple$1, dst, exp, flt, mant, neg;
		if (neg) {
			dst = $append(dst, 45);
		}
		_tuple = formatBits(dst, mant, 10, false, true);
		dst = _tuple[0];
		dst = $append(dst, 112);
		exp = exp - ((flt.mantbits >> 0)) >> 0;
		if (exp >= 0) {
			dst = $append(dst, 43);
		}
		_tuple$1 = formatBits(dst, new $Uint64(0, exp), 10, exp < 0, true);
		dst = _tuple$1[0];
		return dst;
	};
	min = function(a, b) {
		var $ptr, a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	max = function(a, b) {
		var $ptr, a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatUint = function(i, base) {
		var $ptr, _tuple, base, i, s;
		_tuple = formatBits(sliceType$6.nil, i, base, false, false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatUint = FormatUint;
	FormatInt = function(i, base) {
		var $ptr, _tuple, base, i, s;
		_tuple = formatBits(sliceType$6.nil, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatInt = FormatInt;
	Itoa = function(i) {
		var $ptr, i;
		return FormatInt(new $Int64(0, i), 10);
	};
	$pkg.Itoa = Itoa;
	AppendInt = function(dst, i, base) {
		var $ptr, _tuple, base, dst, i;
		_tuple = formatBits(dst, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), true);
		dst = _tuple[0];
		return dst;
	};
	$pkg.AppendInt = AppendInt;
	AppendUint = function(dst, i, base) {
		var $ptr, _tuple, base, dst, i;
		_tuple = formatBits(dst, i, base, false, true);
		dst = _tuple[0];
		return dst;
	};
	$pkg.AppendUint = AppendUint;
	formatBits = function(dst, u, base, neg, append_) {
		var $ptr, _q, _q$1, a, append_, b, b$1, base, d, dst, i, j, m, neg, q, q$1, q$2, qs, s, s$1, u, us, us$1, x, x$1;
		d = sliceType$6.nil;
		s = "";
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = arrayType$3.zero();
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low > 4294967295)))) { break; }
				q = $div64(u, new $Uint64(0, 1000000000), false);
				us = ((x = $mul64(q, new $Uint64(0, 1000000000)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0);
				j = 9;
				while (true) {
					if (!(j > 0)) { break; }
					i = i - (1) >> 0;
					qs = (_q = us / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
					((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = (((us - ($imul(qs, 10) >>> 0) >>> 0) + 48 >>> 0) << 24 >>> 24));
					us = qs;
					j = j - (1) >> 0;
				}
				u = q;
			}
			us$1 = (u.$low >>> 0);
			while (true) {
				if (!(us$1 >= 10)) { break; }
				i = i - (1) >> 0;
				q$1 = (_q$1 = us$1 / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = (((us$1 - ($imul(q$1, 10) >>> 0) >>> 0) + 48 >>> 0) << 24 >>> 24));
				us$1 = q$1;
			}
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = ((us$1 + 48 >>> 0) << 24 >>> 24));
		} else {
			s$1 = ((base < 0 || base >= shifts.length) ? $throwRuntimeError("index out of range") : shifts[base]);
			if (s$1 > 0) {
				b = new $Uint64(0, base);
				m = (b.$low >>> 0) - 1 >>> 0;
				while (true) {
					if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((u.$low >>> 0) & m) >>> 0)));
					u = $shiftRightUint64(u, (s$1));
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.$low >>> 0)));
			} else {
				b$1 = new $Uint64(0, base);
				while (true) {
					if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
					i = i - (1) >> 0;
					q$2 = $div64(u, b$1, false);
					((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((x$1 = $mul64(q$2, b$1), new $Uint64(u.$high - x$1.$high, u.$low - x$1.$low)).$low >>> 0)));
					u = q$2;
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.$low >>> 0)));
			}
		}
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = 45);
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
			return [d, s];
		}
		s = $bytesToString($subslice(new sliceType$6(a), i));
		return [d, s];
	};
	quoteWith = function(s, quote, ASCIIonly) {
		var $ptr, ASCIIonly, _q, _ref, _tuple, buf, n, quote, r, runeTmp, s, s$1, s$2, width;
		runeTmp = arrayType$4.zero();
		buf = $makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		buf = $append(buf, quote);
		width = 0;
		while (true) {
			if (!(s.length > 0)) { break; }
			r = (s.charCodeAt(0) >> 0);
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = s.substring(width);
				continue;
			}
			if ((r === (quote >> 0)) || (r === 92)) {
				buf = $append(buf, 92);
				buf = $append(buf, (r << 24 >>> 24));
				s = s.substring(width);
				continue;
			}
			if (ASCIIonly) {
				if (r < 128 && IsPrint(r)) {
					buf = $append(buf, (r << 24 >>> 24));
					s = s.substring(width);
					continue;
				}
			} else if (IsPrint(r)) {
				n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
				buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
				s = s.substring(width);
				continue;
			}
			_ref = r;
			if (_ref === 7) {
				buf = $appendSlice(buf, "\\a");
			} else if (_ref === 8) {
				buf = $appendSlice(buf, "\\b");
			} else if (_ref === 12) {
				buf = $appendSlice(buf, "\\f");
			} else if (_ref === 10) {
				buf = $appendSlice(buf, "\\n");
			} else if (_ref === 13) {
				buf = $appendSlice(buf, "\\r");
			} else if (_ref === 9) {
				buf = $appendSlice(buf, "\\t");
			} else if (_ref === 11) {
				buf = $appendSlice(buf, "\\v");
			} else {
				if (r < 32) {
					buf = $appendSlice(buf, "\\x");
					buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
					buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				} else if (r > 1114111) {
					r = 65533;
					buf = $appendSlice(buf, "\\u");
					s$1 = 12;
					while (true) {
						if (!(s$1 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - (4) >> 0;
					}
				} else if (r < 65536) {
					buf = $appendSlice(buf, "\\u");
					s$1 = 12;
					while (true) {
						if (!(s$1 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - (4) >> 0;
					}
				} else {
					buf = $appendSlice(buf, "\\U");
					s$2 = 28;
					while (true) {
						if (!(s$2 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$2 >>> 0), 31)) >> 0) & 15)));
						s$2 = s$2 - (4) >> 0;
					}
				}
			}
			s = s.substring(width);
		}
		buf = $append(buf, quote);
		return $bytesToString(buf);
	};
	Quote = function(s) {
		var $ptr, s;
		return quoteWith(s, 34, false);
	};
	$pkg.Quote = Quote;
	QuoteToASCII = function(s) {
		var $ptr, s;
		return quoteWith(s, 34, true);
	};
	$pkg.QuoteToASCII = QuoteToASCII;
	QuoteRune = function(r) {
		var $ptr, r;
		return quoteWith($encodeRune(r), 39, false);
	};
	$pkg.QuoteRune = QuoteRune;
	AppendQuoteRune = function(dst, r) {
		var $ptr, dst, r;
		return $appendSlice(dst, QuoteRune(r));
	};
	$pkg.AppendQuoteRune = AppendQuoteRune;
	QuoteRuneToASCII = function(r) {
		var $ptr, r;
		return quoteWith($encodeRune(r), 39, true);
	};
	$pkg.QuoteRuneToASCII = QuoteRuneToASCII;
	AppendQuoteRuneToASCII = function(dst, r) {
		var $ptr, dst, r;
		return $appendSlice(dst, QuoteRuneToASCII(r));
	};
	$pkg.AppendQuoteRuneToASCII = AppendQuoteRuneToASCII;
	CanBackquote = function(s) {
		var $ptr, _tuple, r, s, wid;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			wid = _tuple[1];
			s = s.substring(wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	$pkg.CanBackquote = CanBackquote;
	unhex = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;
		v = 0;
		ok = false;
		c = (b >> 0);
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0;
			_tmp$1 = true;
			v = _tmp;
			ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0;
			_tmp$3 = true;
			v = _tmp$2;
			ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0;
			_tmp$5 = true;
			v = _tmp$4;
			ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = function(s, quote) {
		var $ptr, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = $ifaceNil;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			size = _tuple[1];
			_tmp = r;
			_tmp$1 = true;
			_tmp$2 = s.substring(size);
			_tmp$3 = $ifaceNil;
			value = _tmp;
			multibyte = _tmp$1;
			tail = _tmp$2;
			err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = (s.charCodeAt(0) >> 0);
			_tmp$5 = false;
			_tmp$6 = s.substring(1);
			_tmp$7 = $ifaceNil;
			value = _tmp$4;
			multibyte = _tmp$5;
			tail = _tmp$6;
			err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = s.substring(2);
		_ref = c$1;
		switch (0) { default: if (_ref === 97) {
			value = 7;
		} else if (_ref === 98) {
			value = 8;
		} else if (_ref === 102) {
			value = 12;
		} else if (_ref === 110) {
			value = 10;
		} else if (_ref === 114) {
			value = 13;
		} else if (_ref === 116) {
			value = 9;
		} else if (_ref === 118) {
			value = 11;
		} else if (_ref === 120 || _ref === 117 || _ref === 85) {
			n = 0;
			_ref$1 = c$1;
			if (_ref$1 === 120) {
				n = 2;
			} else if (_ref$1 === 117) {
				n = 4;
			} else if (_ref$1 === 85) {
				n = 8;
			}
			v = 0;
			if (s.length < n) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			j = 0;
			while (true) {
				if (!(j < n)) { break; }
				_tuple$1 = unhex(s.charCodeAt(j));
				x = _tuple$1[0];
				ok = _tuple$1[1];
				if (!ok) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				v = (v << 4 >> 0) | x;
				j = j + (1) >> 0;
			}
			s = s.substring(n);
			if (c$1 === 120) {
				value = v;
				break;
			}
			if (v > 1114111) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = v;
			multibyte = true;
		} else if (_ref === 48 || _ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) {
			v$1 = (c$1 >> 0) - 48 >> 0;
			if (s.length < 2) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			j$1 = 0;
			while (true) {
				if (!(j$1 < 2)) { break; }
				x$1 = (s.charCodeAt(j$1) >> 0) - 48 >> 0;
				if (x$1 < 0 || x$1 > 7) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				v$1 = ((v$1 << 3 >> 0)) | x$1;
				j$1 = j$1 + (1) >> 0;
			}
			s = s.substring(2);
			if (v$1 > 255) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = v$1;
		} else if (_ref === 92) {
			value = 92;
		} else if (_ref === 39 || _ref === 34) {
			if (!((c$1 === quote))) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = (c$1 >> 0);
		} else {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} }
		tail = s;
		return [value, multibyte, tail, err];
	};
	$pkg.UnquoteChar = UnquoteChar;
	Unquote = function(s) {
		var $ptr, _q, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, buf, c, err, err$1, multibyte, n, n$1, quote, r, runeTmp, s, size, ss, t;
		t = "";
		err = $ifaceNil;
		n = s.length;
		if (n < 2) {
			_tmp = "";
			_tmp$1 = $pkg.ErrSyntax;
			t = _tmp;
			err = _tmp$1;
			return [t, err];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			_tmp$2 = "";
			_tmp$3 = $pkg.ErrSyntax;
			t = _tmp$2;
			err = _tmp$3;
			return [t, err];
		}
		s = s.substring(1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				_tmp$4 = "";
				_tmp$5 = $pkg.ErrSyntax;
				t = _tmp$4;
				err = _tmp$5;
				return [t, err];
			}
			_tmp$6 = s;
			_tmp$7 = $ifaceNil;
			t = _tmp$6;
			err = _tmp$7;
			return [t, err];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			_tmp$8 = "";
			_tmp$9 = $pkg.ErrSyntax;
			t = _tmp$8;
			err = _tmp$9;
			return [t, err];
		}
		if (contains(s, 10)) {
			_tmp$10 = "";
			_tmp$11 = $pkg.ErrSyntax;
			t = _tmp$10;
			err = _tmp$11;
			return [t, err];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_ref = quote;
			if (_ref === 34) {
				_tmp$12 = s;
				_tmp$13 = $ifaceNil;
				t = _tmp$12;
				err = _tmp$13;
				return [t, err];
			} else if (_ref === 39) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					_tmp$14 = s;
					_tmp$15 = $ifaceNil;
					t = _tmp$14;
					err = _tmp$15;
					return [t, err];
				}
			}
		}
		runeTmp = arrayType$4.zero();
		buf = $makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple$1 = UnquoteChar(s, quote);
			c = _tuple$1[0];
			multibyte = _tuple$1[1];
			ss = _tuple$1[2];
			err$1 = _tuple$1[3];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$16 = "";
				_tmp$17 = err$1;
				t = _tmp$16;
				err = _tmp$17;
				return [t, err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf = $append(buf, (c << 24 >>> 24));
			} else {
				n$1 = utf8.EncodeRune(new sliceType$6(runeTmp), c);
				buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				_tmp$18 = "";
				_tmp$19 = $pkg.ErrSyntax;
				t = _tmp$18;
				err = _tmp$19;
				return [t, err];
			}
		}
		_tmp$20 = $bytesToString(buf);
		_tmp$21 = $ifaceNil;
		t = _tmp$20;
		err = _tmp$21;
		return [t, err];
	};
	$pkg.Unquote = Unquote;
	contains = function(s, c) {
		var $ptr, c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = (r << 16 >>> 16);
			_tmp$1 = isPrint16;
			_tmp$2 = isNotPrint16;
			rr = _tmp;
			isPrint = _tmp$1;
			isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? $throwRuntimeError("index out of range") : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = (r >>> 0);
		_tmp$4 = isPrint32;
		_tmp$5 = isNotPrint32;
		rr$1 = _tmp$3;
		isPrint$1 = _tmp$4;
		isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, (r << 16 >>> 16));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? $throwRuntimeError("index out of range") : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === (r << 16 >>> 16)));
	};
	$pkg.IsPrint = IsPrint;
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}];
	ptrType$4.methods = [{prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "AssignComputeBounds", name: "AssignComputeBounds", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, ptrType$1], [extFloat, extFloat], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([extFloat], [], false)}, {prop: "AssignDecimal", name: "AssignDecimal", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, $Bool, ptrType$1], [$Bool], false)}, {prop: "frexp10", name: "frexp10", pkg: "strconv", typ: $funcType([], [$Int, $Int], false)}, {prop: "FixedDecimal", name: "FixedDecimal", pkg: "", typ: $funcType([ptrType$3, $Int], [$Bool], false)}, {prop: "ShortestDecimal", name: "ShortestDecimal", pkg: "", typ: $funcType([ptrType$3, ptrType$4, ptrType$4], [$Bool], false)}];
	NumError.init([{prop: "Func", name: "Func", pkg: "", typ: $String, tag: ""}, {prop: "Num", name: "Num", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	decimal.init([{prop: "d", name: "d", pkg: "strconv", typ: arrayType, tag: ""}, {prop: "nd", name: "nd", pkg: "strconv", typ: $Int, tag: ""}, {prop: "dp", name: "dp", pkg: "strconv", typ: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", pkg: "strconv", typ: $Bool, tag: ""}]);
	leftCheat.init([{prop: "delta", name: "delta", pkg: "strconv", typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", pkg: "strconv", typ: $String, tag: ""}]);
	extFloat.init([{prop: "mant", name: "mant", pkg: "strconv", typ: $Uint64, tag: ""}, {prop: "exp", name: "exp", pkg: "strconv", typ: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", typ: $Bool, tag: ""}]);
	floatInfo.init([{prop: "mantbits", name: "mantbits", pkg: "strconv", typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", pkg: "strconv", typ: $Uint, tag: ""}, {prop: "bias", name: "bias", pkg: "strconv", typ: $Int, tag: ""}]);
	decimalSlice.init([{prop: "d", name: "d", pkg: "strconv", typ: sliceType$6, tag: ""}, {prop: "nd", name: "nd", pkg: "strconv", typ: $Int, tag: ""}, {prop: "dp", name: "dp", pkg: "strconv", typ: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		optimize = true;
		powtab = new sliceType([1, 3, 6, 9, 13, 16, 19, 23, 26]);
		float64pow10 = new sliceType$1([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22]);
		float32pow10 = new sliceType$2([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10]);
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new sliceType$3([new leftCheat.ptr(0, ""), new leftCheat.ptr(1, "5"), new leftCheat.ptr(1, "25"), new leftCheat.ptr(1, "125"), new leftCheat.ptr(2, "625"), new leftCheat.ptr(2, "3125"), new leftCheat.ptr(2, "15625"), new leftCheat.ptr(3, "78125"), new leftCheat.ptr(3, "390625"), new leftCheat.ptr(3, "1953125"), new leftCheat.ptr(4, "9765625"), new leftCheat.ptr(4, "48828125"), new leftCheat.ptr(4, "244140625"), new leftCheat.ptr(4, "1220703125"), new leftCheat.ptr(5, "6103515625"), new leftCheat.ptr(5, "30517578125"), new leftCheat.ptr(5, "152587890625"), new leftCheat.ptr(6, "762939453125"), new leftCheat.ptr(6, "3814697265625"), new leftCheat.ptr(6, "19073486328125"), new leftCheat.ptr(7, "95367431640625"), new leftCheat.ptr(7, "476837158203125"), new leftCheat.ptr(7, "2384185791015625"), new leftCheat.ptr(7, "11920928955078125"), new leftCheat.ptr(8, "59604644775390625"), new leftCheat.ptr(8, "298023223876953125"), new leftCheat.ptr(8, "1490116119384765625"), new leftCheat.ptr(9, "7450580596923828125"), new leftCheat.ptr(9, "37252902984619140625"), new leftCheat.ptr(9, "186264514923095703125"), new leftCheat.ptr(10, "931322574615478515625"), new leftCheat.ptr(10, "4656612873077392578125"), new leftCheat.ptr(10, "23283064365386962890625"), new leftCheat.ptr(10, "116415321826934814453125"), new leftCheat.ptr(11, "582076609134674072265625"), new leftCheat.ptr(11, "2910383045673370361328125"), new leftCheat.ptr(11, "14551915228366851806640625"), new leftCheat.ptr(12, "72759576141834259033203125"), new leftCheat.ptr(12, "363797880709171295166015625"), new leftCheat.ptr(12, "1818989403545856475830078125"), new leftCheat.ptr(13, "9094947017729282379150390625"), new leftCheat.ptr(13, "45474735088646411895751953125"), new leftCheat.ptr(13, "227373675443232059478759765625"), new leftCheat.ptr(13, "1136868377216160297393798828125"), new leftCheat.ptr(14, "5684341886080801486968994140625"), new leftCheat.ptr(14, "28421709430404007434844970703125"), new leftCheat.ptr(14, "142108547152020037174224853515625"), new leftCheat.ptr(15, "710542735760100185871124267578125"), new leftCheat.ptr(15, "3552713678800500929355621337890625"), new leftCheat.ptr(15, "17763568394002504646778106689453125"), new leftCheat.ptr(16, "88817841970012523233890533447265625"), new leftCheat.ptr(16, "444089209850062616169452667236328125"), new leftCheat.ptr(16, "2220446049250313080847263336181640625"), new leftCheat.ptr(16, "11102230246251565404236316680908203125"), new leftCheat.ptr(17, "55511151231257827021181583404541015625"), new leftCheat.ptr(17, "277555756156289135105907917022705078125"), new leftCheat.ptr(17, "1387778780781445675529539585113525390625"), new leftCheat.ptr(18, "6938893903907228377647697925567626953125"), new leftCheat.ptr(18, "34694469519536141888238489627838134765625"), new leftCheat.ptr(18, "173472347597680709441192448139190673828125"), new leftCheat.ptr(19, "867361737988403547205962240695953369140625")]);
		smallPowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.ptr(new $Uint64(2560000000, 0), -40, false)]);
		powersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		isPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2142, 2208, 2228, 2275, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2555, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2809, 2809, 2817, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3162, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3329, 3386, 3389, 3406, 3415, 3415, 3423, 3427, 3430, 3445, 3449, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5109, 5112, 5117, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7295, 7360, 7367, 7376, 7417, 7424, 7669, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8382, 8400, 8432, 8448, 8587, 8592, 9210, 9216, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11217, 11244, 11247, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11842, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12589, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40917, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42925, 42928, 42935, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43204, 43214, 43225, 43232, 43261, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43877, 43888, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType$4([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3200, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7415, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$5([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65932, 65936, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66352, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67808, 67829, 67835, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68028, 68047, 68050, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 68736, 68786, 68800, 68850, 68858, 68863, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70093, 70096, 70132, 70144, 70205, 70272, 70313, 70320, 70378, 70384, 70393, 70400, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71133, 71168, 71236, 71248, 71257, 71296, 71351, 71360, 71369, 71424, 71449, 71453, 71467, 71472, 71487, 71840, 71922, 71935, 71935, 72384, 72440, 73728, 74649, 74752, 74868, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 110592, 110593, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119272, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 121483, 121499, 121519, 124928, 125124, 125127, 125142, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127386, 127462, 127490, 127504, 127546, 127552, 127560, 127568, 127569, 127744, 128720, 128736, 128748, 128752, 128755, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 129296, 129304, 129408, 129412, 129472, 129472, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new sliceType$4([12, 39, 59, 62, 926, 2057, 2102, 2134, 2291, 2564, 2580, 2584, 4285, 4405, 4576, 4626, 4743, 4745, 4750, 4766, 4868, 4905, 4913, 4916, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 55968, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 62842, 62884]);
		shifts = $toNativeArray($kindUint, [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, $init, errors, js, math, runtime, strconv, sync, mapIter, Type, Kind, rtype, typeAlg, method, uncommonType, ChanDir, arrayType, chanType, funcType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, StructField, StructTag, fieldScan, Value, flag, ValueError, nonEmptyInterface, ptrType$1, sliceType$1, sliceType$2, ptrType$3, funcType$1, sliceType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, sliceType$4, sliceType$5, sliceType$6, structType$6, sliceType$7, sliceType$8, ptrType$8, arrayType$1, structType$7, ptrType$9, sliceType$9, ptrType$10, ptrType$11, ptrType$12, sliceType$11, sliceType$12, ptrType$13, sliceType$13, ptrType$18, sliceType$15, funcType$3, funcType$4, funcType$5, arrayType$3, ptrType$20, initialized, stringPtrMap, callHelper, jsObjectPtr, selectHelper, kindNames, uint8Type, init, jsType, reflectType, setKindType, newStringPtr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, SliceOf, Zero, unsafe_New, makeInt, typedmemmove, makemap, keyFor, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, Copy, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, PtrTo, implements$1, directlyAssignable, haveIdenticalUnderlyingType, toType, ifaceIndir, overflowFloat32, typesMustMatch, MakeMap, Indirect, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", "mapIter", "reflect", function(t_, m_, keys_, i_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", "Type", "reflect", null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", "Kind", "reflect", null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", "rtype", "reflect", function(size_, ptrdata_, hash_, _$3_, align_, fieldAlign_, kind_, alg_, gcdata_, string_, uncommonType_, ptrToThis_, zero_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.ptrdata = 0;
			this.hash = 0;
			this._$3 = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.alg = ptrType$4.nil;
			this.gcdata = ptrType$5.nil;
			this.string = ptrType$6.nil;
			this.uncommonType = ptrType$7.nil;
			this.ptrToThis = ptrType$1.nil;
			this.zero = 0;
			return;
		}
		this.size = size_;
		this.ptrdata = ptrdata_;
		this.hash = hash_;
		this._$3 = _$3_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.alg = alg_;
		this.gcdata = gcdata_;
		this.string = string_;
		this.uncommonType = uncommonType_;
		this.ptrToThis = ptrToThis_;
		this.zero = zero_;
	});
	typeAlg = $pkg.typeAlg = $newType(0, $kindStruct, "reflect.typeAlg", "typeAlg", "reflect", function(hash_, equal_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.hash = $throwNilPointerError;
			this.equal = $throwNilPointerError;
			return;
		}
		this.hash = hash_;
		this.equal = equal_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", "method", "reflect", function(name_, pkgPath_, mtyp_, typ_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$6.nil;
			this.pkgPath = ptrType$6.nil;
			this.mtyp = ptrType$1.nil;
			this.typ = ptrType$1.nil;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.mtyp = mtyp_;
		this.typ = typ_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", "uncommonType", "reflect", function(name_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$6.nil;
			this.pkgPath = ptrType$6.nil;
			this.methods = sliceType$4.nil;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", "ChanDir", "reflect", null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", "arrayType", "reflect", function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0);
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", "chanType", "reflect", function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0);
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", "funcType", "reflect", function(rtype_, dotdotdot_, in$2_, out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0);
			this.dotdotdot = false;
			this.in$2 = sliceType$1.nil;
			this.out = sliceType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.dotdotdot = dotdotdot_;
		this.in$2 = in$2_;
		this.out = out_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", "imethod", "reflect", function(name_, pkgPath_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$6.nil;
			this.pkgPath = ptrType$6.nil;
			this.typ = ptrType$1.nil;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", "interfaceType", "reflect", function(rtype_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0);
			this.methods = sliceType$5.nil;
			return;
		}
		this.rtype = rtype_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", "mapType", "reflect", function(rtype_, key_, elem_, bucket_, hmap_, keysize_, indirectkey_, valuesize_, indirectvalue_, bucketsize_, reflexivekey_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0);
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hmap = ptrType$1.nil;
			this.keysize = 0;
			this.indirectkey = 0;
			this.valuesize = 0;
			this.indirectvalue = 0;
			this.bucketsize = 0;
			this.reflexivekey = false;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hmap = hmap_;
		this.keysize = keysize_;
		this.indirectkey = indirectkey_;
		this.valuesize = valuesize_;
		this.indirectvalue = indirectvalue_;
		this.bucketsize = bucketsize_;
		this.reflexivekey = reflexivekey_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", "ptrType", "reflect", function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", "sliceType", "reflect", function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", "structField", "reflect", function(name_, pkgPath_, typ_, tag_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$6.nil;
			this.pkgPath = ptrType$6.nil;
			this.typ = ptrType$1.nil;
			this.tag = ptrType$6.nil;
			this.offset = 0;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.typ = typ_;
		this.tag = tag_;
		this.offset = offset_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", "structType", "reflect", function(rtype_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0);
			this.fields = sliceType$6.nil;
			return;
		}
		this.rtype = rtype_;
		this.fields = fields_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", "Method", "reflect", function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", "StructField", "reflect", function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Tag = "";
			this.Offset = 0;
			this.Index = sliceType$11.nil;
			this.Anonymous = false;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Offset = Offset_;
		this.Index = Index_;
		this.Anonymous = Anonymous_;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", "StructTag", "reflect", null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", "fieldScan", "reflect", function(typ_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$13.nil;
			this.index = sliceType$11.nil;
			return;
		}
		this.typ = typ_;
		this.index = index_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", "Value", "reflect", function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", "flag", "reflect", null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", "ValueError", "reflect", function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	nonEmptyInterface = $pkg.nonEmptyInterface = $newType(0, $kindStruct, "reflect.nonEmptyInterface", "nonEmptyInterface", "reflect", function(itab_, word_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.itab = ptrType$9.nil;
			this.word = 0;
			return;
		}
		this.itab = itab_;
		this.word = word_;
	});
	ptrType$1 = $ptrType(rtype);
	sliceType$1 = $sliceType(ptrType$1);
	sliceType$2 = $sliceType($emptyInterface);
	ptrType$3 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$2], [ptrType$3], true);
	sliceType$3 = $sliceType($String);
	ptrType$4 = $ptrType(typeAlg);
	ptrType$5 = $ptrType($Uint8);
	ptrType$6 = $ptrType($String);
	ptrType$7 = $ptrType(uncommonType);
	sliceType$4 = $sliceType(method);
	sliceType$5 = $sliceType(imethod);
	sliceType$6 = $sliceType(structField);
	structType$6 = $structType([{prop: "str", name: "str", pkg: "reflect", typ: $String, tag: ""}]);
	sliceType$7 = $sliceType(ptrType$3);
	sliceType$8 = $sliceType(Value);
	ptrType$8 = $ptrType(nonEmptyInterface);
	arrayType$1 = $arrayType($UnsafePointer, 100000);
	structType$7 = $structType([{prop: "ityp", name: "ityp", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "link", name: "link", pkg: "reflect", typ: $UnsafePointer, tag: ""}, {prop: "bad", name: "bad", pkg: "reflect", typ: $Int32, tag: ""}, {prop: "unused", name: "unused", pkg: "reflect", typ: $Int32, tag: ""}, {prop: "fun", name: "fun", pkg: "reflect", typ: arrayType$1, tag: ""}]);
	ptrType$9 = $ptrType(structType$7);
	sliceType$9 = $sliceType(sliceType$2);
	ptrType$10 = $ptrType(method);
	ptrType$11 = $ptrType(interfaceType);
	ptrType$12 = $ptrType(imethod);
	sliceType$11 = $sliceType($Int);
	sliceType$12 = $sliceType(fieldScan);
	ptrType$13 = $ptrType(structType);
	sliceType$13 = $sliceType($Uint8);
	ptrType$18 = $ptrType($UnsafePointer);
	sliceType$15 = $sliceType($Int32);
	funcType$3 = $funcType([$String], [$Bool], false);
	funcType$4 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
	funcType$5 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
	arrayType$3 = $arrayType($Uintptr, 2);
	ptrType$20 = $ptrType(ValueError);
	init = function() {
		var $ptr, used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; used = $f.used; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var $ptr, i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(ptrType$6.nil, ptrType$6.nil, sliceType$4.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(ptrType$6.nil, ptrType$6.nil, ptrType$1.nil, ptrType$1.nil, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0), false, sliceType$1.nil, sliceType$1.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0), sliceType$5.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0), sliceType$6.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(ptrType$6.nil, ptrType$6.nil, ptrType$1.nil), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(ptrType$6.nil, ptrType$6.nil, ptrType$1.nil, ptrType$6.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f.used = used; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsType = function(typ) {
		var $ptr, typ;
		return typ.jsType;
	};
	reflectType = function(typ) {
		var $ptr, _i, _i$1, _i$2, _i$3, _i$4, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, dir, f, fields, i, i$1, i$2, i$3, i$4, imethods, in$1, m, m$1, methodSet, methods, out, params, reflectFields, reflectMethods, results, rt, t, typ;
		if (typ.reflectType === undefined) {
			rt = new rtype.ptr((($parseInt(typ.size) >> 0) >>> 0), 0, 0, 0, 0, 0, (($parseInt(typ.kind) >> 0) << 24 >>> 24), ptrType$4.nil, ptrType$5.nil, newStringPtr(typ.string), ptrType$7.nil, ptrType$1.nil, 0);
			rt.jsType = typ;
			typ.reflectType = rt;
			methodSet = $methodSet(typ);
			if (!($internalize(typ.typeName, $String) === "") || !(($parseInt(methodSet.length) === 0))) {
				reflectMethods = $makeSlice(sliceType$4, $parseInt(methodSet.length));
				_ref = reflectMethods;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					m = methodSet[i];
					t = m.typ;
					method.copy(((i < 0 || i >= reflectMethods.$length) ? $throwRuntimeError("index out of range") : reflectMethods.$array[reflectMethods.$offset + i]), new method.ptr(newStringPtr(m.name), newStringPtr(m.pkg), reflectType(t), reflectType($funcType(new ($global.Array)(typ).concat(t.params), t.results, t.variadic)), 0, 0));
					_i++;
				}
				rt.uncommonType = new uncommonType.ptr(newStringPtr(typ.typeName), newStringPtr(typ.pkg), reflectMethods);
				rt.uncommonType.jsType = typ;
			}
			_ref$1 = rt.Kind();
			if (_ref$1 === 17) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0), reflectType(typ.elem), ptrType$1.nil, (($parseInt(typ.len) >> 0) >>> 0)));
			} else if (_ref$1 === 18) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0), reflectType(typ.elem), (dir >>> 0)));
			} else if (_ref$1 === 19) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$1, $parseInt(params.length));
				_ref$2 = in$1;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$2.$length)) { break; }
					i$1 = _i$1;
					((i$1 < 0 || i$1 >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i$1] = reflectType(params[i$1]));
					_i$1++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$1, $parseInt(results.length));
				_ref$3 = out;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$3.$length)) { break; }
					i$2 = _i$2;
					((i$2 < 0 || i$2 >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i$2] = reflectType(results[i$2]));
					_i$2++;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), !!(typ.variadic), in$1, out));
			} else if (_ref$1 === 20) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$5, $parseInt(methods.length));
				_ref$4 = imethods;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$4.$length)) { break; }
					i$3 = _i$3;
					m$1 = methods[i$3];
					imethod.copy(((i$3 < 0 || i$3 >= imethods.$length) ? $throwRuntimeError("index out of range") : imethods.$array[imethods.$offset + i$3]), new imethod.ptr(newStringPtr(m$1.name), newStringPtr(m$1.pkg), reflectType(m$1.typ)));
					_i$3++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), imethods));
			} else if (_ref$1 === 21) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false));
			} else if (_ref$1 === 22) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0), reflectType(typ.elem)));
			} else if (_ref$1 === 23) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0), reflectType(typ.elem)));
			} else if (_ref$1 === 25) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$6, $parseInt(fields.length));
				_ref$5 = reflectFields;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$5.$length)) { break; }
					i$4 = _i$4;
					f = fields[i$4];
					structField.copy(((i$4 < 0 || i$4 >= reflectFields.$length) ? $throwRuntimeError("index out of range") : reflectFields.$array[reflectFields.$offset + i$4]), new structField.ptr(newStringPtr(f.name), newStringPtr(f.pkg), reflectType(f.typ), newStringPtr(f.tag), (i$4 >>> 0)));
					_i$4++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), reflectFields));
			}
		}
		return typ.reflectType;
	};
	setKindType = function(rt, kindType) {
		var $ptr, kindType, rt;
		rt.kindType = kindType;
		kindType.rtype = rt;
	};
	newStringPtr = function(strObj) {
		var $ptr, _entry, _key, _tuple, c, ok, ptr, str, str$24ptr, strObj;
		c = new structType$6.ptr("");
		c.str = strObj;
		str = c.str;
		if (str === "") {
			return ptrType$6.nil;
		}
		_tuple = (_entry = stringPtrMap[$String.keyFor(str)], _entry !== undefined ? [_entry.v, true] : [ptrType$6.nil, false]);
		ptr = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			ptr = (str$24ptr || (str$24ptr = new ptrType$6(function() { return str; }, function($v) { str = $v; })));
			_key = str; (stringPtrMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: ptr };
		}
		return ptr;
	};
	isWrapped = function(typ) {
		var $ptr, typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var $ptr, dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; fl = $f.fl; rt = $f.rt; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ $s = 10; case 10:
			return new Value.ptr(rt, v, (fl | (_r$4 >>> 0)) >>> 0);
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		/* */ $s = 12; case 12:
		return new Value.ptr(rt, $newDataPointer(v, jsType(rt.ptrTo())), (((fl | (_r$5 >>> 0)) >>> 0) | 64) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.fl = fl; $f.rt = rt; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeSlice = function(typ, len, cap) {
		var $ptr, _r, _r$1, cap, len, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; len = $f.len; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		typ = [typ];
		_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 23))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 23))) { */ case 1:
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		/* } */ case 2:
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap, (function(typ) { return function $b() {
			var $ptr, _r$1, _r$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$1 = typ[0].Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ $s = 3; case 3:
			return _r$2.zero();
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.$s = $s; $f.$r = $r; return $f;
		}; })(typ)), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeSlice }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.len = len; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeSlice = MakeSlice;
	TypeOf = function(i) {
		var $ptr, i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var $ptr, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ValueOf = ValueOf;
	rtype.ptr.prototype.ptrTo = function() {
		var $ptr, t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var $ptr, t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	Zero = function(typ) {
		var $ptr, _r, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Zero }; } $f.$ptr = $ptr; $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Zero = Zero;
	unsafe_New = function(typ) {
		var $ptr, _ref, typ;
		_ref = typ.Kind();
		if (_ref === 25) {
			return new (jsType(typ).ptr)();
		} else if (_ref === 17) {
			return jsType(typ).zero();
		} else {
			return $newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo()));
		}
	};
	makeInt = function(f, bits, t) {
		var $ptr, _r, _ref, bits, f, ptr, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; bits = $f.bits; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_ref = typ.Kind();
		if (_ref === 3) {
			ptr.$set((bits.$low << 24 >> 24));
		} else if (_ref === 4) {
			ptr.$set((bits.$low << 16 >> 16));
		} else if (_ref === 2 || _ref === 5) {
			ptr.$set((bits.$low >> 0));
		} else if (_ref === 6) {
			ptr.$set(new $Int64(bits.$high, bits.$low));
		} else if (_ref === 8) {
			ptr.$set((bits.$low << 24 >>> 24));
		} else if (_ref === 9) {
			ptr.$set((bits.$low << 16 >>> 16));
		} else if (_ref === 7 || _ref === 10 || _ref === 12) {
			ptr.$set((bits.$low >>> 0));
		} else if (_ref === 11) {
			ptr.$set(bits);
		}
		return new Value.ptr(typ, ptr, (((f | 64) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeInt }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.bits = bits; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	typedmemmove = function(t, dst, src) {
		var $ptr, dst, src, t;
		dst.$set(src.$get());
	};
	makemap = function(t) {
		var $ptr, m, t;
		m = 0;
		m = new ($global.Object)();
		return m;
	};
	keyFor = function(t, key) {
		var $ptr, k, key, kv, t;
		kv = key;
		if (!(kv.$get === undefined)) {
			kv = kv.$get();
		}
		k = $internalize(jsType(t.Key()).keyFor(kv), $String);
		return [kv, k];
	};
	mapaccess = function(t, m, key) {
		var $ptr, _tuple, entry, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		entry = m[$externalize(k, $String)];
		if (entry === undefined) {
			return 0;
		}
		return $newDataPointer(entry.v, jsType(PtrTo(t.Elem())));
	};
	mapassign = function(t, m, key, val) {
		var $ptr, _r, _tuple, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; entry = $f.entry; et = $f.et; jsVal = $f.jsVal; k = $f.k; key = $f.key; kv = $f.kv; m = $f.m; newVal = $f.newVal; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = keyFor(t, key);
		kv = _tuple[0];
		k = _tuple[1];
		jsVal = val.$get();
		et = t.Elem();
		_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 25) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 25) { */ case 1:
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		/* } */ case 2:
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize(k, $String)] = entry;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: mapassign }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.entry = entry; $f.et = et; $f.jsVal = jsVal; $f.k = k; $f.key = key; $f.kv = kv; $f.m = m; $f.newVal = newVal; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapdelete = function(t, m, key) {
		var $ptr, _tuple, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		delete m[$externalize(k, $String)];
	};
	mapiterinit = function(t, m) {
		var $ptr, m, t;
		return new mapIter.ptr(t, m, $keys(m), 0);
	};
	mapiterkey = function(it) {
		var $ptr, _r, _r$1, _r$2, it, iter, k, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		iter = it;
		k = iter.keys[iter.i];
		_r = iter.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 4; case 4:
		return $newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, _r$2);
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapiterkey }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapiternext = function(it) {
		var $ptr, it, iter;
		iter = it;
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var $ptr, m;
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, k, slice, srcVal, typ, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; k = $f.k; slice = $f.slice; srcVal = $f.srcVal; typ = $f.typ; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		srcVal = v.object();
		/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (srcVal === jsType(v.typ).nil) { */ case 1:
			_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		val = null;
		_r$1 = typ.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		k = _r$1;
		_ref = k;
		/* */ if (_ref === 23) { $s = 6; continue; }
		/* */ if (_ref === 22) { $s = 7; continue; }
		/* */ if (_ref === 25) { $s = 8; continue; }
		/* */ if (_ref === 17 || _ref === 1 || _ref === 18 || _ref === 19 || _ref === 20 || _ref === 21 || _ref === 24) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* switch (0) { default: if (_ref === 23) { */ case 6:
			slice = new (jsType(typ))(srcVal.$array);
			slice.$offset = srcVal.$offset;
			slice.$length = srcVal.$length;
			slice.$capacity = srcVal.$capacity;
			val = $newDataPointer(slice, jsType(PtrTo(typ)));
			$s = 11; continue;
		/* } else if (_ref === 22) { */ case 7:
			_r$2 = typ.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = _r$2.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3 === 25) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_r$3 === 25) { */ case 12:
				_r$4 = typ.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 16:
					val = srcVal;
					/* break; */ $s = 11; continue;
				/* } */ case 17:
				val = new (jsType(typ))();
				_arg = val;
				_arg$1 = srcVal;
				_r$5 = typ.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_arg$2 = _r$5;
				$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* break; */ $s = 11; continue;
			/* } */ case 13:
			val = new (jsType(typ))(srcVal.$get, srcVal.$set);
			$s = 11; continue;
		/* } else if (_ref === 25) { */ case 8:
			val = new (jsType(typ).ptr)();
			copyStruct(val, srcVal, typ);
			$s = 11; continue;
		/* } else if (_ref === 17 || _ref === 1 || _ref === 18 || _ref === 19 || _ref === 20 || _ref === 21 || _ref === 24) { */ case 9:
			val = v.ptr;
			$s = 11; continue;
		/* } else { */ case 10:
			$panic(new ValueError.ptr("reflect.Convert", k));
		/* } } */ case 11:
		_r$6 = typ.common(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = typ.Kind(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		/* */ $s = 23; case 23:
		return new Value.ptr(_r$6, val, (((v.flag & 96) >>> 0) | (_r$7 >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtDirect }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f.k = k; $f.slice = slice; $f.srcVal = srcVal; $f.typ = typ; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Copy = function(dst, src) {
		var $ptr, dk, dst, dstVal, sk, src, srcVal, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; dk = $f.dk; dst = $f.dst; dstVal = $f.dstVal; sk = $f.sk; src = $f.src; srcVal = $f.srcVal; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		src = src;
		dst = dst;
		dk = new flag(dst.flag).kind();
		if (!((dk === 17)) && !((dk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", dk));
		}
		if (dk === 17) {
			new flag(dst.flag).mustBeAssignable();
		}
		new flag(dst.flag).mustBeExported();
		sk = new flag(src.flag).kind();
		if (!((sk === 17)) && !((sk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", sk));
		}
		new flag(src.flag).mustBeExported();
		$r = typesMustMatch("reflect.Copy", dst.typ.Elem(), src.typ.Elem()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		dstVal = dst.object();
		if (dk === 17) {
			dstVal = new (jsType(SliceOf(dst.typ.Elem())))(dstVal);
		}
		srcVal = src.object();
		if (sk === 17) {
			srcVal = new (jsType(SliceOf(src.typ.Elem())))(srcVal);
		}
		return $parseInt($copySlice(dstVal, srcVal)) >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Copy }; } $f.$ptr = $ptr; $f.dk = dk; $f.dst = dst; $f.dstVal = dstVal; $f.sk = sk; $f.src = src; $f.srcVal = srcVal; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Copy = Copy;
	methodReceiver = function(op, v, i) {
		var $ptr, fn, i, iface, m, m$1, op, prop, rcvr, rcvrtype, t, tt, ut, v, x, x$1;
		rcvrtype = ptrType$1.nil;
		t = ptrType$1.nil;
		fn = 0;
		v = v;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = v.typ.kindType;
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!(m.pkgPath === ptrType$6.nil)) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			iface = $pointerOfStructConversion(v.ptr, ptrType$8);
			if (iface.itab === ptrType$9.nil) {
				$panic(new $String("reflect: " + op + " of method on nil interface value"));
			}
			t = m.typ;
			prop = m.name.$get();
		} else {
			ut = v.typ.uncommonType.uncommon();
			if (ut === ptrType$7.nil || i < 0 || i >= ut.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = (x$1 = ut.methods, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
			if (!(m$1.pkgPath === ptrType$6.nil)) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = m$1.mtyp;
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		}
		rcvr = v.object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = rcvr[$externalize(prop, $String)];
		return [rcvrtype, t, fn];
	};
	valueInterface = function(v, safe) {
		var $ptr, _r, safe, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; safe = $f.safe; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 32) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		/* */ if (!((((v.flag & 256) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 256) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			return new (jsType(v.typ))(v.object());
		}
		return v.object();
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueInterface }; } $f.$ptr = $ptr; $f._r = _r; $f.safe = safe; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var $ptr, dst, src, t;
		dst.$set(src);
	};
	methodName = function() {
		var $ptr;
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var $ptr, _r, _tuple, fn, fv, op, rcvr, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; fn = $f.fn; fv = $f.fv; op = $f.op; rcvr = $f.rcvr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		v = v;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, v, (v.flag >> 0) >> 9 >> 0);
		fn[0] = _tuple[2];
		rcvr[0] = v.object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = $makeFunc((function(fn, rcvr) { return function(arguments$1) {
			var $ptr, arguments$1;
			return fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$7));
		}; })(fn, rcvr));
		_r = v.Type().common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return new Value.ptr(_r, fv, (((v.flag & 32) >>> 0) | 19) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeMethodValue }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.fn = fn; $f.fv = fv; $f.op = op; $f.rcvr = rcvr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.ptr.prototype.pointers = function() {
		var $ptr, _ref, t;
		t = this;
		_ref = t.Kind();
		if (_ref === 22 || _ref === 21 || _ref === 18 || _ref === 19 || _ref === 25 || _ref === 17) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var $ptr, _r, _r$1, _r$2, _ref, i, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; i = $f.i; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_ref = t.Kind();
		/* */ if (_ref === 19 || _ref === 23 || _ref === 21) { $s = 1; continue; }
		/* */ if (_ref === 17) { $s = 2; continue; }
		/* */ if (_ref === 25) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 19 || _ref === 23 || _ref === 21) { */ case 1:
			return false;
		/* } else if (_ref === 17) { */ case 2:
			_r = t.Elem().Comparable(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 6; case 6:
			return _r;
		/* } else if (_ref === 25) { */ case 3:
			i = 0;
			/* while (true) { */ case 7:
				/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 8; continue; }
				_r$1 = t.Field(i); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Type.Comparable(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (!_r$2) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (!_r$2) { */ case 9:
					return false;
				/* } */ case 10:
				i = i + (1) >> 0;
			/* } */ $s = 7; continue; case 8:
		/* } */ case 4:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Comparable }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.i = i; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	uncommonType.ptr.prototype.Method = function(i) {
		var $ptr, fl, fn, i, m, mt, p, prop, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (t === ptrType$7.nil || i < 0 || i >= t.methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		if (!(p.name === ptrType$6.nil)) {
			m.Name = p.name.$get();
		}
		fl = 19;
		if (!(p.pkgPath === ptrType$6.nil)) {
			m.PkgPath = p.pkgPath.$get();
			fl = (fl | (32)) >>> 0;
		}
		mt = p.typ;
		m.Type = mt;
		prop = $internalize($methodSet(t.jsType)[i].prop, $String);
		fn = $makeFunc((function(arguments$1) {
			var $ptr, arguments$1, rcvr;
			rcvr = (0 >= arguments$1.$length ? $throwRuntimeError("index out of range") : arguments$1.$array[arguments$1.$offset + 0]);
			return rcvr[$externalize(prop, $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$7));
		}));
		m.Func = new Value.ptr(mt, fn, fl);
		m.Index = i;
		return m;
	};
	uncommonType.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var $ptr, _ref, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 64) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				_ref = v.typ.Kind();
				switch (0) { default: if (_ref === 11 || _ref === 6) {
					val = new (jsType(v.typ))(val.$high, val.$low);
				} else if (_ref === 15 || _ref === 16) {
					val = new (jsType(v.typ))(val.$real, val.$imag);
				} else if (_ref === 23) {
					if (val === val.constructor.nil) {
						val = jsType(v.typ).nil;
						break;
					}
					newVal = new (jsType(v.typ))(val.$array);
					newVal.$offset = val.$offset;
					newVal.$length = val.$length;
					newVal.$capacity = val.$capacity;
					val = newVal;
				} }
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.call = function(op, in$1) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arg = $f.arg; argsArray = $f.argsArray; elem = $f.elem; fn = $f.fn; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; in$1 = $f.in$1; isSlice = $f.isSlice; m = $f.m; n = $f.n; nin = $f.nin; nout = $f.nout; op = $f.op; origIn = $f.origIn; rcvr = $f.rcvr; results = $f.results; ret = $f.ret; slice = $f.slice; t = $f.t; targ = $f.targ; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; xt = $f.xt; xt$1 = $f.xt$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		t = v.typ;
		fn = 0;
		rcvr = null;
		if (!((((v.flag & 256) >>> 0) === 0))) {
			_tuple = methodReceiver(op, v, (v.flag >> 0) >> 9 >> 0);
			t = _tuple[1];
			fn = _tuple[2];
			rcvr = v.object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
		} else {
			fn = v.object();
			rcvr = undefined;
		}
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.NumIn();
		if (isSlice) {
			if (!t.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (x.Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_tmp = ((i < 0 || i >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i]).Type();
			_tmp$1 = t.In(i);
			xt = _tmp;
			targ = _tmp$1;
			_r = xt.AssignableTo(targ); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				_r$1 = xt.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = targ.String(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$panic(new $String("reflect: " + op + " using " + _r$1 + " as type " + _r$2));
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!isSlice && t.IsVariadic()) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!isSlice && t.IsVariadic()) { */ case 8:
			m = in$1.$length - n >> 0;
			_r$3 = MakeSlice(t.In(n), m, m); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			slice = _r$3;
			_r$4 = t.In(n).Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			elem = _r$4;
			i$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 13; continue; }
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + x$1]));
				xt$1 = x$2.Type();
				_r$5 = xt$1.AssignableTo(elem); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (!_r$5) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!_r$5) { */ case 14:
					_r$6 = xt$1.String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = elem.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$panic(new $String("reflect: cannot use " + _r$6 + " as type " + _r$7 + " in " + op));
				/* } */ case 15:
				_r$8 = slice.Index(i$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = _r$8.Set(x$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 12; continue; case 13:
			origIn = in$1;
			in$1 = $makeSlice(sliceType$8, (n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			((n < 0 || n >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + n] = slice);
		/* } */ case 9:
		nin = in$1.$length;
		if (!((nin === t.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.NumOut();
		argsArray = new ($global.Array)(t.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		/* while (true) { */ case 21:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 22; continue; }
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			_arg = t.In(i$2);
			_r$9 = t.In(i$2).common(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg$1 = _r$9;
			_arg$2 = 0;
			_r$10 = arg.assignTo("reflect.Value.Call", _arg$1, _arg$2); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = _r$10.object(); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$3 = _r$11;
			_r$12 = unwrapJsObject(_arg, _arg$3); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			argsArray[i$2] = _r$12;
			_i$1++;
		/* } */ $s = 21; continue; case 22:
		_r$13 = callHelper(new sliceType$2([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		results = _r$13;
		_ref$2 = nout;
		/* */ if (_ref$2 === 0) { $s = 28; continue; }
		/* */ if (_ref$2 === 1) { $s = 29; continue; }
		/* */ $s = 30; continue;
		/* if (_ref$2 === 0) { */ case 28:
			return sliceType$8.nil;
		/* } else if (_ref$2 === 1) { */ case 29:
			_r$14 = makeValue(t.Out(0), wrapJsObject(t.Out(0), results), 0); /* */ $s = 32; case 32: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 33; case 33:
			return new sliceType$8([$clone(_r$14, Value)]);
		/* } else { */ case 30:
			ret = $makeSlice(sliceType$8, nout);
			_ref$3 = ret;
			_i$2 = 0;
			/* while (true) { */ case 34:
				/* if (!(_i$2 < _ref$3.$length)) { break; } */ if(!(_i$2 < _ref$3.$length)) { $s = 35; continue; }
				i$3 = _i$2;
				_r$15 = makeValue(t.Out(i$3), wrapJsObject(t.Out(i$3), results[i$3]), 0); /* */ $s = 36; case 36: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				((i$3 < 0 || i$3 >= ret.$length) ? $throwRuntimeError("index out of range") : ret.$array[ret.$offset + i$3] = _r$15);
				_i$2++;
			/* } */ $s = 34; continue; case 35:
			return ret;
		/* } */ case 31:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.call }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arg = arg; $f.argsArray = argsArray; $f.elem = elem; $f.fn = fn; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.in$1 = in$1; $f.isSlice = isSlice; $f.m = m; $f.n = n; $f.nin = nin; $f.nout = nout; $f.op = op; $f.origIn = origIn; $f.rcvr = rcvr; $f.results = results; $f.ret = ret; $f.slice = slice; $f.t = t; $f.targ = targ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.xt = xt; $f.xt$1 = xt$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var $ptr, _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 17) {
			return v.typ.Len();
		} else if (_ref === 18 || _ref === 23) {
			return $parseInt(v.object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	wrapJsObject = function(typ, val) {
		var $ptr, typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var $ptr, typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	Value.ptr.prototype.Elem = function() {
		var $ptr, _r, _ref, fl, k, tt, typ, v, val, val$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; fl = $f.fl; k = $f.k; tt = $f.tt; typ = $f.typ; v = $f.v; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		/* */ if (_ref === 20) { $s = 1; continue; }
		/* */ if (_ref === 22) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_ref === 20) { */ case 1:
			val = v.object();
			if (val === $ifaceNil) {
				return new Value.ptr(ptrType$1.nil, 0, 0);
			}
			typ = reflectType(val.constructor);
			_r = makeValue(typ, val.$val, (v.flag & 32) >>> 0); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 6; case 6:
			return _r;
		/* } else if (_ref === 22) { */ case 2:
			if (v.IsNil()) {
				return new Value.ptr(ptrType$1.nil, 0, 0);
			}
			val$1 = v.object();
			tt = v.typ.kindType;
			fl = (((((v.flag & 32) >>> 0) | 64) >>> 0) | 128) >>> 0;
			fl = (fl | ((tt.elem.Kind() >>> 0))) >>> 0;
			return new Value.ptr(tt.elem, wrapJsObject(tt.elem, val$1), fl);
		/* } else { */ case 3:
			$panic(new ValueError.ptr("reflect.Value.Elem", k));
		/* } */ case 4:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Elem }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.fl = fl; $f.k = k; $f.tt = tt; $f.typ = typ; $f.v = v; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var $ptr, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; field = $f.field; fl = $f.fl; i = $f.i; jsTag = $f.jsTag; o = $f.o; prop = $f.prop; s = $f.s; tag = $f.tag; tt = $f.tt; typ = $f.typ; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		new flag(v.flag).mustBe(25);
		tt = v.typ.kindType;
		if (i < 0 || i >= tt.fields.$length) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (v.flag & 224) >>> 0;
		if (!(field.pkgPath === ptrType$6.nil)) {
			fl = (fl | (32)) >>> 0;
		}
		fl = (fl | ((typ[0].Kind() >>> 0))) >>> 0;
		tag = (x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).tag;
		/* */ if (!(tag === ptrType$6.nil) && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === ptrType$6.nil) && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag.$get());
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = v.Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = v.object().object;
						return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							var $ptr;
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var $ptr, x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ)), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = v.Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						v = _r$1;
					/* } */ case 11:
				/* } */ $s = 5; continue; case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 64) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 64) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				var $ptr;
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var $ptr, x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ)), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 16; case 16:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.field = field; $f.fl = fl; $f.i = i; $f.jsTag = jsTag; $f.o = o; $f.prop = prop; $f.s = s; $f.tag = tag; $f.tt = tt; $f.typ = typ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	getJsTag = function(tag) {
		var $ptr, _tuple, i, name, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = tag.substring(i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name = tag.substring(0, i);
			tag = tag.substring((i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = tag.substring(0, (i + 1 >> 0));
			tag = tag.substring((i + 1 >> 0));
			if (name === "js") {
				_tuple = strconv.Unquote(qvalue);
				value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	Value.ptr.prototype.Index = function(i) {
		var $ptr, _r, _r$1, _ref, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; a = $f.a; a$1 = $f.a$1; c = $f.c; fl = $f.fl; fl$1 = $f.fl$1; fl$2 = $f.fl$2; i = $f.i; k = $f.k; s = $f.s; str = $f.str; tt = $f.tt; tt$1 = $f.tt$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		/* */ if (_ref === 17) { $s = 1; continue; }
		/* */ if (_ref === 23) { $s = 2; continue; }
		/* */ if (_ref === 24) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 17) { */ case 1:
			tt = v.typ.kindType;
			if (i[0] < 0 || i[0] > (tt.len >> 0)) {
				$panic(new $String("reflect: array index out of range"));
			}
			typ[0] = tt.elem;
			fl = (v.flag & 224) >>> 0;
			fl = (fl | ((typ[0].Kind() >>> 0))) >>> 0;
			a[0] = v.ptr;
			/* */ if (!((((fl & 64) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!((((fl & 64) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 6:
				return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
					var $ptr;
					return wrapJsObject(typ[0], a[0][i[0]]);
				}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
					var $ptr, x;
					a[0][i[0]] = unwrapJsObject(typ[0], x);
				}; })(a, a$1, c, i, typ, typ$1)), fl);
			/* } */ case 7:
			_r = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 9; case 9:
			return _r;
		/* } else if (_ref === 23) { */ case 2:
			s = v.object();
			if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
				$panic(new $String("reflect: slice index out of range"));
			}
			tt$1 = v.typ.kindType;
			typ$1[0] = tt$1.elem;
			fl$1 = (192 | ((v.flag & 32) >>> 0)) >>> 0;
			fl$1 = (fl$1 | ((typ$1[0].Kind() >>> 0))) >>> 0;
			i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
			a$1[0] = s.$array;
			/* */ if (!((((fl$1 & 64) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!((((fl$1 & 64) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 10:
				return new Value.ptr(typ$1[0], new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
					var $ptr;
					return wrapJsObject(typ$1[0], a$1[0][i[0]]);
				}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
					var $ptr, x;
					a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
				}; })(a, a$1, c, i, typ, typ$1)), fl$1);
			/* } */ case 11:
			_r$1 = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl$1); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 13; case 13:
			return _r$1;
		/* } else if (_ref === 24) { */ case 3:
			str = v.ptr.$get();
			if (i[0] < 0 || i[0] >= str.length) {
				$panic(new $String("reflect: string index out of range"));
			}
			fl$2 = (((v.flag & 32) >>> 0) | 8) >>> 0;
			c[0] = str.charCodeAt(i[0]);
			return new Value.ptr(uint8Type, (c.$ptr || (c.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c))), (fl$2 | 64) >>> 0);
		/* } else { */ case 4:
			$panic(new ValueError.ptr("reflect.Value.Index", k));
		/* } */ case 5:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Index }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.fl = fl; $f.fl$1 = fl$1; $f.fl$2 = fl$2; $f.i = i; $f.k = k; $f.s = s; $f.str = str; $f.tt = tt; $f.tt$1 = tt$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.InterfaceData = function() {
		var $ptr, v;
		v = this;
		$panic(errors.New("InterfaceData is not supported by GopherJS"));
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsNil = function() {
		var $ptr, _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 22 || _ref === 23) {
			return v.object() === jsType(v.typ).nil;
		} else if (_ref === 18) {
			return v.object() === $chanNil;
		} else if (_ref === 19) {
			return v.object() === $throwNilPointerError;
		} else if (_ref === 21) {
			return v.object() === false;
		} else if (_ref === 20) {
			return v.object() === $ifaceNil;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var $ptr, _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 17 || _ref === 24) {
			return $parseInt(v.object().length);
		} else if (_ref === 23) {
			return $parseInt(v.object().$length) >> 0;
		} else if (_ref === 18) {
			return $parseInt(v.object().$buffer.length) >> 0;
		} else if (_ref === 21) {
			return $parseInt($keys(v.object()).length);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var $ptr, _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 18 || _ref === 21 || _ref === 22 || _ref === 26) {
			if (v.IsNil()) {
				return 0;
			}
			return v.object();
		} else if (_ref === 19) {
			if (v.IsNil()) {
				return 0;
			}
			return 1;
		} else if (_ref === 23) {
			if (v.IsNil()) {
				return 0;
			}
			return v.object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var $ptr, _r, _r$1, _ref, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = x.assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		/* */ if (!((((v.flag & 64) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 64) >>> 0) === 0))) { */ case 2:
			_ref = v.typ.Kind();
			/* */ if (_ref === 17) { $s = 4; continue; }
			/* */ if (_ref === 20) { $s = 5; continue; }
			/* */ if (_ref === 25) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_ref === 17) { */ case 4:
				jsType(v.typ).copy(v.ptr, x.ptr);
				$s = 8; continue;
			/* } else if (_ref === 20) { */ case 5:
				_r$1 = valueInterface(x, false); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				v.ptr.$set(_r$1);
				$s = 8; continue;
			/* } else if (_ref === 25) { */ case 6:
				copyStruct(v.ptr, x.ptr, v.typ);
				$s = 8; continue;
			/* } else { */ case 7:
				v.ptr.$set(x.object());
			/* } */ case 8:
			return;
		/* } */ case 3:
		v.ptr = x.ptr;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var $ptr, n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var $ptr, n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var $ptr, _r, _r$1, _ref, cap, i, j, kind, s, str, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; cap = $f.cap; i = $f.i; j = $f.j; kind = $f.kind; s = $f.s; str = $f.str; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_ref = kind;
		/* */ if (_ref === 17) { $s = 1; continue; }
		/* */ if (_ref === 23) { $s = 2; continue; }
		/* */ if (_ref === 24) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 17) { */ case 1:
			if (((v.flag & 128) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.kindType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))(v.object());
			$s = 5; continue;
		/* } else if (_ref === 23) { */ case 2:
			typ = v.typ;
			s = v.object();
			cap = $parseInt(s.$capacity) >> 0;
			$s = 5; continue;
		/* } else if (_ref === 24) { */ case 3:
			str = v.ptr.$get();
			if (i < 0 || j < i || j > str.length) {
				$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
			}
			_r = ValueOf(new $String(str.substring(i, j))); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 7; case 7:
			return _r;
		/* } else { */ case 4:
			$panic(new ValueError.ptr("reflect.Value.Slice", kind));
		/* } */ case 5:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), (v.flag & 32) >>> 0); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 9; case 9:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.cap = cap; $f.i = i; $f.j = j; $f.kind = kind; $f.s = s; $f.str = str; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var $ptr, _r, _ref, cap, i, j, k, kind, s, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; cap = $f.cap; i = $f.i; j = $f.j; k = $f.k; kind = $f.kind; s = $f.s; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_ref = kind;
		if (_ref === 17) {
			if (((v.flag & 128) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.kindType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))(v.object());
		} else if (_ref === 23) {
			typ = v.typ;
			s = v.object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), (v.flag & 32) >>> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice3 }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.cap = cap; $f.i = i; $f.j = j; $f.k = k; $f.kind = kind; $f.s = s; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close(v.object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	chanrecv = function(t, ch, nb, val) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ch = $f.ch; comms = $f.comms; nb = $f.nb; received = $f.received; recvRes = $f.recvRes; selectRes = $f.selectRes; selected = $f.selected; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		received = false;
		comms = new sliceType$9([new sliceType$2([new $jsObjectPtr(ch)])]);
		if (nb) {
			comms = $append(comms, new sliceType$2([]));
		}
		_r = selectHelper(new sliceType$2([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			_tmp = false;
			_tmp$1 = false;
			selected = _tmp;
			received = _tmp$1;
			return [selected, received];
		}
		recvRes = selectRes[1];
		val.$set(recvRes[0]);
		_tmp$2 = true;
		_tmp$3 = !!(recvRes[1]);
		selected = _tmp$2;
		received = _tmp$3;
		return [selected, received];
		/* */ } return; } if ($f === undefined) { $f = { $blk: chanrecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.received = received; $f.recvRes = recvRes; $f.selectRes = selectRes; $f.selected = selected; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	chansend = function(t, ch, val, nb) {
		var $ptr, _r, ch, comms, nb, selectRes, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ch = $f.ch; comms = $f.comms; nb = $f.nb; selectRes = $f.selectRes; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comms = new sliceType$9([new sliceType$2([new $jsObjectPtr(ch), new $jsObjectPtr(val.$get())])]);
		if (nb) {
			comms = $append(comms, new sliceType$2([]));
		}
		_r = selectHelper(new sliceType$2([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			return false;
		}
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: chansend }; } $f.$ptr = $ptr; $f._r = _r; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.selectRes = selectRes; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Kind.prototype.String = function() {
		var $ptr, k;
		k = this.$val;
		if ((k >> 0) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? $throwRuntimeError("index out of range") : kindNames.$array[kindNames.$offset + k]);
		}
		return "kind" + strconv.Itoa((k >> 0));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	uncommonType.ptr.prototype.uncommon = function() {
		var $ptr, t;
		t = this;
		return t;
	};
	uncommonType.prototype.uncommon = function() { return this.$val.uncommon(); };
	uncommonType.ptr.prototype.PkgPath = function() {
		var $ptr, t;
		t = this;
		if (t === ptrType$7.nil || t.pkgPath === ptrType$6.nil) {
			return "";
		}
		return t.pkgPath.$get();
	};
	uncommonType.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	uncommonType.ptr.prototype.Name = function() {
		var $ptr, t;
		t = this;
		if (t === ptrType$7.nil || t.name === ptrType$6.nil) {
			return "";
		}
		return t.name.$get();
	};
	uncommonType.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.String = function() {
		var $ptr, t;
		t = this;
		return t.string.$get();
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var $ptr, t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var $ptr, k, t;
		t = this;
		if (t === ptrType$1.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return $imul((t.size >> 0), 8);
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var $ptr, t;
		t = this;
		return (t.align >> 0);
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var $ptr, t;
		t = this;
		return (t.fieldAlign >> 0);
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var $ptr, t;
		t = this;
		return (((t.kind & 31) >>> 0) >>> 0);
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var $ptr, t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	uncommonType.ptr.prototype.NumMethod = function() {
		var $ptr, t;
		t = this;
		if (t === ptrType$7.nil) {
			return 0;
		}
		return t.methods.$length;
	};
	uncommonType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	uncommonType.ptr.prototype.MethodByName = function(name) {
		var $ptr, _i, _ref, _tmp, _tmp$1, i, m, name, ok, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t === ptrType$7.nil) {
			return [m, ok];
		}
		p = ptrType$10.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!(p.name === ptrType$6.nil) && p.name.$get() === name) {
				_tmp = $clone(t.Method(i), Method);
				_tmp$1 = true;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	uncommonType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	rtype.ptr.prototype.NumMethod = function() {
		var $ptr, t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			return tt.NumMethod();
		}
		return t.uncommonType.NumMethod();
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.Method = function(i) {
		var $ptr, i, m, t, tt;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			Method.copy(m, tt.Method(i));
			return m;
		}
		Method.copy(m, t.uncommonType.Method(i));
		return m;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	rtype.ptr.prototype.MethodByName = function(name) {
		var $ptr, _tuple, _tuple$1, m, name, ok, t, tt;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			_tuple = tt.MethodByName(name);
			Method.copy(m, _tuple[0]);
			ok = _tuple[1];
			return [m, ok];
		}
		_tuple$1 = t.uncommonType.MethodByName(name);
		Method.copy(m, _tuple$1[0]);
		ok = _tuple$1[1];
		return [m, ok];
	};
	rtype.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	rtype.ptr.prototype.PkgPath = function() {
		var $ptr, t;
		t = this;
		return t.uncommonType.PkgPath();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.Name = function() {
		var $ptr, t;
		t = this;
		return t.uncommonType.Name();
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type"));
		}
		tt = t.kindType;
		return (tt.dir >> 0);
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = t.kindType;
		return tt.dotdotdot;
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var $ptr, _ref, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_ref = t.Kind();
		if (_ref === 17) {
			tt = t.kindType;
			return toType(tt.elem);
		} else if (_ref === 18) {
			tt$1 = t.kindType;
			return toType(tt$1.elem);
		} else if (_ref === 21) {
			tt$2 = t.kindType;
			return toType(tt$2.elem);
		} else if (_ref === 22) {
			tt$3 = t.kindType;
			return toType(tt$3.elem);
		} else if (_ref === 23) {
			tt$4 = t.kindType;
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var $ptr, _r, i, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _r, index, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; index = $f.index; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.index = index; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name) {
		var $ptr, _r, name, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByName(name); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _r, match, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; match = $f.match; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.match = match; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var $ptr, i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = t.kindType;
		return toType((x = tt.in$2, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = t.kindType;
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = t.kindType;
		return (tt.len >> 0);
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = t.kindType;
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = t.kindType;
		return tt.in$2.$length;
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = t.kindType;
		return tt.out.$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var $ptr, i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = t.kindType;
		return toType((x = tt.out, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var $ptr, _ref, d;
		d = this.$val;
		_ref = d;
		if (_ref === 2) {
			return "chan<-";
		} else if (_ref === 1) {
			return "<-chan";
		} else if (_ref === 3) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa((d >> 0));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var $ptr, i, m, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		m.Name = p.name.$get();
		if (!(p.pkgPath === ptrType$6.nil)) {
			m.PkgPath = p.pkgPath.$get();
		}
		m.Type = toType(p.typ);
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var $ptr, t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name) {
		var $ptr, _i, _ref, _tmp, _tmp$1, i, m, name, ok, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t === ptrType$11.nil) {
			return [m, ok];
		}
		p = ptrType$12.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (p.name.$get() === name) {
				_tmp = $clone(t.Method(i), Method);
				_tmp$1 = true;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	StructTag.prototype.Get = function(key) {
		var $ptr, _tuple, err, i, key, name, qvalue, tag, value;
		tag = this.$val;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = tag.substring(i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && tag.charCodeAt(i) > 32 && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)) && !((tag.charCodeAt(i) === 127)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i === 0) || (i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name = tag.substring(0, i);
			tag = tag.substring((i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = tag.substring(0, (i + 1 >> 0));
			tag = tag.substring((i + 1 >> 0));
			if (key === name) {
				_tuple = strconv.Unquote(qvalue);
				value = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					break;
				}
				return value;
			}
		}
		return "";
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	structType.ptr.prototype.Field = function(i) {
		var $ptr, _r, _r$1, _r$2, f, i, p, t, t$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; i = $f.i; p = $f.p; t = $f.t; t$1 = $f.t$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$11.nil, false);
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			return f;
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		/* */ if (!(p.name === ptrType$6.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(p.name === ptrType$6.nil)) { */ case 1:
			f.Name = p.name.$get();
			$s = 3; continue;
		/* } else { */ case 2:
			t$1 = f.Type;
			_r = t$1.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === 22) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r === 22) { */ case 4:
				_r$1 = t$1.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				t$1 = _r$1;
			/* } */ case 5:
			_r$2 = t$1.Name(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			f.Name = _r$2;
			f.Anonymous = true;
		/* } */ case 3:
		if (!(p.pkgPath === ptrType$6.nil)) {
			f.PkgPath = p.pkgPath.$get();
		}
		if (!(p.tag === ptrType$6.nil)) {
			f.Tag = p.tag.$get();
		}
		f.Offset = p.offset;
		f.Index = new sliceType$11([i]);
		return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.i = i; $f.p = p; $f.t = t; $f.t$1 = t$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _v = $f._v; f = $f.f; ft = $f.ft; i = $f.i; index = $f.index; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$11.nil, false);
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				ft = f.Type;
				_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if (!(_r === 22)) { _v = false; $s = 7; continue s; }
				_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ft = _r$3;
				/* } */ case 6:
				f.Type = ft;
			/* } */ case 4:
			_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			StructField.copy(f, _r$4);
			_i++;
		/* } */ $s = 1; continue; case 2:
		return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._v = _v; $f.f = f; $f.ft = ft; $f.i = i; $f.index = index; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _r, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; count = $f.count; current = $f.current; f = $f.f; fname = $f.fname; i = $f.i; index = $f.index; match = $f.match; next = $f.next; nextCount = $f.nextCount; ntyp = $f.ntyp; ok = $f.ok; result = $f.result; scan = $f.scan; styp = $f.styp; t = $f.t; t$1 = $f.t$1; visited = $f.visited; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$11.nil, false);
		ok = false;
		t = this;
		current = new sliceType$12([]);
		next = new sliceType$12([new fieldScan.ptr(t, sliceType$11.nil)]);
		nextCount = false;
		visited = $makeMap(ptrType$13.keyFor, []);
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				/* */ if ((_entry = visited[ptrType$13.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[ptrType$13.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[ptrType$13.keyFor(_key)] = { k: _key, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				/* while (true) { */ case 7:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
					fname = "";
					ntyp = ptrType$1.nil;
					/* */ if (!(f.name === ptrType$6.nil)) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!(f.name === ptrType$6.nil)) { */ case 9:
						fname = f.name.$get();
						$s = 11; continue;
					/* } else { */ case 10:
						ntyp = f.typ;
						/* */ if (ntyp.Kind() === 22) { $s = 12; continue; }
						/* */ $s = 13; continue;
						/* if (ntyp.Kind() === 22) { */ case 12:
							_r = ntyp.Elem().common(); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							ntyp = _r;
						/* } */ case 13:
						fname = ntyp.Name();
					/* } */ case 11:
					_r$1 = match(fname); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (_r$1) { */ case 15:
						if ((_entry$1 = count[ptrType$13.keyFor(t$1)], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$11.nil, false);
							_tmp$3 = false;
							StructField.copy(result, _tmp$2);
							ok = _tmp$3;
							return [result, ok];
						}
						_r$2 = t$1.Field(i); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						StructField.copy(result, _r$2);
						result.Index = sliceType$11.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						/* continue; */ $s = 7; continue;
					/* } */ case 16:
					if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					styp = ntyp.kindType;
					if ((_entry$2 = nextCount[ptrType$13.keyFor(styp)], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$1 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$13.keyFor(_key$1)] = { k: _key$1, v: 2 };
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					if (nextCount === false) {
						nextCount = $makeMap(ptrType$13.keyFor, []);
					}
					_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$13.keyFor(_key$2)] = { k: _key$2, v: 1 };
					if ((_entry$3 = count[ptrType$13.keyFor(t$1)], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$3 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$13.keyFor(_key$3)] = { k: _key$3, v: 2 };
					}
					index = sliceType$11.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
			if (ok) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		return [result, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.count = count; $f.current = current; $f.f = f; $f.fname = fname; $f.i = i; $f.index = index; $f.match = match; $f.next = next; $f.nextCount = nextCount; $f.ntyp = ntyp; $f.ok = ok; $f.result = result; $f.scan = scan; $f.styp = styp; $f.t = t; $f.t$1 = t$1; $f.visited = visited; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name) {
		var $ptr, _i, _r, _r$1, _ref, _tmp, _tmp$1, _tuple, f, hasAnon, i, name, present, t, tf, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; hasAnon = $f.hasAnon; i = $f.i; name = $f.name; present = $f.present; t = $f.t; tf = $f.tf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = [name];
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$11.nil, false);
		present = false;
		t = this;
		hasAnon = false;
		/* */ if (!(name[0] === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(name[0] === "")) { */ case 1:
			_ref = t.fields;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				/* */ if (tf.name === ptrType$6.nil) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (tf.name === ptrType$6.nil) { */ case 5:
					hasAnon = true;
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				/* */ if (tf.name.$get() === name[0]) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (tf.name.$get() === name[0]) { */ case 7:
					_r = t.Field(i); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tmp = $clone(_r, StructField);
					_tmp$1 = true;
					StructField.copy(f, _tmp);
					present = _tmp$1;
					/* */ $s = 10; case 10:
					return [f, present];
				/* } */ case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		if (!hasAnon) {
			return [f, present];
		}
		_r$1 = t.FieldByNameFunc((function(name) { return function(s) {
			var $ptr, s;
			return s === name[0];
		}; })(name)); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		StructField.copy(f, _tuple[0]);
		present = _tuple[1];
		/* */ $s = 12; case 12:
		return [f, present];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.hasAnon = hasAnon; $f.i = i; $f.name = name; $f.present = present; $f.t = t; $f.tf = tf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	PtrTo = function(t) {
		var $ptr, t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PtrTo = PtrTo;
	rtype.ptr.prototype.Implements = function(u) {
		var $ptr, _r, t, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		return implements$1($assertType(u, ptrType$1), t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Implements }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var $ptr, t, u, uu;
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		return directlyAssignable(uu, t) || implements$1(uu, t);
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var $ptr, _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return !(_r === $throwNilPointerError);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.ConvertibleTo }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var $ptr, T, V, i, i$1, j, j$1, t, tm, tm$1, v, v$1, vm, vm$1, x, x$1, x$2, x$3;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = T.kindType;
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = V.kindType;
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j]));
				if (vm.name.$get() === tm.name.$get() && vm.pkgPath === tm.pkgPath && vm.typ === tm.typ) {
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommonType.uncommon();
		if (v$1 === ptrType$7.nil) {
			return false;
		}
		i$1 = 0;
		j$1 = 0;
		while (true) {
			if (!(j$1 < v$1.methods.$length)) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			vm$1 = (x$3 = v$1.methods, ((j$1 < 0 || j$1 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + j$1]));
			if (vm$1.name.$get() === tm$1.name.$get() && vm$1.pkgPath === tm$1.pkgPath && vm$1.mtyp === tm$1.typ) {
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		var $ptr, T, V;
		if (T === V) {
			return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			return false;
		}
		return haveIdenticalUnderlyingType(T, V);
	};
	haveIdenticalUnderlyingType = function(T, V) {
		var $ptr, T, V, _i, _i$1, _i$2, _ref, _ref$1, _ref$2, _ref$3, i, i$1, i$2, kind, t, t$1, t$2, tf, typ, typ$1, v, v$1, v$2, vf, x, x$1, x$2, x$3;
		if (T === V) {
			return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			return true;
		}
		_ref = kind;
		if (_ref === 17) {
			return $interfaceIsEqual(T.Elem(), V.Elem()) && (T.Len() === V.Len());
		} else if (_ref === 18) {
			if ((V.ChanDir() === 3) && $interfaceIsEqual(T.Elem(), V.Elem())) {
				return true;
			}
			return (V.ChanDir() === T.ChanDir()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 19) {
			t = T.kindType;
			v = V.kindType;
			if (!(t.dotdotdot === v.dotdotdot) || !((t.in$2.$length === v.in$2.$length)) || !((t.out.$length === v.out.$length))) {
				return false;
			}
			_ref$1 = t.in$2;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				i = _i;
				typ = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				if (!(typ === (x = v.in$2, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])))) {
					return false;
				}
				_i++;
			}
			_ref$2 = t.out;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$2.$length)) { break; }
				i$1 = _i$1;
				typ$1 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]);
				if (!(typ$1 === (x$1 = v.out, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1])))) {
					return false;
				}
				_i$1++;
			}
			return true;
		} else if (_ref === 20) {
			t$1 = T.kindType;
			v$1 = V.kindType;
			if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
				return true;
			}
			return false;
		} else if (_ref === 21) {
			return $interfaceIsEqual(T.Key(), V.Key()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 22 || _ref === 23) {
			return $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 25) {
			t$2 = T.kindType;
			v$2 = V.kindType;
			if (!((t$2.fields.$length === v$2.fields.$length))) {
				return false;
			}
			_ref$3 = t$2.fields;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$3.$length)) { break; }
				i$2 = _i$2;
				tf = (x$2 = t$2.fields, ((i$2 < 0 || i$2 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$2]));
				vf = (x$3 = v$2.fields, ((i$2 < 0 || i$2 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i$2]));
				if (!(tf.name === vf.name) && (tf.name === ptrType$6.nil || vf.name === ptrType$6.nil || !(tf.name.$get() === vf.name.$get()))) {
					return false;
				}
				if (!(tf.pkgPath === vf.pkgPath) && (tf.pkgPath === ptrType$6.nil || vf.pkgPath === ptrType$6.nil || !(tf.pkgPath.$get() === vf.pkgPath.$get()))) {
					return false;
				}
				if (!(tf.typ === vf.typ)) {
					return false;
				}
				if (!(tf.tag === vf.tag) && (tf.tag === ptrType$6.nil || vf.tag === ptrType$6.nil || !(tf.tag.$get() === vf.tag.$get()))) {
					return false;
				}
				if (!((tf.offset === vf.offset))) {
					return false;
				}
				_i$2++;
			}
			return true;
		}
		return false;
	};
	toType = function(t) {
		var $ptr, t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var $ptr, t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	flag.prototype.kind = function() {
		var $ptr, f;
		f = this.$val;
		return (((f & 31) >>> 0) >>> 0);
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	Value.ptr.prototype.pointer = function() {
		var $ptr, v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 64) >>> 0) === 0))) {
			return v.ptr.$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var $ptr, expected, f;
		f = this.$val;
		if (!((new flag(f).kind() === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var $ptr, f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 32) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var $ptr, f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 32) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 128) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.Addr = function() {
		var $ptr, v;
		v = this;
		if (((v.flag & 128) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.ptr(v.typ.ptrTo(), v.ptr, ((((v.flag & 32) >>> 0)) | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(1);
		return v.ptr.$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.Bytes = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-byte slice"));
		/* } */ case 2:
		return v.ptr.$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Bytes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		/* } */ case 2:
		return v.ptr.$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.runes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var $ptr, v;
		v = this;
		return !((((v.flag & 128) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var $ptr, v;
		v = this;
		return ((v.flag & 160) >>> 0) === 128;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var $ptr, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = v.call("Call", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var $ptr, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = v.call("CallSlice", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.CallSlice }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.Complex = function() {
		var $ptr, _ref, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 15) {
			return (x = v.ptr.$get(), new $Complex128(x.$real, x.$imag));
		} else if (_ref === 16) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; i = $f.i; index = $f.index; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = v.Field((0 >= index.$length ? $throwRuntimeError("index out of range") : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 5:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (i > 0) { */ case 7:
				if (!(v.Kind() === 22)) { _v = false; $s = 11; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
					if (v.IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					_r$2 = v.Elem(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
				/* } */ case 10:
			/* } */ case 8:
			_r$3 = v.Field(x); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		/* } */ $s = 5; continue; case 6:
		return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.i = i; $f.index = index; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByName = function(name) {
		var $ptr, _r, _r$1, _tuple, f, name, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; name = $f.name; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(25);
		_r = v.typ.FieldByName(name); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = v.FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$1;
		/* } */ case 3:
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.name = name; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _r, _r$1, _tuple, f, match, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; match = $f.match; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = v.FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$1;
		/* } */ case 3:
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.match = match; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.Float = function() {
		var $ptr, _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 13) {
			return v.ptr.$get();
		} else if (_ref === 14) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Int = function() {
		var $ptr, _ref, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_ref = k;
		if (_ref === 2) {
			return new $Int64(0, p.$get());
		} else if (_ref === 3) {
			return new $Int64(0, p.$get());
		} else if (_ref === 4) {
			return new $Int64(0, p.$get());
		} else if (_ref === 5) {
			return new $Int64(0, p.$get());
		} else if (_ref === 6) {
			return p.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var $ptr, v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 32) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var $ptr, _r, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = $ifaceNil;
		v = this;
		_r = valueInterface(v, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		/* */ $s = 2; case 2:
		return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Interface }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.IsValid = function() {
		var $ptr, v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var $ptr, v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var $ptr, _r, c, e, fl, k, key, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; e = $f.e; fl = $f.fl; k = $f.k; key = $f.key; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		key = key;
		v = this;
		new flag(v.flag).mustBe(21);
		tt = v.typ.kindType;
		_r = key.assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 64) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = (key.$ptr_ptr || (key.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key)));
		}
		e = mapaccess(v.typ, v.pointer(), k);
		if (e === 0) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = ((((v.flag | key.flag) >>> 0)) & 32) >>> 0;
		fl = (fl | ((typ.Kind() >>> 0))) >>> 0;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			typedmemmove(typ, c, e);
			return new Value.ptr(typ, c, (fl | 64) >>> 0);
		} else {
			return new Value.ptr(typ, e.$get(), fl);
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.e = e; $f.fl = fl; $f.k = k; $f.key = key; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var $ptr, _r, a, c, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; c = $f.c; fl = $f.fl; i = $f.i; it = $f.it; key = $f.key; keyType = $f.keyType; m = $f.m; mlen = $f.mlen; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = v.typ.kindType;
		keyType = tt.key;
		fl = (((v.flag & 32) >>> 0) | (keyType.Kind() >>> 0)) >>> 0;
		m = v.pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$8, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			if (ifaceIndir(keyType)) {
				c = unsafe_New(keyType);
				typedmemmove(keyType, c, key);
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = new Value.ptr(keyType, c, (fl | 64) >>> 0));
			} else {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = new Value.ptr(keyType, key.$get(), fl));
			}
			mapiternext(it);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		return $subslice(a, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapKeys }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.c = c; $f.fl = fl; $f.i = i; $f.it = it; $f.key = key; $f.keyType = keyType; $f.m = m; $f.mlen = mlen; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.Method = function(i) {
		var $ptr, fl, i, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 256) >>> 0) === 0)) || (i >>> 0) >= (v.typ.NumMethod() >>> 0)) {
			$panic(new $String("reflect: Method index out of range"));
		}
		if ((v.typ.Kind() === 20) && v.IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 96) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | (((((i >>> 0) << 9 >>> 0) | 256) >>> 0))) >>> 0;
		return new Value.ptr(v.typ, v.ptr, fl);
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var $ptr, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 256) >>> 0) === 0))) {
			return 0;
		}
		return v.typ.NumMethod();
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name) {
		var $ptr, _tuple, m, name, ok, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 256) >>> 0) === 0))) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_tuple = v.typ.MethodByName(name);
		m = $clone(_tuple[0], Method);
		ok = _tuple[1];
		if (!ok) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		return v.Method(m.Index);
	};
	Value.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	Value.ptr.prototype.NumField = function() {
		var $ptr, tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = v.typ.kindType;
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var $ptr, _ref, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 15) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_ref === 16) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var $ptr, _ref, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 13) {
			return overflowFloat32(x);
		} else if (_ref === 14) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		var $ptr, x;
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var $ptr, _ref, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var $ptr, _ref, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 7 || _ref === 12 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.Recv = function() {
		var $ptr, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		/* */ $s = 2; case 2:
		return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Value.ptr.prototype.recv = function(nb) {
		var $ptr, _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; nb = $f.nb; ok = $f.ok; p = $f.p; selected = $f.selected; t = $f.t; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		tt = v.typ.kindType;
		if (((tt.dir >> 0) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		t = tt.elem;
		val = new Value.ptr(t, 0, (t.Kind() >>> 0));
		p = 0;
		if (ifaceIndir(t)) {
			p = unsafe_New(t);
			val.ptr = p;
			val.flag = (val.flag | (64)) >>> 0;
		} else {
			p = (val.$ptr_ptr || (val.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val)));
		}
		_r = chanrecv(v.typ, v.pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		selected = _tuple[0];
		ok = _tuple[1];
		if (!selected) {
			val = new Value.ptr(ptrType$1.nil, 0, 0);
		}
		return [val, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.nb = nb; $f.ok = ok; $f.p = p; $f.selected = selected; $f.t = t; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
	Value.ptr.prototype.Send = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = x;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.send(x, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Send }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.send = function(x, nb) {
		var $ptr, _r, _r$1, nb, p, selected, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; nb = $f.nb; p = $f.p; selected = $f.selected; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		x = x;
		v = this;
		tt = v.typ.kindType;
		if (((tt.dir >> 0) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		_r = x.assignTo("reflect.Value.Send", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		p = 0;
		if (!((((x.flag & 64) >>> 0) === 0))) {
			p = x.ptr;
		} else {
			p = (x.$ptr_ptr || (x.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x)));
		}
		_r$1 = chansend(v.typ, v.pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		selected = _r$1;
		/* */ $s = 3; case 3:
		return selected;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.send }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.nb = nb; $f.p = p; $f.selected = selected; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.send = function(x, nb) { return this.$val.send(x, nb); };
	Value.ptr.prototype.SetBool = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		v.ptr.$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		v.ptr.$set(x);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		/* } */ case 2:
		v.ptr.$set(x);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.setRunes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var $ptr, _ref, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 15) {
			v.ptr.$set(new $Complex64(x.$real, x.$imag));
		} else if (_ref === 16) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var $ptr, _ref, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 13) {
			v.ptr.$set($fround(x));
		} else if (_ref === 14) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var $ptr, _ref, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 2) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_ref === 3) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24));
		} else if (_ref === 4) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16));
		} else if (_ref === 5) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_ref === 6) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, val) {
		var $ptr, _r, _r$1, e, k, key, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; e = $f.e; k = $f.k; key = $f.key; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = val;
		key = key;
		v = this;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = v.typ.kindType;
		_r = key.assignTo("reflect.Value.SetMapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 64) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = (key.$ptr_ptr || (key.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key)));
		}
		if (val.typ === ptrType$1.nil) {
			mapdelete(v.typ, v.pointer(), k);
			return;
		}
		new flag(val.flag).mustBeExported();
		_r$1 = val.assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		val = _r$1;
		e = 0;
		if (!((((val.flag & 64) >>> 0) === 0))) {
			e = val.ptr;
		} else {
			e = (val.$ptr_ptr || (val.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val)));
		}
		$r = mapassign(v.typ, v.pointer(), k, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetMapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.k = k; $f.key = key; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
	Value.ptr.prototype.SetUint = function(x) {
		var $ptr, _ref, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 7) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_ref === 8) {
			v.ptr.$set((x.$low << 24 >>> 24));
		} else if (_ref === 9) {
			v.ptr.$set((x.$low << 16 >>> 16));
		} else if (_ref === 10) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_ref === 11) {
			v.ptr.$set(x);
		} else if (_ref === 12) {
			v.ptr.$set((x.$low >>> 0));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		v.ptr.$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		v.ptr.$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var $ptr, _r, _ref, k, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; k = $f.k; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 0) {
			return "<invalid Value>";
		} else if (_ref === 24) {
			return v.ptr.$get();
		}
		_r = v.Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return "<" + _r + " Value>";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.k = k; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.TryRecv = function() {
		var $ptr, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		/* */ $s = 2; case 2:
		return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TryRecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.TrySend = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = x;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.send(x, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TrySend }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Type = function() {
		var $ptr, f, i, m, m$1, tt, ut, v, x, x$1;
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((f & 256) >>> 0) === 0) {
			return v.typ;
		}
		i = (v.flag >> 0) >> 9 >> 0;
		if (v.typ.Kind() === 20) {
			tt = v.typ.kindType;
			if ((i >>> 0) >= (tt.methods.$length >>> 0)) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			return m.typ;
		}
		ut = v.typ.uncommonType.uncommon();
		if (ut === ptrType$7.nil || (i >>> 0) >= (ut.methods.$length >>> 0)) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = (x$1 = ut.methods, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
		return m$1.mtyp;
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.Uint = function() {
		var $ptr, _ref, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_ref = k;
		if (_ref === 7) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 8) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 9) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 10) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 11) {
			return p.$get();
		} else if (_ref === 12) {
			return (x = p.$get(), new $Uint64(0, x.constructor === Number ? x : 1));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var $ptr, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 128) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return v.ptr;
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	typesMustMatch = function(what, t1, t2) {
		var $ptr, _r, _r$1, t1, t2, what, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; t1 = $f.t1; t2 = $f.t2; what = $f.what; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!($interfaceIsEqual(t1, t2))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(t1, t2))) { */ case 1:
			_r = t1.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = t2.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(what + ": " + _r + " != " + _r$1));
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: typesMustMatch }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.t1 = t1; $f.t2 = t2; $f.what = what; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeMap = function(typ) {
		var $ptr, _r, _r$1, m, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; m = $f.m; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 21))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 21))) { */ case 1:
			$panic(new $String("reflect.MakeMap of non-map type"));
		/* } */ case 2:
		m = makemap($assertType(typ, ptrType$1));
		_r$1 = typ.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return new Value.ptr(_r$1, m, 21);
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeMap }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.m = m; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeMap = MakeMap;
	Indirect = function(v) {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if (!((v.Kind() === 22))) {
			return v;
		}
		_r = v.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Indirect }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Indirect = Indirect;
	New = function(typ) {
		var $ptr, _r, _r$1, fl, ptr, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; fl = $f.fl; ptr = $f.ptr; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		ptr = unsafe_New($assertType(typ, ptrType$1));
		fl = 22;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.ptrTo(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return new Value.ptr(_r$1, ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.fl = fl; $f.ptr = ptr; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var $ptr, _r, _r$1, context, dst, fl, target, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; context = $f.context; dst = $f.dst; fl = $f.fl; target = $f.target; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 256) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 256) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		/* */ if (directlyAssignable(dst, v.typ)) { $s = 4; continue; }
		/* */ if (implements$1(dst, v.typ)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (directlyAssignable(dst, v.typ)) { */ case 4:
			v.typ = dst;
			fl = (v.flag & 224) >>> 0;
			fl = (fl | ((dst.Kind() >>> 0))) >>> 0;
			return new Value.ptr(dst, v.ptr, fl);
		/* } else if (implements$1(dst, v.typ)) { */ case 5:
			if (target === 0) {
				target = unsafe_New(dst);
			}
			_r$1 = valueInterface(v, false); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			x = _r$1;
			if (dst.NumMethod() === 0) {
				target.$set(x);
			} else {
				ifaceE2I(dst, x, target);
			}
			return new Value.ptr(dst, target, 84);
		/* } */ case 6:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.assignTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.context = context; $f.dst = dst; $f.fl = fl; $f.target = target; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.Convert = function(t) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; op = $f.op; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 256) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 256) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Convert", v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		/* */ if (op === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op === $throwNilPointerError) { */ case 6:
			_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + _r$3));
		/* } */ case 7:
		_r$4 = op(v, t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 10; case 10:
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Convert }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.op = op; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var $ptr, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _v, _v$1, _v$2, dst, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; dst = $f.dst; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = src.Kind();
		/* */ if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { $s = 1; continue; }
		/* */ if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { $s = 2; continue; }
		/* */ if (_ref === 13 || _ref === 14) { $s = 3; continue; }
		/* */ if (_ref === 15 || _ref === 16) { $s = 4; continue; }
		/* */ if (_ref === 24) { $s = 5; continue; }
		/* */ if (_ref === 23) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { */ case 1:
			_ref$1 = dst.Kind();
			if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6 || _ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11 || _ref$1 === 12) {
				return cvtInt;
			} else if (_ref$1 === 13 || _ref$1 === 14) {
				return cvtIntFloat;
			} else if (_ref$1 === 24) {
				return cvtIntString;
			}
			$s = 7; continue;
		/* } else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { */ case 2:
			_ref$2 = dst.Kind();
			if (_ref$2 === 2 || _ref$2 === 3 || _ref$2 === 4 || _ref$2 === 5 || _ref$2 === 6 || _ref$2 === 7 || _ref$2 === 8 || _ref$2 === 9 || _ref$2 === 10 || _ref$2 === 11 || _ref$2 === 12) {
				return cvtUint;
			} else if (_ref$2 === 13 || _ref$2 === 14) {
				return cvtUintFloat;
			} else if (_ref$2 === 24) {
				return cvtUintString;
			}
			$s = 7; continue;
		/* } else if (_ref === 13 || _ref === 14) { */ case 3:
			_ref$3 = dst.Kind();
			if (_ref$3 === 2 || _ref$3 === 3 || _ref$3 === 4 || _ref$3 === 5 || _ref$3 === 6) {
				return cvtFloatInt;
			} else if (_ref$3 === 7 || _ref$3 === 8 || _ref$3 === 9 || _ref$3 === 10 || _ref$3 === 11 || _ref$3 === 12) {
				return cvtFloatUint;
			} else if (_ref$3 === 13 || _ref$3 === 14) {
				return cvtFloat;
			}
			$s = 7; continue;
		/* } else if (_ref === 15 || _ref === 16) { */ case 4:
			_ref$4 = dst.Kind();
			if (_ref$4 === 15 || _ref$4 === 16) {
				return cvtComplex;
			}
			$s = 7; continue;
		/* } else if (_ref === 24) { */ case 5:
			if (!(dst.Kind() === 23)) { _v = false; $s = 10; continue s; }
			_r = dst.Elem().PkgPath(); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r === ""; case 10:
			/* */ if (_v) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_v) { */ case 8:
				_r$1 = dst.Elem().Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_ref$5 = _r$1;
				/* */ if (_ref$5 === 8) { $s = 13; continue; }
				/* */ if (_ref$5 === 5) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (_ref$5 === 8) { */ case 13:
					return cvtStringBytes;
				/* } else if (_ref$5 === 5) { */ case 14:
					return cvtStringRunes;
				/* } */ case 15:
			/* } */ case 9:
			$s = 7; continue;
		/* } else if (_ref === 23) { */ case 6:
			if (!(dst.Kind() === 24)) { _v$1 = false; $s = 18; continue s; }
			_r$2 = src.Elem().PkgPath(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_v$1 = _r$2 === ""; case 18:
			/* */ if (_v$1) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (_v$1) { */ case 16:
				_r$3 = src.Elem().Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_ref$6 = _r$3;
				/* */ if (_ref$6 === 8) { $s = 21; continue; }
				/* */ if (_ref$6 === 5) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (_ref$6 === 8) { */ case 21:
					return cvtBytesString;
				/* } else if (_ref$6 === 5) { */ case 22:
					return cvtRunesString;
				/* } */ case 23:
			/* } */ case 17:
		/* } */ case 7:
		if (haveIdenticalUnderlyingType(dst, src)) {
			return cvtDirect;
		}
		if (!((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "")) { _v$2 = false; $s = 26; continue s; }
		_r$4 = dst.Elem().common(); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = src.Elem().common(); /* */ $s = 28; case 28: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1); /* */ $s = 29; case 29: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_v$2 = _r$6; case 26:
		/* */ if (_v$2) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (_v$2) { */ case 24:
			return cvtDirect;
		/* } */ case 25:
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				return cvtI2I;
			}
			return cvtT2I;
		}
		return $throwNilPointerError;
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertOp }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.dst = dst; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeFloat = function(f, v, t) {
		var $ptr, _r, _ref, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_ref = typ.size;
		if (_ref === 4) {
			ptr.$set($fround(v));
		} else if (_ref === 8) {
			ptr.$set(v);
		}
		return new Value.ptr(typ, ptr, (((f | 64) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeFloat }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeComplex = function(f, v, t) {
		var $ptr, _r, _ref, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_ref = typ.size;
		if (_ref === 8) {
			ptr.$set(new $Complex64(v.$real, v.$imag));
		} else if (_ref === 16) {
			ptr.$set(v);
		}
		return new Value.ptr(typ, ptr, (((f | 64) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeComplex }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeString = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		ret.SetString(v);
		ret.flag = (((ret.flag & ~128) >>> 0) | f) >>> 0;
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeBytes = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = ret.SetBytes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~128) >>> 0) | f) >>> 0;
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeRunes = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = ret.setRunes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~128) >>> 0) | f) >>> 0;
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeRunes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtInt = function(v, t) {
		var $ptr, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 32) >>> 0, (x = v.Int(), new $Uint64(x.$high, x.$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUint = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 32) >>> 0, v.Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatInt = function(v, t) {
		var $ptr, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 32) >>> 0, (x = new $Int64(0, v.Float()), new $Uint64(x.$high, x.$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatUint = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 32) >>> 0, new $Uint64(0, v.Float()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 32) >>> 0, $flatten64(v.Int()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 32) >>> 0, $flatten64(v.Uint()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 32) >>> 0, v.Float(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtComplex = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeComplex((v.flag & 32) >>> 0, v.Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtComplex }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntString = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeString((v.flag & 32) >>> 0, $encodeRune(v.Int().$low), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintString = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeString((v.flag & 32) >>> 0, $encodeRune(v.Uint().$low), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtBytesString = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 32) >>> 0;
		_r = v.Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = $bytesToString(_r);
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtBytesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringBytes = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 32) >>> 0;
		_r = v.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = new sliceType$13($stringToBytes(_r));
		_arg$2 = t;
		_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringBytes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtRunesString = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 32) >>> 0;
		_r = v.runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = $runesToString(_r);
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtRunesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringRunes = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 32) >>> 0;
		_r = v.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = new sliceType$15($stringToRunes(_r));
		_arg$2 = t;
		_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringRunes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtT2I = function(v, typ) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; target = $f.target; typ = $f.typ; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		target = _r$1;
		_r$2 = valueInterface(v, false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		x = _r$2;
		_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 0) { */ case 4:
			target.$set(x);
			$s = 6; continue;
		/* } else { */ case 5:
			ifaceE2I($assertType(typ, ptrType$1), x, target);
		/* } */ case 6:
		_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 9; case 9:
		return new Value.ptr(_r$4, target, (((((v.flag & 32) >>> 0) | 64) >>> 0) | 20) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtT2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.target = target; $f.typ = typ; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtI2I = function(v, typ) {
		var $ptr, _r, _r$1, _r$2, ret, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ret = $f.ret; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		/* */ if (v.IsNil()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v.IsNil()) { */ case 1:
			_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			ret.flag = (ret.flag | (((v.flag & 32) >>> 0))) >>> 0;
			return ret;
		/* } */ case 2:
		_r$1 = v.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = cvtT2I(_r$1, typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtI2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ret = ret; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}];
	ptrType$7.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$7], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$11.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ptrType$13.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}];
	Value.methods = [{prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$3], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$8], [sliceType$8], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$3], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$13], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$15], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$8], [sliceType$8], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$8], [sliceType$8], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [Value], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$8], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$13], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$15], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}];
	ptrType$20.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	mapIter.init([{prop: "t", name: "t", pkg: "reflect", typ: Type, tag: ""}, {prop: "m", name: "m", pkg: "reflect", typ: ptrType$3, tag: ""}, {prop: "keys", name: "keys", pkg: "reflect", typ: ptrType$3, tag: ""}, {prop: "i", name: "i", pkg: "reflect", typ: $Int, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$7], false)}]);
	rtype.init([{prop: "size", name: "size", pkg: "reflect", typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", pkg: "reflect", typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", pkg: "reflect", typ: $Uint32, tag: ""}, {prop: "_$3", name: "_", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "align", name: "align", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "alg", name: "alg", pkg: "reflect", typ: ptrType$4, tag: ""}, {prop: "gcdata", name: "gcdata", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "string", name: "string", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "uncommonType", name: "", pkg: "reflect", typ: ptrType$7, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "zero", name: "zero", pkg: "reflect", typ: $UnsafePointer, tag: ""}]);
	typeAlg.init([{prop: "hash", name: "hash", pkg: "reflect", typ: funcType$4, tag: ""}, {prop: "equal", name: "equal", pkg: "reflect", typ: funcType$5, tag: ""}]);
	method.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "mtyp", name: "mtyp", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "ifn", name: "ifn", pkg: "reflect", typ: $UnsafePointer, tag: ""}, {prop: "tfn", name: "tfn", pkg: "reflect", typ: $UnsafePointer, tag: ""}]);
	uncommonType.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "methods", name: "methods", pkg: "reflect", typ: sliceType$4, tag: ""}]);
	arrayType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"array\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "len", name: "len", pkg: "reflect", typ: $Uintptr, tag: ""}]);
	chanType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"chan\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", pkg: "reflect", typ: $Uintptr, tag: ""}]);
	funcType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"func\""}, {prop: "dotdotdot", name: "dotdotdot", pkg: "reflect", typ: $Bool, tag: ""}, {prop: "in$2", name: "in", pkg: "reflect", typ: sliceType$1, tag: ""}, {prop: "out", name: "out", pkg: "reflect", typ: sliceType$1, tag: ""}]);
	imethod.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}]);
	interfaceType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"interface\""}, {prop: "methods", name: "methods", pkg: "reflect", typ: sliceType$5, tag: ""}]);
	mapType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"map\""}, {prop: "key", name: "key", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "hmap", name: "hmap", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "keysize", name: "keysize", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "indirectkey", name: "indirectkey", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "indirectvalue", name: "indirectvalue", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", pkg: "reflect", typ: $Uint16, tag: ""}, {prop: "reflexivekey", name: "reflexivekey", pkg: "reflect", typ: $Bool, tag: ""}]);
	ptrType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"ptr\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}]);
	sliceType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"slice\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}]);
	structField.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "tag", name: "tag", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "offset", name: "offset", pkg: "reflect", typ: $Uintptr, tag: ""}]);
	structType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"struct\""}, {prop: "fields", name: "fields", pkg: "reflect", typ: sliceType$6, tag: ""}]);
	Method.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $String, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: Type, tag: ""}, {prop: "Func", name: "Func", pkg: "", typ: Value, tag: ""}, {prop: "Index", name: "Index", pkg: "", typ: $Int, tag: ""}]);
	StructField.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $String, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: Type, tag: ""}, {prop: "Tag", name: "Tag", pkg: "", typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", pkg: "", typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", pkg: "", typ: sliceType$11, tag: ""}, {prop: "Anonymous", name: "Anonymous", pkg: "", typ: $Bool, tag: ""}]);
	fieldScan.init([{prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$13, tag: ""}, {prop: "index", name: "index", pkg: "reflect", typ: sliceType$11, tag: ""}]);
	Value.init([{prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", pkg: "reflect", typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "", pkg: "reflect", typ: flag, tag: ""}]);
	ValueError.init([{prop: "Method", name: "Method", pkg: "", typ: $String, tag: ""}, {prop: "Kind", name: "Kind", pkg: "", typ: Kind, tag: ""}]);
	nonEmptyInterface.init([{prop: "itab", name: "itab", pkg: "reflect", typ: ptrType$9, tag: ""}, {prop: "word", name: "word", pkg: "reflect", typ: $UnsafePointer, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = false;
		stringPtrMap = {};
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		kindNames = new sliceType$3(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		jsObjectPtr = reflectType($jsObjectPtr);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$r = init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, $init, errors, io, math, os, reflect, strconv, sync, utf8, fmtFlags, fmt, State, Formatter, Stringer, GoStringer, buffer, pp, runeUnreader, scanError, ss, ssave, sliceType, sliceType$1, ptrType, arrayType, arrayType$1, ptrType$1, arrayType$2, sliceType$2, ptrType$2, ptrType$5, ptrType$25, funcType, padZeroBytes, padSpaceBytes, trueBytes, falseBytes, commaSpaceBytes, nilAngleBytes, nilParenBytes, nilBytes, mapBytes, percentBangBytes, missingBytes, badIndexBytes, panicBytes, extraBytes, irparenBytes, bytesBytes, badWidthBytes, badPrecBytes, noVerbBytes, ppFree, intBits, uintptrBits, byteType, space, ssFree, complexError, boolError, _r, _r$1, init, doPrec, newPrinter, Fprintf, Sprintf, Errorf, Fprint, Print, Sprint, Fprintln, Println, Sprintln, getField, tooLarge, parsenum, intFromArg, parseArgNumber, isSpace, notSpace, indexRune;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", "fmtFlags", "fmt", function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, unicode_, uniQuote_, zero_, plusV_, sharpV_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.widPresent = false;
			this.precPresent = false;
			this.minus = false;
			this.plus = false;
			this.sharp = false;
			this.space = false;
			this.unicode = false;
			this.uniQuote = false;
			this.zero = false;
			this.plusV = false;
			this.sharpV = false;
			return;
		}
		this.widPresent = widPresent_;
		this.precPresent = precPresent_;
		this.minus = minus_;
		this.plus = plus_;
		this.sharp = sharp_;
		this.space = space_;
		this.unicode = unicode_;
		this.uniQuote = uniQuote_;
		this.zero = zero_;
		this.plusV = plusV_;
		this.sharpV = sharpV_;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", "fmt", "fmt", function(intbuf_, buf_, wid_, prec_, fmtFlags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.intbuf = arrayType$1.zero();
			this.buf = ptrType$1.nil;
			this.wid = 0;
			this.prec = 0;
			this.fmtFlags = new fmtFlags.ptr(false, false, false, false, false, false, false, false, false, false, false);
			return;
		}
		this.intbuf = intbuf_;
		this.buf = buf_;
		this.wid = wid_;
		this.prec = prec_;
		this.fmtFlags = fmtFlags_;
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", "State", "fmt", null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", "Formatter", "fmt", null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", "Stringer", "fmt", null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", "GoStringer", "fmt", null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", "buffer", "fmt", null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", "pp", "fmt", function(n_, panicking_, erroring_, buf_, arg_, value_, reordered_, goodArgNum_, runeBuf_, fmt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.n = 0;
			this.panicking = false;
			this.erroring = false;
			this.buf = buffer.nil;
			this.arg = $ifaceNil;
			this.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
			this.reordered = false;
			this.goodArgNum = false;
			this.runeBuf = arrayType.zero();
			this.fmt = new fmt.ptr(arrayType$1.zero(), ptrType$1.nil, 0, 0, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false, false, false));
			return;
		}
		this.n = n_;
		this.panicking = panicking_;
		this.erroring = erroring_;
		this.buf = buf_;
		this.arg = arg_;
		this.value = value_;
		this.reordered = reordered_;
		this.goodArgNum = goodArgNum_;
		this.runeBuf = runeBuf_;
		this.fmt = fmt_;
	});
	runeUnreader = $pkg.runeUnreader = $newType(8, $kindInterface, "fmt.runeUnreader", "runeUnreader", "fmt", null);
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", "scanError", "fmt", function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", "ss", "fmt", function(rr_, buf_, peekRune_, prevRune_, count_, atEOF_, ssave_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rr = $ifaceNil;
			this.buf = buffer.nil;
			this.peekRune = 0;
			this.prevRune = 0;
			this.count = 0;
			this.atEOF = false;
			this.ssave = new ssave.ptr(false, false, false, 0, 0, 0);
			return;
		}
		this.rr = rr_;
		this.buf = buf_;
		this.peekRune = peekRune_;
		this.prevRune = prevRune_;
		this.count = count_;
		this.atEOF = atEOF_;
		this.ssave = ssave_;
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", "ssave", "fmt", function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.validSave = false;
			this.nlIsEnd = false;
			this.nlIsSpace = false;
			this.argLimit = 0;
			this.limit = 0;
			this.maxWid = 0;
			return;
		}
		this.validSave = validSave_;
		this.nlIsEnd = nlIsEnd_;
		this.nlIsSpace = nlIsSpace_;
		this.argLimit = argLimit_;
		this.limit = limit_;
		this.maxWid = maxWid_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType = $ptrType(reflect.rtype);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 65);
	ptrType$1 = $ptrType(buffer);
	arrayType$2 = $arrayType($Uint16, 2);
	sliceType$2 = $sliceType(arrayType$2);
	ptrType$2 = $ptrType(pp);
	ptrType$5 = $ptrType(ss);
	ptrType$25 = $ptrType(fmt);
	funcType = $funcType([$Int32], [$Bool], false);
	init = function() {
		var $ptr, i;
		i = 0;
		while (true) {
			if (!(i < 65)) { break; }
			((i < 0 || i >= padZeroBytes.$length) ? $throwRuntimeError("index out of range") : padZeroBytes.$array[padZeroBytes.$offset + i] = 48);
			((i < 0 || i >= padSpaceBytes.$length) ? $throwRuntimeError("index out of range") : padSpaceBytes.$array[padSpaceBytes.$offset + i] = 32);
			i = i + (1) >> 0;
		}
	};
	fmt.ptr.prototype.clearflags = function() {
		var $ptr, f;
		f = this;
		fmtFlags.copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false, false, false));
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var $ptr, buf, f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.computePadding = function(width) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, f, left, leftWidth, padding, rightWidth, w, width;
		padding = sliceType.nil;
		leftWidth = 0;
		rightWidth = 0;
		f = this;
		left = !f.fmtFlags.minus;
		w = f.wid;
		if (w < 0) {
			left = false;
			w = -w;
		}
		w = w - (width) >> 0;
		if (w > 0) {
			if (left && f.fmtFlags.zero) {
				_tmp = padZeroBytes;
				_tmp$1 = w;
				_tmp$2 = 0;
				padding = _tmp;
				leftWidth = _tmp$1;
				rightWidth = _tmp$2;
				return [padding, leftWidth, rightWidth];
			}
			if (left) {
				_tmp$3 = padSpaceBytes;
				_tmp$4 = w;
				_tmp$5 = 0;
				padding = _tmp$3;
				leftWidth = _tmp$4;
				rightWidth = _tmp$5;
				return [padding, leftWidth, rightWidth];
			} else {
				_tmp$6 = padSpaceBytes;
				_tmp$7 = 0;
				_tmp$8 = w;
				padding = _tmp$6;
				leftWidth = _tmp$7;
				rightWidth = _tmp$8;
				return [padding, leftWidth, rightWidth];
			}
		}
		return [padding, leftWidth, rightWidth];
	};
	fmt.prototype.computePadding = function(width) { return this.$val.computePadding(width); };
	fmt.ptr.prototype.writePadding = function(n, padding) {
		var $ptr, f, m, n, padding;
		f = this;
		while (true) {
			if (!(n > 0)) { break; }
			m = n;
			if (m > 65) {
				m = 65;
			}
			f.buf.Write($subslice(padding, 0, m));
			n = n - (m) >> 0;
		}
	};
	fmt.prototype.writePadding = function(n, padding) { return this.$val.writePadding(n, padding); };
	fmt.ptr.prototype.pad = function(b) {
		var $ptr, _tuple, b, f, left, padding, right;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		_tuple = f.computePadding(utf8.RuneCount(b));
		padding = _tuple[0];
		left = _tuple[1];
		right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.Write(b);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var $ptr, _tuple, f, left, padding, right, s;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		_tuple = f.computePadding(utf8.RuneCountInString(s));
		padding = _tuple[0];
		left = _tuple[1];
		right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.WriteString(s);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmt_boolean = function(v) {
		var $ptr, f, v;
		f = this;
		if (v) {
			f.pad(trueBytes);
		} else {
			f.pad(falseBytes);
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };
	fmt.ptr.prototype.integer = function(a, base, signedness, digits) {
		var $ptr, _ref, _ref$1, a, base, buf, digits, f, i, j, negative, next, prec, runeWidth, signedness, ua, width, width$1, x, x$1, x$2, x$3;
		f = this;
		if (f.fmtFlags.precPresent && (f.prec === 0) && (a.$high === 0 && a.$low === 0)) {
			return;
		}
		negative = signedness && (a.$high < 0 || (a.$high === 0 && a.$low < 0));
		if (negative) {
			a = new $Int64(-a.$high, -a.$low);
		}
		buf = $subslice(new sliceType(f.intbuf), 0);
		if (f.fmtFlags.widPresent || f.fmtFlags.precPresent || f.fmtFlags.plus || f.fmtFlags.space) {
			width = f.wid + f.prec >> 0;
			if ((base.$high === 0 && base.$low === 16) && f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
			if (f.fmtFlags.unicode) {
				width = width + (2) >> 0;
				if (f.fmtFlags.uniQuote) {
					width = width + (7) >> 0;
				}
			}
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				width = width + (1) >> 0;
			}
			if (width > 65) {
				buf = $makeSlice(sliceType, width);
			}
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			f.fmtFlags.zero = false;
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent && !f.fmtFlags.minus && f.wid > 0) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		ua = new $Uint64(a.$high, a.$low);
		_ref = base;
		if ((_ref.$high === 0 && _ref.$low === 10)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 10)))) { break; }
				i = i - (1) >> 0;
				next = $div64(ua, new $Uint64(0, 10), false);
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x = new $Uint64(0 + ua.$high, 48 + ua.$low), x$1 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x.$high - x$1.$high, x.$low - x$1.$low)).$low << 24 >>> 24));
				ua = next;
			}
		} else if ((_ref.$high === 0 && _ref.$low === 16)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 16)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(ua.$high & 0, (ua.$low & 15) >>> 0))));
				ua = $shiftRightUint64(ua, (4));
			}
		} else if ((_ref.$high === 0 && _ref.$low === 8)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 8)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$2 = new $Uint64(ua.$high & 0, (ua.$low & 7) >>> 0), new $Uint64(0 + x$2.$high, 48 + x$2.$low)).$low << 24 >>> 24));
				ua = $shiftRightUint64(ua, (3));
			}
		} else if ((_ref.$high === 0 && _ref.$low === 2)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 2)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$3 = new $Uint64(ua.$high & 0, (ua.$low & 1) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24));
				ua = $shiftRightUint64(ua, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(ua)));
		while (true) {
			if (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
		}
		if (f.fmtFlags.sharp) {
			_ref$1 = base;
			if ((_ref$1.$high === 0 && _ref$1.$low === 8)) {
				if (!((((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
				}
			} else if ((_ref$1.$high === 0 && _ref$1.$low === 16)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((120 + digits.charCodeAt(10) << 24 >>> 24) - 97 << 24 >>> 24));
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
			}
		}
		if (f.fmtFlags.unicode) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 85);
		}
		if (negative) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 45);
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43);
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 32);
		}
		if (f.fmtFlags.unicode && f.fmtFlags.uniQuote && (a.$high > 0 || (a.$high === 0 && a.$low >= 0)) && (a.$high < 0 || (a.$high === 0 && a.$low <= 1114111)) && strconv.IsPrint(((a.$low + ((a.$high >> 31) * 4294967296)) >> 0))) {
			runeWidth = utf8.RuneLen(((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));
			width$1 = (2 + runeWidth >> 0) + 1 >> 0;
			$copySlice($subslice(buf, (i - width$1 >> 0)), $subslice(buf, i));
			i = i - (width$1) >> 0;
			j = buf.$length - width$1 >> 0;
			((j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 32);
			j = j + (1) >> 0;
			((j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 39);
			j = j + (1) >> 0;
			utf8.EncodeRune($subslice(buf, j), ((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));
			j = j + (runeWidth) >> 0;
			((j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 39);
		}
		f.pad($subslice(buf, i));
	};
	fmt.prototype.integer = function(a, base, signedness, digits) { return this.$val.integer(a, base, signedness, digits); };
	fmt.ptr.prototype.truncate = function(s) {
		var $ptr, _i, _ref, _rune, f, i, n, s;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < utf8.RuneCountInString(s)) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				if (n === 0) {
					s = s.substring(0, i);
					break;
				}
				n = n - (1) >> 0;
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.$val.truncate(s); };
	fmt.ptr.prototype.fmt_s = function(s) {
		var $ptr, f, s;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };
	fmt.ptr.prototype.fmt_sbx = function(s, b, digits) {
		var $ptr, b, buf, c, digits, f, i, n, s, x;
		f = this;
		n = b.$length;
		if (b === sliceType.nil) {
			n = s.length;
		}
		x = (digits.charCodeAt(10) - 97 << 24 >>> 24) + 120 << 24 >>> 24;
		buf = sliceType.nil;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			if (i > 0 && f.fmtFlags.space) {
				buf = $append(buf, 32);
			}
			if (f.fmtFlags.sharp && (f.fmtFlags.space || (i === 0))) {
				buf = $append(buf, 48, x);
			}
			c = 0;
			if (b === sliceType.nil) {
				c = s.charCodeAt(i);
			} else {
				c = ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.pad(buf);
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };
	fmt.ptr.prototype.fmt_sx = function(s, digits) {
		var $ptr, digits, f, s;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < s.length) {
			s = s.substring(0, f.prec);
		}
		f.fmt_sbx(s, sliceType.nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };
	fmt.ptr.prototype.fmt_bx = function(b, digits) {
		var $ptr, b, digits, f;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < b.$length) {
			b = $subslice(b, 0, f.prec);
		}
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };
	fmt.ptr.prototype.fmt_q = function(s) {
		var $ptr, f, quoted, s;
		f = this;
		s = f.truncate(s);
		quoted = "";
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			quoted = "`" + s + "`";
		} else {
			if (f.fmtFlags.plus) {
				quoted = strconv.QuoteToASCII(s);
			} else {
				quoted = strconv.Quote(s);
			}
		}
		f.padString(quoted);
	};
	fmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };
	fmt.ptr.prototype.fmt_qc = function(c) {
		var $ptr, c, f, quoted;
		f = this;
		quoted = sliceType.nil;
		if (f.fmtFlags.plus) {
			quoted = strconv.AppendQuoteRuneToASCII($subslice(new sliceType(f.intbuf), 0, 0), ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0));
		} else {
			quoted = strconv.AppendQuoteRune($subslice(new sliceType(f.intbuf), 0, 0), ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0));
		}
		f.pad(quoted);
	};
	fmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };
	doPrec = function(f, def) {
		var $ptr, def, f;
		if (f.fmtFlags.precPresent) {
			return f.prec;
		}
		return def;
	};
	fmt.ptr.prototype.formatFloat = function(v, verb, prec, n) {
		var $ptr, f, n, num, prec, v, verb, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		f = this;
		num = strconv.AppendFloat($subslice(new sliceType(f.intbuf), 0, 1), v, verb, prec, n);
		if (((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 43);
		}
		if (math.IsInf(v, 0)) {
			if (f.fmtFlags.zero) {
				$deferred.push([(function() {
					var $ptr;
					f.fmtFlags.zero = true;
				}), []]);
				f.fmtFlags.zero = false;
			}
		}
		if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
			if (f.fmtFlags.space && v >= 0) {
				f.buf.WriteByte(32);
				f.wid = f.wid - (1) >> 0;
			} else if (f.fmtFlags.plus || v < 0) {
				f.buf.WriteByte((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]));
				f.wid = f.wid - (1) >> 0;
			}
			f.pad($subslice(num, 1));
			return;
		}
		if (f.fmtFlags.space && ((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 43)) {
			(0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 32);
			f.pad(num);
			return;
		}
		if (f.fmtFlags.plus || ((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 45) || math.IsInf(v, 0)) {
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	fmt.prototype.formatFloat = function(v, verb, prec, n) { return this.$val.formatFloat(v, verb, prec, n); };
	fmt.ptr.prototype.fmt_e64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 101, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_e64 = function(v) { return this.$val.fmt_e64(v); };
	fmt.ptr.prototype.fmt_E64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 69, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_E64 = function(v) { return this.$val.fmt_E64(v); };
	fmt.ptr.prototype.fmt_f64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 102, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_f64 = function(v) { return this.$val.fmt_f64(v); };
	fmt.ptr.prototype.fmt_g64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 103, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_g64 = function(v) { return this.$val.fmt_g64(v); };
	fmt.ptr.prototype.fmt_G64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 71, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_G64 = function(v) { return this.$val.fmt_G64(v); };
	fmt.ptr.prototype.fmt_fb64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 98, 0, 64);
	};
	fmt.prototype.fmt_fb64 = function(v) { return this.$val.fmt_fb64(v); };
	fmt.ptr.prototype.fmt_e32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 101, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_e32 = function(v) { return this.$val.fmt_e32(v); };
	fmt.ptr.prototype.fmt_E32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 69, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_E32 = function(v) { return this.$val.fmt_E32(v); };
	fmt.ptr.prototype.fmt_f32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 102, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_f32 = function(v) { return this.$val.fmt_f32(v); };
	fmt.ptr.prototype.fmt_g32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 103, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_g32 = function(v) { return this.$val.fmt_g32(v); };
	fmt.ptr.prototype.fmt_G32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 71, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_G32 = function(v) { return this.$val.fmt_G32(v); };
	fmt.ptr.prototype.fmt_fb32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 98, 0, 32);
	};
	fmt.prototype.fmt_fb32 = function(v) { return this.$val.fmt_fb32(v); };
	fmt.ptr.prototype.fmt_c64 = function(v, verb) {
		var $ptr, f, v, verb;
		f = this;
		f.fmt_complex(v.$real, v.$imag, 32, verb);
	};
	fmt.prototype.fmt_c64 = function(v, verb) { return this.$val.fmt_c64(v, verb); };
	fmt.ptr.prototype.fmt_c128 = function(v, verb) {
		var $ptr, f, v, verb;
		f = this;
		f.fmt_complex(v.$real, v.$imag, 64, verb);
	};
	fmt.prototype.fmt_c128 = function(v, verb) { return this.$val.fmt_c128(v, verb); };
	fmt.ptr.prototype.fmt_complex = function(r, j, size, verb) {
		var $ptr, _ref, f, i, j, oldPlus, oldSpace, oldWid, r, size, verb;
		f = this;
		f.buf.WriteByte(40);
		oldPlus = f.fmtFlags.plus;
		oldSpace = f.fmtFlags.space;
		oldWid = f.wid;
		i = 0;
		while (true) {
			_ref = verb;
			if (_ref === 98) {
				f.formatFloat(r, 98, 0, size);
			} else if (_ref === 101) {
				f.formatFloat(r, 101, doPrec(f, 6), size);
			} else if (_ref === 69) {
				f.formatFloat(r, 69, doPrec(f, 6), size);
			} else if (_ref === 102 || _ref === 70) {
				f.formatFloat(r, 102, doPrec(f, 6), size);
			} else if (_ref === 103) {
				f.formatFloat(r, 103, doPrec(f, -1), size);
			} else if (_ref === 71) {
				f.formatFloat(r, 71, doPrec(f, -1), size);
			}
			if (!((i === 0))) {
				break;
			}
			f.fmtFlags.plus = true;
			f.fmtFlags.space = false;
			f.wid = oldWid;
			r = j;
			i = i + (1) >> 0;
		}
		f.fmtFlags.space = oldSpace;
		f.fmtFlags.plus = oldPlus;
		f.wid = oldWid;
		f.buf.Write(irparenBytes);
	};
	fmt.prototype.fmt_complex = function(r, j, size, verb) { return this.$val.fmt_complex(r, j, size, verb); };
	$ptrType(buffer).prototype.Write = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.$set($appendSlice(b.$get(), p));
		_tmp = p.$length;
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	$ptrType(buffer).prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, b, err, n, s;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.$set($appendSlice(b.$get(), s));
		_tmp = s.length;
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	$ptrType(buffer).prototype.WriteByte = function(c) {
		var $ptr, b, c;
		b = this;
		b.$set($append(b.$get(), c));
		return $ifaceNil;
	};
	$ptrType(buffer).prototype.WriteRune = function(r) {
		var $ptr, b, bp, n, r, w, x;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), (r << 24 >>> 24)));
			return $ifaceNil;
		}
		b = bp.$get();
		n = b.$length;
		while (true) {
			if (!((n + 4 >> 0) > b.$capacity)) { break; }
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
		return $ifaceNil;
	};
	newPrinter = function() {
		var $ptr, _r$2, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = ppFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = $assertType(_r$2, ptrType$2);
		p.panicking = false;
		p.erroring = false;
		p.fmt.init((p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))));
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPrinter }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.ptr.prototype.free = function() {
		var $ptr, p;
		p = this;
		if (p.buf.$capacity > 1024) {
			return;
		}
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var $ptr, _tmp, _tmp$1, ok, p, wid;
		wid = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.wid;
		_tmp$1 = p.fmt.fmtFlags.widPresent;
		wid = _tmp;
		ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var $ptr, _tmp, _tmp$1, ok, p, prec;
		prec = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.prec;
		_tmp$1 = p.fmt.fmtFlags.precPresent;
		prec = _tmp;
		ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var $ptr, _ref, b, p;
		p = this;
		_ref = b;
		if (_ref === 45) {
			return p.fmt.fmtFlags.minus;
		} else if (_ref === 43) {
			return p.fmt.fmtFlags.plus;
		} else if (_ref === 35) {
			return p.fmt.fmtFlags.sharp;
		} else if (_ref === 32) {
			return p.fmt.fmtFlags.space;
		} else if (_ref === 48) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.add = function(c) {
		var $ptr, c, p;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(c);
	};
	pp.prototype.add = function(c) { return this.$val.add(c); };
	pp.ptr.prototype.Write = function(b) {
		var $ptr, _tuple, b, err, p, ret;
		ret = 0;
		err = $ifaceNil;
		p = this;
		_tuple = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(b);
		ret = _tuple[0];
		err = _tuple[1];
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	Fprintf = function(w, format, a) {
		var $ptr, _r$2, _r$3, _tuple, a, err, format, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = w.Write((x = p.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprintf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprintf = Fprintf;
	Sprintf = function(format, a) {
		var $ptr, _r$2, a, format, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; a = $f.a; format = $f.format; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = $bytesToString(p.buf);
		p.free();
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.a = a; $f.format = format; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintf = Sprintf;
	Errorf = function(format, a) {
		var $ptr, _r$2, _r$3, a, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; a = $f.a; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = Sprintf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = errors.New(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Errorf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.a = a; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Errorf = Errorf;
	Fprint = function(w, a) {
		var $ptr, _r$2, _r$3, _tuple, a, err, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrint(a, false, false); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = w.Write((x = p.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprint }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprint = Fprint;
	Print = function(a) {
		var $ptr, _r$2, _tuple, a, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r$2 = Fprint(os.Stdout, a); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		n = _tuple[0];
		err = _tuple[1];
		/* */ $s = 2; case 2:
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Print }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Print = Print;
	Sprint = function(a) {
		var $ptr, _r$2, a, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrint(a, false, false); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = $bytesToString(p.buf);
		p.free();
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprint }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprint = Sprint;
	Fprintln = function(w, a) {
		var $ptr, _r$2, _r$3, _tuple, a, err, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrint(a, true, true); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = w.Write((x = p.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprintln }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprintln = Fprintln;
	Println = function(a) {
		var $ptr, _r$2, _tuple, a, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r$2 = Fprintln(os.Stdout, a); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		n = _tuple[0];
		err = _tuple[1];
		/* */ $s = 2; case 2:
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Println }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Println = Println;
	Sprintln = function(a) {
		var $ptr, _r$2, a, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrint(a, true, true); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = $bytesToString(p.buf);
		p.free();
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintln }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintln = Sprintln;
	getField = function(v, i) {
		var $ptr, _r$2, _r$3, i, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r$2 = v.Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		val = _r$2;
		/* */ if ((val.Kind() === 20) && !val.IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((val.Kind() === 20) && !val.IsNil()) { */ case 2:
			_r$3 = val.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			val = _r$3;
		/* } */ case 3:
		return val;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getField }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	tooLarge = function(x) {
		var $ptr, x;
		return x > 1000000 || x < -1000000;
	};
	parsenum = function(s, start, end) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, end, isnum, newi, num, s, start;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tmp = 0;
			_tmp$1 = false;
			_tmp$2 = end;
			num = _tmp;
			isnum = _tmp$1;
			newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (true) {
			if (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }
			if (tooLarge(num)) {
				_tmp$3 = 0;
				_tmp$4 = false;
				_tmp$5 = end;
				num = _tmp$3;
				isnum = _tmp$4;
				newi = _tmp$5;
				return [num, isnum, newi];
			}
			num = ($imul(num, 10)) + ((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var $ptr, _r$2, _r$3, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		p = this;
		if (!v.IsValid()) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
			return;
		}
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		_r$2 = v.Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.unknownType }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.erroring = true;
		p.add(37);
		p.add(33);
		p.add(verb);
		p.add(40);
		/* */ if (!($interfaceIsEqual(p.arg, $ifaceNil))) { $s = 1; continue; }
		/* */ if (p.value.IsValid()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(p.arg, $ifaceNil))) { */ case 1:
			_r$2 = reflect.TypeOf(p.arg).String(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			p.add(61);
			_r$4 = p.printArg(p.arg, 118, 0); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			$s = 4; continue;
		/* } else if (p.value.IsValid()) { */ case 2:
			_r$5 = p.value.Type().String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$5); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			p.add(61);
			_r$7 = p.printValue(p.value, 118, 0); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
			$s = 4; continue;
		/* } else { */ case 3:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
		/* } */ case 4:
		p.add(41);
		p.erroring = false;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.badVerb }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 116 || _ref === 118) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_ref === 116 || _ref === 118) { */ case 1:
			p.fmt.fmt_boolean(v);
			$s = 3; continue;
		/* } else { */ case 2:
			$r = p.badVerb(verb); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBool }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmtC = function(c) {
		var $ptr, c, p, r, w, x;
		p = this;
		r = ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0);
		if (!((x = new $Int64(0, r), (x.$high === c.$high && x.$low === c.$low)))) {
			r = 65533;
		}
		w = utf8.EncodeRune($subslice(new sliceType(p.runeBuf), 0, 4), r);
		p.fmt.pad($subslice(new sliceType(p.runeBuf), 0, w));
	};
	pp.prototype.fmtC = function(c) { return this.$val.fmtC(c); };
	pp.ptr.prototype.fmtInt64 = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 98) { $s = 1; continue; }
		/* */ if (_ref === 99) { $s = 2; continue; }
		/* */ if (_ref === 100 || _ref === 118) { $s = 3; continue; }
		/* */ if (_ref === 111) { $s = 4; continue; }
		/* */ if (_ref === 113) { $s = 5; continue; }
		/* */ if (_ref === 120) { $s = 6; continue; }
		/* */ if (_ref === 85) { $s = 7; continue; }
		/* */ if (_ref === 88) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (_ref === 98) { */ case 1:
			p.fmt.integer(v, new $Uint64(0, 2), true, "0123456789abcdef");
			$s = 10; continue;
		/* } else if (_ref === 99) { */ case 2:
			p.fmtC(v);
			$s = 10; continue;
		/* } else if (_ref === 100 || _ref === 118) { */ case 3:
			p.fmt.integer(v, new $Uint64(0, 10), true, "0123456789abcdef");
			$s = 10; continue;
		/* } else if (_ref === 111) { */ case 4:
			p.fmt.integer(v, new $Uint64(0, 8), true, "0123456789abcdef");
			$s = 10; continue;
		/* } else if (_ref === 113) { */ case 5:
			/* */ if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 11:
				p.fmt.fmt_qc(v);
				$s = 13; continue;
			/* } else { */ case 12:
				$r = p.badVerb(verb); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 13:
			$s = 10; continue;
		/* } else if (_ref === 120) { */ case 6:
			p.fmt.integer(v, new $Uint64(0, 16), true, "0123456789abcdef");
			$s = 10; continue;
		/* } else if (_ref === 85) { */ case 7:
			p.fmtUnicode(v);
			$s = 10; continue;
		/* } else if (_ref === 88) { */ case 8:
			p.fmt.integer(v, new $Uint64(0, 16), true, "0123456789ABCDEF");
			$s = 10; continue;
		/* } else { */ case 9:
			$r = p.badVerb(verb); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 10:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtInt64 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtInt64 = function(v, verb) { return this.$val.fmtInt64(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var $ptr, leading0x, p, sharp, v;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789abcdef");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtUnicode = function(v) {
		var $ptr, p, prec, precPresent, sharp, v;
		p = this;
		precPresent = p.fmt.fmtFlags.precPresent;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = false;
		prec = p.fmt.prec;
		if (!precPresent) {
			p.fmt.prec = 4;
			p.fmt.fmtFlags.precPresent = true;
		}
		p.fmt.fmtFlags.unicode = true;
		p.fmt.fmtFlags.uniQuote = sharp;
		p.fmt.integer(v, new $Uint64(0, 16), false, "0123456789ABCDEF");
		p.fmt.fmtFlags.unicode = false;
		p.fmt.fmtFlags.uniQuote = false;
		p.fmt.prec = prec;
		p.fmt.fmtFlags.precPresent = precPresent;
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmtUnicode = function(v) { return this.$val.fmtUnicode(v); };
	pp.ptr.prototype.fmtUint64 = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 98) { $s = 1; continue; }
		/* */ if (_ref === 99) { $s = 2; continue; }
		/* */ if (_ref === 100) { $s = 3; continue; }
		/* */ if (_ref === 118) { $s = 4; continue; }
		/* */ if (_ref === 111) { $s = 5; continue; }
		/* */ if (_ref === 113) { $s = 6; continue; }
		/* */ if (_ref === 120) { $s = 7; continue; }
		/* */ if (_ref === 88) { $s = 8; continue; }
		/* */ if (_ref === 85) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_ref === 98) { */ case 1:
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 2), false, "0123456789abcdef");
			$s = 11; continue;
		/* } else if (_ref === 99) { */ case 2:
			p.fmtC(new $Int64(v.$high, v.$low));
			$s = 11; continue;
		/* } else if (_ref === 100) { */ case 3:
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 10), false, "0123456789abcdef");
			$s = 11; continue;
		/* } else if (_ref === 118) { */ case 4:
			if (p.fmt.fmtFlags.sharpV) {
				p.fmt0x64(v, true);
			} else {
				p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 10), false, "0123456789abcdef");
			}
			$s = 11; continue;
		/* } else if (_ref === 111) { */ case 5:
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 8), false, "0123456789abcdef");
			$s = 11; continue;
		/* } else if (_ref === 113) { */ case 6:
			/* */ if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 12:
				p.fmt.fmt_qc(new $Int64(v.$high, v.$low));
				$s = 14; continue;
			/* } else { */ case 13:
				$r = p.badVerb(verb); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 14:
			$s = 11; continue;
		/* } else if (_ref === 120) { */ case 7:
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789abcdef");
			$s = 11; continue;
		/* } else if (_ref === 88) { */ case 8:
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789ABCDEF");
			$s = 11; continue;
		/* } else if (_ref === 85) { */ case 9:
			p.fmtUnicode(new $Int64(v.$high, v.$low));
			$s = 11; continue;
		/* } else { */ case 10:
			$r = p.badVerb(verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 11:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtUint64 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtUint64 = function(v, verb) { return this.$val.fmtUint64(v, verb); };
	pp.ptr.prototype.fmtFloat32 = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 98) { $s = 1; continue; }
		/* */ if (_ref === 101) { $s = 2; continue; }
		/* */ if (_ref === 69) { $s = 3; continue; }
		/* */ if (_ref === 102 || _ref === 70) { $s = 4; continue; }
		/* */ if (_ref === 103 || _ref === 118) { $s = 5; continue; }
		/* */ if (_ref === 71) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_ref === 98) { */ case 1:
			p.fmt.fmt_fb32(v);
			$s = 8; continue;
		/* } else if (_ref === 101) { */ case 2:
			p.fmt.fmt_e32(v);
			$s = 8; continue;
		/* } else if (_ref === 69) { */ case 3:
			p.fmt.fmt_E32(v);
			$s = 8; continue;
		/* } else if (_ref === 102 || _ref === 70) { */ case 4:
			p.fmt.fmt_f32(v);
			$s = 8; continue;
		/* } else if (_ref === 103 || _ref === 118) { */ case 5:
			p.fmt.fmt_g32(v);
			$s = 8; continue;
		/* } else if (_ref === 71) { */ case 6:
			p.fmt.fmt_G32(v);
			$s = 8; continue;
		/* } else { */ case 7:
			$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat32 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat32 = function(v, verb) { return this.$val.fmtFloat32(v, verb); };
	pp.ptr.prototype.fmtFloat64 = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 98) { $s = 1; continue; }
		/* */ if (_ref === 101) { $s = 2; continue; }
		/* */ if (_ref === 69) { $s = 3; continue; }
		/* */ if (_ref === 102 || _ref === 70) { $s = 4; continue; }
		/* */ if (_ref === 103 || _ref === 118) { $s = 5; continue; }
		/* */ if (_ref === 71) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_ref === 98) { */ case 1:
			p.fmt.fmt_fb64(v);
			$s = 8; continue;
		/* } else if (_ref === 101) { */ case 2:
			p.fmt.fmt_e64(v);
			$s = 8; continue;
		/* } else if (_ref === 69) { */ case 3:
			p.fmt.fmt_E64(v);
			$s = 8; continue;
		/* } else if (_ref === 102 || _ref === 70) { */ case 4:
			p.fmt.fmt_f64(v);
			$s = 8; continue;
		/* } else if (_ref === 103 || _ref === 118) { */ case 5:
			p.fmt.fmt_g64(v);
			$s = 8; continue;
		/* } else if (_ref === 71) { */ case 6:
			p.fmt.fmt_G64(v);
			$s = 8; continue;
		/* } else { */ case 7:
			$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat64 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat64 = function(v, verb) { return this.$val.fmtFloat64(v, verb); };
	pp.ptr.prototype.fmtComplex64 = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) { $s = 1; continue; }
		/* */ if (_ref === 118) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) { */ case 1:
			p.fmt.fmt_c64(v, verb);
			$s = 4; continue;
		/* } else if (_ref === 118) { */ case 2:
			p.fmt.fmt_c64(v, 103);
			$s = 4; continue;
		/* } else { */ case 3:
			$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex64 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex64 = function(v, verb) { return this.$val.fmtComplex64(v, verb); };
	pp.ptr.prototype.fmtComplex128 = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) { $s = 1; continue; }
		/* */ if (_ref === 118) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) { */ case 1:
			p.fmt.fmt_c128(v, verb);
			$s = 4; continue;
		/* } else if (_ref === 118) { */ case 2:
			p.fmt.fmt_c128(v, 103);
			$s = 4; continue;
		/* } else { */ case 3:
			$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex128 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex128 = function(v, verb) { return this.$val.fmtComplex128(v, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 118) { $s = 1; continue; }
		/* */ if (_ref === 115) { $s = 2; continue; }
		/* */ if (_ref === 120) { $s = 3; continue; }
		/* */ if (_ref === 88) { $s = 4; continue; }
		/* */ if (_ref === 113) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_ref === 118) { */ case 1:
			if (p.fmt.fmtFlags.sharpV) {
				p.fmt.fmt_q(v);
			} else {
				p.fmt.fmt_s(v);
			}
			$s = 7; continue;
		/* } else if (_ref === 115) { */ case 2:
			p.fmt.fmt_s(v);
			$s = 7; continue;
		/* } else if (_ref === 120) { */ case 3:
			p.fmt.fmt_sx(v, "0123456789abcdef");
			$s = 7; continue;
		/* } else if (_ref === 88) { */ case 4:
			p.fmt.fmt_sx(v, "0123456789ABCDEF");
			$s = 7; continue;
		/* } else if (_ref === 113) { */ case 5:
			p.fmt.fmt_q(v);
			$s = 7; continue;
		/* } else { */ case 6:
			$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtString }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typ, depth) {
		var $ptr, _i, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, c, depth, i, p, typ, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; depth = $f.depth; i = $f.i; p = $f.p; typ = $f.typ; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ((verb === 118) || (verb === 100)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((verb === 118) || (verb === 100)) { */ case 1:
			/* */ if (p.fmt.fmtFlags.sharpV) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p.fmt.fmtFlags.sharpV) { */ case 3:
				/* */ if (v === sliceType.nil) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (v === sliceType.nil) { */ case 6:
					/* */ if ($interfaceIsEqual(typ, $ifaceNil)) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if ($interfaceIsEqual(typ, $ifaceNil)) { */ case 8:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("[]byte(nil)");
						$s = 10; continue;
					/* } else { */ case 9:
						_r$2 = typ.String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilParenBytes);
					/* } */ case 10:
					return;
				/* } */ case 7:
				/* */ if ($interfaceIsEqual(typ, $ifaceNil)) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ($interfaceIsEqual(typ, $ifaceNil)) { */ case 13:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(bytesBytes);
					$s = 15; continue;
				/* } else { */ case 14:
					_r$4 = typ.String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$5 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$4); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$5;
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				/* } */ case 15:
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
			/* } */ case 5:
			_ref = v;
			_i = 0;
			/* while (true) { */ case 18:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 19; continue; }
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (i > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
					} else {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
					}
				}
				_r$6 = p.printArg(new $Uint8(c), 118, depth + 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				_i++;
			/* } */ $s = 18; continue; case 19:
			if (p.fmt.fmtFlags.sharpV) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
			} else {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
			}
			return;
		/* } */ case 2:
		_ref$1 = verb;
		/* */ if (_ref$1 === 115) { $s = 21; continue; }
		/* */ if (_ref$1 === 120) { $s = 22; continue; }
		/* */ if (_ref$1 === 88) { $s = 23; continue; }
		/* */ if (_ref$1 === 113) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (_ref$1 === 115) { */ case 21:
			p.fmt.fmt_s($bytesToString(v));
			$s = 26; continue;
		/* } else if (_ref$1 === 120) { */ case 22:
			p.fmt.fmt_bx(v, "0123456789abcdef");
			$s = 26; continue;
		/* } else if (_ref$1 === 88) { */ case 23:
			p.fmt.fmt_bx(v, "0123456789ABCDEF");
			$s = 26; continue;
		/* } else if (_ref$1 === 113) { */ case 24:
			p.fmt.fmt_q($bytesToString(v));
			$s = 26; continue;
		/* } else { */ case 25:
			$r = p.badVerb(verb); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 26:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBytes }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.depth = depth; $f.i = i; $f.p = p; $f.typ = typ; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBytes = function(v, verb, typ, depth) { return this.$val.fmtBytes(v, verb, typ, depth); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var $ptr, _r$2, _r$3, _ref, _ref$1, p, u, use0x64, value, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; p = $f.p; u = $f.u; use0x64 = $f.use0x64; value = $f.value; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = value;
		p = this;
		use0x64 = true;
		_ref = verb;
		/* */ if (_ref === 112 || _ref === 118) { $s = 1; continue; }
		/* */ if (_ref === 98 || _ref === 100 || _ref === 111 || _ref === 120 || _ref === 88) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_ref === 112 || _ref === 118) { */ case 1:
			$s = 4; continue;
		/* } else if (_ref === 98 || _ref === 100 || _ref === 111 || _ref === 120 || _ref === 88) { */ case 2:
			use0x64 = false;
			$s = 4; continue;
		/* } else { */ case 3:
			$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 4:
		u = 0;
		_ref$1 = value.Kind();
		/* */ if (_ref$1 === 18 || _ref$1 === 19 || _ref$1 === 21 || _ref$1 === 22 || _ref$1 === 23 || _ref$1 === 26) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_ref$1 === 18 || _ref$1 === 19 || _ref$1 === 21 || _ref$1 === 22 || _ref$1 === 23 || _ref$1 === 26) { */ case 6:
			u = value.Pointer();
			$s = 8; continue;
		/* } else { */ case 7:
			$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 8:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 10; continue; }
		/* */ if ((verb === 118) && (u === 0)) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 10:
			p.add(40);
			_r$2 = value.Type().String(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			p.add(41);
			p.add(40);
			if (u === 0) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilBytes);
			} else {
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), true);
			}
			p.add(41);
			$s = 13; continue;
		/* } else if ((verb === 118) && (u === 0)) { */ case 11:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
			$s = 13; continue;
		/* } else { */ case 12:
			/* */ if (use0x64) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (use0x64) { */ case 16:
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), !p.fmt.fmtFlags.sharp);
				$s = 18; continue;
			/* } else { */ case 17:
				$r = p.fmtUint64(new $Uint64(0, u.constructor === Number ? u : 1), verb); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 18:
		/* } */ case 13:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtPointer }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f.p = p; $f.u = u; $f.use0x64 = use0x64; $f.value = value; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb) {
		var $ptr, _r$2, _r$3, arg, err, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; arg = $f.arg; err = $f.err; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		err = $recover();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r$2 = reflect.ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
			/* */ if ((v.Kind() === 22) && v.IsNil()) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((v.Kind() === 22) && v.IsNil()) { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
				return;
			/* } */ case 5:
			if (p.panicking) {
				$panic(err);
			}
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(percentBangBytes);
			p.add(verb);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(panicBytes);
			p.panicking = true;
			_r$3 = p.printArg(err, 118, 0); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			p.panicking = false;
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.catchPanic }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.arg = arg; $f.err = err; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };
	pp.ptr.prototype.clearSpecialFlags = function() {
		var $ptr, p, plusV, sharpV;
		plusV = false;
		sharpV = false;
		p = this;
		plusV = p.fmt.fmtFlags.plusV;
		if (plusV) {
			p.fmt.fmtFlags.plus = true;
			p.fmt.fmtFlags.plusV = false;
		}
		sharpV = p.fmt.fmtFlags.sharpV;
		if (sharpV) {
			p.fmt.fmtFlags.sharp = true;
			p.fmt.fmtFlags.sharpV = false;
		}
		return [plusV, sharpV];
	};
	pp.prototype.clearSpecialFlags = function() { return this.$val.clearSpecialFlags(); };
	pp.ptr.prototype.restoreSpecialFlags = function(plusV, sharpV) {
		var $ptr, p, plusV, sharpV;
		p = this;
		if (plusV) {
			p.fmt.fmtFlags.plus = false;
			p.fmt.fmtFlags.plusV = true;
		}
		if (sharpV) {
			p.fmt.fmtFlags.sharp = false;
			p.fmt.fmtFlags.sharpV = true;
		}
	};
	pp.prototype.restoreSpecialFlags = function(plusV, sharpV) { return this.$val.restoreSpecialFlags(plusV, sharpV); };
	pp.ptr.prototype.handleMethods = function(verb, depth) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, depth, formatter, handled, ok, ok$1, p, stringer, v, v$1, verb, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; depth = $f.depth; formatter = $f.formatter; handled = $f.handled; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; stringer = $f.stringer; v = $f.v; v$1 = $f.v$1; verb = $f.verb; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		handled = false;
		p = this;
		if (p.erroring) {
			return handled;
		}
		_tuple = $assertType(p.arg, Formatter, true);
		formatter = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			handled = true;
			_tuple$1 = p.clearSpecialFlags();
			$deferred.push([$methodVal(p, "restoreSpecialFlags"), [_tuple$1[0], _tuple$1[1]]]);
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
			$r = formatter.Format(p, verb); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return handled;
		/* } */ case 2:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 4:
			_tuple$2 = $assertType(p.arg, GoStringer, true);
			stringer = _tuple$2[0];
			ok$1 = _tuple$2[1];
			/* */ if (ok$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ok$1) { */ case 7:
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
				_r$2 = stringer.GoString(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r$2); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return handled;
			/* } */ case 8:
			$s = 6; continue;
		/* } else { */ case 5:
			_ref = verb;
			/* */ if (_ref === 118 || _ref === 115 || _ref === 120 || _ref === 88 || _ref === 113) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (_ref === 118 || _ref === 115 || _ref === 120 || _ref === 88 || _ref === 113) { */ case 11:
				_ref$1 = p.arg;
				/* */ if ($assertType(_ref$1, $error, true)[1]) { $s = 13; continue; }
				/* */ if ($assertType(_ref$1, Stringer, true)[1]) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if ($assertType(_ref$1, $error, true)[1]) { */ case 13:
					v = _ref$1;
					handled = true;
					$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
					_r$3 = v.Error(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = p.printArg(new $String(_r$3), verb, depth); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
					return handled;
				/* } else if ($assertType(_ref$1, Stringer, true)[1]) { */ case 14:
					v$1 = _ref$1;
					handled = true;
					$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
					_r$5 = v$1.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$6 = p.printArg(new $String(_r$5), verb, depth); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$6;
					return handled;
				/* } */ case 15:
			/* } */ case 12:
		/* } */ case 6:
		handled = false;
		return handled;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  handled; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: pp.ptr.prototype.handleMethods }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.depth = depth; $f.formatter = formatter; $f.handled = handled; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.stringer = stringer; $f.v = v; $f.v$1 = v$1; $f.verb = verb; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	pp.prototype.handleMethods = function(verb, depth) { return this.$val.handleMethods(verb, depth); };
	pp.ptr.prototype.printArg = function(arg, verb, depth) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _ref$1, arg, depth, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$19, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, handled, p, verb, wasString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _ref$1 = $f._ref$1; arg = $f.arg; depth = $f.depth; f = $f.f; f$1 = $f.f$1; f$10 = $f.f$10; f$11 = $f.f$11; f$12 = $f.f$12; f$13 = $f.f$13; f$14 = $f.f$14; f$15 = $f.f$15; f$16 = $f.f$16; f$17 = $f.f$17; f$18 = $f.f$18; f$19 = $f.f$19; f$2 = $f.f$2; f$3 = $f.f$3; f$4 = $f.f$4; f$5 = $f.f$5; f$6 = $f.f$6; f$7 = $f.f$7; f$8 = $f.f$8; f$9 = $f.f$9; handled = $f.handled; p = $f.p; verb = $f.verb; wasString = $f.wasString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wasString = false;
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 1:
			/* */ if ((verb === 84) || (verb === 118)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((verb === 84) || (verb === 118)) { */ case 3:
				p.fmt.pad(nilAngleBytes);
				$s = 5; continue;
			/* } else { */ case 4:
				$r = p.badVerb(verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			wasString = false;
			return wasString;
		/* } */ case 2:
		_ref = verb;
		/* */ if (_ref === 84) { $s = 7; continue; }
		/* */ if (_ref === 112) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (_ref === 84) { */ case 7:
			_r$2 = reflect.TypeOf(arg).String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = p.printArg(new $String(_r$2), 115, 0); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			wasString = false;
			return wasString;
		/* } else if (_ref === 112) { */ case 8:
			_r$4 = reflect.ValueOf(arg); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$r = p.fmtPointer(_r$4, verb); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			wasString = false;
			return wasString;
		/* } */ case 9:
		_ref$1 = arg;
		/* */ if ($assertType(_ref$1, $Bool, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref$1, $Float32, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref$1, $Float64, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref$1, $Complex64, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref$1, $Complex128, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref$1, $Int, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref$1, $Int8, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref$1, $Int16, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref$1, $Int32, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref$1, $Int64, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref$1, $Uint, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref$1, $Uint8, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref$1, $Uint16, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref$1, $Uint32, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref$1, $Uint64, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref$1, $Uintptr, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref$1, $String, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref$1, sliceType, true)[1]) { $s = 31; continue; }
		/* */ if ($assertType(_ref$1, reflect.Value, true)[1]) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if ($assertType(_ref$1, $Bool, true)[1]) { */ case 14:
			f = _ref$1.$val;
			$r = p.fmtBool(f, verb); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 34; continue;
		/* } else if ($assertType(_ref$1, $Float32, true)[1]) { */ case 15:
			f$1 = _ref$1.$val;
			$r = p.fmtFloat32(f$1, verb); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 34; continue;
		/* } else if ($assertType(_ref$1, $Float64, true)[1]) { */ case 16:
			f$2 = _ref$1.$val;
			$r = p.fmtFloat64(f$2, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 34; continue;
		/* } else if ($assertType(_ref$1, $Complex64, true)[1]) { */ case 17:
			f$3 = _ref$1.$val;
			$r = p.fmtComplex64(f$3, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 34; continue;
		/* } else if ($assertType(_ref$1, $Complex128, true)[1]) { */ case 18:
			f$4 = _ref$1.$val;
			$r = p.fmtComplex128(f$4, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 34; continue;
		/* } else if ($assertType(_ref$1, $Int, true)[1]) { */ case 19:
			f$5 = _ref$1.$val;
			$r = p.fmtInt64(new $Int64(0, f$5), verb); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 34; continue;
		/* } else if ($assertType(_ref$1, $Int8, true)[1]) { */ case 20:
			f$6 = _ref$1.$val;
			$r = p.fmtInt64(new $Int64(0, f$6), verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 34; continue;
		/* } else if ($assertType(_ref$1, $Int16, true)[1]) { */ case 21:
			f$7 = _ref$1.$val;
			$r = p.fmtInt64(new $Int64(0, f$7), verb); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 34; continue;
		/* } else if ($assertType(_ref$1, $Int32, true)[1]) { */ case 22:
			f$8 = _ref$1.$val;
			$r = p.fmtInt64(new $Int64(0, f$8), verb); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 34; continue;
		/* } else if ($assertType(_ref$1, $Int64, true)[1]) { */ case 23:
			f$9 = _ref$1.$val;
			$r = p.fmtInt64(f$9, verb); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 34; continue;
		/* } else if ($assertType(_ref$1, $Uint, true)[1]) { */ case 24:
			f$10 = _ref$1.$val;
			$r = p.fmtUint64(new $Uint64(0, f$10), verb); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 34; continue;
		/* } else if ($assertType(_ref$1, $Uint8, true)[1]) { */ case 25:
			f$11 = _ref$1.$val;
			$r = p.fmtUint64(new $Uint64(0, f$11), verb); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 34; continue;
		/* } else if ($assertType(_ref$1, $Uint16, true)[1]) { */ case 26:
			f$12 = _ref$1.$val;
			$r = p.fmtUint64(new $Uint64(0, f$12), verb); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 34; continue;
		/* } else if ($assertType(_ref$1, $Uint32, true)[1]) { */ case 27:
			f$13 = _ref$1.$val;
			$r = p.fmtUint64(new $Uint64(0, f$13), verb); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 34; continue;
		/* } else if ($assertType(_ref$1, $Uint64, true)[1]) { */ case 28:
			f$14 = _ref$1.$val;
			$r = p.fmtUint64(f$14, verb); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 34; continue;
		/* } else if ($assertType(_ref$1, $Uintptr, true)[1]) { */ case 29:
			f$15 = _ref$1.$val;
			$r = p.fmtUint64(new $Uint64(0, f$15.constructor === Number ? f$15 : 1), verb); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 34; continue;
		/* } else if ($assertType(_ref$1, $String, true)[1]) { */ case 30:
			f$16 = _ref$1.$val;
			$r = p.fmtString(f$16, verb); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			wasString = (verb === 115) || (verb === 118);
			$s = 34; continue;
		/* } else if ($assertType(_ref$1, sliceType, true)[1]) { */ case 31:
			f$17 = _ref$1.$val;
			$r = p.fmtBytes(f$17, verb, $ifaceNil, depth); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			wasString = verb === 115;
			$s = 34; continue;
		/* } else if ($assertType(_ref$1, reflect.Value, true)[1]) { */ case 32:
			f$18 = _ref$1.$val;
			_r$5 = p.printReflectValue(f$18, verb, depth); /* */ $s = 53; case 53: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			wasString = _r$5;
			/* */ $s = 54; case 54:
			return wasString;
		/* } else { */ case 33:
			f$19 = _ref$1;
			_r$6 = p.handleMethods(verb, depth); /* */ $s = 55; case 55: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			handled = _r$6;
			/* */ if (handled) { $s = 56; continue; }
			/* */ $s = 57; continue;
			/* if (handled) { */ case 56:
				wasString = false;
				return wasString;
			/* } */ case 57:
			_r$7 = reflect.ValueOf(arg); /* */ $s = 58; case 58: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = p.printReflectValue(_r$7, verb, depth); /* */ $s = 59; case 59: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			wasString = _r$8;
			/* */ $s = 60; case 60:
			return wasString;
		/* } */ case 34:
		p.arg = $ifaceNil;
		return wasString;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printArg }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._ref$1 = _ref$1; $f.arg = arg; $f.depth = depth; $f.f = f; $f.f$1 = f$1; $f.f$10 = f$10; $f.f$11 = f$11; $f.f$12 = f$12; $f.f$13 = f$13; $f.f$14 = f$14; $f.f$15 = f$15; $f.f$16 = f$16; $f.f$17 = f$17; $f.f$18 = f$18; $f.f$19 = f$19; $f.f$2 = f$2; $f.f$3 = f$3; $f.f$4 = f$4; $f.f$5 = f$5; $f.f$6 = f$6; $f.f$7 = f$7; $f.f$8 = f$8; $f.f$9 = f$9; $f.handled = handled; $f.p = p; $f.verb = verb; $f.wasString = wasString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printArg = function(arg, verb, depth) { return this.$val.printArg(arg, verb, depth); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, depth, handled, p, value, verb, wasString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; depth = $f.depth; handled = $f.handled; p = $f.p; value = $f.value; verb = $f.verb; wasString = $f.wasString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wasString = false;
		value = value;
		p = this;
		/* */ if (!value.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!value.IsValid()) { */ case 1:
			/* */ if ((verb === 84) || (verb === 118)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((verb === 84) || (verb === 118)) { */ case 3:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
				$s = 5; continue;
			/* } else { */ case 4:
				$r = p.badVerb(verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			wasString = false;
			return wasString;
		/* } */ case 2:
		_ref = verb;
		/* */ if (_ref === 84) { $s = 7; continue; }
		/* */ if (_ref === 112) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (_ref === 84) { */ case 7:
			_r$2 = value.Type().String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = p.printArg(new $String(_r$2), 115, 0); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			wasString = false;
			return wasString;
		/* } else if (_ref === 112) { */ case 8:
			$r = p.fmtPointer(value, verb); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			wasString = false;
			return wasString;
		/* } */ case 9:
		p.arg = $ifaceNil;
		/* */ if (value.CanInterface()) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (value.CanInterface()) { */ case 13:
			_r$4 = value.Interface(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			p.arg = _r$4;
		/* } */ case 14:
		_r$5 = p.handleMethods(verb, depth); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		handled = _r$5;
		/* */ if (handled) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (handled) { */ case 17:
			wasString = false;
			return wasString;
		/* } */ case 18:
		_r$6 = p.printReflectValue(value, verb, depth); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		wasString = _r$6;
		/* */ $s = 20; case 20:
		return wasString;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printValue }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f.depth = depth; $f.handled = handled; $f.p = p; $f.value = value; $f.verb = verb; $f.wasString = wasString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	pp.ptr.prototype.printReflectValue = function(value, verb, depth) {
		var $ptr, _i, _i$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _v, a, bytes, depth, f, f$1, i, i$1, i$2, i$3, key, keys, oldValue, p, t, typ, v, v$1, value, value$1, verb, wasString, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _v = $f._v; a = $f.a; bytes = $f.bytes; depth = $f.depth; f = $f.f; f$1 = $f.f$1; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; key = $f.key; keys = $f.keys; oldValue = $f.oldValue; p = $f.p; t = $f.t; typ = $f.typ; v = $f.v; v$1 = $f.v$1; value = $f.value; value$1 = $f.value$1; verb = $f.verb; wasString = $f.wasString; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wasString = false;
		value = value;
		p = this;
		oldValue = p.value;
		p.value = value;
		f = value;
		_ref = f.Kind();
		/* */ if (_ref === 0) { $s = 1; continue; }
		/* */ if (_ref === 1) { $s = 2; continue; }
		/* */ if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { $s = 3; continue; }
		/* */ if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { $s = 4; continue; }
		/* */ if (_ref === 13 || _ref === 14) { $s = 5; continue; }
		/* */ if (_ref === 15 || _ref === 16) { $s = 6; continue; }
		/* */ if (_ref === 24) { $s = 7; continue; }
		/* */ if (_ref === 21) { $s = 8; continue; }
		/* */ if (_ref === 25) { $s = 9; continue; }
		/* */ if (_ref === 20) { $s = 10; continue; }
		/* */ if (_ref === 17 || _ref === 23) { $s = 11; continue; }
		/* */ if (_ref === 22) { $s = 12; continue; }
		/* */ if (_ref === 18 || _ref === 19 || _ref === 26) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* switch (0) { default: if (_ref === 0) { */ case 1:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<invalid reflect.Value>");
			$s = 15; continue;
		/* } else if (_ref === 1) { */ case 2:
			$r = p.fmtBool(f.Bool(), verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 15; continue;
		/* } else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { */ case 3:
			$r = p.fmtInt64(f.Int(), verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 15; continue;
		/* } else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { */ case 4:
			$r = p.fmtUint64(f.Uint(), verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 15; continue;
		/* } else if (_ref === 13 || _ref === 14) { */ case 5:
			_r$2 = f.Type().Size(); /* */ $s = 22; case 22: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2 === 4) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (_r$2 === 4) { */ case 19:
				$r = p.fmtFloat32($fround(f.Float()), verb); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 21; continue;
			/* } else { */ case 20:
				$r = p.fmtFloat64(f.Float(), verb); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 21:
			$s = 15; continue;
		/* } else if (_ref === 15 || _ref === 16) { */ case 6:
			_r$3 = f.Type().Size(); /* */ $s = 28; case 28: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3 === 8) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (_r$3 === 8) { */ case 25:
				$r = p.fmtComplex64((x = f.Complex(), new $Complex64(x.$real, x.$imag)), verb); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 27; continue;
			/* } else { */ case 26:
				$r = p.fmtComplex128(f.Complex(), verb); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 27:
			$s = 15; continue;
		/* } else if (_ref === 24) { */ case 7:
			_r$4 = f.String(); /* */ $s = 31; case 31: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$r = p.fmtString(_r$4, verb); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 15; continue;
		/* } else if (_ref === 21) { */ case 8:
			/* */ if (p.fmt.fmtFlags.sharpV) { $s = 33; continue; }
			/* */ $s = 34; continue;
			/* if (p.fmt.fmtFlags.sharpV) { */ case 33:
				_r$5 = f.Type().String(); /* */ $s = 36; case 36: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$5); /* */ $s = 37; case 37: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				if (f.IsNil()) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
					/* break; */ $s = 15; continue;
				}
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				$s = 35; continue;
			/* } else { */ case 34:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(mapBytes);
			/* } */ case 35:
			_r$7 = f.MapKeys(); /* */ $s = 38; case 38: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			keys = _r$7;
			_ref$1 = keys;
			_i = 0;
			/* while (true) { */ case 39:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 40; continue; }
				i = _i;
				key = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				if (i > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
					} else {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
					}
				}
				_r$8 = p.printValue(key, verb, depth + 1 >> 0); /* */ $s = 41; case 41: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
				_r$9 = f.MapIndex(key); /* */ $s = 42; case 42: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$10 = p.printValue(_r$9, verb, depth + 1 >> 0); /* */ $s = 43; case 43: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$10;
				_i++;
			/* } */ $s = 39; continue; case 40:
			if (p.fmt.fmtFlags.sharpV) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
			} else {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
			}
			$s = 15; continue;
		/* } else if (_ref === 25) { */ case 9:
			/* */ if (p.fmt.fmtFlags.sharpV) { $s = 44; continue; }
			/* */ $s = 45; continue;
			/* if (p.fmt.fmtFlags.sharpV) { */ case 44:
				_r$11 = value.Type().String(); /* */ $s = 46; case 46: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$12 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$11); /* */ $s = 47; case 47: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$12;
			/* } */ case 45:
			p.add(123);
			v = f;
			t = v.Type();
			i$1 = 0;
			/* while (true) { */ case 48:
				/* if (!(i$1 < v.NumField())) { break; } */ if(!(i$1 < v.NumField())) { $s = 49; continue; }
				if (i$1 > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
					} else {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
					}
				}
				/* */ if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { $s = 50; continue; }
				/* */ $s = 51; continue;
				/* if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { */ case 50:
					_r$13 = t.Field(i$1); /* */ $s = 52; case 52: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					f$1 = $clone(_r$13, reflect.StructField);
					/* */ if (!(f$1.Name === "")) { $s = 53; continue; }
					/* */ $s = 54; continue;
					/* if (!(f$1.Name === "")) { */ case 53:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(f$1.Name);
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
					/* } */ case 54:
				/* } */ case 51:
				_r$14 = getField(v, i$1); /* */ $s = 55; case 55: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_r$15 = p.printValue(_r$14, verb, depth + 1 >> 0); /* */ $s = 56; case 56: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$15;
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 48; continue; case 49:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
			$s = 15; continue;
		/* } else if (_ref === 20) { */ case 10:
			_r$16 = f.Elem(); /* */ $s = 57; case 57: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			value$1 = _r$16;
			/* */ if (!value$1.IsValid()) { $s = 58; continue; }
			/* */ $s = 59; continue;
			/* if (!value$1.IsValid()) { */ case 58:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 61; continue; }
				/* */ $s = 62; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 61:
					_r$17 = f.Type().String(); /* */ $s = 64; case 64: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					_r$18 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$17); /* */ $s = 65; case 65: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					_r$18;
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilParenBytes);
					$s = 63; continue;
				/* } else { */ case 62:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
				/* } */ case 63:
				$s = 60; continue;
			/* } else { */ case 59:
				_r$19 = p.printValue(value$1, verb, depth + 1 >> 0); /* */ $s = 66; case 66: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				wasString = _r$19;
			/* } */ case 60:
			$s = 15; continue;
		/* } else if (_ref === 17 || _ref === 23) { */ case 11:
			typ = f.Type();
			_r$20 = typ.Elem(); /* */ $s = 70; case 70: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_r$21 = _r$20.Kind(); /* */ $s = 71; case 71: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			if (!(_r$21 === 8)) { _v = false; $s = 69; continue s; }
			_r$22 = typ.Elem(); /* */ $s = 72; case 72: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			_v = $interfaceIsEqual(_r$22, byteType) || (verb === 115) || (verb === 113) || (verb === 120); case 69:
			/* */ if (_v) { $s = 67; continue; }
			/* */ $s = 68; continue;
			/* if (_v) { */ case 67:
				bytes = sliceType.nil;
				/* */ if (f.Kind() === 23) { $s = 73; continue; }
				/* */ if (f.CanAddr()) { $s = 74; continue; }
				/* */ $s = 75; continue;
				/* if (f.Kind() === 23) { */ case 73:
					_r$23 = f.Bytes(); /* */ $s = 77; case 77: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					bytes = _r$23;
					$s = 76; continue;
				/* } else if (f.CanAddr()) { */ case 74:
					_r$24 = f.Slice(0, f.Len()); /* */ $s = 78; case 78: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					_r$25 = _r$24.Bytes(); /* */ $s = 79; case 79: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					bytes = _r$25;
					$s = 76; continue;
				/* } else { */ case 75:
					bytes = $makeSlice(sliceType, f.Len());
					_ref$2 = bytes;
					_i$1 = 0;
					/* while (true) { */ case 80:
						/* if (!(_i$1 < _ref$2.$length)) { break; } */ if(!(_i$1 < _ref$2.$length)) { $s = 81; continue; }
						i$2 = _i$1;
						_r$26 = f.Index(i$2); /* */ $s = 82; case 82: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
						_r$27 = _r$26.Uint(); /* */ $s = 83; case 83: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
						((i$2 < 0 || i$2 >= bytes.$length) ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + i$2] = (_r$27.$low << 24 >>> 24));
						_i$1++;
					/* } */ $s = 80; continue; case 81:
				/* } */ case 76:
				$r = p.fmtBytes(bytes, verb, typ, depth); /* */ $s = 84; case 84: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				wasString = verb === 115;
				/* break; */ $s = 15; continue;
			/* } */ case 68:
			/* */ if (p.fmt.fmtFlags.sharpV) { $s = 85; continue; }
			/* */ $s = 86; continue;
			/* if (p.fmt.fmtFlags.sharpV) { */ case 85:
				_r$28 = value.Type().String(); /* */ $s = 88; case 88: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				_r$29 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$28); /* */ $s = 89; case 89: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				_r$29;
				if ((f.Kind() === 23) && f.IsNil()) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
					/* break; */ $s = 15; continue;
				}
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				$s = 87; continue;
			/* } else { */ case 86:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
			/* } */ case 87:
			i$3 = 0;
			/* while (true) { */ case 90:
				/* if (!(i$3 < f.Len())) { break; } */ if(!(i$3 < f.Len())) { $s = 91; continue; }
				if (i$3 > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
					} else {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
					}
				}
				_r$30 = f.Index(i$3); /* */ $s = 92; case 92: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				_r$31 = p.printValue(_r$30, verb, depth + 1 >> 0); /* */ $s = 93; case 93: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				_r$31;
				i$3 = i$3 + (1) >> 0;
			/* } */ $s = 90; continue; case 91:
			if (p.fmt.fmtFlags.sharpV) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
			} else {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
			}
			$s = 15; continue;
		/* } else if (_ref === 22) { */ case 12:
			v$1 = f.Pointer();
			/* */ if (!((v$1 === 0)) && (depth === 0)) { $s = 94; continue; }
			/* */ $s = 95; continue;
			/* if (!((v$1 === 0)) && (depth === 0)) { */ case 94:
				_r$32 = f.Elem(); /* */ $s = 96; case 96: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				a = _r$32;
				_ref$3 = a.Kind();
				/* */ if (_ref$3 === 17 || _ref$3 === 23) { $s = 97; continue; }
				/* */ if (_ref$3 === 25) { $s = 98; continue; }
				/* */ if (_ref$3 === 21) { $s = 99; continue; }
				/* */ $s = 100; continue;
				/* if (_ref$3 === 17 || _ref$3 === 23) { */ case 97:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
					_r$33 = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 101; case 101: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
					_r$33;
					/* break BigSwitch; */ $s = 15; continue s;
					$s = 100; continue;
				/* } else if (_ref$3 === 25) { */ case 98:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
					_r$34 = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 102; case 102: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
					_r$34;
					/* break BigSwitch; */ $s = 15; continue s;
					$s = 100; continue;
				/* } else if (_ref$3 === 21) { */ case 99:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
					_r$35 = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 103; case 103: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
					_r$35;
					/* break BigSwitch; */ $s = 15; continue s;
				/* } */ case 100:
			/* } */ case 95:
			$r = p.fmtPointer(value, verb); /* */ $s = 104; case 104: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 15; continue;
		/* } else if (_ref === 18 || _ref === 19 || _ref === 26) { */ case 13:
			$r = p.fmtPointer(value, verb); /* */ $s = 105; case 105: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 15; continue;
		/* } else { */ case 14:
			$r = p.unknownType(f); /* */ $s = 106; case 106: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } } */ case 15:
		p.value = oldValue;
		wasString = wasString;
		return wasString;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printReflectValue }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._v = _v; $f.a = a; $f.bytes = bytes; $f.depth = depth; $f.f = f; $f.f$1 = f$1; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.key = key; $f.keys = keys; $f.oldValue = oldValue; $f.p = p; $f.t = t; $f.typ = typ; $f.v = v; $f.v$1 = v$1; $f.value = value; $f.value$1 = value$1; $f.verb = verb; $f.wasString = wasString; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printReflectValue = function(value, verb, depth) { return this.$val.printReflectValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var $ptr, _tuple, a, argNum, isInt, newArgNum, num;
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		if (argNum < a.$length) {
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]), $Int, true);
			num = _tuple[0];
			isInt = _tuple[1];
			newArgNum = argNum + 1 >> 0;
			if (tooLarge(num)) {
				num = 0;
				isInt = false;
			}
		}
		return [num, isInt, newArgNum];
	};
	parseArgNumber = function(format) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, format, i, index, newi, ok, ok$1, wid, width;
		index = 0;
		wid = 0;
		ok = false;
		if (format.length < 3) {
			_tmp = 0;
			_tmp$1 = 1;
			_tmp$2 = false;
			index = _tmp;
			wid = _tmp$1;
			ok = _tmp$2;
			return [index, wid, ok];
		}
		i = 1;
		while (true) {
			if (!(i < format.length)) { break; }
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i);
				width = _tuple[0];
				ok$1 = _tuple[1];
				newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp$3 = 0;
					_tmp$4 = i + 1 >> 0;
					_tmp$5 = false;
					index = _tmp$3;
					wid = _tmp$4;
					ok = _tmp$5;
					return [index, wid, ok];
				}
				_tmp$6 = width - 1 >> 0;
				_tmp$7 = i + 1 >> 0;
				_tmp$8 = true;
				index = _tmp$6;
				wid = _tmp$7;
				ok = _tmp$8;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$9 = 0;
		_tmp$10 = 1;
		_tmp$11 = false;
		index = _tmp$9;
		wid = _tmp$10;
		ok = _tmp$11;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found, i, index, newArgNum, newi, numArgs, ok, p, wid;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum;
			_tmp$1 = i;
			_tmp$2 = false;
			newArgNum = _tmp;
			newi = _tmp$1;
			found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber(format.substring(i));
		index = _tuple[0];
		wid = _tuple[1];
		ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index;
			_tmp$4 = i + wid >> 0;
			_tmp$5 = true;
			newArgNum = _tmp$3;
			newi = _tmp$4;
			found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum;
		_tmp$7 = i + wid >> 0;
		_tmp$8 = ok;
		newArgNum = _tmp$6;
		newi = _tmp$7;
		found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, arg$1, argNum, c, end, format, i, lasti, p, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; a = $f.a; afterIndex = $f.afterIndex; arg = $f.arg; arg$1 = $f.arg$1; argNum = $f.argNum; c = $f.c; end = $f.end; format = $f.format; i = $f.i; lasti = $f.lasti; p = $f.p; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 2; continue; }
			p.goodArgNum = true;
			lasti = i;
			while (true) {
				if (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(format.substring(lasti, i));
			}
			if (i >= end) {
				/* break; */ $s = 2; continue;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			F:
			while (true) {
				if (!(i < end)) { break; }
				_ref = format.charCodeAt(i);
				if (_ref === 35) {
					p.fmt.fmtFlags.sharp = true;
				} else if (_ref === 48) {
					p.fmt.fmtFlags.zero = true;
				} else if (_ref === 43) {
					p.fmt.fmtFlags.plus = true;
				} else if (_ref === 45) {
					p.fmt.fmtFlags.minus = true;
				} else if (_ref === 32) {
					p.fmt.fmtFlags.space = true;
				} else {
					break F;
				}
				i = i + (1) >> 0;
			}
			_tuple = p.argNumber(argNum, format, i, a.$length);
			argNum = _tuple[0];
			i = _tuple[1];
			afterIndex = _tuple[2];
			if (i < end && (format.charCodeAt(i) === 42)) {
				i = i + (1) >> 0;
				_tuple$1 = intFromArg(a, argNum);
				p.fmt.wid = _tuple$1[0];
				p.fmt.fmtFlags.widPresent = _tuple$1[1];
				argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(badWidthBytes);
				}
				if (p.fmt.wid < 0) {
					p.fmt.wid = -p.fmt.wid;
					p.fmt.fmtFlags.minus = true;
				}
				afterIndex = false;
			} else {
				_tuple$2 = parsenum(format, i, end);
				p.fmt.wid = _tuple$2[0];
				p.fmt.fmtFlags.widPresent = _tuple$2[1];
				i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			}
			if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) {
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$3[0];
				i = _tuple$3[1];
				afterIndex = _tuple$3[2];
				if (i < end && (format.charCodeAt(i) === 42)) {
					i = i + (1) >> 0;
					_tuple$4 = intFromArg(a, argNum);
					p.fmt.prec = _tuple$4[0];
					p.fmt.fmtFlags.precPresent = _tuple$4[1];
					argNum = _tuple$4[2];
					if (p.fmt.prec < 0) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = false;
					}
					if (!p.fmt.fmtFlags.precPresent) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(badPrecBytes);
					}
					afterIndex = false;
				} else {
					_tuple$5 = parsenum(format, i, end);
					p.fmt.prec = _tuple$5[0];
					p.fmt.fmtFlags.precPresent = _tuple$5[1];
					i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				}
			}
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$6[0];
				i = _tuple$6[1];
				afterIndex = _tuple$6[2];
			}
			/* */ if (i >= end) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i >= end) { */ case 3:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(noVerbBytes);
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_tuple$7 = utf8.DecodeRuneInString(format.substring(i));
			c = _tuple$7[0];
			w = _tuple$7[1];
			i = i + (w) >> 0;
			/* */ if (c === 37) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (c === 37) { */ case 5:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(37);
				/* continue; */ $s = 1; continue;
			/* } */ case 6:
			/* */ if (!p.goodArgNum) { $s = 7; continue; }
			/* */ if (argNum >= a.$length) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!p.goodArgNum) { */ case 7:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(percentBangBytes);
				p.add(c);
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(badIndexBytes);
				/* continue; */ $s = 1; continue;
				$s = 9; continue;
			/* } else if (argNum >= a.$length) { */ case 8:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(percentBangBytes);
				p.add(c);
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(missingBytes);
				/* continue; */ $s = 1; continue;
			/* } */ case 9:
			arg = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
			argNum = argNum + (1) >> 0;
			if (c === 118) {
				if (p.fmt.fmtFlags.sharp) {
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.sharpV = true;
				}
				if (p.fmt.fmtFlags.plus) {
					p.fmt.fmtFlags.plus = false;
					p.fmt.fmtFlags.plusV = true;
				}
			}
			_r$2 = p.printArg(arg, c, 0); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!p.reordered && argNum < a.$length) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (!p.reordered && argNum < a.$length) { */ case 11:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(extraBytes);
			/* while (true) { */ case 13:
				/* if (!(argNum < a.$length)) { break; } */ if(!(argNum < a.$length)) { $s = 14; continue; }
				arg$1 = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
				/* */ if (!($interfaceIsEqual(arg$1, $ifaceNil))) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (!($interfaceIsEqual(arg$1, $ifaceNil))) { */ case 15:
					_r$3 = reflect.TypeOf(arg$1).String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$3); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				/* } */ case 16:
				_r$5 = p.printArg(arg$1, 118, 0); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				if ((argNum + 1 >> 0) < a.$length) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
				}
				argNum = argNum + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 12:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.a = a; $f.afterIndex = afterIndex; $f.arg = arg; $f.arg$1 = arg$1; $f.argNum = argNum; $f.c = c; $f.end = end; $f.format = format; $f.i = i; $f.lasti = lasti; $f.p = p; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	pp.ptr.prototype.doPrint = function(a, addspace, addnewline) {
		var $ptr, _r$2, _r$3, _v, a, addnewline, addspace, arg, argNum, isString, p, prevString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _v = $f._v; a = $f.a; addnewline = $f.addnewline; addspace = $f.addspace; arg = $f.arg; argNum = $f.argNum; isString = $f.isString; p = $f.p; prevString = $f.prevString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		prevString = false;
		argNum = 0;
		/* while (true) { */ case 1:
			/* if (!(argNum < a.$length)) { break; } */ if(!(argNum < a.$length)) { $s = 2; continue; }
			p.fmt.clearflags();
			arg = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
			/* */ if (argNum > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (argNum > 0) { */ case 3:
				if (!(!($interfaceIsEqual(arg, $ifaceNil)))) { _v = false; $s = 5; continue s; }
				_r$2 = reflect.TypeOf(arg).Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 24; case 5:
				isString = _v;
				if (addspace || !isString && !prevString) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
				}
			/* } */ case 4:
			_r$3 = p.printArg(arg, 118, 0); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			prevString = _r$3;
			argNum = argNum + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (addnewline) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(10);
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrint }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._v = _v; $f.a = a; $f.addnewline = addnewline; $f.addspace = addspace; $f.arg = arg; $f.argNum = argNum; $f.isString = isString; $f.p = p; $f.prevString = prevString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrint = function(a, addspace, addnewline) { return this.$val.doPrint(a, addspace, addnewline); };
	ss.ptr.prototype.Read = function(buf) {
		var $ptr, _tmp, _tmp$1, buf, err, n, s;
		n = 0;
		err = $ifaceNil;
		s = this;
		_tmp = 0;
		_tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune");
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var $ptr, _r$2, _tuple, err, r, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		s = this;
		if (s.peekRune >= 0) {
			s.count = s.count + (1) >> 0;
			r = s.peekRune;
			size = utf8.RuneLen(r);
			s.prevRune = r;
			s.peekRune = -1;
			return [r, size, err];
		}
		if (s.atEOF || s.ssave.nlIsEnd && (s.prevRune === 10) || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			return [r, size, err];
		}
		_r$2 = s.rr.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		r = _tuple[0];
		size = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			s.prevRune = r;
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.ReadRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, ok, s, wid;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0;
			_tmp$1 = false;
			wid = _tmp;
			ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid;
		_tmp$3 = true;
		wid = _tmp$2;
		ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var $ptr, _r$2, _tuple, err, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r$2 = s.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		r = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				return r;
			}
			s.error(err);
		}
		return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.getRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var $ptr, _r$2, _tuple, ok, s, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; ok = $f.ok; s = $f.s; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_tuple = $assertType(s.rr, runeUnreader, true);
		u = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r$2 = u.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			$s = 3; continue;
		/* } else { */ case 2:
			s.peekRune = s.prevRune;
		/* } */ case 3:
		s.prevRune = -1;
		s.count = s.count - (1) >> 0;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.UnreadRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.ok = ok; $f.s = s; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var $ptr, _r$2, err, f, s, skipSpace, tok, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; err = $f.err; f = $f.f; s = $f.s; skipSpace = $f.skipSpace; tok = $f.tok; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tok = sliceType.nil;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true);
				se = $clone(_tuple[0], scanError);
				ok = _tuple[1];
				if (ok) {
					err[0] = se.err;
				} else {
					$panic(e);
				}
			}
		}; })(err), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		_r$2 = s.token(skipSpace, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		tok = _r$2;
		return [tok, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tok, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ss.ptr.prototype.Token }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.err = err; $f.f = f; $f.s = s; $f.skipSpace = skipSpace; $f.tok = tok; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var $ptr, _i, _ref, r, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = (r << 16 >>> 16);
		_ref = space;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), arrayType$2);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		var $ptr, r;
		return !isSpace(r);
	};
	ss.ptr.prototype.SkipSpace = function() {
		var $ptr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.skipSpace(false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.SkipSpace }; } $f.$ptr = $ptr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	ss.ptr.prototype.free = function(old) {
		var $ptr, old, s;
		old = $clone(old, ssave);
		s = this;
		if (old.validSave) {
			ssave.copy(s.ssave, old);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rr = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.skipSpace = function(stopAtNewline) {
		var $ptr, _r$2, _r$3, _r$4, _v, r, s, stopAtNewline, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _v = $f._v; r = $f.r; s = $f.s; stopAtNewline = $f.stopAtNewline; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			_r$2 = s.getRune(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			r = _r$2;
			if (r === -1) {
				return;
			}
			if (!(r === 13)) { _v = false; $s = 6; continue s; }
			_r$3 = s.peek("\n"); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_v = _r$3; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			/* */ if (r === 10) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (r === 10) { */ case 8:
				if (stopAtNewline) {
					/* break; */ $s = 2; continue;
				}
				if (s.ssave.nlIsSpace) {
					/* continue; */ $s = 1; continue;
				}
				s.errorString("unexpected newline");
				return;
			/* } */ case 9:
			/* */ if (!isSpace(r)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!isSpace(r)) { */ case 10:
				_r$4 = s.UnreadRune(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				/* break; */ $s = 2; continue;
			/* } */ case 11:
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.skipSpace }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._v = _v; $f.r = r; $f.s = s; $f.stopAtNewline = stopAtNewline; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.skipSpace = function(stopAtNewline) { return this.$val.skipSpace(stopAtNewline); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var $ptr, _r$2, _r$3, _r$4, f, r, s, skipSpace, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; f = $f.f; r = $f.r; s = $f.s; skipSpace = $f.skipSpace; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (skipSpace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (skipSpace) { */ case 1:
			$r = s.skipSpace(false); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* while (true) { */ case 4:
			_r$2 = s.getRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			r = _r$2;
			if (r === -1) {
				/* break; */ $s = 5; continue;
			}
			_r$3 = f(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$3) { */ case 7:
				_r$4 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);
		/* } */ $s = 4; continue; case 5:
		return (x = s.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.token }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.f = f; $f.r = r; $f.s = s; $f.skipSpace = skipSpace; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var $ptr, _i, _ref, _rune, c, i, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.peek = function(ok) {
		var $ptr, _r$2, _r$3, ok, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; ok = $f.ok; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		r = _r$2;
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$3 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 3:
		return indexRune(ok, r) >= 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.peek }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.ok = ok; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	ptrType$25.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "fmt", typ: $funcType([ptrType$1], [], false)}, {prop: "computePadding", name: "computePadding", pkg: "fmt", typ: $funcType([$Int], [sliceType, $Int, $Int], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", typ: $funcType([$Int, sliceType], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", typ: $funcType([sliceType], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_boolean", name: "fmt_boolean", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "integer", name: "integer", pkg: "fmt", typ: $funcType([$Int64, $Uint64, $Bool, $String], [], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", typ: $funcType([$String], [$String], false)}, {prop: "fmt_s", name: "fmt_s", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_sbx", name: "fmt_sbx", pkg: "fmt", typ: $funcType([$String, sliceType, $String], [], false)}, {prop: "fmt_sx", name: "fmt_sx", pkg: "fmt", typ: $funcType([$String, $String], [], false)}, {prop: "fmt_bx", name: "fmt_bx", pkg: "fmt", typ: $funcType([sliceType, $String], [], false)}, {prop: "fmt_q", name: "fmt_q", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_qc", name: "fmt_qc", pkg: "fmt", typ: $funcType([$Int64], [], false)}, {prop: "formatFloat", name: "formatFloat", pkg: "fmt", typ: $funcType([$Float64, $Uint8, $Int, $Int], [], false)}, {prop: "fmt_e64", name: "fmt_e64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_E64", name: "fmt_E64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_f64", name: "fmt_f64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_g64", name: "fmt_g64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_G64", name: "fmt_G64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_fb64", name: "fmt_fb64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_e32", name: "fmt_e32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_E32", name: "fmt_E32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_f32", name: "fmt_f32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_g32", name: "fmt_g32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_G32", name: "fmt_G32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_fb32", name: "fmt_fb32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_c64", name: "fmt_c64", pkg: "fmt", typ: $funcType([$Complex64, $Int32], [], false)}, {prop: "fmt_c128", name: "fmt_c128", pkg: "fmt", typ: $funcType([$Complex128, $Int32], [], false)}, {prop: "fmt_complex", name: "fmt_complex", pkg: "fmt", typ: $funcType([$Float64, $Float64, $Int, $Int32], [], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$error], false)}];
	ptrType$2.methods = [{prop: "free", name: "free", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "add", name: "add", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", typ: $funcType([reflect.Value], [], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", typ: $funcType([$Bool, $Int32], [], false)}, {prop: "fmtC", name: "fmtC", pkg: "fmt", typ: $funcType([$Int64], [], false)}, {prop: "fmtInt64", name: "fmtInt64", pkg: "fmt", typ: $funcType([$Int64, $Int32], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtUnicode", name: "fmtUnicode", pkg: "fmt", typ: $funcType([$Int64], [], false)}, {prop: "fmtUint64", name: "fmtUint64", pkg: "fmt", typ: $funcType([$Uint64, $Int32], [], false)}, {prop: "fmtFloat32", name: "fmtFloat32", pkg: "fmt", typ: $funcType([$Float32, $Int32], [], false)}, {prop: "fmtFloat64", name: "fmtFloat64", pkg: "fmt", typ: $funcType([$Float64, $Int32], [], false)}, {prop: "fmtComplex64", name: "fmtComplex64", pkg: "fmt", typ: $funcType([$Complex64, $Int32], [], false)}, {prop: "fmtComplex128", name: "fmtComplex128", pkg: "fmt", typ: $funcType([$Complex128, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", typ: $funcType([$String, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", typ: $funcType([sliceType, $Int32, reflect.Type, $Int], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "clearSpecialFlags", name: "clearSpecialFlags", pkg: "fmt", typ: $funcType([], [$Bool, $Bool], false)}, {prop: "restoreSpecialFlags", name: "restoreSpecialFlags", pkg: "fmt", typ: $funcType([$Bool, $Bool], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32, $Int], [$Bool], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [$Bool], false)}, {prop: "printReflectValue", name: "printReflectValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [$Bool], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", typ: $funcType([$String, sliceType$1], [], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", typ: $funcType([sliceType$1, $Bool, $Bool], [], false)}];
	ptrType$5.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "error", name: "error", pkg: "fmt", typ: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "free", name: "free", pkg: "fmt", typ: $funcType([ssave], [], false)}, {prop: "skipSpace", name: "skipSpace", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "token", name: "token", pkg: "fmt", typ: $funcType([$Bool, funcType], [sliceType], false)}, {prop: "consume", name: "consume", pkg: "fmt", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", typ: $funcType([$Int], [$Int64], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", typ: $funcType([], [$String, $String], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", typ: $funcType([$Int32], [$String], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "advance", name: "advance", pkg: "fmt", typ: $funcType([$String], [$Int], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", typ: $funcType([$String, sliceType$1], [$Int, $error], false)}];
	fmtFlags.init([{prop: "widPresent", name: "widPresent", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "minus", name: "minus", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "plus", name: "plus", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "sharp", name: "sharp", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "space", name: "space", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "unicode", name: "unicode", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "uniQuote", name: "uniQuote", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "zero", name: "zero", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "plusV", name: "plusV", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", pkg: "fmt", typ: $Bool, tag: ""}]);
	fmt.init([{prop: "intbuf", name: "intbuf", pkg: "fmt", typ: arrayType$1, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: ptrType$1, tag: ""}, {prop: "wid", name: "wid", pkg: "fmt", typ: $Int, tag: ""}, {prop: "prec", name: "prec", pkg: "fmt", typ: $Int, tag: ""}, {prop: "fmtFlags", name: "", pkg: "fmt", typ: fmtFlags, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", typ: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init([{prop: "n", name: "n", pkg: "fmt", typ: $Int, tag: ""}, {prop: "panicking", name: "panicking", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "erroring", name: "erroring", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: buffer, tag: ""}, {prop: "arg", name: "arg", pkg: "fmt", typ: $emptyInterface, tag: ""}, {prop: "value", name: "value", pkg: "fmt", typ: reflect.Value, tag: ""}, {prop: "reordered", name: "reordered", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "runeBuf", name: "runeBuf", pkg: "fmt", typ: arrayType, tag: ""}, {prop: "fmt", name: "fmt", pkg: "fmt", typ: fmt, tag: ""}]);
	runeUnreader.init([{prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	scanError.init([{prop: "err", name: "err", pkg: "fmt", typ: $error, tag: ""}]);
	ss.init([{prop: "rr", name: "rr", pkg: "fmt", typ: io.RuneReader, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: buffer, tag: ""}, {prop: "peekRune", name: "peekRune", pkg: "fmt", typ: $Int32, tag: ""}, {prop: "prevRune", name: "prevRune", pkg: "fmt", typ: $Int32, tag: ""}, {prop: "count", name: "count", pkg: "fmt", typ: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "ssave", name: "", pkg: "fmt", typ: ssave, tag: ""}]);
	ssave.init([{prop: "validSave", name: "validSave", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", pkg: "fmt", typ: $Int, tag: ""}, {prop: "limit", name: "limit", pkg: "fmt", typ: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", pkg: "fmt", typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		padZeroBytes = $makeSlice(sliceType, 65);
		padSpaceBytes = $makeSlice(sliceType, 65);
		trueBytes = new sliceType($stringToBytes("true"));
		falseBytes = new sliceType($stringToBytes("false"));
		commaSpaceBytes = new sliceType($stringToBytes(", "));
		nilAngleBytes = new sliceType($stringToBytes("<nil>"));
		nilParenBytes = new sliceType($stringToBytes("(nil)"));
		nilBytes = new sliceType($stringToBytes("nil"));
		mapBytes = new sliceType($stringToBytes("map["));
		percentBangBytes = new sliceType($stringToBytes("%!"));
		missingBytes = new sliceType($stringToBytes("(MISSING)"));
		badIndexBytes = new sliceType($stringToBytes("(BADINDEX)"));
		panicBytes = new sliceType($stringToBytes("(PANIC="));
		extraBytes = new sliceType($stringToBytes("%!(EXTRA "));
		irparenBytes = new sliceType($stringToBytes("i)"));
		bytesBytes = new sliceType($stringToBytes("[]byte{"));
		badWidthBytes = new sliceType($stringToBytes("%!(BADWIDTH)"));
		badPrecBytes = new sliceType($stringToBytes("%!(BADPREC)"));
		noVerbBytes = new sliceType($stringToBytes("%!(NOVERB)"));
		ppFree = new sync.Pool.ptr(0, 0, sliceType$1.nil, (function() {
			var $ptr;
			return new pp.ptr(0, false, false, buffer.nil, $ifaceNil, new reflect.Value.ptr(ptrType.nil, 0, 0), false, false, arrayType.zero(), new fmt.ptr(arrayType$1.zero(), ptrType$1.nil, 0, 0, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false, false, false)));
		}));
		_r = reflect.TypeOf(new $Int(0)).Bits(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		intBits = _r;
		_r$1 = reflect.TypeOf(new $Uintptr(0)).Bits(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		uintptrBits = _r$1;
		byteType = reflect.TypeOf(new $Uint8(0));
		space = new sliceType$2([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);
		ssFree = new sync.Pool.ptr(0, 0, sliceType$1.nil, (function() {
			var $ptr;
			return new ss.ptr($ifaceNil, buffer.nil, 0, 0, 0, false, new ssave.ptr(false, false, false, 0, 0, 0));
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, $init, StringSlice, sliceType$2, Search, SearchStrings, min, insertionSort, siftDown, heapSort, medianOfThree, swapRange, doPivot, quickSort, Sort;
	StringSlice = $pkg.StringSlice = $newType(12, $kindSlice, "sort.StringSlice", "StringSlice", "sort", null);
	sliceType$2 = $sliceType($String);
	Search = function(n, f) {
		var $ptr, _q, _r, _tmp, _tmp$1, f, h, i, j, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; f = $f.f; h = $f.h; i = $f.i; j = $f.j; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = 0;
		_tmp$1 = n;
		i = _tmp;
		j = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 2; continue; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			_r = f(h); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				i = h + 1 >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				j = h;
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Search }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.f = f; $f.h = h; $f.i = i; $f.j = j; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Search = Search;
	SearchStrings = function(a, x) {
		var $ptr, _r, a, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		x = [x];
		_r = Search(a[0].$length, (function(a, x) { return function(i) {
			var $ptr, i;
			return ((i < 0 || i >= a[0].$length) ? $throwRuntimeError("index out of range") : a[0].$array[a[0].$offset + i]) >= x[0];
		}; })(a, x)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SearchStrings }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SearchStrings = SearchStrings;
	StringSlice.prototype.Search = function(x) {
		var $ptr, _r, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = SearchStrings($subslice(new sliceType$2(p.$array), p.$offset, p.$offset + p.$length), x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringSlice.prototype.Search }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(StringSlice).prototype.Search = function(x) { return this.$get().Search(x); };
	min = function(a, b) {
		var $ptr, a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	insertionSort = function(data, a, b) {
		var $ptr, _r, _v, a, b, data, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: insertionSort }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	siftDown = function(data, lo, hi, first) {
		var $ptr, _r, _r$1, _v, child, data, first, hi, lo, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; child = $f.child; data = $f.data; first = $f.first; hi = $f.hi; lo = $f.lo; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = ($imul(2, root)) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: siftDown }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.child = child; $f.data = data; $f.first = first; $f.hi = hi; $f.lo = lo; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	heapSort = function(data, a, b) {
		var $ptr, _q, a, b, data, first, hi, i, i$1, lo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; a = $f.a; b = $f.b; data = $f.data; first = $f.first; hi = $f.hi; i = $f.i; i$1 = $f.i$1; lo = $f.lo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown(data, i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown(data, lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: heapSort }; } $f.$ptr = $ptr; $f._q = _q; $f.a = a; $f.b = b; $f.data = data; $f.first = first; $f.hi = hi; $f.i = i; $f.i$1 = i$1; $f.lo = lo; $f.$s = $s; $f.$r = $r; return $f;
	};
	medianOfThree = function(data, m1, m0, m2) {
		var $ptr, _r, _r$1, _r$2, data, m0, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; data = $f.data; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Less(m1, m0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$r = data.Swap(m1, m0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$1 = data.Less(m2, m1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$1) { */ case 5:
			$r = data.Swap(m2, m1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = data.Less(m1, m0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$2) { */ case 9:
				$r = data.Swap(m1, m0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
		/* } */ case 6:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: medianOfThree }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.data = data; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	swapRange = function(data, a, b, n) {
		var $ptr, a, b, data, i, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; a = $f.a; b = $f.b; data = $f.data; i = $f.i; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			$r = data.Swap(a + i >> 0, b + i >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: swapRange }; } $f.$ptr = $ptr; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	doPivot = function(data, lo, hi) {
		var $ptr, _q, _q$1, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, b, c, d, data, hi, lo, m, midhi, midlo, n, pivot, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; a = $f.a; b = $f.b; c = $f.c; d = $f.d; data = $f.data; hi = $f.hi; lo = $f.lo; m = $f.m; midhi = $f.midhi; midlo = $f.midlo; n = $f.n; pivot = $f.pivot; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		midlo = 0;
		midhi = 0;
		m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		/* */ if ((hi - lo >> 0) > 40) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((hi - lo >> 0) > 40) { */ case 1:
			s = (_q$1 = ((hi - lo >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			$r = medianOfThree(data, lo, lo + s >> 0, lo + ($imul(2, s)) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, m, m - s >> 0, m + s >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ($imul(2, s)) >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = medianOfThree(data, lo, m, hi - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = lo;
		_tmp = lo + 1 >> 0;
		_tmp$1 = lo + 1 >> 0;
		_tmp$2 = hi;
		_tmp$3 = hi;
		a = _tmp;
		b = _tmp$1;
		c = _tmp$2;
		d = _tmp$3;
		/* while (true) { */ case 7:
			/* while (true) { */ case 9:
				/* if (!(b < c)) { break; } */ if(!(b < c)) { $s = 10; continue; }
				_r = data.Less(b, pivot); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r) { $s = 11; continue; }
				_r$1 = data.Less(pivot, b); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (!_r$1) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_r) { */ case 11:
					b = b + (1) >> 0;
					$s = 14; continue;
				/* } else if (!_r$1) { */ case 12:
					$r = data.Swap(a, b); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					a = a + (1) >> 0;
					b = b + (1) >> 0;
					$s = 14; continue;
				/* } else { */ case 13:
					/* break; */ $s = 10; continue;
				/* } */ case 14:
			/* } */ $s = 9; continue; case 10:
			/* while (true) { */ case 18:
				/* if (!(b < c)) { break; } */ if(!(b < c)) { $s = 19; continue; }
				_r$2 = data.Less(pivot, c - 1 >> 0); /* */ $s = 24; case 24: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (_r$2) { $s = 20; continue; }
				_r$3 = data.Less(c - 1 >> 0, pivot); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (!_r$3) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (_r$2) { */ case 20:
					c = c - (1) >> 0;
					$s = 23; continue;
				/* } else if (!_r$3) { */ case 21:
					$r = data.Swap(c - 1 >> 0, d - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					c = c - (1) >> 0;
					d = d - (1) >> 0;
					$s = 23; continue;
				/* } else { */ case 22:
					/* break; */ $s = 19; continue;
				/* } */ case 23:
			/* } */ $s = 18; continue; case 19:
			if (b >= c) {
				/* break; */ $s = 8; continue;
			}
			$r = data.Swap(b, c - 1 >> 0); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			b = b + (1) >> 0;
			c = c - (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		n = min(b - a >> 0, a - lo >> 0);
		$r = swapRange(data, lo, b - n >> 0, n); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		n = min(hi - d >> 0, d - c >> 0);
		$r = swapRange(data, c, hi - n >> 0, n); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$4 = (lo + b >> 0) - a >> 0;
		_tmp$5 = hi - ((d - c >> 0)) >> 0;
		midlo = _tmp$4;
		midhi = _tmp$5;
		return [midlo, midhi];
		/* */ } return; } if ($f === undefined) { $f = { $blk: doPivot }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.a = a; $f.b = b; $f.c = c; $f.d = d; $f.data = data; $f.hi = hi; $f.lo = lo; $f.m = m; $f.midhi = midhi; $f.midlo = midlo; $f.n = n; $f.pivot = pivot; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	quickSort = function(data, a, b, maxDepth) {
		var $ptr, _r, _tuple, a, b, data, maxDepth, mhi, mlo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; b = $f.b; data = $f.data; maxDepth = $f.maxDepth; mhi = $f.mhi; mlo = $f.mlo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* if (!((b - a >> 0) > 7)) { break; } */ if(!((b - a >> 0) > 7)) { $s = 2; continue; }
			/* */ if (maxDepth === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (maxDepth === 0) { */ case 3:
				$r = heapSort(data, a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 4:
			maxDepth = maxDepth - (1) >> 0;
			_r = doPivot(data, a, b); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			mlo = _tuple[0];
			mhi = _tuple[1];
			/* */ if ((mlo - a >> 0) < (b - mhi >> 0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((mlo - a >> 0) < (b - mhi >> 0)) { */ case 7:
				$r = quickSort(data, a, mlo, maxDepth); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mhi;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = quickSort(data, mhi, b, maxDepth); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mlo;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		/* */ if ((b - a >> 0) > 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - a >> 0) > 1) { */ case 12:
			$r = insertionSort(data, a, b); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: quickSort }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.data = data; $f.maxDepth = maxDepth; $f.mhi = mhi; $f.mlo = mlo; $f.$s = $s; $f.$r = $r; return $f;
	};
	Sort = function(data) {
		var $ptr, _r, data, i, maxDepth, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data = $f.data; i = $f.i; maxDepth = $f.maxDepth; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		maxDepth = 0;
		i = n;
		while (true) {
			if (!(i > 0)) { break; }
			maxDepth = maxDepth + (1) >> 0;
			i = (i >> $min((1), 31)) >> 0;
		}
		maxDepth = $imul(maxDepth, (2));
		$r = quickSort(data, 0, n, maxDepth); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Sort }; } $f.$ptr = $ptr; $f._r = _r; $f.data = data; $f.i = i; $f.maxDepth = maxDepth; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sort = Sort;
	StringSlice.prototype.Len = function() {
		var $ptr, p;
		p = this;
		return p.$length;
	};
	$ptrType(StringSlice).prototype.Len = function() { return this.$get().Len(); };
	StringSlice.prototype.Less = function(i, j) {
		var $ptr, i, j, p;
		p = this;
		return ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]);
	};
	$ptrType(StringSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	StringSlice.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, p;
		p = this;
		_tmp = ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]);
		_tmp$1 = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]);
		((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i] = _tmp);
		((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j] = _tmp$1);
	};
	$ptrType(StringSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	StringSlice.prototype.Sort = function() {
		var $ptr, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = Sort(p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: StringSlice.prototype.Sort }; } $f.$ptr = $ptr; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(StringSlice).prototype.Sort = function() { return this.$get().Sort(); };
	StringSlice.methods = [{prop: "Search", name: "Search", pkg: "", typ: $funcType([$String], [$Int], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Sort", name: "Sort", pkg: "", typ: $funcType([], [], false)}];
	StringSlice.init($String);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["flag"] = (function() {
	var $pkg = {}, $init, errors, fmt, io, os, sort, strconv, time, boolValue, boolFlag, intValue, int64Value, uintValue, uint64Value, stringValue, float64Value, durationValue, Value, ErrorHandling, FlagSet, Flag, sliceType, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, sliceType$1, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, sliceType$2, funcType, ptrType$17, funcType$1, mapType, x, newBoolValue, newIntValue, newInt64Value, newUintValue, newUint64Value, newStringValue, newFloat64Value, newDurationValue, sortFlags, isZeroValue, UnquoteUsage, PrintDefaults, defaultUsage, Bool, Int, Uint, String, Duration, Parse, NewFlagSet;
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	os = $packages["os"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	time = $packages["time"];
	boolValue = $pkg.boolValue = $newType(1, $kindBool, "flag.boolValue", "boolValue", "flag", null);
	boolFlag = $pkg.boolFlag = $newType(8, $kindInterface, "flag.boolFlag", "boolFlag", "flag", null);
	intValue = $pkg.intValue = $newType(4, $kindInt, "flag.intValue", "intValue", "flag", null);
	int64Value = $pkg.int64Value = $newType(8, $kindInt64, "flag.int64Value", "int64Value", "flag", null);
	uintValue = $pkg.uintValue = $newType(4, $kindUint, "flag.uintValue", "uintValue", "flag", null);
	uint64Value = $pkg.uint64Value = $newType(8, $kindUint64, "flag.uint64Value", "uint64Value", "flag", null);
	stringValue = $pkg.stringValue = $newType(8, $kindString, "flag.stringValue", "stringValue", "flag", null);
	float64Value = $pkg.float64Value = $newType(8, $kindFloat64, "flag.float64Value", "float64Value", "flag", null);
	durationValue = $pkg.durationValue = $newType(8, $kindInt64, "flag.durationValue", "durationValue", "flag", null);
	Value = $pkg.Value = $newType(8, $kindInterface, "flag.Value", "Value", "flag", null);
	ErrorHandling = $pkg.ErrorHandling = $newType(4, $kindInt, "flag.ErrorHandling", "ErrorHandling", "flag", null);
	FlagSet = $pkg.FlagSet = $newType(0, $kindStruct, "flag.FlagSet", "FlagSet", "flag", function(Usage_, name_, parsed_, actual_, formal_, args_, errorHandling_, output_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Usage = $throwNilPointerError;
			this.name = "";
			this.parsed = false;
			this.actual = false;
			this.formal = false;
			this.args = sliceType$2.nil;
			this.errorHandling = 0;
			this.output = $ifaceNil;
			return;
		}
		this.Usage = Usage_;
		this.name = name_;
		this.parsed = parsed_;
		this.actual = actual_;
		this.formal = formal_;
		this.args = args_;
		this.errorHandling = errorHandling_;
		this.output = output_;
	});
	Flag = $pkg.Flag = $newType(0, $kindStruct, "flag.Flag", "Flag", "flag", function(Name_, Usage_, Value_, DefValue_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Usage = "";
			this.Value = $ifaceNil;
			this.DefValue = "";
			return;
		}
		this.Name = Name_;
		this.Usage = Usage_;
		this.Value = Value_;
		this.DefValue = DefValue_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(boolValue);
	ptrType$1 = $ptrType(intValue);
	ptrType$2 = $ptrType(int64Value);
	ptrType$3 = $ptrType(uintValue);
	ptrType$4 = $ptrType(uint64Value);
	ptrType$5 = $ptrType(stringValue);
	ptrType$6 = $ptrType(float64Value);
	ptrType$7 = $ptrType(durationValue);
	ptrType$8 = $ptrType(time.Duration);
	ptrType$9 = $ptrType(Flag);
	sliceType$1 = $sliceType(ptrType$9);
	ptrType$10 = $ptrType($Bool);
	ptrType$11 = $ptrType($Int);
	ptrType$12 = $ptrType($Int64);
	ptrType$13 = $ptrType($Uint);
	ptrType$14 = $ptrType($Uint64);
	ptrType$15 = $ptrType($String);
	ptrType$16 = $ptrType($Float64);
	sliceType$2 = $sliceType($String);
	funcType = $funcType([ptrType$9], [], false);
	ptrType$17 = $ptrType(FlagSet);
	funcType$1 = $funcType([], [], false);
	mapType = $mapType($String, ptrType$9);
	newBoolValue = function(val, p) {
		var $ptr, _ptr, p, val;
		p.$set(val);
		return (_ptr = p, new ptrType(function() { return _ptr.$get(); }, function($v) { _ptr.$set($v); }, _ptr.$target));
	};
	$ptrType(boolValue).prototype.Set = function(s) {
		var $ptr, _tuple, b, err, s, v;
		b = this;
		_tuple = strconv.ParseBool(s);
		v = _tuple[0];
		err = _tuple[1];
		b.$set(v);
		return err;
	};
	$ptrType(boolValue).prototype.Get = function() {
		var $ptr, b;
		b = this;
		return new $Bool(b.$get());
	};
	$ptrType(boolValue).prototype.String = function() {
		var $ptr, _r, b, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = fmt.Sprintf("%v", new sliceType([new boolValue(b.$get())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(boolValue).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(boolValue).prototype.IsBoolFlag = function() {
		var $ptr, b;
		b = this;
		return true;
	};
	newIntValue = function(val, p) {
		var $ptr, _ptr, p, val;
		p.$set(val);
		return (_ptr = p, new ptrType$1(function() { return (_ptr.$get() >> 0); }, function($v) { _ptr.$set(($v >> 0)); }, _ptr.$target));
	};
	$ptrType(intValue).prototype.Set = function(s) {
		var $ptr, _tuple, err, i, s, v;
		i = this;
		_tuple = strconv.ParseInt(s, 0, 64);
		v = _tuple[0];
		err = _tuple[1];
		i.$set(((v.$low + ((v.$high >> 31) * 4294967296)) >> 0));
		return err;
	};
	$ptrType(intValue).prototype.Get = function() {
		var $ptr, i;
		i = this;
		return new $Int((i.$get() >> 0));
	};
	$ptrType(intValue).prototype.String = function() {
		var $ptr, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = fmt.Sprintf("%v", new sliceType([new intValue(i.$get())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(intValue).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	newInt64Value = function(val, p) {
		var $ptr, _ptr, p, val, x$1;
		p.$set(val);
		return (_ptr = p, new ptrType$2(function() { return (x$1 = _ptr.$get(), new int64Value(x$1.$high, x$1.$low)); }, function($v) { _ptr.$set(new $Int64($v.$high, $v.$low)); }, _ptr.$target));
	};
	$ptrType(int64Value).prototype.Set = function(s) {
		var $ptr, _tuple, err, i, s, v;
		i = this;
		_tuple = strconv.ParseInt(s, 0, 64);
		v = _tuple[0];
		err = _tuple[1];
		i.$set(new int64Value(v.$high, v.$low));
		return err;
	};
	$ptrType(int64Value).prototype.Get = function() {
		var $ptr, i, x$1;
		i = this;
		return (x$1 = i.$get(), new $Int64(x$1.$high, x$1.$low));
	};
	$ptrType(int64Value).prototype.String = function() {
		var $ptr, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = fmt.Sprintf("%v", new sliceType([i.$get()])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(int64Value).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	newUintValue = function(val, p) {
		var $ptr, _ptr, p, val;
		p.$set(val);
		return (_ptr = p, new ptrType$3(function() { return (_ptr.$get() >>> 0); }, function($v) { _ptr.$set(($v >>> 0)); }, _ptr.$target));
	};
	$ptrType(uintValue).prototype.Set = function(s) {
		var $ptr, _tuple, err, i, s, v;
		i = this;
		_tuple = strconv.ParseUint(s, 0, 64);
		v = _tuple[0];
		err = _tuple[1];
		i.$set((v.$low >>> 0));
		return err;
	};
	$ptrType(uintValue).prototype.Get = function() {
		var $ptr, i;
		i = this;
		return new $Uint((i.$get() >>> 0));
	};
	$ptrType(uintValue).prototype.String = function() {
		var $ptr, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = fmt.Sprintf("%v", new sliceType([new uintValue(i.$get())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(uintValue).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	newUint64Value = function(val, p) {
		var $ptr, _ptr, p, val, x$1;
		p.$set(val);
		return (_ptr = p, new ptrType$4(function() { return (x$1 = _ptr.$get(), new uint64Value(x$1.$high, x$1.$low)); }, function($v) { _ptr.$set(new $Uint64($v.$high, $v.$low)); }, _ptr.$target));
	};
	$ptrType(uint64Value).prototype.Set = function(s) {
		var $ptr, _tuple, err, i, s, v;
		i = this;
		_tuple = strconv.ParseUint(s, 0, 64);
		v = _tuple[0];
		err = _tuple[1];
		i.$set(new uint64Value(v.$high, v.$low));
		return err;
	};
	$ptrType(uint64Value).prototype.Get = function() {
		var $ptr, i, x$1;
		i = this;
		return (x$1 = i.$get(), new $Uint64(x$1.$high, x$1.$low));
	};
	$ptrType(uint64Value).prototype.String = function() {
		var $ptr, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = fmt.Sprintf("%v", new sliceType([i.$get()])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(uint64Value).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	newStringValue = function(val, p) {
		var $ptr, _ptr, p, val;
		p.$set(val);
		return (_ptr = p, new ptrType$5(function() { return _ptr.$get(); }, function($v) { _ptr.$set($v); }, _ptr.$target));
	};
	$ptrType(stringValue).prototype.Set = function(val) {
		var $ptr, s, val;
		s = this;
		s.$set(val);
		return $ifaceNil;
	};
	$ptrType(stringValue).prototype.Get = function() {
		var $ptr, s;
		s = this;
		return new $String(s.$get());
	};
	$ptrType(stringValue).prototype.String = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = fmt.Sprintf("%s", new sliceType([new stringValue(s.$get())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(stringValue).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	newFloat64Value = function(val, p) {
		var $ptr, _ptr, p, val;
		p.$set(val);
		return (_ptr = p, new ptrType$6(function() { return _ptr.$get(); }, function($v) { _ptr.$set($v); }, _ptr.$target));
	};
	$ptrType(float64Value).prototype.Set = function(s) {
		var $ptr, _tuple, err, f, s, v;
		f = this;
		_tuple = strconv.ParseFloat(s, 64);
		v = _tuple[0];
		err = _tuple[1];
		f.$set(v);
		return err;
	};
	$ptrType(float64Value).prototype.Get = function() {
		var $ptr, f;
		f = this;
		return new $Float64(f.$get());
	};
	$ptrType(float64Value).prototype.String = function() {
		var $ptr, _r, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = fmt.Sprintf("%v", new sliceType([new float64Value(f.$get())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(float64Value).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	newDurationValue = function(val, p) {
		var $ptr, _ptr, p, val, x$1;
		p.$set(val);
		return (_ptr = p, new ptrType$7(function() { return (x$1 = _ptr.$get(), new durationValue(x$1.$high, x$1.$low)); }, function($v) { _ptr.$set(new time.Duration($v.$high, $v.$low)); }, _ptr.$target));
	};
	$ptrType(durationValue).prototype.Set = function(s) {
		var $ptr, _tuple, d, err, s, v;
		d = this;
		_tuple = time.ParseDuration(s);
		v = _tuple[0];
		err = _tuple[1];
		d.$set(new durationValue(v.$high, v.$low));
		return err;
	};
	$ptrType(durationValue).prototype.Get = function() {
		var $ptr, d, x$1;
		d = this;
		return (x$1 = d.$get(), new time.Duration(x$1.$high, x$1.$low));
	};
	$ptrType(durationValue).prototype.String = function() {
		var $ptr, _ptr, d, x$1;
		d = this;
		return (_ptr = d, new ptrType$8(function() { return (x$1 = _ptr.$get(), new time.Duration(x$1.$high, x$1.$low)); }, function($v) { _ptr.$set(new durationValue($v.$high, $v.$low)); }, _ptr.$target)).String();
	};
	sortFlags = function(flags) {
		var $ptr, _entry, _entry$1, _i, _i$1, _keys, _ref, _ref$1, f, flags, i, i$1, list, name, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _keys = $f._keys; _ref = $f._ref; _ref$1 = $f._ref$1; f = $f.f; flags = $f.flags; i = $f.i; i$1 = $f.i$1; list = $f.list; name = $f.name; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		list = $makeSlice(sort.StringSlice, $keys(flags).length);
		i = 0;
		_ref = flags;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			f = _entry.v;
			((i < 0 || i >= list.$length) ? $throwRuntimeError("index out of range") : list.$array[list.$offset + i] = f.Name);
			i = i + (1) >> 0;
			_i++;
		}
		$r = list.Sort(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		result = $makeSlice(sliceType$1, list.$length);
		_ref$1 = list;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			name = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			((i$1 < 0 || i$1 >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + i$1] = (_entry$1 = flags[$String.keyFor(name)], _entry$1 !== undefined ? _entry$1.v : ptrType$9.nil));
			_i$1++;
		}
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sortFlags }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._keys = _keys; $f._ref = _ref; $f._ref$1 = _ref$1; $f.f = f; $f.flags = flags; $f.i = i; $f.i$1 = i$1; $f.list = list; $f.name = name; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.ptr.prototype.out = function() {
		var $ptr, f;
		f = this;
		if ($interfaceIsEqual(f.output, $ifaceNil)) {
			return os.Stderr;
		}
		return f.output;
	};
	FlagSet.prototype.out = function() { return this.$val.out(); };
	FlagSet.ptr.prototype.SetOutput = function(output) {
		var $ptr, f, output;
		f = this;
		f.output = output;
	};
	FlagSet.prototype.SetOutput = function(output) { return this.$val.SetOutput(output); };
	FlagSet.ptr.prototype.VisitAll = function(fn) {
		var $ptr, _i, _r, _ref, f, flag, fn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; f = $f.f; flag = $f.flag; fn = $f.fn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = sortFlags(f.formal); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref = _r;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			flag = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = fn(flag); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 2; continue; case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.VisitAll }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.f = f; $f.flag = flag; $f.fn = fn; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.VisitAll = function(fn) { return this.$val.VisitAll(fn); };
	FlagSet.ptr.prototype.Visit = function(fn) {
		var $ptr, _i, _r, _ref, f, flag, fn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; f = $f.f; flag = $f.flag; fn = $f.fn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = sortFlags(f.actual); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref = _r;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			flag = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = fn(flag); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 2; continue; case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Visit }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.f = f; $f.flag = flag; $f.fn = fn; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Visit = function(fn) { return this.$val.Visit(fn); };
	FlagSet.ptr.prototype.Lookup = function(name) {
		var $ptr, _entry, f, name;
		f = this;
		return (_entry = f.formal[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$9.nil);
	};
	FlagSet.prototype.Lookup = function(name) { return this.$val.Lookup(name); };
	FlagSet.ptr.prototype.Set = function(name, value) {
		var $ptr, _entry, _key, _r, _r$1, _tuple, err, f, flag, name, ok, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; f = $f.f; flag = $f.flag; name = $f.name; ok = $f.ok; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_tuple = (_entry = f.formal[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [ptrType$9.nil, false]);
		flag = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			_r = fmt.Errorf("no such flag -%v", new sliceType([new $String(name)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		_r$1 = flag.Value.Set(value); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		if (f.actual === false) {
			f.actual = {};
		}
		_key = name; (f.actual || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: flag };
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.flag = flag; $f.name = name; $f.ok = ok; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Set = function(name, value) { return this.$val.Set(name, value); };
	isZeroValue = function(value) {
		var $ptr, _ref, value;
		_ref = value;
		if (_ref === "false") {
			return true;
		} else if (_ref === "") {
			return true;
		} else if (_ref === "0") {
			return true;
		}
		return false;
	};
	UnquoteUsage = function(flag) {
		var $ptr, _ref, _tmp, _tmp$1, flag, i, j, name, usage;
		name = "";
		usage = "";
		usage = flag.Usage;
		i = 0;
		while (true) {
			if (!(i < usage.length)) { break; }
			if (usage.charCodeAt(i) === 96) {
				j = i + 1 >> 0;
				while (true) {
					if (!(j < usage.length)) { break; }
					if (usage.charCodeAt(j) === 96) {
						name = usage.substring((i + 1 >> 0), j);
						usage = usage.substring(0, i) + name + usage.substring((j + 1 >> 0));
						_tmp = name;
						_tmp$1 = usage;
						name = _tmp;
						usage = _tmp$1;
						return [name, usage];
					}
					j = j + (1) >> 0;
				}
				break;
			}
			i = i + (1) >> 0;
		}
		name = "value";
		_ref = flag.Value;
		if ($assertType(_ref, boolFlag, true)[1]) {
			name = "";
		} else if ($assertType(_ref, ptrType$7, true)[1]) {
			name = "duration";
		} else if ($assertType(_ref, ptrType$6, true)[1]) {
			name = "float";
		} else if ($assertType(_ref, ptrType$1, true)[1] || $assertType(_ref, ptrType$2, true)[1]) {
			name = "int";
		} else if ($assertType(_ref, ptrType$5, true)[1]) {
			name = "string";
		} else if ($assertType(_ref, ptrType$3, true)[1] || $assertType(_ref, ptrType$4, true)[1]) {
			name = "uint";
		}
		return [name, usage];
	};
	$pkg.UnquoteUsage = UnquoteUsage;
	FlagSet.ptr.prototype.PrintDefaults = function() {
		var $ptr, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = [f];
		f[0] = this;
		$r = f[0].VisitAll((function(f) { return function $b(flag) {
			var $ptr, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, flag, name, ok, s, usage, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; flag = $f.flag; name = $f.name; ok = $f.ok; s = $f.s; usage = $f.usage; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = fmt.Sprintf("  -%s", new sliceType([new $String(flag.Name)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			s = _r;
			_tuple = UnquoteUsage(flag);
			name = _tuple[0];
			usage = _tuple[1];
			if (name.length > 0) {
				s = s + (" " + name);
			}
			if (s.length <= 4) {
				s = s + ("\t");
			} else {
				s = s + ("\n    \t");
			}
			s = s + (usage);
			/* */ if (!isZeroValue(flag.DefValue)) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (!isZeroValue(flag.DefValue)) { */ case 2:
				_tuple$1 = $assertType(flag.Value, ptrType$5, true);
				ok = _tuple$1[1];
				/* */ if (ok) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if (ok) { */ case 4:
					_r$1 = fmt.Sprintf(" (default %q)", new sliceType([new $String(flag.DefValue)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					s = s + (_r$1);
					$s = 6; continue;
				/* } else { */ case 5:
					_r$2 = fmt.Sprintf(" (default %v)", new sliceType([new $String(flag.DefValue)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					s = s + (_r$2);
				/* } */ case 6:
			/* } */ case 3:
			_r$3 = fmt.Fprint(f[0].out(), new sliceType([new $String(s), new $String("\n")])); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.flag = flag; $f.name = name; $f.ok = ok; $f.s = s; $f.usage = usage; $f.$s = $s; $f.$r = $r; return $f;
		}; })(f)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.PrintDefaults }; } $f.$ptr = $ptr; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.PrintDefaults = function() { return this.$val.PrintDefaults(); };
	PrintDefaults = function() {
		var $ptr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = $pkg.CommandLine.PrintDefaults(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PrintDefaults }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.PrintDefaults = PrintDefaults;
	defaultUsage = function(f) {
		var $ptr, _r, _r$1, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (f.name === "") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (f.name === "") { */ case 1:
			_r = fmt.Fprintf(f.out(), "Usage:\n", new sliceType([])); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = fmt.Fprintf(f.out(), "Usage of %s:\n", new sliceType([new $String(f.name)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		$r = f.PrintDefaults(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: defaultUsage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.ptr.prototype.NFlag = function() {
		var $ptr, f;
		f = this;
		return $keys(f.actual).length;
	};
	FlagSet.prototype.NFlag = function() { return this.$val.NFlag(); };
	FlagSet.ptr.prototype.Arg = function(i) {
		var $ptr, f, i, x$1;
		f = this;
		if (i < 0 || i >= f.args.$length) {
			return "";
		}
		return (x$1 = f.args, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
	};
	FlagSet.prototype.Arg = function(i) { return this.$val.Arg(i); };
	FlagSet.ptr.prototype.NArg = function() {
		var $ptr, f;
		f = this;
		return f.args.$length;
	};
	FlagSet.prototype.NArg = function() { return this.$val.NArg(); };
	FlagSet.ptr.prototype.Args = function() {
		var $ptr, f;
		f = this;
		return f.args;
	};
	FlagSet.prototype.Args = function() { return this.$val.Args(); };
	FlagSet.ptr.prototype.BoolVar = function(p, name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.Var(newBoolValue(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.BoolVar }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.BoolVar = function(p, name, value, usage) { return this.$val.BoolVar(p, name, value, usage); };
	FlagSet.ptr.prototype.Bool = function(name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		p = $newDataPointer(false, ptrType$10);
		$r = f.BoolVar(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Bool }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Bool = function(name, value, usage) { return this.$val.Bool(name, value, usage); };
	Bool = function(name, value, usage) {
		var $ptr, _r, name, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.CommandLine.Bool(name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Bool }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Bool = Bool;
	FlagSet.ptr.prototype.IntVar = function(p, name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.Var(newIntValue(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.IntVar }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.IntVar = function(p, name, value, usage) { return this.$val.IntVar(p, name, value, usage); };
	FlagSet.ptr.prototype.Int = function(name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		p = $newDataPointer(0, ptrType$11);
		$r = f.IntVar(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Int }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Int = function(name, value, usage) { return this.$val.Int(name, value, usage); };
	Int = function(name, value, usage) {
		var $ptr, _r, name, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.CommandLine.Int(name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Int = Int;
	FlagSet.ptr.prototype.Int64Var = function(p, name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.Var(newInt64Value(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Int64Var }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Int64Var = function(p, name, value, usage) { return this.$val.Int64Var(p, name, value, usage); };
	FlagSet.ptr.prototype.Int64 = function(name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		p = $newDataPointer(new $Int64(0, 0), ptrType$12);
		$r = f.Int64Var(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Int64 }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Int64 = function(name, value, usage) { return this.$val.Int64(name, value, usage); };
	FlagSet.ptr.prototype.UintVar = function(p, name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.Var(newUintValue(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.UintVar }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.UintVar = function(p, name, value, usage) { return this.$val.UintVar(p, name, value, usage); };
	FlagSet.ptr.prototype.Uint = function(name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		p = $newDataPointer(0, ptrType$13);
		$r = f.UintVar(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Uint }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Uint = function(name, value, usage) { return this.$val.Uint(name, value, usage); };
	Uint = function(name, value, usage) {
		var $ptr, _r, name, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.CommandLine.Uint(name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Uint }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Uint = Uint;
	FlagSet.ptr.prototype.Uint64Var = function(p, name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.Var(newUint64Value(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Uint64Var }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Uint64Var = function(p, name, value, usage) { return this.$val.Uint64Var(p, name, value, usage); };
	FlagSet.ptr.prototype.Uint64 = function(name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		p = $newDataPointer(new $Uint64(0, 0), ptrType$14);
		$r = f.Uint64Var(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Uint64 }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Uint64 = function(name, value, usage) { return this.$val.Uint64(name, value, usage); };
	FlagSet.ptr.prototype.StringVar = function(p, name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.Var(newStringValue(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.StringVar }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.StringVar = function(p, name, value, usage) { return this.$val.StringVar(p, name, value, usage); };
	FlagSet.ptr.prototype.String = function(name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		p = $newDataPointer("", ptrType$15);
		$r = f.StringVar(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.String }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.String = function(name, value, usage) { return this.$val.String(name, value, usage); };
	String = function(name, value, usage) {
		var $ptr, _r, name, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.CommandLine.String(name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: String }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.String = String;
	FlagSet.ptr.prototype.Float64Var = function(p, name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.Var(newFloat64Value(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Float64Var }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Float64Var = function(p, name, value, usage) { return this.$val.Float64Var(p, name, value, usage); };
	FlagSet.ptr.prototype.Float64 = function(name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		p = $newDataPointer(0, ptrType$16);
		$r = f.Float64Var(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Float64 }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Float64 = function(name, value, usage) { return this.$val.Float64(name, value, usage); };
	FlagSet.ptr.prototype.DurationVar = function(p, name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.Var(newDurationValue(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.DurationVar }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.DurationVar = function(p, name, value, usage) { return this.$val.DurationVar(p, name, value, usage); };
	FlagSet.ptr.prototype.Duration = function(name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		p = $newDataPointer(new time.Duration(0, 0), ptrType$8);
		$r = f.DurationVar(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Duration }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Duration = function(name, value, usage) { return this.$val.Duration(name, value, usage); };
	Duration = function(name, value, usage) {
		var $ptr, _r, name, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.CommandLine.Duration(name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Duration }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Duration = Duration;
	FlagSet.ptr.prototype.Var = function(value, name, usage) {
		var $ptr, _entry, _key, _r, _r$1, _r$2, _r$3, _tuple, alreadythere, f, flag, msg, name, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; alreadythere = $f.alreadythere; f = $f.f; flag = $f.flag; msg = $f.msg; name = $f.name; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = value.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		flag = new Flag.ptr(name, usage, value, _r);
		_tuple = (_entry = f.formal[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [ptrType$9.nil, false]);
		alreadythere = _tuple[1];
		/* */ if (alreadythere) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (alreadythere) { */ case 2:
			msg = "";
			/* */ if (f.name === "") { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (f.name === "") { */ case 4:
				_r$1 = fmt.Sprintf("flag redefined: %s", new sliceType([new $String(name)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				msg = _r$1;
				$s = 6; continue;
			/* } else { */ case 5:
				_r$2 = fmt.Sprintf("%s flag redefined: %s", new sliceType([new $String(f.name), new $String(name)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				msg = _r$2;
			/* } */ case 6:
			_r$3 = fmt.Fprintln(f.out(), new sliceType([new $String(msg)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			$panic(new $String(msg));
		/* } */ case 3:
		if (f.formal === false) {
			f.formal = {};
		}
		_key = name; (f.formal || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: flag };
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Var }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.alreadythere = alreadythere; $f.f = f; $f.flag = flag; $f.msg = msg; $f.name = name; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Var = function(value, name, usage) { return this.$val.Var(value, name, usage); };
	FlagSet.ptr.prototype.failf = function(format, a) {
		var $ptr, _r, _r$1, a, err, f, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; a = $f.a; err = $f.err; f = $f.f; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = fmt.Errorf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		_r$1 = fmt.Fprintln(f.out(), new sliceType([err])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$r = f.usage(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.failf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.err = err; $f.f = f; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.failf = function(format, a) { return this.$val.failf(format, a); };
	FlagSet.ptr.prototype.usage = function() {
		var $ptr, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* */ if (f.Usage === $throwNilPointerError) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (f.Usage === $throwNilPointerError) { */ case 1:
			/* */ if (f === $pkg.CommandLine) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (f === $pkg.CommandLine) { */ case 4:
				$r = $pkg.Usage(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else { */ case 5:
				$r = defaultUsage(f); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
			$s = 3; continue;
		/* } else { */ case 2:
			$r = f.Usage(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.usage }; } $f.$ptr = $ptr; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.usage = function() { return this.$val.usage(); };
	FlagSet.ptr.prototype.parseOne = function() {
		var $ptr, _entry, _key, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tuple, _tuple$1, _v, alreadythere, err, err$1, err$2, f, flag, fv, hasValue, i, m, name, numMinuses, ok, s, value, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; alreadythere = $f.alreadythere; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; flag = $f.flag; fv = $f.fv; hasValue = $f.hasValue; i = $f.i; m = $f.m; name = $f.name; numMinuses = $f.numMinuses; ok = $f.ok; s = $f.s; value = $f.value; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f.args.$length === 0) {
			return [false, $ifaceNil];
		}
		s = (x$1 = f.args, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0]));
		if ((s.length === 0) || !((s.charCodeAt(0) === 45)) || (s.length === 1)) {
			return [false, $ifaceNil];
		}
		numMinuses = 1;
		if (s.charCodeAt(1) === 45) {
			numMinuses = numMinuses + (1) >> 0;
			if (s.length === 2) {
				f.args = $subslice(f.args, 1);
				return [false, $ifaceNil];
			}
		}
		name = s.substring(numMinuses);
		/* */ if ((name.length === 0) || (name.charCodeAt(0) === 45) || (name.charCodeAt(0) === 61)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((name.length === 0) || (name.charCodeAt(0) === 45) || (name.charCodeAt(0) === 61)) { */ case 1:
			_r = f.failf("bad flag syntax: %s", new sliceType([new $String(s)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return [false, _r];
		/* } */ case 2:
		f.args = $subslice(f.args, 1);
		hasValue = false;
		value = "";
		i = 1;
		while (true) {
			if (!(i < name.length)) { break; }
			if (name.charCodeAt(i) === 61) {
				value = name.substring((i + 1 >> 0));
				hasValue = true;
				name = name.substring(0, i);
				break;
			}
			i = i + (1) >> 0;
		}
		m = f.formal;
		_tuple = (_entry = m[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [ptrType$9.nil, false]);
		flag = _tuple[0];
		alreadythere = _tuple[1];
		/* */ if (!alreadythere) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!alreadythere) { */ case 5:
			/* */ if (name === "help" || name === "h") { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (name === "help" || name === "h") { */ case 7:
				$r = f.usage(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return [false, $pkg.ErrHelp];
			/* } */ case 8:
			_r$1 = f.failf("flag provided but not defined: -%s", new sliceType([new $String(name)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 11; case 11:
			return [false, _r$1];
		/* } */ case 6:
		_tuple$1 = $assertType(flag.Value, boolFlag, true);
		fv = _tuple$1[0];
		ok = _tuple$1[1];
		if (!(ok)) { _v = false; $s = 15; continue s; }
		_r$2 = fv.IsBoolFlag(); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = _r$2; case 15:
		/* */ if (_v) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (_v) { */ case 12:
			/* */ if (hasValue) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (hasValue) { */ case 17:
				_r$3 = fv.Set(value); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err = _r$3;
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 21:
					_r$4 = f.failf("invalid boolean value %q for -%s: %v", new sliceType([new $String(value), new $String(name), err])); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ $s = 24; case 24:
					return [false, _r$4];
				/* } */ case 22:
				$s = 19; continue;
			/* } else { */ case 18:
				_r$5 = fv.Set("true"); /* */ $s = 25; case 25: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				err$1 = _r$5;
				/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 26:
					_r$6 = f.failf("invalid boolean flag %s: %v", new sliceType([new $String(name), err$1])); /* */ $s = 28; case 28: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					/* */ $s = 29; case 29:
					return [false, _r$6];
				/* } */ case 27:
			/* } */ case 19:
			$s = 14; continue;
		/* } else { */ case 13:
			if (!hasValue && f.args.$length > 0) {
				hasValue = true;
				_tmp = (x$2 = f.args, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0]));
				_tmp$1 = $subslice(f.args, 1);
				value = _tmp;
				f.args = _tmp$1;
			}
			/* */ if (!hasValue) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (!hasValue) { */ case 30:
				_r$7 = f.failf("flag needs an argument: -%s", new sliceType([new $String(name)])); /* */ $s = 32; case 32: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				/* */ $s = 33; case 33:
				return [false, _r$7];
			/* } */ case 31:
			_r$8 = flag.Value.Set(value); /* */ $s = 34; case 34: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			err$2 = _r$8;
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 35:
				_r$9 = f.failf("invalid value %q for flag -%s: %v", new sliceType([new $String(value), new $String(name), err$2])); /* */ $s = 37; case 37: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				/* */ $s = 38; case 38:
				return [false, _r$9];
			/* } */ case 36:
		/* } */ case 14:
		if (f.actual === false) {
			f.actual = {};
		}
		_key = name; (f.actual || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: flag };
		return [true, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.parseOne }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.alreadythere = alreadythere; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.flag = flag; $f.fv = fv; $f.hasValue = hasValue; $f.i = i; $f.m = m; $f.name = name; $f.numMinuses = numMinuses; $f.ok = ok; $f.s = s; $f.value = value; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.parseOne = function() { return this.$val.parseOne(); };
	FlagSet.ptr.prototype.Parse = function(arguments$1) {
		var $ptr, _r, _ref, _tuple, arguments$1, err, f, seen, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; arguments$1 = $f.arguments$1; err = $f.err; f = $f.f; seen = $f.seen; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		f.parsed = true;
		f.args = arguments$1;
		/* while (true) { */ case 1:
			_r = f.parseOne(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			seen = _tuple[0];
			err = _tuple[1];
			if (seen) {
				/* continue; */ $s = 1; continue;
			}
			if ($interfaceIsEqual(err, $ifaceNil)) {
				/* break; */ $s = 2; continue;
			}
			_ref = f.errorHandling;
			if (_ref === 0) {
				return err;
			} else if (_ref === 1) {
				os.Exit(2);
			} else if (_ref === 2) {
				$panic(err);
			}
		/* } */ $s = 1; continue; case 2:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Parse }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.arguments$1 = arguments$1; $f.err = err; $f.f = f; $f.seen = seen; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Parse = function(arguments$1) { return this.$val.Parse(arguments$1); };
	FlagSet.ptr.prototype.Parsed = function() {
		var $ptr, f;
		f = this;
		return f.parsed;
	};
	FlagSet.prototype.Parsed = function() { return this.$val.Parsed(); };
	Parse = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.CommandLine.Parse($subslice(os.Args, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	NewFlagSet = function(name, errorHandling) {
		var $ptr, errorHandling, f, name;
		f = new FlagSet.ptr($throwNilPointerError, name, false, false, false, sliceType$2.nil, errorHandling, $ifaceNil);
		return f;
	};
	$pkg.NewFlagSet = NewFlagSet;
	FlagSet.ptr.prototype.Init = function(name, errorHandling) {
		var $ptr, errorHandling, f, name;
		f = this;
		f.name = name;
		f.errorHandling = errorHandling;
	};
	FlagSet.prototype.Init = function(name, errorHandling) { return this.$val.Init(name, errorHandling); };
	ptrType.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsBoolFlag", name: "IsBoolFlag", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$1.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$5.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$6.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$7.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$17.methods = [{prop: "out", name: "out", pkg: "flag", typ: $funcType([], [io.Writer], false)}, {prop: "SetOutput", name: "SetOutput", pkg: "", typ: $funcType([io.Writer], [], false)}, {prop: "VisitAll", name: "VisitAll", pkg: "", typ: $funcType([funcType], [], false)}, {prop: "Visit", name: "Visit", pkg: "", typ: $funcType([funcType], [], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [ptrType$9], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $String], [$error], false)}, {prop: "PrintDefaults", name: "PrintDefaults", pkg: "", typ: $funcType([], [], false)}, {prop: "NFlag", name: "NFlag", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Arg", name: "Arg", pkg: "", typ: $funcType([$Int], [$String], false)}, {prop: "NArg", name: "NArg", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Args", name: "Args", pkg: "", typ: $funcType([], [sliceType$2], false)}, {prop: "BoolVar", name: "BoolVar", pkg: "", typ: $funcType([ptrType$10, $String, $Bool, $String], [], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([$String, $Bool, $String], [ptrType$10], false)}, {prop: "IntVar", name: "IntVar", pkg: "", typ: $funcType([ptrType$11, $String, $Int, $String], [], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([$String, $Int, $String], [ptrType$11], false)}, {prop: "Int64Var", name: "Int64Var", pkg: "", typ: $funcType([ptrType$12, $String, $Int64, $String], [], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([$String, $Int64, $String], [ptrType$12], false)}, {prop: "UintVar", name: "UintVar", pkg: "", typ: $funcType([ptrType$13, $String, $Uint, $String], [], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([$String, $Uint, $String], [ptrType$13], false)}, {prop: "Uint64Var", name: "Uint64Var", pkg: "", typ: $funcType([ptrType$14, $String, $Uint64, $String], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([$String, $Uint64, $String], [ptrType$14], false)}, {prop: "StringVar", name: "StringVar", pkg: "", typ: $funcType([ptrType$15, $String, $String, $String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([$String, $String, $String], [ptrType$15], false)}, {prop: "Float64Var", name: "Float64Var", pkg: "", typ: $funcType([ptrType$16, $String, $Float64, $String], [], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([$String, $Float64, $String], [ptrType$16], false)}, {prop: "DurationVar", name: "DurationVar", pkg: "", typ: $funcType([ptrType$8, $String, time.Duration, $String], [], false)}, {prop: "Duration", name: "Duration", pkg: "", typ: $funcType([$String, time.Duration, $String], [ptrType$8], false)}, {prop: "Var", name: "Var", pkg: "", typ: $funcType([Value, $String, $String], [], false)}, {prop: "failf", name: "failf", pkg: "flag", typ: $funcType([$String, sliceType], [$error], true)}, {prop: "usage", name: "usage", pkg: "flag", typ: $funcType([], [], false)}, {prop: "parseOne", name: "parseOne", pkg: "flag", typ: $funcType([], [$Bool, $error], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([sliceType$2], [$error], false)}, {prop: "Parsed", name: "Parsed", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Init", name: "Init", pkg: "", typ: $funcType([$String, ErrorHandling], [], false)}];
	boolFlag.init([{prop: "IsBoolFlag", name: "IsBoolFlag", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	Value.init([{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	FlagSet.init([{prop: "Usage", name: "Usage", pkg: "", typ: funcType$1, tag: ""}, {prop: "name", name: "name", pkg: "flag", typ: $String, tag: ""}, {prop: "parsed", name: "parsed", pkg: "flag", typ: $Bool, tag: ""}, {prop: "actual", name: "actual", pkg: "flag", typ: mapType, tag: ""}, {prop: "formal", name: "formal", pkg: "flag", typ: mapType, tag: ""}, {prop: "args", name: "args", pkg: "flag", typ: sliceType$2, tag: ""}, {prop: "errorHandling", name: "errorHandling", pkg: "flag", typ: ErrorHandling, tag: ""}, {prop: "output", name: "output", pkg: "flag", typ: io.Writer, tag: ""}]);
	Flag.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "Usage", name: "Usage", pkg: "", typ: $String, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: Value, tag: ""}, {prop: "DefValue", name: "DefValue", pkg: "", typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrHelp = errors.New("flag: help requested");
		$pkg.CommandLine = NewFlagSet((x = os.Args, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), 1);
		$pkg.Usage = (function $b() {
			var $ptr, _r, x$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = fmt.Fprintf(os.Stderr, "Usage of %s:\n", new sliceType([new $String((x$1 = os.Args, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			$r = PrintDefaults(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
		});
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bufio"] = (function() {
	var $pkg = {}, $init, bytes, errors, io, utf8, errNegativeRead, errNegativeWrite;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	io = $packages["io"];
	utf8 = $packages["unicode/utf8"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrInvalidUnreadByte = errors.New("bufio: invalid use of UnreadByte");
		$pkg.ErrInvalidUnreadRune = errors.New("bufio: invalid use of UnreadRune");
		$pkg.ErrBufferFull = errors.New("bufio: buffer full");
		$pkg.ErrNegativeCount = errors.New("bufio: negative count");
		errNegativeRead = errors.New("bufio: reader returned negative count from Read");
		errNegativeWrite = errors.New("bufio: writer returned negative count from Write");
		$pkg.ErrTooLong = errors.New("bufio.Scanner: token too long");
		$pkg.ErrNegativeAdvance = errors.New("bufio.Scanner: SplitFunc returns negative advance count");
		$pkg.ErrAdvanceTooFar = errors.New("bufio.Scanner: SplitFunc returns advance count beyond input");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding"] = (function() {
	var $pkg = {}, $init, BinaryMarshaler, BinaryUnmarshaler, TextMarshaler, TextUnmarshaler, sliceType;
	BinaryMarshaler = $pkg.BinaryMarshaler = $newType(8, $kindInterface, "encoding.BinaryMarshaler", "BinaryMarshaler", "encoding", null);
	BinaryUnmarshaler = $pkg.BinaryUnmarshaler = $newType(8, $kindInterface, "encoding.BinaryUnmarshaler", "BinaryUnmarshaler", "encoding", null);
	TextMarshaler = $pkg.TextMarshaler = $newType(8, $kindInterface, "encoding.TextMarshaler", "TextMarshaler", "encoding", null);
	TextUnmarshaler = $pkg.TextUnmarshaler = $newType(8, $kindInterface, "encoding.TextUnmarshaler", "TextUnmarshaler", "encoding", null);
	sliceType = $sliceType($Uint8);
	BinaryMarshaler.init([{prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType, $error], false)}]);
	BinaryUnmarshaler.init([{prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType], [$error], false)}]);
	TextMarshaler.init([{prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType, $error], false)}]);
	TextUnmarshaler.init([{prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType], [$error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/gob"] = (function() {
	var $pkg = {}, $init, bufio, encoding, errors, fmt, nosync, io, math, os, reflect, atomic, unicode, utf8, emptyStruct, gobError, userTypeInfo, typeId, gobType, CommonType, arrayType, gobEncoderType, mapType, sliceType, fieldType, structType, wireType, typeInfo, GobEncoder, GobDecoder, ptrType$1, sliceType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, structType$1, ptrType$16, structType$2, ptrType$17, structType$3, ptrType$18, structType$4, ptrType$19, structType$5, ptrType$20, structType$6, ptrType$21, structType$7, ptrType$22, ptrType$23, ptrType$24, ptrType$25, ptrType$26, ptrType$27, sliceType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, sliceType$7, sliceType$8, sliceType$9, sliceType$10, sliceType$11, sliceType$12, sliceType$13, sliceType$14, sliceType$15, sliceType$16, sliceType$17, sliceType$18, ptrType$32, ptrType$42, ptrType$43, sliceType$22, mapType$1, mapType$8, ptrType$45, errBadUint, errBadType, errRange, decOpTable, emptyStructType, errBadCount, spaceForLength, userTypeLock, userTypeCache, gobEncoderInterfaceType, gobDecoderInterfaceType, binaryMarshalerInterfaceType, binaryUnmarshalerInterfaceType, textMarshalerInterfaceType, textUnmarshalerInterfaceType, nextId, typeLock, types, idToType, builtinIdToType, tBool, tInt, tUint, tFloat, tBytes, tString, tComplex, tInterface, tReserved7, tReserved6, tReserved5, tReserved4, tReserved3, tReserved2, tReserved1, tWireType, wireTypeUserInfo, typeInfoMap, registerLock, nameToConcreteType, concreteTypeToName, x, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, x$1, _r$21, decBool, decInt8, decUint8, decInt16, decUint16, decInt32, decUint32, decInt64, decUint64, float64FromBits, float32FromBits, decFloat32, decFloat64, decComplex64, decComplex128, decString, init, errorf, error_, validUserType, implementsInterface, userType, setTypeId, init$1, newArrayType, newGobEncoderType, newMapType, newSliceType, newStructType, newTypeObject, isExported, isSent, getBaseType, getType, checkId, bootstrapType, lookupTypeInfo, getTypeInfo, buildTypeInfo, mustGetTypeInfo, RegisterName, Register, registerBasics;
	bufio = $packages["bufio"];
	encoding = $packages["encoding"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	atomic = $packages["sync/atomic"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	emptyStruct = $pkg.emptyStruct = $newType(0, $kindStruct, "gob.emptyStruct", "emptyStruct", "encoding/gob", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	gobError = $pkg.gobError = $newType(0, $kindStruct, "gob.gobError", "gobError", "encoding/gob", function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	userTypeInfo = $pkg.userTypeInfo = $newType(0, $kindStruct, "gob.userTypeInfo", "userTypeInfo", "encoding/gob", function(user_, base_, indir_, externalEnc_, externalDec_, encIndir_, decIndir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.user = $ifaceNil;
			this.base = $ifaceNil;
			this.indir = 0;
			this.externalEnc = 0;
			this.externalDec = 0;
			this.encIndir = 0;
			this.decIndir = 0;
			return;
		}
		this.user = user_;
		this.base = base_;
		this.indir = indir_;
		this.externalEnc = externalEnc_;
		this.externalDec = externalDec_;
		this.encIndir = encIndir_;
		this.decIndir = decIndir_;
	});
	typeId = $pkg.typeId = $newType(4, $kindInt32, "gob.typeId", "typeId", "encoding/gob", null);
	gobType = $pkg.gobType = $newType(8, $kindInterface, "gob.gobType", "gobType", "encoding/gob", null);
	CommonType = $pkg.CommonType = $newType(0, $kindStruct, "gob.CommonType", "CommonType", "encoding/gob", function(Name_, Id_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Id = 0;
			return;
		}
		this.Name = Name_;
		this.Id = Id_;
	});
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "gob.arrayType", "arrayType", "encoding/gob", function(CommonType_, Elem_, Len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.CommonType = new CommonType.ptr("", 0);
			this.Elem = 0;
			this.Len = 0;
			return;
		}
		this.CommonType = CommonType_;
		this.Elem = Elem_;
		this.Len = Len_;
	});
	gobEncoderType = $pkg.gobEncoderType = $newType(0, $kindStruct, "gob.gobEncoderType", "gobEncoderType", "encoding/gob", function(CommonType_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.CommonType = new CommonType.ptr("", 0);
			return;
		}
		this.CommonType = CommonType_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "gob.mapType", "mapType", "encoding/gob", function(CommonType_, Key_, Elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.CommonType = new CommonType.ptr("", 0);
			this.Key = 0;
			this.Elem = 0;
			return;
		}
		this.CommonType = CommonType_;
		this.Key = Key_;
		this.Elem = Elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "gob.sliceType", "sliceType", "encoding/gob", function(CommonType_, Elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.CommonType = new CommonType.ptr("", 0);
			this.Elem = 0;
			return;
		}
		this.CommonType = CommonType_;
		this.Elem = Elem_;
	});
	fieldType = $pkg.fieldType = $newType(0, $kindStruct, "gob.fieldType", "fieldType", "encoding/gob", function(Name_, Id_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Id = 0;
			return;
		}
		this.Name = Name_;
		this.Id = Id_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "gob.structType", "structType", "encoding/gob", function(CommonType_, Field_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.CommonType = new CommonType.ptr("", 0);
			this.Field = sliceType$22.nil;
			return;
		}
		this.CommonType = CommonType_;
		this.Field = Field_;
	});
	wireType = $pkg.wireType = $newType(0, $kindStruct, "gob.wireType", "wireType", "encoding/gob", function(ArrayT_, SliceT_, StructT_, MapT_, GobEncoderT_, BinaryMarshalerT_, TextMarshalerT_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ArrayT = ptrType$23.nil;
			this.SliceT = ptrType$24.nil;
			this.StructT = ptrType$25.nil;
			this.MapT = ptrType$26.nil;
			this.GobEncoderT = ptrType$27.nil;
			this.BinaryMarshalerT = ptrType$27.nil;
			this.TextMarshalerT = ptrType$27.nil;
			return;
		}
		this.ArrayT = ArrayT_;
		this.SliceT = SliceT_;
		this.StructT = StructT_;
		this.MapT = MapT_;
		this.GobEncoderT = GobEncoderT_;
		this.BinaryMarshalerT = BinaryMarshalerT_;
		this.TextMarshalerT = TextMarshalerT_;
	});
	typeInfo = $pkg.typeInfo = $newType(0, $kindStruct, "gob.typeInfo", "typeInfo", "encoding/gob", function(id_, encInit_, encoder_, wire_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.id = 0;
			this.encInit = new nosync.Mutex.ptr(false);
			this.encoder = new atomic.Value.ptr($ifaceNil);
			this.wire = ptrType$32.nil;
			return;
		}
		this.id = id_;
		this.encInit = encInit_;
		this.encoder = encoder_;
		this.wire = wire_;
	});
	GobEncoder = $pkg.GobEncoder = $newType(8, $kindInterface, "gob.GobEncoder", "GobEncoder", "encoding/gob", null);
	GobDecoder = $pkg.GobDecoder = $newType(8, $kindInterface, "gob.GobDecoder", "GobDecoder", "encoding/gob", null);
	ptrType$1 = $ptrType(userTypeInfo);
	sliceType$1 = $sliceType($Uint8);
	ptrType$2 = $ptrType(GobEncoder);
	ptrType$3 = $ptrType(GobDecoder);
	ptrType$4 = $ptrType(encoding.BinaryMarshaler);
	ptrType$5 = $ptrType(encoding.BinaryUnmarshaler);
	ptrType$6 = $ptrType(encoding.TextMarshaler);
	ptrType$7 = $ptrType(encoding.TextUnmarshaler);
	ptrType$8 = $ptrType($Bool);
	ptrType$9 = $ptrType($Int);
	ptrType$10 = $ptrType($Uint);
	ptrType$11 = $ptrType($Float64);
	ptrType$12 = $ptrType(sliceType$1);
	ptrType$13 = $ptrType($String);
	ptrType$14 = $ptrType($Complex128);
	ptrType$15 = $ptrType($emptyInterface);
	structType$1 = $structType([{prop: "r7", name: "r7", pkg: "encoding/gob", typ: $Int, tag: ""}]);
	ptrType$16 = $ptrType(structType$1);
	structType$2 = $structType([{prop: "r6", name: "r6", pkg: "encoding/gob", typ: $Int, tag: ""}]);
	ptrType$17 = $ptrType(structType$2);
	structType$3 = $structType([{prop: "r5", name: "r5", pkg: "encoding/gob", typ: $Int, tag: ""}]);
	ptrType$18 = $ptrType(structType$3);
	structType$4 = $structType([{prop: "r4", name: "r4", pkg: "encoding/gob", typ: $Int, tag: ""}]);
	ptrType$19 = $ptrType(structType$4);
	structType$5 = $structType([{prop: "r3", name: "r3", pkg: "encoding/gob", typ: $Int, tag: ""}]);
	ptrType$20 = $ptrType(structType$5);
	structType$6 = $structType([{prop: "r2", name: "r2", pkg: "encoding/gob", typ: $Int, tag: ""}]);
	ptrType$21 = $ptrType(structType$6);
	structType$7 = $structType([{prop: "r1", name: "r1", pkg: "encoding/gob", typ: $Int, tag: ""}]);
	ptrType$22 = $ptrType(structType$7);
	ptrType$23 = $ptrType(arrayType);
	ptrType$24 = $ptrType(sliceType);
	ptrType$25 = $ptrType(structType);
	ptrType$26 = $ptrType(mapType);
	ptrType$27 = $ptrType(gobEncoderType);
	sliceType$2 = $sliceType($Bool);
	sliceType$3 = $sliceType($emptyInterface);
	sliceType$4 = $sliceType($Complex64);
	sliceType$5 = $sliceType($Complex128);
	sliceType$6 = $sliceType($Float32);
	sliceType$7 = $sliceType($Float64);
	sliceType$8 = $sliceType($Int);
	sliceType$9 = $sliceType($Int16);
	sliceType$10 = $sliceType($Int32);
	sliceType$11 = $sliceType($Int64);
	sliceType$12 = $sliceType($Int8);
	sliceType$13 = $sliceType($String);
	sliceType$14 = $sliceType($Uint);
	sliceType$15 = $sliceType($Uint16);
	sliceType$16 = $sliceType($Uint32);
	sliceType$17 = $sliceType($Uint64);
	sliceType$18 = $sliceType($Uintptr);
	ptrType$32 = $ptrType(wireType);
	ptrType$42 = $ptrType(typeInfo);
	ptrType$43 = $ptrType(fieldType);
	sliceType$22 = $sliceType(ptrType$43);
	mapType$1 = $mapType(reflect.Type, ptrType$42);
	mapType$8 = $mapType(typeId, $Bool);
	ptrType$45 = $ptrType(CommonType);
	decBool = function(i, state, value) {
		var $ptr, i, state, value, x$2;
		value = value;
		value.SetBool(!((x$2 = state.decodeUint(), (x$2.$high === 0 && x$2.$low === 0))));
	};
	decInt8 = function(i, state, value) {
		var $ptr, i, state, v, value;
		value = value;
		v = state.decodeInt();
		if ((v.$high < -1 || (v.$high === -1 && v.$low < 4294967168)) || (0 < v.$high || (0 === v.$high && 127 < v.$low))) {
			error_(i.ovfl);
		}
		value.SetInt(v);
	};
	decUint8 = function(i, state, value) {
		var $ptr, i, state, v, value;
		value = value;
		v = state.decodeUint();
		if ((0 < v.$high || (0 === v.$high && 255 < v.$low))) {
			error_(i.ovfl);
		}
		value.SetUint(v);
	};
	decInt16 = function(i, state, value) {
		var $ptr, i, state, v, value;
		value = value;
		v = state.decodeInt();
		if ((v.$high < -1 || (v.$high === -1 && v.$low < 4294934528)) || (0 < v.$high || (0 === v.$high && 32767 < v.$low))) {
			error_(i.ovfl);
		}
		value.SetInt(v);
	};
	decUint16 = function(i, state, value) {
		var $ptr, i, state, v, value;
		value = value;
		v = state.decodeUint();
		if ((0 < v.$high || (0 === v.$high && 65535 < v.$low))) {
			error_(i.ovfl);
		}
		value.SetUint(v);
	};
	decInt32 = function(i, state, value) {
		var $ptr, i, state, v, value;
		value = value;
		v = state.decodeInt();
		if ((v.$high < -1 || (v.$high === -1 && v.$low < 2147483648)) || (0 < v.$high || (0 === v.$high && 2147483647 < v.$low))) {
			error_(i.ovfl);
		}
		value.SetInt(v);
	};
	decUint32 = function(i, state, value) {
		var $ptr, i, state, v, value;
		value = value;
		v = state.decodeUint();
		if ((0 < v.$high || (0 === v.$high && 4294967295 < v.$low))) {
			error_(i.ovfl);
		}
		value.SetUint(v);
	};
	decInt64 = function(i, state, value) {
		var $ptr, i, state, v, value;
		value = value;
		v = state.decodeInt();
		value.SetInt(v);
	};
	decUint64 = function(i, state, value) {
		var $ptr, i, state, v, value;
		value = value;
		v = state.decodeUint();
		value.SetUint(v);
	};
	float64FromBits = function(u) {
		var $ptr, i, u, v, x$2;
		v = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < 8)) { break; }
			v = $shiftLeft64(v, (8));
			v = (x$2 = new $Uint64(u.$high & 0, (u.$low & 255) >>> 0), new $Uint64(v.$high | x$2.$high, (v.$low | x$2.$low) >>> 0));
			u = $shiftRightUint64(u, (8));
			i = i + (1) >> 0;
		}
		return math.Float64frombits(v);
	};
	float32FromBits = function(u, ovfl) {
		var $ptr, av, ovfl, u, v;
		v = float64FromBits(u);
		av = v;
		if (av < 0) {
			av = -av;
		}
		if (3.4028234663852886e+38 < av && av <= 1.7976931348623157e+308) {
			error_(ovfl);
		}
		return v;
	};
	decFloat32 = function(i, state, value) {
		var $ptr, i, state, value;
		value = value;
		value.SetFloat(float32FromBits(state.decodeUint(), i.ovfl));
	};
	decFloat64 = function(i, state, value) {
		var $ptr, i, state, value;
		value = value;
		value.SetFloat(float64FromBits(state.decodeUint()));
	};
	decComplex64 = function(i, state, value) {
		var $ptr, i, imag, real, state, value;
		value = value;
		real = float32FromBits(state.decodeUint(), i.ovfl);
		imag = float32FromBits(state.decodeUint(), i.ovfl);
		value.SetComplex(new $Complex128(real, imag));
	};
	decComplex128 = function(i, state, value) {
		var $ptr, i, imag, real, state, value;
		value = value;
		real = float64FromBits(state.decodeUint());
		imag = float64FromBits(state.decodeUint());
		value.SetComplex(new $Complex128(real, imag));
	};
	decString = function(i, state, value) {
		var $ptr, _tuple, _tuple$1, data, err, i, n, ok, state, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; data = $f.data; err = $f.err; i = $f.i; n = $f.n; ok = $f.ok; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = value;
		_tuple = state.getLength();
		n = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			$r = errorf("bad %s slice length: %d", new sliceType$3([value.Type(), new $Int(n)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		data = $makeSlice(sliceType$1, n);
		_tuple$1 = state.b.Read(data);
		err = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
			$r = errorf("error decoding string: %s", new sliceType$3([err])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		value.SetString($bytesToString(data));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decString }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.data = data; $f.err = err; $f.i = i; $f.n = n; $f.ok = ok; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	init = function() {
		var $ptr, _r$22, _r$23, _ref, _ref$1, _tmp, _tmp$1, iop, uop, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; _r$23 = $f._r$23; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; iop = $f.iop; uop = $f.uop; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = $throwNilPointerError;
		_tmp$1 = $throwNilPointerError;
		iop = _tmp;
		uop = _tmp$1;
		_r$22 = reflect.TypeOf(new $Int(0)).Bits(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_ref = _r$22;
		/* */ if (_ref === 32) { $s = 2; continue; }
		/* */ if (_ref === 64) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 32) { */ case 2:
			iop = decInt32;
			uop = decUint32;
			$s = 5; continue;
		/* } else if (_ref === 64) { */ case 3:
			iop = decInt64;
			uop = decUint64;
			$s = 5; continue;
		/* } else { */ case 4:
			$panic(new $String("gob: unknown size of int/uint"));
		/* } */ case 5:
		decOpTable[2] = iop;
		decOpTable[7] = uop;
		_r$23 = reflect.TypeOf(new $Uintptr(0)).Bits(); /* */ $s = 6; case 6: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_ref$1 = _r$23;
		/* */ if (_ref$1 === 32) { $s = 7; continue; }
		/* */ if (_ref$1 === 64) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (_ref$1 === 32) { */ case 7:
			uop = decUint32;
			$s = 10; continue;
		/* } else if (_ref$1 === 64) { */ case 8:
			uop = decUint64;
			$s = 10; continue;
		/* } else { */ case 9:
			$panic(new $String("gob: unknown size of uintptr"));
		/* } */ case 10:
		decOpTable[12] = uop;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.iop = iop; $f.uop = uop; $f.$s = $s; $f.$r = $r; return $f;
	};
	errorf = function(format, args) {
		var $ptr, _r$22, args, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; args = $f.args; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = fmt.Errorf("gob: " + format, args); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		$r = error_(_r$22); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: errorf }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f.args = args; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	error_ = function(err) {
		var $ptr, err, x$2;
		$panic((x$2 = new gobError.ptr(err), new x$2.constructor.elem(x$2)));
	};
	validUserType = function(rt) {
		var $ptr, _entry, _entry$1, _key, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, err, indir, indir$1, indir$2, indir$3, ok, ok$1, ok$2, ok$3, pt, rt, slowpoke, ut, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; err = $f.err; indir = $f.indir; indir$1 = $f.indir$1; indir$2 = $f.indir$2; indir$3 = $f.indir$3; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; pt = $f.pt; rt = $f.rt; slowpoke = $f.slowpoke; ut = $f.ut; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		ut = ptrType$1.nil;
		err = $ifaceNil;
		userTypeLock.RLock();
		ut = (_entry = userTypeCache[reflect.Type.keyFor(rt)], _entry !== undefined ? _entry.v : ptrType$1.nil);
		userTypeLock.RUnlock();
		if (!(ut === ptrType$1.nil)) {
			return [ut, err];
		}
		userTypeLock.Lock();
		$deferred.push([$methodVal(userTypeLock, "Unlock"), []]);
		ut = (_entry$1 = userTypeCache[reflect.Type.keyFor(rt)], _entry$1 !== undefined ? _entry$1.v : ptrType$1.nil);
		if (!(ut === ptrType$1.nil)) {
			return [ut, err];
		}
		ut = new userTypeInfo.ptr($ifaceNil, $ifaceNil, 0, 0, 0, 0, 0);
		ut.base = rt;
		ut.user = rt;
		slowpoke = ut.base;
		/* while (true) { */ case 1:
			pt = ut.base;
			_r$22 = pt.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			/* */ if (!((_r$22 === 22))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((_r$22 === 22))) { */ case 3:
				/* break; */ $s = 2; continue;
			/* } */ case 4:
			_r$23 = pt.Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			ut.base = _r$23;
			/* */ if ($interfaceIsEqual(ut.base, slowpoke)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ($interfaceIsEqual(ut.base, slowpoke)) { */ case 7:
				_tmp = ptrType$1.nil;
				_r$24 = ut.base.String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				_r$25 = errors.New("can't represent recursive pointer type " + _r$24); /* */ $s = 10; case 10: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				_tmp$1 = _r$25;
				ut = _tmp;
				err = _tmp$1;
				/* */ $s = 11; case 11:
				return [ut, err];
			/* } */ case 8:
			/* */ if ((_r$26 = ut.indir % 2, _r$26 === _r$26 ? _r$26 : $throwRuntimeError("integer divide by zero")) === 0) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ((_r$26 = ut.indir % 2, _r$26 === _r$26 ? _r$26 : $throwRuntimeError("integer divide by zero")) === 0) { */ case 12:
				_r$27 = slowpoke.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				slowpoke = _r$27;
			/* } */ case 13:
			ut.indir = ut.indir + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$28 = implementsInterface(ut.user, gobEncoderInterfaceType); /* */ $s = 15; case 15: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
		_tuple = _r$28;
		ok = _tuple[0];
		indir = _tuple[1];
		/* */ if (ok) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (ok) { */ case 16:
			_tmp$2 = 1;
			_tmp$3 = indir;
			ut.externalEnc = _tmp$2;
			ut.encIndir = _tmp$3;
			$s = 18; continue;
		/* } else { */ case 17:
			_r$29 = implementsInterface(ut.user, binaryMarshalerInterfaceType); /* */ $s = 19; case 19: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
			_tuple$1 = _r$29;
			ok$1 = _tuple$1[0];
			indir$1 = _tuple$1[1];
			/* */ if (ok$1) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (ok$1) { */ case 20:
				_tmp$4 = 2;
				_tmp$5 = indir$1;
				ut.externalEnc = _tmp$4;
				ut.encIndir = _tmp$5;
			/* } */ case 21:
		/* } */ case 18:
		_r$30 = implementsInterface(ut.user, gobDecoderInterfaceType); /* */ $s = 22; case 22: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
		_tuple$2 = _r$30;
		ok$2 = _tuple$2[0];
		indir$2 = _tuple$2[1];
		/* */ if (ok$2) { $s = 23; continue; }
		/* */ $s = 24; continue;
		/* if (ok$2) { */ case 23:
			_tmp$6 = 1;
			_tmp$7 = indir$2;
			ut.externalDec = _tmp$6;
			ut.decIndir = _tmp$7;
			$s = 25; continue;
		/* } else { */ case 24:
			_r$31 = implementsInterface(ut.user, binaryUnmarshalerInterfaceType); /* */ $s = 26; case 26: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			_tuple$3 = _r$31;
			ok$3 = _tuple$3[0];
			indir$3 = _tuple$3[1];
			/* */ if (ok$3) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if (ok$3) { */ case 27:
				_tmp$8 = 2;
				_tmp$9 = indir$3;
				ut.externalDec = _tmp$8;
				ut.decIndir = _tmp$9;
			/* } */ case 28:
		/* } */ case 25:
		_key = rt; (userTypeCache || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: ut };
		return [ut, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [ut, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: validUserType }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.err = err; $f.indir = indir; $f.indir$1 = indir$1; $f.indir$2 = indir$2; $f.indir$3 = indir$3; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.pt = pt; $f.rt = rt; $f.slowpoke = slowpoke; $f.ut = ut; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	implementsInterface = function(typ, gobEncDecType) {
		var $ptr, _r$22, _r$23, _r$24, _r$25, _r$26, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, gobEncDecType, indir, p, rt, success, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; gobEncDecType = $f.gobEncDecType; indir = $f.indir; p = $f.p; rt = $f.rt; success = $f.success; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		success = false;
		indir = 0;
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			return [success, indir];
		}
		rt = typ;
		/* while (true) { */ case 1:
			_r$22 = rt.Implements(gobEncDecType); /* */ $s = 5; case 5: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			/* */ if (_r$22) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r$22) { */ case 3:
				_tmp = true;
				_tmp$1 = indir;
				success = _tmp;
				indir = _tmp$1;
				return [success, indir];
			/* } */ case 4:
			p = rt;
			_r$23 = p.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			/* */ if (_r$23 === 22) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$23 === 22) { */ case 6:
				indir = indir + (1) << 24 >> 24;
				if (indir > 100) {
					_tmp$2 = false;
					_tmp$3 = 0;
					success = _tmp$2;
					indir = _tmp$3;
					return [success, indir];
				}
				_r$24 = p.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				rt = _r$24;
				/* continue; */ $s = 1; continue;
			/* } */ case 7:
			/* break; */ $s = 2; continue;
		/* } */ $s = 1; continue; case 2:
		_r$25 = typ.Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		/* */ if (!((_r$25 === 22))) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (!((_r$25 === 22))) { */ case 10:
			_r$26 = reflect.PtrTo(typ).Implements(gobEncDecType); /* */ $s = 15; case 15: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			/* */ if (_r$26) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (_r$26) { */ case 13:
				_tmp$4 = true;
				_tmp$5 = -1;
				success = _tmp$4;
				indir = _tmp$5;
				return [success, indir];
			/* } */ case 14:
		/* } */ case 11:
		_tmp$6 = false;
		_tmp$7 = 0;
		success = _tmp$6;
		indir = _tmp$7;
		return [success, indir];
		/* */ } return; } if ($f === undefined) { $f = { $blk: implementsInterface }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f.gobEncDecType = gobEncDecType; $f.indir = indir; $f.p = p; $f.rt = rt; $f.success = success; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	userType = function(rt) {
		var $ptr, _r$22, _tuple, err, rt, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; _tuple = $f._tuple; err = $f.err; rt = $f.rt; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = validUserType(rt); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = _r$22;
		ut = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			error_(err);
		}
		return ut;
		/* */ } return; } if ($f === undefined) { $f = { $blk: userType }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f._tuple = _tuple; $f.err = err; $f.rt = rt; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	setTypeId = function(typ) {
		var $ptr, _key, _r$22, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r$22 = $f._r$22; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = typ.id(); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		/* */ if (!((_r$22 === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r$22 === 0))) { */ case 1:
			return;
		/* } */ case 2:
		nextId = nextId + (1) >> 0;
		$r = typ.setId(nextId); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_key = nextId; (idToType || $throwRuntimeError("assignment to entry in nil map"))[typeId.keyFor(_key)] = { k: _key, v: typ };
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setTypeId }; } $f.$ptr = $ptr; $f._key = _key; $f._r$22 = _r$22; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	typeId.prototype.gobType = function() {
		var $ptr, _entry, t;
		t = this.$val;
		if (t === 0) {
			return $ifaceNil;
		}
		return (_entry = idToType[typeId.keyFor(t)], _entry !== undefined ? _entry.v : $ifaceNil);
	};
	$ptrType(typeId).prototype.gobType = function() { return new typeId(this.$get()).gobType(); };
	typeId.prototype.string = function() {
		var $ptr, _r$22, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this.$val;
		if ($interfaceIsEqual(new typeId(t).gobType(), $ifaceNil)) {
			return "<nil>";
		}
		_r$22 = new typeId(t).gobType().string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$22;
		/* */ } return; } if ($f === undefined) { $f = { $blk: typeId.prototype.string }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(typeId).prototype.string = function() { return new typeId(this.$get()).string(); };
	typeId.prototype.name = function() {
		var $ptr, _r$22, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this.$val;
		if ($interfaceIsEqual(new typeId(t).gobType(), $ifaceNil)) {
			return "<nil>";
		}
		_r$22 = new typeId(t).gobType().name(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$22;
		/* */ } return; } if ($f === undefined) { $f = { $blk: typeId.prototype.name }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(typeId).prototype.name = function() { return new typeId(this.$get()).name(); };
	CommonType.ptr.prototype.id = function() {
		var $ptr, t;
		t = this;
		return t.Id;
	};
	CommonType.prototype.id = function() { return this.$val.id(); };
	CommonType.ptr.prototype.setId = function(id) {
		var $ptr, id, t;
		t = this;
		t.Id = id;
	};
	CommonType.prototype.setId = function(id) { return this.$val.setId(id); };
	CommonType.ptr.prototype.string = function() {
		var $ptr, t;
		t = this;
		return t.Name;
	};
	CommonType.prototype.string = function() { return this.$val.string(); };
	CommonType.ptr.prototype.safeString = function(seen) {
		var $ptr, seen, t;
		t = this;
		return t.Name;
	};
	CommonType.prototype.safeString = function(seen) { return this.$val.safeString(seen); };
	CommonType.ptr.prototype.name = function() {
		var $ptr, t;
		t = this;
		return t.Name;
	};
	CommonType.prototype.name = function() { return this.$val.name(); };
	init$1 = function() {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _entry, _i, _key, _keys, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _ref, k, v, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _entry = $f._entry; _i = $f._i; _key = $f._key; _keys = $f._keys; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _ref = $f._ref; k = $f.k; v = $f.v; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = checkId(16, tWireType); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$22 = mustGetTypeInfo(reflect.TypeOf((x$2 = new arrayType.ptr(new CommonType.ptr("", 0), 0, 0), new x$2.constructor.elem(x$2)))); /* */ $s = 2; case 2: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg = _r$22.id;
		$r = checkId(17, _arg); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$23 = mustGetTypeInfo(reflect.TypeOf((x$3 = new CommonType.ptr("", 0), new x$3.constructor.elem(x$3)))); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_arg$1 = _r$23.id;
		$r = checkId(18, _arg$1); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$24 = mustGetTypeInfo(reflect.TypeOf((x$4 = new sliceType.ptr(new CommonType.ptr("", 0), 0), new x$4.constructor.elem(x$4)))); /* */ $s = 6; case 6: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_arg$2 = _r$24.id;
		$r = checkId(19, _arg$2); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$25 = mustGetTypeInfo(reflect.TypeOf((x$5 = new structType.ptr(new CommonType.ptr("", 0), sliceType$22.nil), new x$5.constructor.elem(x$5)))); /* */ $s = 8; case 8: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		_arg$3 = _r$25.id;
		$r = checkId(20, _arg$3); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$26 = mustGetTypeInfo(reflect.TypeOf((x$6 = new fieldType.ptr("", 0), new x$6.constructor.elem(x$6)))); /* */ $s = 10; case 10: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
		_arg$4 = _r$26.id;
		$r = checkId(21, _arg$4); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$27 = mustGetTypeInfo(reflect.TypeOf((x$7 = new mapType.ptr(new CommonType.ptr("", 0), 0, 0), new x$7.constructor.elem(x$7)))); /* */ $s = 12; case 12: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
		_arg$5 = _r$27.id;
		$r = checkId(23, _arg$5); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		builtinIdToType = {};
		_ref = idToType;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			v = _entry.v;
			_key = k; (builtinIdToType || $throwRuntimeError("assignment to entry in nil map"))[typeId.keyFor(_key)] = { k: _key, v: v };
			_i++;
		}
		/* */ if (nextId > 64) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (nextId > 64) { */ case 14:
			_r$28 = fmt.Sprintln(new sliceType$3([new $String("nextId too large:"), new typeId(nextId)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			$panic(new $String(_r$28));
		/* } */ case 15:
		nextId = 64;
		$r = registerBasics(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$29 = userType(reflect.TypeOf(ptrType$32.nil)); /* */ $s = 18; case 18: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
		wireTypeUserInfo = _r$29;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: init$1 }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._keys = _keys; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._ref = _ref; $f.k = k; $f.v = v; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	newArrayType = function(name) {
		var $ptr, a, name;
		a = new arrayType.ptr(new CommonType.ptr(name, 0), 0, 0);
		return a;
	};
	arrayType.ptr.prototype.init = function(elem, len) {
		var $ptr, _r$22, a, elem, len, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; a = $f.a; elem = $f.elem; len = $f.len; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		$r = setTypeId(a); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$22 = elem.id(); /* */ $s = 2; case 2: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		a.Elem = _r$22;
		a.Len = len;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: arrayType.ptr.prototype.init }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f.a = a; $f.elem = elem; $f.len = len; $f.$s = $s; $f.$r = $r; return $f;
	};
	arrayType.prototype.init = function(elem, len) { return this.$val.init(elem, len); };
	arrayType.ptr.prototype.safeString = function(seen) {
		var $ptr, _arg, _arg$1, _entry, _key, _r$22, _r$23, a, seen, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _entry = $f._entry; _key = $f._key; _r$22 = $f._r$22; _r$23 = $f._r$23; a = $f.a; seen = $f.seen; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		if ((_entry = seen[typeId.keyFor(a.CommonType.Id)], _entry !== undefined ? _entry.v : false)) {
			return a.CommonType.Name;
		}
		_key = a.CommonType.Id; (seen || $throwRuntimeError("assignment to entry in nil map"))[typeId.keyFor(_key)] = { k: _key, v: true };
		_arg = new $Int(a.Len);
		_r$22 = new typeId(a.Elem).gobType().safeString(seen); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = new $String(_r$22);
		_r$23 = fmt.Sprintf("[%d]%s", new sliceType$3([_arg, _arg$1])); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: arrayType.ptr.prototype.safeString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._entry = _entry; $f._key = _key; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.a = a; $f.seen = seen; $f.$s = $s; $f.$r = $r; return $f;
	};
	arrayType.prototype.safeString = function(seen) { return this.$val.safeString(seen); };
	arrayType.ptr.prototype.string = function() {
		var $ptr, _r$22, a, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_r$22 = a.safeString({}); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$22;
		/* */ } return; } if ($f === undefined) { $f = { $blk: arrayType.ptr.prototype.string }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f.a = a; $f.$s = $s; $f.$r = $r; return $f;
	};
	arrayType.prototype.string = function() { return this.$val.string(); };
	newGobEncoderType = function(name) {
		var $ptr, g, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; g = $f.g; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = new gobEncoderType.ptr(new CommonType.ptr(name, 0));
		$r = setTypeId(g); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return g;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newGobEncoderType }; } $f.$ptr = $ptr; $f.g = g; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	gobEncoderType.ptr.prototype.safeString = function(seen) {
		var $ptr, g, seen;
		g = this;
		return g.CommonType.Name;
	};
	gobEncoderType.prototype.safeString = function(seen) { return this.$val.safeString(seen); };
	gobEncoderType.ptr.prototype.string = function() {
		var $ptr, g;
		g = this;
		return g.CommonType.Name;
	};
	gobEncoderType.prototype.string = function() { return this.$val.string(); };
	newMapType = function(name) {
		var $ptr, m, name;
		m = new mapType.ptr(new CommonType.ptr(name, 0), 0, 0);
		return m;
	};
	mapType.ptr.prototype.init = function(key, elem) {
		var $ptr, _r$22, _r$23, elem, key, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; _r$23 = $f._r$23; elem = $f.elem; key = $f.key; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		$r = setTypeId(m); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$22 = key.id(); /* */ $s = 2; case 2: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		m.Key = _r$22;
		_r$23 = elem.id(); /* */ $s = 3; case 3: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		m.Elem = _r$23;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: mapType.ptr.prototype.init }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.elem = elem; $f.key = key; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapType.prototype.init = function(key, elem) { return this.$val.init(key, elem); };
	mapType.ptr.prototype.safeString = function(seen) {
		var $ptr, _entry, _key, _r$22, _r$23, _r$24, elem, key, m, seen, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; elem = $f.elem; key = $f.key; m = $f.m; seen = $f.seen; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if ((_entry = seen[typeId.keyFor(m.CommonType.Id)], _entry !== undefined ? _entry.v : false)) {
			return m.CommonType.Name;
		}
		_key = m.CommonType.Id; (seen || $throwRuntimeError("assignment to entry in nil map"))[typeId.keyFor(_key)] = { k: _key, v: true };
		_r$22 = new typeId(m.Key).gobType().safeString(seen); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		key = _r$22;
		_r$23 = new typeId(m.Elem).gobType().safeString(seen); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		elem = _r$23;
		_r$24 = fmt.Sprintf("map[%s]%s", new sliceType$3([new $String(key), new $String(elem)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		/* */ $s = 4; case 4:
		return _r$24;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapType.ptr.prototype.safeString }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f.elem = elem; $f.key = key; $f.m = m; $f.seen = seen; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapType.prototype.safeString = function(seen) { return this.$val.safeString(seen); };
	mapType.ptr.prototype.string = function() {
		var $ptr, _r$22, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r$22 = m.safeString({}); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$22;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapType.ptr.prototype.string }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapType.prototype.string = function() { return this.$val.string(); };
	newSliceType = function(name) {
		var $ptr, name, s;
		s = new sliceType.ptr(new CommonType.ptr(name, 0), 0);
		return s;
	};
	sliceType.ptr.prototype.init = function(elem) {
		var $ptr, _r$22, _r$23, elem, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; _r$23 = $f._r$23; elem = $f.elem; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = setTypeId(s); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$22 = elem.id(); /* */ $s = 4; case 4: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		/* */ if (_r$22 === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r$22 === 0) { */ case 2:
			$r = setTypeId(elem); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		_r$23 = elem.id(); /* */ $s = 6; case 6: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		s.Elem = _r$23;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: sliceType.ptr.prototype.init }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.elem = elem; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	sliceType.prototype.init = function(elem) { return this.$val.init(elem); };
	sliceType.ptr.prototype.safeString = function(seen) {
		var $ptr, _arg, _entry, _key, _r$22, _r$23, s, seen, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _entry = $f._entry; _key = $f._key; _r$22 = $f._r$22; _r$23 = $f._r$23; s = $f.s; seen = $f.seen; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if ((_entry = seen[typeId.keyFor(s.CommonType.Id)], _entry !== undefined ? _entry.v : false)) {
			return s.CommonType.Name;
		}
		_key = s.CommonType.Id; (seen || $throwRuntimeError("assignment to entry in nil map"))[typeId.keyFor(_key)] = { k: _key, v: true };
		_r$22 = new typeId(s.Elem).gobType().safeString(seen); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg = new $String(_r$22);
		_r$23 = fmt.Sprintf("[]%s", new sliceType$3([_arg])); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sliceType.ptr.prototype.safeString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._entry = _entry; $f._key = _key; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.s = s; $f.seen = seen; $f.$s = $s; $f.$r = $r; return $f;
	};
	sliceType.prototype.safeString = function(seen) { return this.$val.safeString(seen); };
	sliceType.ptr.prototype.string = function() {
		var $ptr, _r$22, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$22 = s.safeString({}); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$22;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sliceType.ptr.prototype.string }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	sliceType.prototype.string = function() { return this.$val.string(); };
	structType.ptr.prototype.safeString = function(seen) {
		var $ptr, _arg, _arg$1, _entry, _i, _key, _r$22, _r$23, _ref, _tuple, f, ok, s, seen, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _entry = $f._entry; _i = $f._i; _key = $f._key; _r$22 = $f._r$22; _r$23 = $f._r$23; _ref = $f._ref; _tuple = $f._tuple; f = $f.f; ok = $f.ok; s = $f.s; seen = $f.seen; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (s === ptrType$25.nil) {
			return "<nil>";
		}
		_tuple = (_entry = seen[typeId.keyFor(s.CommonType.Id)], _entry !== undefined ? [_entry.v, true] : [false, false]);
		ok = _tuple[1];
		if (ok) {
			return s.CommonType.Name;
		}
		_key = s.CommonType.Id; (seen || $throwRuntimeError("assignment to entry in nil map"))[typeId.keyFor(_key)] = { k: _key, v: true };
		str = s.CommonType.Name + " = struct { ";
		_ref = s.Field;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			f = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_arg = new $String(f.Name);
			_r$22 = new typeId(f.Id).gobType().safeString(seen); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$22);
			_r$23 = fmt.Sprintf("%s %s; ", new sliceType$3([_arg, _arg$1])); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			str = str + (_r$23);
			_i++;
		/* } */ $s = 1; continue; case 2:
		str = str + ("}");
		return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.safeString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._ref = _ref; $f._tuple = _tuple; $f.f = f; $f.ok = ok; $f.s = s; $f.seen = seen; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.safeString = function(seen) { return this.$val.safeString(seen); };
	structType.ptr.prototype.string = function() {
		var $ptr, _r$22, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$22 = s.safeString({}); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$22;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.string }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.string = function() { return this.$val.string(); };
	newStructType = function(name) {
		var $ptr, name, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; name = $f.name; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = new structType.ptr(new CommonType.ptr(name, 0), sliceType$22.nil);
		$r = setTypeId(s); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newStructType }; } $f.$ptr = $ptr; $f.name = name; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	newTypeObject = function(name, ut, rt) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _key, _key$1, _key$2, _key$3, _key$4, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _ref, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, at, err, err$1, f, gt, i, mt, name, rt, st, st$1, t, t$1, tname, typ, type0, type1, ut, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$45 = $f._r$45; _r$46 = $f._r$46; _r$47 = $f._r$47; _r$48 = $f._r$48; _r$49 = $f._r$49; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; at = $f.at; err = $f.err; err$1 = $f.err$1; f = $f.f; gt = $f.gt; i = $f.i; mt = $f.mt; name = $f.name; rt = $f.rt; st = $f.st; st$1 = $f.st$1; t = $f.t; t$1 = $f.t$1; tname = $f.tname; typ = $f.typ; type0 = $f.type0; type1 = $f.type1; ut = $f.ut; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		rt = [rt];
		/* */ if (!((ut.externalEnc === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((ut.externalEnc === 0))) { */ case 1:
			_r$22 = newGobEncoderType(name); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return [_r$22, $ifaceNil];
		/* } */ case 2:
		err[0] = $ifaceNil;
		_tmp = $ifaceNil;
		_tmp$1 = $ifaceNil;
		type0 = _tmp;
		type1 = _tmp$1;
		$deferred.push([(function(err, rt) { return function() {
			var $ptr;
			if (!($interfaceIsEqual(err[0], $ifaceNil))) {
				delete types[reflect.Type.keyFor(rt[0])];
			}
		}; })(err, rt), []]);
		t = rt[0];
		_r$23 = t.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_ref = _r$23;
		/* */ if (_ref === 1) { $s = 6; continue; }
		/* */ if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { $s = 7; continue; }
		/* */ if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { $s = 8; continue; }
		/* */ if (_ref === 13 || _ref === 14) { $s = 9; continue; }
		/* */ if (_ref === 15 || _ref === 16) { $s = 10; continue; }
		/* */ if (_ref === 24) { $s = 11; continue; }
		/* */ if (_ref === 20) { $s = 12; continue; }
		/* */ if (_ref === 17) { $s = 13; continue; }
		/* */ if (_ref === 21) { $s = 14; continue; }
		/* */ if (_ref === 23) { $s = 15; continue; }
		/* */ if (_ref === 25) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (_ref === 1) { */ case 6:
			return [new typeId(tBool).gobType(), $ifaceNil];
		/* } else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { */ case 7:
			return [new typeId(tInt).gobType(), $ifaceNil];
		/* } else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { */ case 8:
			return [new typeId(tUint).gobType(), $ifaceNil];
		/* } else if (_ref === 13 || _ref === 14) { */ case 9:
			return [new typeId(tFloat).gobType(), $ifaceNil];
		/* } else if (_ref === 15 || _ref === 16) { */ case 10:
			return [new typeId(tComplex).gobType(), $ifaceNil];
		/* } else if (_ref === 24) { */ case 11:
			return [new typeId(tString).gobType(), $ifaceNil];
		/* } else if (_ref === 20) { */ case 12:
			return [new typeId(tInterface).gobType(), $ifaceNil];
		/* } else if (_ref === 17) { */ case 13:
			at = newArrayType(name);
			_key = rt[0]; (types || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: at };
			_r$24 = t.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			_arg = _r$24;
			_r$25 = getBaseType("", _arg); /* */ $s = 20; case 20: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			_tuple = _r$25;
			type0 = _tuple[0];
			err[0] = _tuple[1];
			if (!($interfaceIsEqual(err[0], $ifaceNil))) {
				return [$ifaceNil, err[0]];
			}
			_arg$1 = type0;
			_r$26 = t.Len(); /* */ $s = 21; case 21: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			_arg$2 = _r$26;
			$r = at.init(_arg$1, _arg$2); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return [at, $ifaceNil];
		/* } else if (_ref === 21) { */ case 14:
			mt = newMapType(name);
			_key$1 = rt[0]; (types || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$1)] = { k: _key$1, v: mt };
			_r$27 = t.Key(); /* */ $s = 23; case 23: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			_arg$3 = _r$27;
			_r$28 = getBaseType("", _arg$3); /* */ $s = 24; case 24: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			_tuple$1 = _r$28;
			type0 = _tuple$1[0];
			err[0] = _tuple$1[1];
			if (!($interfaceIsEqual(err[0], $ifaceNil))) {
				return [$ifaceNil, err[0]];
			}
			_r$29 = t.Elem(); /* */ $s = 25; case 25: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
			_arg$4 = _r$29;
			_r$30 = getBaseType("", _arg$4); /* */ $s = 26; case 26: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
			_tuple$2 = _r$30;
			type1 = _tuple$2[0];
			err[0] = _tuple$2[1];
			if (!($interfaceIsEqual(err[0], $ifaceNil))) {
				return [$ifaceNil, err[0]];
			}
			$r = mt.init(type0, type1); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return [mt, $ifaceNil];
		/* } else if (_ref === 23) { */ case 15:
			_r$31 = t.Elem(); /* */ $s = 30; case 30: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			_r$32 = _r$31.Kind(); /* */ $s = 31; case 31: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			/* */ if (_r$32 === 8) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (_r$32 === 8) { */ case 28:
				return [new typeId(tBytes).gobType(), $ifaceNil];
			/* } */ case 29:
			st = newSliceType(name);
			_key$2 = rt[0]; (types || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$2)] = { k: _key$2, v: st };
			_r$33 = t.Elem(); /* */ $s = 32; case 32: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			_r$34 = _r$33.Name(); /* */ $s = 33; case 33: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
			_arg$5 = _r$34;
			_r$35 = t.Elem(); /* */ $s = 34; case 34: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
			_arg$6 = _r$35;
			_r$36 = getBaseType(_arg$5, _arg$6); /* */ $s = 35; case 35: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
			_tuple$3 = _r$36;
			type0 = _tuple$3[0];
			err[0] = _tuple$3[1];
			if (!($interfaceIsEqual(err[0], $ifaceNil))) {
				return [$ifaceNil, err[0]];
			}
			$r = st.init(type0); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return [st, $ifaceNil];
		/* } else if (_ref === 25) { */ case 16:
			_r$37 = newStructType(name); /* */ $s = 37; case 37: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
			st$1 = _r$37;
			_key$3 = rt[0]; (types || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$3)] = { k: _key$3, v: st$1 };
			_key$4 = st$1.CommonType.id(); (idToType || $throwRuntimeError("assignment to entry in nil map"))[typeId.keyFor(_key$4)] = { k: _key$4, v: st$1 };
			i = 0;
			/* while (true) { */ case 38:
				_r$38 = t.NumField(); /* */ $s = 40; case 40: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
				/* if (!(i < _r$38)) { break; } */ if(!(i < _r$38)) { $s = 39; continue; }
				f = [f];
				_r$39 = t.Field(i); /* */ $s = 41; case 41: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
				f[0] = $clone(_r$39, reflect.StructField);
				_r$40 = isSent(f[0]); /* */ $s = 44; case 44: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
				/* */ if (!_r$40) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (!_r$40) { */ case 42:
					i = i + (1) >> 0;
					/* continue; */ $s = 38; continue;
				/* } */ case 43:
				_r$41 = userType(f[0].Type); /* */ $s = 45; case 45: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
				typ = _r$41.base;
				_r$42 = typ.Name(); /* */ $s = 46; case 46: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
				tname = _r$42;
				/* */ if (tname === "") { $s = 47; continue; }
				/* */ $s = 48; continue;
				/* if (tname === "") { */ case 47:
					_r$43 = userType(f[0].Type); /* */ $s = 49; case 49: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
					t$1 = _r$43.base;
					_r$44 = t$1.String(); /* */ $s = 50; case 50: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
					tname = _r$44;
				/* } */ case 48:
				_r$45 = getBaseType(tname, f[0].Type); /* */ $s = 51; case 51: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
				_tuple$4 = _r$45;
				gt = _tuple$4[0];
				err$1 = _tuple$4[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					return [$ifaceNil, err$1];
				}
				_r$46 = gt.id(); /* */ $s = 54; case 54: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
				/* */ if (_r$46 === 0) { $s = 52; continue; }
				/* */ $s = 53; continue;
				/* if (_r$46 === 0) { */ case 52:
					$r = setTypeId(gt); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 53:
				_r$47 = gt.id(); /* */ $s = 56; case 56: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
				st$1.Field = $append(st$1.Field, new fieldType.ptr(f[0].Name, _r$47));
				i = i + (1) >> 0;
			/* } */ $s = 38; continue; case 39:
			return [st$1, $ifaceNil];
		/* } else { */ case 17:
			_r$48 = rt[0].String(); /* */ $s = 57; case 57: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
			_r$49 = errors.New("gob NewTypeObject can't handle type: " + _r$48); /* */ $s = 58; case 58: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
			/* */ $s = 59; case 59:
			return [$ifaceNil, _r$49];
		/* } */ case 18:
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; return [$ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: newTypeObject }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$45 = _r$45; $f._r$46 = _r$46; $f._r$47 = _r$47; $f._r$48 = _r$48; $f._r$49 = _r$49; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.at = at; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.gt = gt; $f.i = i; $f.mt = mt; $f.name = name; $f.rt = rt; $f.st = st; $f.st$1 = st$1; $f.t = t; $f.t$1 = t$1; $f.tname = tname; $f.typ = typ; $f.type0 = type0; $f.type1 = type1; $f.ut = ut; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	isExported = function(name) {
		var $ptr, _tuple, name, rune;
		_tuple = utf8.DecodeRuneInString(name);
		rune = _tuple[0];
		return unicode.IsUpper(rune);
	};
	isSent = function(field) {
		var $ptr, _r$22, _r$23, _r$24, _r$25, _v, field, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _v = $f._v; field = $f.field; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!isExported(field.Name)) {
			return false;
		}
		typ = field.Type;
		/* while (true) { */ case 1:
			_r$22 = typ.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			/* if (!(_r$22 === 22)) { break; } */ if(!(_r$22 === 22)) { $s = 2; continue; }
			_r$23 = typ.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			typ = _r$23;
		/* } */ $s = 1; continue; case 2:
		_r$24 = typ.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		if (_r$24 === 18) { _v = true; $s = 7; continue s; }
		_r$25 = typ.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		_v = _r$25 === 19; case 7:
		/* */ if (_v) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_v) { */ case 5:
			return false;
		/* } */ case 6:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: isSent }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._v = _v; $f.field = field; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	getBaseType = function(name, rt) {
		var $ptr, _r$22, _r$23, name, rt, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; _r$23 = $f._r$23; name = $f.name; rt = $f.rt; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = userType(rt); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		ut = _r$22;
		_r$23 = getType(name, ut, ut.base); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getBaseType }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.name = name; $f.rt = rt; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	getType = function(name, ut, rt) {
		var $ptr, _entry, _key, _r$22, _tuple, _tuple$1, err, name, present, rt, typ, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r$22 = $f._r$22; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; name = $f.name; present = $f.present; rt = $f.rt; typ = $f.typ; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = (_entry = types[reflect.Type.keyFor(rt)], _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]);
		typ = _tuple[0];
		present = _tuple[1];
		if (present) {
			return [typ, $ifaceNil];
		}
		_r$22 = newTypeObject(name, ut, rt); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple$1 = _r$22;
		typ = _tuple$1[0];
		err = _tuple$1[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			_key = rt; (types || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: typ };
		}
		return [typ, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: getType }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r$22 = _r$22; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.name = name; $f.present = present; $f.rt = rt; $f.typ = typ; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	checkId = function(want, got) {
		var $ptr, _r$22, _r$23, _r$24, _r$25, got, want, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; got = $f.got; want = $f.want; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!((want === got))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((want === got))) { */ case 1:
			_r$22 = fmt.Fprintf(os.Stderr, "checkId: %d should be %d\n", new sliceType$3([new $Int((got >> 0)), new $Int((want >> 0))])); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			_r$22;
			_r$23 = new typeId(got).name(); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_r$24 = new typeId(got).string(); /* */ $s = 5; case 5: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			_r$25 = new typeId(want).string(); /* */ $s = 6; case 6: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			$panic(new $String("bootstrap type wrong id: " + _r$23 + " " + _r$24 + " not " + _r$25));
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: checkId }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f.got = got; $f.want = want; $f.$s = $s; $f.$r = $r; return $f;
	};
	bootstrapType = function(name, e, expect) {
		var $ptr, _entry, _key, _r$22, _r$23, _r$24, _tuple, e, expect, name, present, rt, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _tuple = $f._tuple; e = $f.e; expect = $f.expect; name = $f.name; present = $f.present; rt = $f.rt; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = reflect.TypeOf(e).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		rt = _r$22;
		_tuple = (_entry = types[reflect.Type.keyFor(rt)], _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]);
		present = _tuple[1];
		/* */ if (present) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (present) { */ case 2:
			_r$23 = rt.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			$panic(new $String("bootstrap type already present: " + name + ", " + _r$23));
		/* } */ case 3:
		typ = new CommonType.ptr(name, 0);
		_key = rt; (types || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: typ };
		$r = setTypeId(typ); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = checkId(expect, nextId); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$24 = userType(rt); /* */ $s = 7; case 7: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_r$24;
		return nextId;
		/* */ } return; } if ($f === undefined) { $f = { $blk: bootstrapType }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._tuple = _tuple; $f.e = e; $f.expect = expect; $f.name = name; $f.present = present; $f.rt = rt; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	wireType.ptr.prototype.string = function() {
		var $ptr, w;
		w = this;
		if (w === ptrType$32.nil) {
			return "unknown type";
		}
		if (!(w.ArrayT === ptrType$23.nil)) {
			return w.ArrayT.CommonType.Name;
		} else if (!(w.SliceT === ptrType$24.nil)) {
			return w.SliceT.CommonType.Name;
		} else if (!(w.StructT === ptrType$25.nil)) {
			return w.StructT.CommonType.Name;
		} else if (!(w.MapT === ptrType$26.nil)) {
			return w.MapT.CommonType.Name;
		} else if (!(w.GobEncoderT === ptrType$27.nil)) {
			return w.GobEncoderT.CommonType.Name;
		} else if (!(w.BinaryMarshalerT === ptrType$27.nil)) {
			return w.BinaryMarshalerT.CommonType.Name;
		} else if (!(w.TextMarshalerT === ptrType$27.nil)) {
			return w.TextMarshalerT.CommonType.Name;
		}
		return "unknown type";
	};
	wireType.prototype.string = function() { return this.$val.string(); };
	lookupTypeInfo = function(rt) {
		var $ptr, _entry, _tuple, m, rt;
		_tuple = $assertType(typeInfoMap.Load(), mapType$1, true);
		m = _tuple[0];
		return (_entry = m[reflect.Type.keyFor(rt)], _entry !== undefined ? _entry.v : ptrType$42.nil);
	};
	getTypeInfo = function(ut) {
		var $ptr, _r$22, info, rt, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; info = $f.info; rt = $f.rt; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rt = ut.base;
		if (!((ut.externalEnc === 0))) {
			rt = ut.user;
		}
		info = lookupTypeInfo(rt);
		if (!(info === ptrType$42.nil)) {
			return [info, $ifaceNil];
		}
		_r$22 = buildTypeInfo(ut, rt); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$22;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getTypeInfo }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f.info = info; $f.rt = rt; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	buildTypeInfo = function(ut, rt) {
		var $ptr, _entry, _i, _key, _key$1, _keys, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _ref, _ref$1, _ref$2, _tuple, _tuple$1, _tuple$2, err, err$1, gt, gt$1, info, info$1, k, m, newm, rt, t, typ, userType$1, ut, v, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _keys = $f._keys; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; err$1 = $f.err$1; gt = $f.gt; gt$1 = $f.gt$1; info = $f.info; info$1 = $f.info$1; k = $f.k; m = $f.m; newm = $f.newm; rt = $f.rt; t = $f.t; typ = $f.typ; userType$1 = $f.userType$1; ut = $f.ut; v = $f.v; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		typeLock.Lock();
		$deferred.push([$methodVal(typeLock, "Unlock"), []]);
		info = lookupTypeInfo(rt);
		if (!(info === ptrType$42.nil)) {
			return [info, $ifaceNil];
		}
		_r$22 = rt.Name(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$23 = getBaseType(_r$22, rt); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_tuple = _r$23;
		gt = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$42.nil, err];
		}
		_r$24 = gt.id(); /* */ $s = 3; case 3: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		info$1 = new typeInfo.ptr(_r$24, new nosync.Mutex.ptr(false), new atomic.Value.ptr($ifaceNil), ptrType$32.nil);
		/* */ if (!((ut.externalEnc === 0))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((ut.externalEnc === 0))) { */ case 4:
			_r$25 = rt.Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			_r$26 = getType(_r$25, ut, rt); /* */ $s = 8; case 8: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			_tuple$1 = _r$26;
			userType$1 = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [ptrType$42.nil, err$1];
			}
			_r$27 = userType$1.id(); /* */ $s = 9; case 9: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			_r$28 = new typeId(_r$27).gobType(); /* */ $s = 10; case 10: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			gt$1 = $assertType(_r$28, ptrType$27);
			_ref = ut.externalEnc;
			if (_ref === 1) {
				info$1.wire = new wireType.ptr(ptrType$23.nil, ptrType$24.nil, ptrType$25.nil, ptrType$26.nil, gt$1, ptrType$27.nil, ptrType$27.nil);
			} else if (_ref === 2) {
				info$1.wire = new wireType.ptr(ptrType$23.nil, ptrType$24.nil, ptrType$25.nil, ptrType$26.nil, ptrType$27.nil, gt$1, ptrType$27.nil);
			} else if (_ref === 3) {
				info$1.wire = new wireType.ptr(ptrType$23.nil, ptrType$24.nil, ptrType$25.nil, ptrType$26.nil, ptrType$27.nil, ptrType$27.nil, gt$1);
			}
			rt = ut.user;
			$s = 6; continue;
		/* } else { */ case 5:
			t = new typeId(info$1.id).gobType();
			typ = rt;
			_r$29 = typ.Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
			_ref$1 = _r$29;
			/* */ if (_ref$1 === 17) { $s = 12; continue; }
			/* */ if (_ref$1 === 21) { $s = 13; continue; }
			/* */ if (_ref$1 === 23) { $s = 14; continue; }
			/* */ if (_ref$1 === 25) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (_ref$1 === 17) { */ case 12:
				info$1.wire = new wireType.ptr($assertType(t, ptrType$23), ptrType$24.nil, ptrType$25.nil, ptrType$26.nil, ptrType$27.nil, ptrType$27.nil, ptrType$27.nil);
				$s = 16; continue;
			/* } else if (_ref$1 === 21) { */ case 13:
				info$1.wire = new wireType.ptr(ptrType$23.nil, ptrType$24.nil, ptrType$25.nil, $assertType(t, ptrType$26), ptrType$27.nil, ptrType$27.nil, ptrType$27.nil);
				$s = 16; continue;
			/* } else if (_ref$1 === 23) { */ case 14:
				_r$30 = typ.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				_r$31 = _r$30.Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				/* */ if (!((_r$31 === 8))) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (!((_r$31 === 8))) { */ case 17:
					info$1.wire = new wireType.ptr(ptrType$23.nil, $assertType(t, ptrType$24), ptrType$25.nil, ptrType$26.nil, ptrType$27.nil, ptrType$27.nil, ptrType$27.nil);
				/* } */ case 18:
				$s = 16; continue;
			/* } else if (_ref$1 === 25) { */ case 15:
				info$1.wire = new wireType.ptr(ptrType$23.nil, ptrType$24.nil, $assertType(t, ptrType$25), ptrType$26.nil, ptrType$27.nil, ptrType$27.nil, ptrType$27.nil);
			/* } */ case 16:
		/* } */ case 6:
		newm = {};
		_tuple$2 = $assertType(typeInfoMap.Load(), mapType$1, true);
		m = _tuple$2[0];
		_ref$2 = m;
		_i = 0;
		_keys = $keys(_ref$2);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref$2[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			v = _entry.v;
			_key = k; (newm || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: v };
			_i++;
		}
		_key$1 = rt; (newm || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$1)] = { k: _key$1, v: info$1 };
		typeInfoMap.Store(new mapType$1(newm));
		return [info$1, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [ptrType$42.nil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: buildTypeInfo }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._keys = _keys; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.err$1 = err$1; $f.gt = gt; $f.gt$1 = gt$1; $f.info = info; $f.info$1 = info$1; $f.k = k; $f.m = m; $f.newm = newm; $f.rt = rt; $f.t = t; $f.typ = typ; $f.userType$1 = userType$1; $f.ut = ut; $f.v = v; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mustGetTypeInfo = function(rt) {
		var $ptr, _r$22, _r$23, _r$24, _tuple, err, rt, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _tuple = $f._tuple; err = $f.err; rt = $f.rt; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = userType(rt); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$23 = getTypeInfo(_r$22); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_tuple = _r$23;
		t = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 3:
			_r$24 = err.Error(); /* */ $s = 5; case 5: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			$panic(new $String("getTypeInfo: " + _r$24));
		/* } */ case 4:
		return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mustGetTypeInfo }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._tuple = _tuple; $f.err = err; $f.rt = rt; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	RegisterName = function(name, value) {
		var $ptr, _entry, _entry$1, _key, _key$1, _r$22, _r$23, _r$24, _tuple, _tuple$1, n, name, ok, ok$1, t, ut, value, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _key$1 = $f._key$1; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; n = $f.n; name = $f.name; ok = $f.ok; ok$1 = $f.ok$1; t = $f.t; ut = $f.ut; value = $f.value; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		if (name === "") {
			$panic(new $String("attempt to register empty name"));
		}
		registerLock.Lock();
		$deferred.push([$methodVal(registerLock, "Unlock"), []]);
		_r$22 = userType(reflect.TypeOf(value)); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		ut = _r$22;
		_tuple = (_entry = nameToConcreteType[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]);
		t = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok && !($interfaceIsEqual(t, ut.user))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok && !($interfaceIsEqual(t, ut.user))) { */ case 2:
			_r$23 = fmt.Sprintf("gob: registering duplicate types for %q: %s != %s", new sliceType$3([new $String(name), t, ut.user])); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			$panic(new $String(_r$23));
		/* } */ case 3:
		_tuple$1 = (_entry$1 = concreteTypeToName[reflect.Type.keyFor(ut.base)], _entry$1 !== undefined ? [_entry$1.v, true] : ["", false]);
		n = _tuple$1[0];
		ok$1 = _tuple$1[1];
		/* */ if (ok$1 && !(n === name)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (ok$1 && !(n === name)) { */ case 5:
			_r$24 = fmt.Sprintf("gob: registering duplicate names for %s: %q != %q", new sliceType$3([ut.user, new $String(n), new $String(name)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			$panic(new $String(_r$24));
		/* } */ case 6:
		_key = name; (nameToConcreteType || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: reflect.TypeOf(value) };
		_key$1 = ut.base; (concreteTypeToName || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$1)] = { k: _key$1, v: name };
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: RegisterName }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._key$1 = _key$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.n = n; $f.name = name; $f.ok = ok; $f.ok$1 = ok$1; $f.t = t; $f.ut = ut; $f.value = value; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.RegisterName = RegisterName;
	Register = function(value) {
		var $ptr, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, name, pt, rt, star, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; name = $f.name; pt = $f.pt; rt = $f.rt; star = $f.star; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rt = reflect.TypeOf(value);
		_r$22 = rt.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		name = _r$22;
		star = "";
		_r$23 = rt.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		/* */ if (_r$23 === "") { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r$23 === "") { */ case 2:
			pt = rt;
			_r$24 = pt.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			/* */ if (_r$24 === 22) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_r$24 === 22) { */ case 5:
				star = "*";
				rt = pt;
			/* } */ case 6:
		/* } */ case 3:
		_r$25 = rt.Name(); /* */ $s = 10; case 10: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		/* */ if (!(_r$25 === "")) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!(_r$25 === "")) { */ case 8:
			_r$26 = rt.PkgPath(); /* */ $s = 14; case 14: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			/* */ if (_r$26 === "") { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (_r$26 === "") { */ case 11:
				_r$27 = rt.Name(); /* */ $s = 15; case 15: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				name = star + _r$27;
				$s = 13; continue;
			/* } else { */ case 12:
				_r$28 = rt.PkgPath(); /* */ $s = 16; case 16: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				_r$29 = rt.Name(); /* */ $s = 17; case 17: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				name = star + _r$28 + "." + _r$29;
			/* } */ case 13:
		/* } */ case 9:
		$r = RegisterName(name, value); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Register }; } $f.$ptr = $ptr; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f.name = name; $f.pt = pt; $f.rt = rt; $f.star = star; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Register = Register;
	registerBasics = function() {
		var $ptr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = Register(new $Int(0)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Int8(0)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Int16(0)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Int32(0)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Int64(0, 0)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Uint(0)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Uint8(0)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Uint16(0)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Uint32(0)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Uint64(0, 0)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Float32(0)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Float64(0)); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Complex64(0, 0)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Complex128(0, 0)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Uintptr(0)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Bool(false)); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $String("")); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(sliceType$1.nil); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(sliceType$8.nil); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(sliceType$12.nil); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(sliceType$9.nil); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(sliceType$10.nil); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(sliceType$11.nil); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(sliceType$14.nil); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(sliceType$1.nil); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(sliceType$15.nil); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(sliceType$16.nil); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(sliceType$17.nil); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(sliceType$6.nil); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(sliceType$7.nil); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(sliceType$4.nil); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(sliceType$5.nil); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(sliceType$18.nil); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(sliceType$2.nil); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(sliceType$13.nil); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: registerBasics }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
	};
	typeId.methods = [{prop: "gobType", name: "gobType", pkg: "encoding/gob", typ: $funcType([], [gobType], false)}, {prop: "string", name: "string", pkg: "encoding/gob", typ: $funcType([], [$String], false)}, {prop: "name", name: "name", pkg: "encoding/gob", typ: $funcType([], [$String], false)}];
	ptrType$45.methods = [{prop: "id", name: "id", pkg: "encoding/gob", typ: $funcType([], [typeId], false)}, {prop: "setId", name: "setId", pkg: "encoding/gob", typ: $funcType([typeId], [], false)}, {prop: "string", name: "string", pkg: "encoding/gob", typ: $funcType([], [$String], false)}, {prop: "safeString", name: "safeString", pkg: "encoding/gob", typ: $funcType([mapType$8], [$String], false)}, {prop: "name", name: "name", pkg: "encoding/gob", typ: $funcType([], [$String], false)}];
	ptrType$23.methods = [{prop: "init", name: "init", pkg: "encoding/gob", typ: $funcType([gobType, $Int], [], false)}, {prop: "safeString", name: "safeString", pkg: "encoding/gob", typ: $funcType([mapType$8], [$String], false)}, {prop: "string", name: "string", pkg: "encoding/gob", typ: $funcType([], [$String], false)}];
	ptrType$27.methods = [{prop: "safeString", name: "safeString", pkg: "encoding/gob", typ: $funcType([mapType$8], [$String], false)}, {prop: "string", name: "string", pkg: "encoding/gob", typ: $funcType([], [$String], false)}];
	ptrType$26.methods = [{prop: "init", name: "init", pkg: "encoding/gob", typ: $funcType([gobType, gobType], [], false)}, {prop: "safeString", name: "safeString", pkg: "encoding/gob", typ: $funcType([mapType$8], [$String], false)}, {prop: "string", name: "string", pkg: "encoding/gob", typ: $funcType([], [$String], false)}];
	ptrType$24.methods = [{prop: "init", name: "init", pkg: "encoding/gob", typ: $funcType([gobType], [], false)}, {prop: "safeString", name: "safeString", pkg: "encoding/gob", typ: $funcType([mapType$8], [$String], false)}, {prop: "string", name: "string", pkg: "encoding/gob", typ: $funcType([], [$String], false)}];
	ptrType$25.methods = [{prop: "safeString", name: "safeString", pkg: "encoding/gob", typ: $funcType([mapType$8], [$String], false)}, {prop: "string", name: "string", pkg: "encoding/gob", typ: $funcType([], [$String], false)}];
	ptrType$32.methods = [{prop: "string", name: "string", pkg: "encoding/gob", typ: $funcType([], [$String], false)}];
	emptyStruct.init([]);
	gobError.init([{prop: "err", name: "err", pkg: "encoding/gob", typ: $error, tag: ""}]);
	userTypeInfo.init([{prop: "user", name: "user", pkg: "encoding/gob", typ: reflect.Type, tag: ""}, {prop: "base", name: "base", pkg: "encoding/gob", typ: reflect.Type, tag: ""}, {prop: "indir", name: "indir", pkg: "encoding/gob", typ: $Int, tag: ""}, {prop: "externalEnc", name: "externalEnc", pkg: "encoding/gob", typ: $Int, tag: ""}, {prop: "externalDec", name: "externalDec", pkg: "encoding/gob", typ: $Int, tag: ""}, {prop: "encIndir", name: "encIndir", pkg: "encoding/gob", typ: $Int8, tag: ""}, {prop: "decIndir", name: "decIndir", pkg: "encoding/gob", typ: $Int8, tag: ""}]);
	gobType.init([{prop: "id", name: "id", pkg: "encoding/gob", typ: $funcType([], [typeId], false)}, {prop: "name", name: "name", pkg: "encoding/gob", typ: $funcType([], [$String], false)}, {prop: "safeString", name: "safeString", pkg: "encoding/gob", typ: $funcType([mapType$8], [$String], false)}, {prop: "setId", name: "setId", pkg: "encoding/gob", typ: $funcType([typeId], [], false)}, {prop: "string", name: "string", pkg: "encoding/gob", typ: $funcType([], [$String], false)}]);
	CommonType.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "Id", name: "Id", pkg: "", typ: typeId, tag: ""}]);
	arrayType.init([{prop: "CommonType", name: "", pkg: "", typ: CommonType, tag: ""}, {prop: "Elem", name: "Elem", pkg: "", typ: typeId, tag: ""}, {prop: "Len", name: "Len", pkg: "", typ: $Int, tag: ""}]);
	gobEncoderType.init([{prop: "CommonType", name: "", pkg: "", typ: CommonType, tag: ""}]);
	mapType.init([{prop: "CommonType", name: "", pkg: "", typ: CommonType, tag: ""}, {prop: "Key", name: "Key", pkg: "", typ: typeId, tag: ""}, {prop: "Elem", name: "Elem", pkg: "", typ: typeId, tag: ""}]);
	sliceType.init([{prop: "CommonType", name: "", pkg: "", typ: CommonType, tag: ""}, {prop: "Elem", name: "Elem", pkg: "", typ: typeId, tag: ""}]);
	fieldType.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "Id", name: "Id", pkg: "", typ: typeId, tag: ""}]);
	structType.init([{prop: "CommonType", name: "", pkg: "", typ: CommonType, tag: ""}, {prop: "Field", name: "Field", pkg: "", typ: sliceType$22, tag: ""}]);
	wireType.init([{prop: "ArrayT", name: "ArrayT", pkg: "", typ: ptrType$23, tag: ""}, {prop: "SliceT", name: "SliceT", pkg: "", typ: ptrType$24, tag: ""}, {prop: "StructT", name: "StructT", pkg: "", typ: ptrType$25, tag: ""}, {prop: "MapT", name: "MapT", pkg: "", typ: ptrType$26, tag: ""}, {prop: "GobEncoderT", name: "GobEncoderT", pkg: "", typ: ptrType$27, tag: ""}, {prop: "BinaryMarshalerT", name: "BinaryMarshalerT", pkg: "", typ: ptrType$27, tag: ""}, {prop: "TextMarshalerT", name: "TextMarshalerT", pkg: "", typ: ptrType$27, tag: ""}]);
	typeInfo.init([{prop: "id", name: "id", pkg: "encoding/gob", typ: typeId, tag: ""}, {prop: "encInit", name: "encInit", pkg: "encoding/gob", typ: nosync.Mutex, tag: ""}, {prop: "encoder", name: "encoder", pkg: "encoding/gob", typ: atomic.Value, tag: ""}, {prop: "wire", name: "wire", pkg: "encoding/gob", typ: ptrType$32, tag: ""}]);
	GobEncoder.init([{prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}]);
	GobDecoder.init([{prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$1], [$error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = encoding.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		userTypeLock = new nosync.RWMutex.ptr(false, 0);
		nextId = 0;
		typeLock = new nosync.Mutex.ptr(false);
		builtinIdToType = false;
		wireTypeUserInfo = ptrType$1.nil;
		typeInfoMap = new atomic.Value.ptr($ifaceNil);
		registerLock = new nosync.RWMutex.ptr(false, 0);
		errBadUint = errors.New("gob: encoded unsigned integer out of range");
		errBadType = errors.New("gob: unknown type id or corrupted data");
		errRange = errors.New("gob: bad data: field numbers out of bounds");
		emptyStructType = reflect.TypeOf((x = new emptyStruct.ptr(), new x.constructor.elem(x)));
		errBadCount = errors.New("invalid message length");
		spaceForLength = $makeSlice(sliceType$1, 9);
		decOpTable = $toNativeArray($kindFunc, [$throwNilPointerError, decBool, $throwNilPointerError, decInt8, decInt16, decInt32, decInt64, $throwNilPointerError, decUint8, decUint16, decUint32, decUint64, $throwNilPointerError, decFloat32, decFloat64, decComplex64, decComplex128, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, decString]);
		userTypeCache = {};
		_r = reflect.TypeOf(ptrType$2.nil).Elem(); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		gobEncoderInterfaceType = _r;
		_r$1 = reflect.TypeOf(ptrType$3.nil).Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		gobDecoderInterfaceType = _r$1;
		_r$2 = reflect.TypeOf(ptrType$4.nil).Elem(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		binaryMarshalerInterfaceType = _r$2;
		_r$3 = reflect.TypeOf(ptrType$5.nil).Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		binaryUnmarshalerInterfaceType = _r$3;
		_r$4 = reflect.TypeOf(ptrType$6.nil).Elem(); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		textMarshalerInterfaceType = _r$4;
		_r$5 = reflect.TypeOf(ptrType$7.nil).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		textUnmarshalerInterfaceType = _r$5;
		types = {};
		idToType = {};
		_r$6 = bootstrapType("bool", ptrType$8.nil, 1); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		tBool = _r$6;
		_r$7 = bootstrapType("int", ptrType$9.nil, 2); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		tInt = _r$7;
		_r$8 = bootstrapType("uint", ptrType$10.nil, 3); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		tUint = _r$8;
		_r$9 = bootstrapType("float", ptrType$11.nil, 4); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		tFloat = _r$9;
		_r$10 = bootstrapType("bytes", ptrType$12.nil, 5); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		tBytes = _r$10;
		_r$11 = bootstrapType("string", ptrType$13.nil, 6); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		tString = _r$11;
		_r$12 = bootstrapType("complex", ptrType$14.nil, 7); /* */ $s = 25; case 25: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		tComplex = _r$12;
		_r$13 = bootstrapType("interface", ptrType$15.nil, 8); /* */ $s = 26; case 26: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		tInterface = _r$13;
		_r$14 = bootstrapType("_reserved1", ptrType$16.nil, 9); /* */ $s = 27; case 27: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		tReserved7 = _r$14;
		_r$15 = bootstrapType("_reserved1", ptrType$17.nil, 10); /* */ $s = 28; case 28: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		tReserved6 = _r$15;
		_r$16 = bootstrapType("_reserved1", ptrType$18.nil, 11); /* */ $s = 29; case 29: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		tReserved5 = _r$16;
		_r$17 = bootstrapType("_reserved1", ptrType$19.nil, 12); /* */ $s = 30; case 30: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		tReserved4 = _r$17;
		_r$18 = bootstrapType("_reserved1", ptrType$20.nil, 13); /* */ $s = 31; case 31: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		tReserved3 = _r$18;
		_r$19 = bootstrapType("_reserved1", ptrType$21.nil, 14); /* */ $s = 32; case 32: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		tReserved2 = _r$19;
		_r$20 = bootstrapType("_reserved1", ptrType$22.nil, 15); /* */ $s = 33; case 33: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		tReserved1 = _r$20;
		nameToConcreteType = {};
		concreteTypeToName = {};
		_r$21 = mustGetTypeInfo(reflect.TypeOf((x$1 = new wireType.ptr(ptrType$23.nil, ptrType$24.nil, ptrType$25.nil, ptrType$26.nil, ptrType$27.nil, ptrType$27.nil, ptrType$27.nil), new x$1.constructor.elem(x$1)))); /* */ $s = 34; case 34: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		tWireType = _r$21.id;
		$r = init(); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = init$1(); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/hex"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, io, InvalidByteError, sliceType, sliceType$1, DecodedLen, Decode, fromHexChar, DecodeString;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	InvalidByteError = $pkg.InvalidByteError = $newType(1, $kindUint8, "hex.InvalidByteError", "InvalidByteError", "encoding/hex", null);
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Uint8);
	InvalidByteError.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this.$val;
		_r = fmt.Sprintf("encoding/hex: invalid byte: %#U", new sliceType([new $Int32((e >> 0))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: InvalidByteError.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(InvalidByteError).prototype.Error = function() { return new InvalidByteError(this.$get()).Error(); };
	DecodedLen = function(x) {
		var $ptr, _q, x;
		return (_q = x / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	$pkg.DecodedLen = DecodedLen;
	Decode = function(dst, src) {
		var $ptr, _q, _q$1, _r, _tuple, _tuple$1, a, b, dst, i, ok, src, x, x$1, x$2, x$3;
		if ((_r = src.$length % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 1) {
			return [0, $pkg.ErrLength];
		}
		i = 0;
		while (true) {
			if (!(i < (_q = src.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")))) { break; }
			_tuple = fromHexChar((x = $imul(i, 2), ((x < 0 || x >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x])));
			a = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				return [0, new InvalidByteError(((x$1 = $imul(i, 2), ((x$1 < 0 || x$1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$1])) << 24 >>> 24))];
			}
			_tuple$1 = fromHexChar((x$2 = ($imul(i, 2)) + 1 >> 0, ((x$2 < 0 || x$2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$2])));
			b = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok) {
				return [0, new InvalidByteError(((x$3 = ($imul(i, 2)) + 1 >> 0, ((x$3 < 0 || x$3 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$3])) << 24 >>> 24))];
			}
			((i < 0 || i >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + i] = ((((a << 4 << 24 >>> 24)) | b) >>> 0));
			i = i + (1) >> 0;
		}
		return [(_q$1 = src.$length / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), $ifaceNil];
	};
	$pkg.Decode = Decode;
	fromHexChar = function(c) {
		var $ptr, c;
		if (48 <= c && c <= 57) {
			return [c - 48 << 24 >>> 24, true];
		} else if (97 <= c && c <= 102) {
			return [(c - 97 << 24 >>> 24) + 10 << 24 >>> 24, true];
		} else if (65 <= c && c <= 70) {
			return [(c - 65 << 24 >>> 24) + 10 << 24 >>> 24, true];
		}
		return [0, false];
	};
	DecodeString = function(s) {
		var $ptr, _tuple, dst, err, s, src;
		src = new sliceType$1($stringToBytes(s));
		dst = $makeSlice(sliceType$1, DecodedLen(src.$length));
		_tuple = Decode(dst, src);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [sliceType$1.nil, err];
		}
		return [dst, $ifaceNil];
	};
	$pkg.DecodeString = DecodeString;
	InvalidByteError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrLength = errors.New("encoding/hex: odd length hex string");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/base64"] = (function() {
	var $pkg = {}, $init, io, strconv, Encoding, encoder, CorruptInputError, arrayType, arrayType$1, sliceType, ptrType, arrayType$2, arrayType$3, arrayType$4, ptrType$1, NewEncoding, NewEncoder;
	io = $packages["io"];
	strconv = $packages["strconv"];
	Encoding = $pkg.Encoding = $newType(0, $kindStruct, "base64.Encoding", "Encoding", "encoding/base64", function(encode_, decodeMap_, padChar_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.encode = arrayType.zero();
			this.decodeMap = arrayType$1.zero();
			this.padChar = 0;
			return;
		}
		this.encode = encode_;
		this.decodeMap = decodeMap_;
		this.padChar = padChar_;
	});
	encoder = $pkg.encoder = $newType(0, $kindStruct, "base64.encoder", "encoder", "encoding/base64", function(err_, enc_, w_, buf_, nbuf_, out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			this.enc = ptrType.nil;
			this.w = $ifaceNil;
			this.buf = arrayType$2.zero();
			this.nbuf = 0;
			this.out = arrayType$3.zero();
			return;
		}
		this.err = err_;
		this.enc = enc_;
		this.w = w_;
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.out = out_;
	});
	CorruptInputError = $pkg.CorruptInputError = $newType(8, $kindInt64, "base64.CorruptInputError", "CorruptInputError", "encoding/base64", null);
	arrayType = $arrayType($Uint8, 64);
	arrayType$1 = $arrayType($Uint8, 256);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Encoding);
	arrayType$2 = $arrayType($Uint8, 3);
	arrayType$3 = $arrayType($Uint8, 1024);
	arrayType$4 = $arrayType($Uint8, 4);
	ptrType$1 = $ptrType(encoder);
	NewEncoding = function(encoder$1) {
		var $ptr, e, encoder$1, i, i$1, x, x$1, x$2;
		if (!((encoder$1.length === 64))) {
			$panic(new $String("encoding alphabet is not 64-bytes long"));
		}
		e = new Encoding.ptr(arrayType.zero(), arrayType$1.zero(), 0);
		e.padChar = 61;
		$copyString(new sliceType(e.encode), encoder$1);
		i = 0;
		while (true) {
			if (!(i < 256)) { break; }
			(x = e.decodeMap, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = 255));
			i = i + (1) >> 0;
		}
		i$1 = 0;
		while (true) {
			if (!(i$1 < encoder$1.length)) { break; }
			(x$1 = e.decodeMap, x$2 = encoder$1.charCodeAt(i$1), ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = (i$1 << 24 >>> 24)));
			i$1 = i$1 + (1) >> 0;
		}
		return e;
	};
	$pkg.NewEncoding = NewEncoding;
	Encoding.ptr.prototype.WithPadding = function(padding) {
		var $ptr, enc, padding;
		enc = $clone(this, Encoding);
		enc.padChar = padding;
		return enc;
	};
	Encoding.prototype.WithPadding = function(padding) { return this.$val.WithPadding(padding); };
	Encoding.ptr.prototype.Encode = function(dst, src) {
		var $ptr, _q, _ref, _tmp, _tmp$1, di, dst, enc, n, remain, si, src, val, val$1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		enc = this;
		if (src.$length === 0) {
			return;
		}
		_tmp = 0;
		_tmp$1 = 0;
		di = _tmp;
		si = _tmp$1;
		n = $imul(((_q = src.$length / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), 3);
		while (true) {
			if (!(si < n)) { break; }
			val = ((((((x = si + 0 >> 0, ((x < 0 || x >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x])) >>> 0) << 16 >>> 0) | (((x$1 = si + 1 >> 0, ((x$1 < 0 || x$1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$1])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$2 = si + 2 >> 0, ((x$2 < 0 || x$2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$2])) >>> 0)) >>> 0;
			(x$5 = di + 0 >> 0, ((x$5 < 0 || x$5 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$5] = (x$3 = enc.encode, x$4 = ((val >>> 18 >>> 0) & 63) >>> 0, ((x$4 < 0 || x$4 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[x$4]))));
			(x$8 = di + 1 >> 0, ((x$8 < 0 || x$8 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$8] = (x$6 = enc.encode, x$7 = ((val >>> 12 >>> 0) & 63) >>> 0, ((x$7 < 0 || x$7 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[x$7]))));
			(x$11 = di + 2 >> 0, ((x$11 < 0 || x$11 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$11] = (x$9 = enc.encode, x$10 = ((val >>> 6 >>> 0) & 63) >>> 0, ((x$10 < 0 || x$10 >= x$9.length) ? $throwRuntimeError("index out of range") : x$9[x$10]))));
			(x$14 = di + 3 >> 0, ((x$14 < 0 || x$14 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$14] = (x$12 = enc.encode, x$13 = (val & 63) >>> 0, ((x$13 < 0 || x$13 >= x$12.length) ? $throwRuntimeError("index out of range") : x$12[x$13]))));
			si = si + (3) >> 0;
			di = di + (4) >> 0;
		}
		remain = src.$length - si >> 0;
		if (remain === 0) {
			return;
		}
		val$1 = ((x$15 = si + 0 >> 0, ((x$15 < 0 || x$15 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$15])) >>> 0) << 16 >>> 0;
		if (remain === 2) {
			val$1 = (val$1 | ((((x$16 = si + 1 >> 0, ((x$16 < 0 || x$16 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$16])) >>> 0) << 8 >>> 0))) >>> 0;
		}
		(x$19 = di + 0 >> 0, ((x$19 < 0 || x$19 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$19] = (x$17 = enc.encode, x$18 = ((val$1 >>> 18 >>> 0) & 63) >>> 0, ((x$18 < 0 || x$18 >= x$17.length) ? $throwRuntimeError("index out of range") : x$17[x$18]))));
		(x$22 = di + 1 >> 0, ((x$22 < 0 || x$22 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$22] = (x$20 = enc.encode, x$21 = ((val$1 >>> 12 >>> 0) & 63) >>> 0, ((x$21 < 0 || x$21 >= x$20.length) ? $throwRuntimeError("index out of range") : x$20[x$21]))));
		_ref = remain;
		if (_ref === 2) {
			(x$25 = di + 2 >> 0, ((x$25 < 0 || x$25 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$25] = (x$23 = enc.encode, x$24 = ((val$1 >>> 6 >>> 0) & 63) >>> 0, ((x$24 < 0 || x$24 >= x$23.length) ? $throwRuntimeError("index out of range") : x$23[x$24]))));
			if (!((enc.padChar === -1))) {
				(x$26 = di + 3 >> 0, ((x$26 < 0 || x$26 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$26] = (enc.padChar << 24 >>> 24)));
			}
		} else if (_ref === 1) {
			if (!((enc.padChar === -1))) {
				(x$27 = di + 2 >> 0, ((x$27 < 0 || x$27 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$27] = (enc.padChar << 24 >>> 24)));
				(x$28 = di + 3 >> 0, ((x$28 < 0 || x$28 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$28] = (enc.padChar << 24 >>> 24)));
			}
		}
	};
	Encoding.prototype.Encode = function(dst, src) { return this.$val.Encode(dst, src); };
	Encoding.ptr.prototype.EncodeToString = function(src) {
		var $ptr, buf, enc, src;
		enc = this;
		buf = $makeSlice(sliceType, enc.EncodedLen(src.$length));
		enc.Encode(buf, src);
		return $bytesToString(buf);
	};
	Encoding.prototype.EncodeToString = function(src) { return this.$val.EncodeToString(src); };
	encoder.ptr.prototype.Write = function(p) {
		var $ptr, _q, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, e, err, i, i$1, n, nn, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; e = $f.e; err = $f.err; i = $f.i; i$1 = $f.i$1; n = $f.n; nn = $f.nn; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		e = this;
		if (!($interfaceIsEqual(e.err, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = e.err;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		/* */ if (e.nbuf > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (e.nbuf > 0) { */ case 1:
			i = 0;
			i = 0;
			while (true) {
				if (!(i < p.$length && e.nbuf < 3)) { break; }
				(x = e.buf, x$1 = e.nbuf, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i])));
				e.nbuf = e.nbuf + (1) >> 0;
				i = i + (1) >> 0;
			}
			n = n + (i) >> 0;
			p = $subslice(p, i);
			if (e.nbuf < 3) {
				return [n, err];
			}
			e.enc.Encode(new sliceType(e.out), new sliceType(e.buf));
			_r = e.w.Write($subslice(new sliceType(e.out), 0, 4)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			e.err = _tuple[1];
			/* */ if (!($interfaceIsEqual(e.err, $ifaceNil))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(e.err, $ifaceNil))) { */ case 4:
				_tmp$2 = n;
				_tmp$3 = e.err;
				n = _tmp$2;
				err = _tmp$3;
				return [n, err];
			/* } */ case 5:
			e.nbuf = 0;
		/* } */ case 2:
		/* while (true) { */ case 6:
			/* if (!(p.$length >= 3)) { break; } */ if(!(p.$length >= 3)) { $s = 7; continue; }
			nn = 768;
			if (nn > p.$length) {
				nn = p.$length;
				nn = nn - ((_r$1 = nn % 3, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"))) >> 0;
			}
			e.enc.Encode(new sliceType(e.out), $subslice(p, 0, nn));
			_r$2 = e.w.Write($subslice(new sliceType(e.out), 0, ($imul((_q = nn / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), 4)))); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			e.err = _tuple$1[1];
			/* */ if (!($interfaceIsEqual(e.err, $ifaceNil))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!($interfaceIsEqual(e.err, $ifaceNil))) { */ case 9:
				_tmp$4 = n;
				_tmp$5 = e.err;
				n = _tmp$4;
				err = _tmp$5;
				return [n, err];
			/* } */ case 10:
			n = n + (nn) >> 0;
			p = $subslice(p, nn);
		/* } */ $s = 6; continue; case 7:
		i$1 = 0;
		while (true) {
			if (!(i$1 < p.$length)) { break; }
			(x$2 = e.buf, ((i$1 < 0 || i$1 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i$1] = ((i$1 < 0 || i$1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		e.nbuf = p.$length;
		n = n + (p.$length) >> 0;
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.e = e; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.n = n; $f.nn = nn; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.Write = function(p) { return this.$val.Write(p); };
	encoder.ptr.prototype.Close = function() {
		var $ptr, _r, _tuple, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		/* */ if ($interfaceIsEqual(e.err, $ifaceNil) && e.nbuf > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(e.err, $ifaceNil) && e.nbuf > 0) { */ case 1:
			e.enc.Encode(new sliceType(e.out), $subslice(new sliceType(e.buf), 0, e.nbuf));
			_r = e.w.Write($subslice(new sliceType(e.out), 0, e.enc.EncodedLen(e.nbuf))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			e.err = _tuple[1];
			e.nbuf = 0;
		/* } */ case 2:
		return e.err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.Close }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.Close = function() { return this.$val.Close(); };
	NewEncoder = function(enc, w) {
		var $ptr, enc, w;
		return new encoder.ptr($ifaceNil, enc, w, arrayType$2.zero(), 0, arrayType$3.zero());
	};
	$pkg.NewEncoder = NewEncoder;
	Encoding.ptr.prototype.EncodedLen = function(n) {
		var $ptr, _q, _q$1, enc, n;
		enc = this;
		if (enc.padChar === -1) {
			return (_q = ((($imul(n, 8)) + 5 >> 0)) / 6, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $imul((_q$1 = ((n + 2 >> 0)) / 3, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 4);
	};
	Encoding.prototype.EncodedLen = function(n) { return this.$val.EncodedLen(n); };
	CorruptInputError.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "illegal base64 data at input byte " + strconv.FormatInt(new $Int64(e.$high, e.$low), 10);
	};
	$ptrType(CorruptInputError).prototype.Error = function() { return this.$get().Error(); };
	Encoding.ptr.prototype.decode = function(dst, src) {
		var $ptr, _i, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, dbuf, dinc, dlen, dst, enc, end, err, in$1, j, n, si, src, val, x;
		n = 0;
		end = false;
		err = $ifaceNil;
		enc = this;
		si = 0;
		while (true) {
			if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 13)))) { break; }
			si = si + (1) >> 0;
		}
		while (true) {
			if (!(si < src.$length && !end)) { break; }
			dbuf = arrayType$4.zero();
			_tmp = 3;
			_tmp$1 = 4;
			dinc = _tmp;
			dlen = _tmp$1;
			_ref = dbuf;
			_i = 0;
			while (true) {
				if (!(_i < 4)) { break; }
				j = _i;
				if (src.$length === si) {
					if (!((enc.padChar === -1)) || j < 2) {
						_tmp$2 = n;
						_tmp$3 = false;
						_tmp$4 = new CorruptInputError(0, (si - j >> 0));
						n = _tmp$2;
						end = _tmp$3;
						err = _tmp$4;
						return [n, end, err];
					}
					_tmp$5 = j - 1 >> 0;
					_tmp$6 = j;
					_tmp$7 = true;
					dinc = _tmp$5;
					dlen = _tmp$6;
					end = _tmp$7;
					break;
				}
				in$1 = ((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]);
				si = si + (1) >> 0;
				while (true) {
					if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 13)))) { break; }
					si = si + (1) >> 0;
				}
				if ((in$1 >> 0) === enc.padChar) {
					_ref$1 = j;
					if (_ref$1 === 0 || _ref$1 === 1) {
						_tmp$8 = n;
						_tmp$9 = false;
						_tmp$10 = new CorruptInputError(0, (si - 1 >> 0));
						n = _tmp$8;
						end = _tmp$9;
						err = _tmp$10;
						return [n, end, err];
					} else if (_ref$1 === 2) {
						if (si === src.$length) {
							_tmp$11 = n;
							_tmp$12 = false;
							_tmp$13 = new CorruptInputError(0, src.$length);
							n = _tmp$11;
							end = _tmp$12;
							err = _tmp$13;
							return [n, end, err];
						}
						if (!(((((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) >> 0) === enc.padChar))) {
							_tmp$14 = n;
							_tmp$15 = false;
							_tmp$16 = new CorruptInputError(0, (si - 1 >> 0));
							n = _tmp$14;
							end = _tmp$15;
							err = _tmp$16;
							return [n, end, err];
						}
						si = si + (1) >> 0;
						while (true) {
							if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 13)))) { break; }
							si = si + (1) >> 0;
						}
					}
					if (si < src.$length) {
						err = new CorruptInputError(0, si);
					}
					_tmp$17 = 3;
					_tmp$18 = j;
					_tmp$19 = true;
					dinc = _tmp$17;
					dlen = _tmp$18;
					end = _tmp$19;
					break;
				}
				((j < 0 || j >= dbuf.length) ? $throwRuntimeError("index out of range") : dbuf[j] = (x = enc.decodeMap, ((in$1 < 0 || in$1 >= x.length) ? $throwRuntimeError("index out of range") : x[in$1])));
				if (((j < 0 || j >= dbuf.length) ? $throwRuntimeError("index out of range") : dbuf[j]) === 255) {
					_tmp$20 = n;
					_tmp$21 = false;
					_tmp$22 = new CorruptInputError(0, (si - 1 >> 0));
					n = _tmp$20;
					end = _tmp$21;
					err = _tmp$22;
					return [n, end, err];
				}
				_i++;
			}
			val = (((((((dbuf[0] >>> 0) << 18 >>> 0) | ((dbuf[1] >>> 0) << 12 >>> 0)) >>> 0) | ((dbuf[2] >>> 0) << 6 >>> 0)) >>> 0) | (dbuf[3] >>> 0)) >>> 0;
			_ref$2 = dlen;
			if (_ref$2 === 4) {
				(2 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = ((val >>> 0 >>> 0) << 24 >>> 24));
				(1 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = ((val >>> 8 >>> 0) << 24 >>> 24));
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((val >>> 16 >>> 0) << 24 >>> 24));
			} else if (_ref$2 === 3) {
				(1 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = ((val >>> 8 >>> 0) << 24 >>> 24));
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((val >>> 16 >>> 0) << 24 >>> 24));
			} else if (_ref$2 === 2) {
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((val >>> 16 >>> 0) << 24 >>> 24));
			}
			dst = $subslice(dst, dinc);
			n = n + ((dlen - 1 >> 0)) >> 0;
		}
		_tmp$23 = n;
		_tmp$24 = end;
		_tmp$25 = err;
		n = _tmp$23;
		end = _tmp$24;
		err = _tmp$25;
		return [n, end, err];
	};
	Encoding.prototype.decode = function(dst, src) { return this.$val.decode(dst, src); };
	Encoding.ptr.prototype.Decode = function(dst, src) {
		var $ptr, _tuple, dst, enc, err, n, src;
		n = 0;
		err = $ifaceNil;
		enc = this;
		_tuple = enc.decode(dst, src);
		n = _tuple[0];
		err = _tuple[2];
		return [n, err];
	};
	Encoding.prototype.Decode = function(dst, src) { return this.$val.Decode(dst, src); };
	Encoding.ptr.prototype.DecodeString = function(s) {
		var $ptr, _tuple, dbuf, enc, err, n, s;
		enc = this;
		dbuf = $makeSlice(sliceType, enc.DecodedLen(s.length));
		_tuple = enc.decode(dbuf, new sliceType($stringToBytes(s)));
		n = _tuple[0];
		err = _tuple[2];
		return [$subslice(dbuf, 0, n), err];
	};
	Encoding.prototype.DecodeString = function(s) { return this.$val.DecodeString(s); };
	Encoding.ptr.prototype.DecodedLen = function(n) {
		var $ptr, _q, _q$1, enc, n;
		enc = this;
		if (enc.padChar === -1) {
			return (_q = ((($imul(n, 6)) + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $imul((_q$1 = n / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 3);
	};
	Encoding.prototype.DecodedLen = function(n) { return this.$val.DecodedLen(n); };
	Encoding.methods = [{prop: "WithPadding", name: "WithPadding", pkg: "", typ: $funcType([$Int32], [ptrType], false)}];
	ptrType.methods = [{prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType, sliceType], [], false)}, {prop: "EncodeToString", name: "EncodeToString", pkg: "", typ: $funcType([sliceType], [$String], false)}, {prop: "EncodedLen", name: "EncodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "decode", name: "decode", pkg: "encoding/base64", typ: $funcType([sliceType, sliceType], [$Int, $Bool, $error], false)}, {prop: "Decode", name: "Decode", pkg: "", typ: $funcType([sliceType, sliceType], [$Int, $error], false)}, {prop: "DecodeString", name: "DecodeString", pkg: "", typ: $funcType([$String], [sliceType, $error], false)}, {prop: "DecodedLen", name: "DecodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	CorruptInputError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Encoding.init([{prop: "encode", name: "encode", pkg: "encoding/base64", typ: arrayType, tag: ""}, {prop: "decodeMap", name: "decodeMap", pkg: "encoding/base64", typ: arrayType$1, tag: ""}, {prop: "padChar", name: "padChar", pkg: "encoding/base64", typ: $Int32, tag: ""}]);
	encoder.init([{prop: "err", name: "err", pkg: "encoding/base64", typ: $error, tag: ""}, {prop: "enc", name: "enc", pkg: "encoding/base64", typ: ptrType, tag: ""}, {prop: "w", name: "w", pkg: "encoding/base64", typ: io.Writer, tag: ""}, {prop: "buf", name: "buf", pkg: "encoding/base64", typ: arrayType$2, tag: ""}, {prop: "nbuf", name: "nbuf", pkg: "encoding/base64", typ: $Int, tag: ""}, {prop: "out", name: "out", pkg: "encoding/base64", typ: arrayType$3, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.StdEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
		$pkg.URLEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_");
		$pkg.RawStdEncoding = $pkg.StdEncoding.WithPadding(-1);
		$pkg.RawURLEncoding = $pkg.URLEncoding.WithPadding(-1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime/pprof"] = (function() {
	var $pkg = {}, $init, io, sync;
	io = $packages["io"];
	sync = $packages["sync"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime/trace"] = (function() {
	var $pkg = {}, $init, io, runtime;
	io = $packages["io"];
	runtime = $packages["runtime"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["testing"] = (function() {
	var $pkg = {}, $init, bytes, flag, fmt, nosync, io, os, runtime, pprof, trace, strconv, strings, atomic, time, matchBenchmarks, benchTime, benchmarkMemory, short$1, outputDir, chatty, count, coverProfile, match, memProfile, memProfileRate, cpuProfile, blockProfile, blockProfileRate, traceFile, timeout, cpuListStr, parallel, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17;
	bytes = $packages["bytes"];
	flag = $packages["flag"];
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	pprof = $packages["runtime/pprof"];
	trace = $packages["runtime/trace"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	atomic = $packages["sync/atomic"];
	time = $packages["time"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = flag.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = pprof.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = trace.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = flag.String("test.bench", "", "regular expression to select benchmarks to run"); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		matchBenchmarks = _r;
		_r$1 = flag.Duration("test.benchtime", new time.Duration(0, 1000000000), "approximate run time for each benchmark"); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		benchTime = _r$1;
		_r$2 = flag.Bool("test.benchmem", false, "print memory allocations for benchmarks"); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		benchmarkMemory = _r$2;
		_r$3 = flag.Bool("test.short", false, "run smaller test suite to save time"); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		short$1 = _r$3;
		_r$4 = flag.String("test.outputdir", "", "directory in which to write profiles"); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		outputDir = _r$4;
		_r$5 = flag.Bool("test.v", false, "verbose: print additional output"); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		chatty = _r$5;
		_r$6 = flag.Uint("test.count", 1, "run tests and benchmarks `n` times"); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		count = _r$6;
		_r$7 = flag.String("test.coverprofile", "", "write a coverage profile to the named file after execution"); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		coverProfile = _r$7;
		_r$8 = flag.String("test.run", "", "regular expression to select tests and examples to run"); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		match = _r$8;
		_r$9 = flag.String("test.memprofile", "", "write a memory profile to the named file after execution"); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		memProfile = _r$9;
		_r$10 = flag.Int("test.memprofilerate", 0, "if >=0, sets runtime.MemProfileRate"); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		memProfileRate = _r$10;
		_r$11 = flag.String("test.cpuprofile", "", "write a cpu profile to the named file during execution"); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		cpuProfile = _r$11;
		_r$12 = flag.String("test.blockprofile", "", "write a goroutine blocking profile to the named file after execution"); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		blockProfile = _r$12;
		_r$13 = flag.Int("test.blockprofilerate", 1, "if >= 0, calls runtime.SetBlockProfileRate()"); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		blockProfileRate = _r$13;
		_r$14 = flag.String("test.trace", "", "write an execution trace to the named file after execution"); /* */ $s = 28; case 28: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		traceFile = _r$14;
		_r$15 = flag.Duration("test.timeout", new time.Duration(0, 0), "if positive, sets an aggregate time limit for all tests"); /* */ $s = 29; case 29: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		timeout = _r$15;
		_r$16 = flag.String("test.cpu", "", "comma-separated list of number of CPUs to use for each test"); /* */ $s = 30; case 30: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		cpuListStr = _r$16;
		_r$17 = flag.Int("test.parallel", runtime.GOMAXPROCS(0), "maximum test parallelism"); /* */ $s = 31; case 31: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		parallel = _r$17;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf16"] = (function() {
	var $pkg = {}, $init, sliceType, sliceType$1, IsSurrogate, DecodeRune, EncodeRune, Encode, Decode;
	sliceType = $sliceType($Uint16);
	sliceType$1 = $sliceType($Int32);
	IsSurrogate = function(r) {
		var $ptr, r;
		return 55296 <= r && r < 57344;
	};
	$pkg.IsSurrogate = IsSurrogate;
	DecodeRune = function(r1, r2) {
		var $ptr, r1, r2;
		if (55296 <= r1 && r1 < 56320 && 56320 <= r2 && r2 < 57344) {
			return ((((r1 - 55296 >> 0)) << 10 >> 0) | ((r2 - 56320 >> 0))) + 65536 >> 0;
		}
		return 65533;
	};
	$pkg.DecodeRune = DecodeRune;
	EncodeRune = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, r, r1, r2;
		r1 = 0;
		r2 = 0;
		if (r < 65536 || r > 1114111 || IsSurrogate(r)) {
			_tmp = 65533;
			_tmp$1 = 65533;
			r1 = _tmp;
			r2 = _tmp$1;
			return [r1, r2];
		}
		r = r - (65536) >> 0;
		_tmp$2 = 55296 + (((r >> 10 >> 0)) & 1023) >> 0;
		_tmp$3 = 56320 + (r & 1023) >> 0;
		r1 = _tmp$2;
		r2 = _tmp$3;
		return [r1, r2];
	};
	$pkg.EncodeRune = EncodeRune;
	Encode = function(s) {
		var $ptr, _i, _i$1, _ref, _ref$1, _tuple, a, n, r1, r2, s, v, v$1, x;
		n = s.$length;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (v >= 65536) {
				n = n + (1) >> 0;
			}
			_i++;
		}
		a = $makeSlice(sliceType, n);
		n = 0;
		_ref$1 = s;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (v$1 < 0 || 55296 <= v$1 && v$1 < 57344 || v$1 > 1114111) {
				v$1 = 65533;
				((n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = (v$1 << 16 >>> 16));
				n = n + (1) >> 0;
			} else if (v$1 < 65536) {
				((n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = (v$1 << 16 >>> 16));
				n = n + (1) >> 0;
			} else {
				_tuple = EncodeRune(v$1);
				r1 = _tuple[0];
				r2 = _tuple[1];
				((n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = (r1 << 16 >>> 16));
				(x = n + 1 >> 0, ((x < 0 || x >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + x] = (r2 << 16 >>> 16)));
				n = n + (2) >> 0;
			}
			_i$1++;
		}
		return $subslice(a, 0, n);
	};
	$pkg.Encode = Encode;
	Decode = function(s) {
		var $ptr, a, i, n, r, s, x, x$1, x$2;
		a = $makeSlice(sliceType$1, s.$length);
		n = 0;
		i = 0;
		while (true) {
			if (!(i < s.$length)) { break; }
			r = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			if (55296 <= r && r < 56320 && (i + 1 >> 0) < s.$length && 56320 <= (x = i + 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x])) && (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$1])) < 57344) {
				((n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = DecodeRune((r >> 0), ((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$2])) >> 0)));
				i = i + (1) >> 0;
				n = n + (1) >> 0;
			} else if (55296 <= r && r < 57344) {
				((n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = 65533);
				n = n + (1) >> 0;
			} else {
				((n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = (r >> 0));
				n = n + (1) >> 0;
			}
			i = i + (1) >> 0;
		}
		return $subslice(a, 0, n);
	};
	$pkg.Decode = Decode;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/json"] = (function() {
	var $pkg = {}, $init, bytes, encoding, base64, errors, fmt, nosync, io, math, reflect, runtime, sort, strconv, strings, testing, unicode, utf16, utf8, Unmarshaler, UnmarshalTypeError, InvalidUnmarshalError, Number, decodeState, unquotedValue, Marshaler, UnsupportedTypeError, UnsupportedValueError, MarshalerError, encodeState, encoderFunc, floatEncoder, structEncoder, mapEncoder, sliceEncoder, arrayEncoder, ptrEncoder, condAddrEncoder, stringValues, field, byName, byIndex, SyntaxError, scanner, tagOptions, sliceType, mapType, structType, sliceType$1, mapType$1, structType$1, sliceType$2, ptrType, ptrType$1, sliceType$3, ptrType$2, mapType$2, ptrType$3, arrayType, arrayType$1, ptrType$4, sliceType$4, ptrType$8, ptrType$9, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, funcType, ptrType$23, funcType$1, errPhase, nullLiteral, numberType, hex, encoderCache, marshalerType, textMarshalerType, float32Encoder, float64Encoder, fieldCache, _r, _r$1, Unmarshal, getu4, unquote, unquoteBytes, Marshal, isEmptyValue, valueEncoder, typeEncoder, newTypeEncoder, invalidValueEncoder, marshalerEncoder, addrMarshalerEncoder, textMarshalerEncoder, addrTextMarshalerEncoder, boolEncoder, intEncoder, uintEncoder, stringEncoder, interfaceEncoder, unsupportedTypeEncoder, newStructEncoder, newMapEncoder, encodeByteSlice, newSliceEncoder, newArrayEncoder, newPtrEncoder, newCondAddrEncoder, isValidTag, fieldByIndex, typeByIndex, fillField, typeFields, dominantField, cachedTypeFields, foldFunc, equalFoldRight, asciiEqualFold, simpleLetterEqualFold, compact, newline, Indent, checkValid, nextValue, isSpace, stateBeginValueOrEmpty, stateBeginValue, stateBeginStringOrEmpty, stateBeginString, stateEndValue, stateEndTop, stateInString, stateInStringEsc, stateInStringEscU, stateInStringEscU1, stateInStringEscU12, stateInStringEscU123, stateNeg, state1, state0, stateDot, stateDot0, stateE, stateESign, stateE0, stateT, stateTr, stateTru, stateF, stateFa, stateFal, stateFals, stateN, stateNu, stateNul, stateError, quoteChar, stateRedo, parseTag;
	bytes = $packages["bytes"];
	encoding = $packages["encoding"];
	base64 = $packages["encoding/base64"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	testing = $packages["testing"];
	unicode = $packages["unicode"];
	utf16 = $packages["unicode/utf16"];
	utf8 = $packages["unicode/utf8"];
	Unmarshaler = $pkg.Unmarshaler = $newType(8, $kindInterface, "json.Unmarshaler", "Unmarshaler", "encoding/json", null);
	UnmarshalTypeError = $pkg.UnmarshalTypeError = $newType(0, $kindStruct, "json.UnmarshalTypeError", "UnmarshalTypeError", "encoding/json", function(Value_, Type_, Offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = "";
			this.Type = $ifaceNil;
			this.Offset = new $Int64(0, 0);
			return;
		}
		this.Value = Value_;
		this.Type = Type_;
		this.Offset = Offset_;
	});
	InvalidUnmarshalError = $pkg.InvalidUnmarshalError = $newType(0, $kindStruct, "json.InvalidUnmarshalError", "InvalidUnmarshalError", "encoding/json", function(Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = $ifaceNil;
			return;
		}
		this.Type = Type_;
	});
	Number = $pkg.Number = $newType(8, $kindString, "json.Number", "Number", "encoding/json", null);
	decodeState = $pkg.decodeState = $newType(0, $kindStruct, "json.decodeState", "decodeState", "encoding/json", function(data_, off_, scan_, nextscan_, savedError_, useNumber_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.data = sliceType$2.nil;
			this.off = 0;
			this.scan = new scanner.ptr($throwNilPointerError, false, sliceType$3.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0));
			this.nextscan = new scanner.ptr($throwNilPointerError, false, sliceType$3.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0));
			this.savedError = $ifaceNil;
			this.useNumber = false;
			return;
		}
		this.data = data_;
		this.off = off_;
		this.scan = scan_;
		this.nextscan = nextscan_;
		this.savedError = savedError_;
		this.useNumber = useNumber_;
	});
	unquotedValue = $pkg.unquotedValue = $newType(0, $kindStruct, "json.unquotedValue", "unquotedValue", "encoding/json", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	Marshaler = $pkg.Marshaler = $newType(8, $kindInterface, "json.Marshaler", "Marshaler", "encoding/json", null);
	UnsupportedTypeError = $pkg.UnsupportedTypeError = $newType(0, $kindStruct, "json.UnsupportedTypeError", "UnsupportedTypeError", "encoding/json", function(Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = $ifaceNil;
			return;
		}
		this.Type = Type_;
	});
	UnsupportedValueError = $pkg.UnsupportedValueError = $newType(0, $kindStruct, "json.UnsupportedValueError", "UnsupportedValueError", "encoding/json", function(Value_, Str_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = new reflect.Value.ptr(ptrType$2.nil, 0, 0);
			this.Str = "";
			return;
		}
		this.Value = Value_;
		this.Str = Str_;
	});
	MarshalerError = $pkg.MarshalerError = $newType(0, $kindStruct, "json.MarshalerError", "MarshalerError", "encoding/json", function(Type_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = $ifaceNil;
			this.Err = $ifaceNil;
			return;
		}
		this.Type = Type_;
		this.Err = Err_;
	});
	encodeState = $pkg.encodeState = $newType(0, $kindStruct, "json.encodeState", "encodeState", "encoding/json", function(Buffer_, scratch_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Buffer = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
			this.scratch = arrayType$1.zero();
			return;
		}
		this.Buffer = Buffer_;
		this.scratch = scratch_;
	});
	encoderFunc = $pkg.encoderFunc = $newType(4, $kindFunc, "json.encoderFunc", "encoderFunc", "encoding/json", null);
	floatEncoder = $pkg.floatEncoder = $newType(4, $kindInt, "json.floatEncoder", "floatEncoder", "encoding/json", null);
	structEncoder = $pkg.structEncoder = $newType(0, $kindStruct, "json.structEncoder", "structEncoder", "encoding/json", function(fields_, fieldEncs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fields = sliceType$1.nil;
			this.fieldEncs = sliceType$4.nil;
			return;
		}
		this.fields = fields_;
		this.fieldEncs = fieldEncs_;
	});
	mapEncoder = $pkg.mapEncoder = $newType(0, $kindStruct, "json.mapEncoder", "mapEncoder", "encoding/json", function(elemEnc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.elemEnc = $throwNilPointerError;
			return;
		}
		this.elemEnc = elemEnc_;
	});
	sliceEncoder = $pkg.sliceEncoder = $newType(0, $kindStruct, "json.sliceEncoder", "sliceEncoder", "encoding/json", function(arrayEnc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.arrayEnc = $throwNilPointerError;
			return;
		}
		this.arrayEnc = arrayEnc_;
	});
	arrayEncoder = $pkg.arrayEncoder = $newType(0, $kindStruct, "json.arrayEncoder", "arrayEncoder", "encoding/json", function(elemEnc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.elemEnc = $throwNilPointerError;
			return;
		}
		this.elemEnc = elemEnc_;
	});
	ptrEncoder = $pkg.ptrEncoder = $newType(0, $kindStruct, "json.ptrEncoder", "ptrEncoder", "encoding/json", function(elemEnc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.elemEnc = $throwNilPointerError;
			return;
		}
		this.elemEnc = elemEnc_;
	});
	condAddrEncoder = $pkg.condAddrEncoder = $newType(0, $kindStruct, "json.condAddrEncoder", "condAddrEncoder", "encoding/json", function(canAddrEnc_, elseEnc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.canAddrEnc = $throwNilPointerError;
			this.elseEnc = $throwNilPointerError;
			return;
		}
		this.canAddrEnc = canAddrEnc_;
		this.elseEnc = elseEnc_;
	});
	stringValues = $pkg.stringValues = $newType(12, $kindSlice, "json.stringValues", "stringValues", "encoding/json", null);
	field = $pkg.field = $newType(0, $kindStruct, "json.field", "field", "encoding/json", function(name_, nameBytes_, equalFold_, tag_, index_, typ_, omitEmpty_, quoted_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.nameBytes = sliceType$2.nil;
			this.equalFold = $throwNilPointerError;
			this.tag = false;
			this.index = sliceType$3.nil;
			this.typ = $ifaceNil;
			this.omitEmpty = false;
			this.quoted = false;
			return;
		}
		this.name = name_;
		this.nameBytes = nameBytes_;
		this.equalFold = equalFold_;
		this.tag = tag_;
		this.index = index_;
		this.typ = typ_;
		this.omitEmpty = omitEmpty_;
		this.quoted = quoted_;
	});
	byName = $pkg.byName = $newType(12, $kindSlice, "json.byName", "byName", "encoding/json", null);
	byIndex = $pkg.byIndex = $newType(12, $kindSlice, "json.byIndex", "byIndex", "encoding/json", null);
	SyntaxError = $pkg.SyntaxError = $newType(0, $kindStruct, "json.SyntaxError", "SyntaxError", "encoding/json", function(msg_, Offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.msg = "";
			this.Offset = new $Int64(0, 0);
			return;
		}
		this.msg = msg_;
		this.Offset = Offset_;
	});
	scanner = $pkg.scanner = $newType(0, $kindStruct, "json.scanner", "scanner", "encoding/json", function(step_, endTop_, parseState_, err_, redo_, redoCode_, redoState_, bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.step = $throwNilPointerError;
			this.endTop = false;
			this.parseState = sliceType$3.nil;
			this.err = $ifaceNil;
			this.redo = false;
			this.redoCode = 0;
			this.redoState = $throwNilPointerError;
			this.bytes = new $Int64(0, 0);
			return;
		}
		this.step = step_;
		this.endTop = endTop_;
		this.parseState = parseState_;
		this.err = err_;
		this.redo = redo_;
		this.redoCode = redoCode_;
		this.redoState = redoState_;
		this.bytes = bytes_;
	});
	tagOptions = $pkg.tagOptions = $newType(8, $kindString, "json.tagOptions", "tagOptions", "encoding/json", null);
	sliceType = $sliceType($emptyInterface);
	mapType = $mapType(reflect.Type, encoderFunc);
	structType = $structType([{prop: "RWMutex", name: "", pkg: "", typ: nosync.RWMutex, tag: ""}, {prop: "m", name: "m", pkg: "encoding/json", typ: mapType, tag: ""}]);
	sliceType$1 = $sliceType(field);
	mapType$1 = $mapType(reflect.Type, sliceType$1);
	structType$1 = $structType([{prop: "RWMutex", name: "", pkg: "", typ: nosync.RWMutex, tag: ""}, {prop: "m", name: "m", pkg: "encoding/json", typ: mapType$1, tag: ""}]);
	sliceType$2 = $sliceType($Uint8);
	ptrType = $ptrType(Marshaler);
	ptrType$1 = $ptrType(encoding.TextMarshaler);
	sliceType$3 = $sliceType($Int);
	ptrType$2 = $ptrType(reflect.rtype);
	mapType$2 = $mapType($String, $emptyInterface);
	ptrType$3 = $ptrType(field);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$4 = $ptrType(encodeState);
	sliceType$4 = $sliceType(encoderFunc);
	ptrType$8 = $ptrType(SyntaxError);
	ptrType$9 = $ptrType(UnmarshalTypeError);
	ptrType$11 = $ptrType(InvalidUnmarshalError);
	ptrType$12 = $ptrType(decodeState);
	ptrType$13 = $ptrType(UnsupportedTypeError);
	ptrType$14 = $ptrType(UnsupportedValueError);
	ptrType$16 = $ptrType(MarshalerError);
	ptrType$17 = $ptrType(structEncoder);
	ptrType$18 = $ptrType(mapEncoder);
	ptrType$19 = $ptrType(sliceEncoder);
	ptrType$20 = $ptrType(arrayEncoder);
	ptrType$21 = $ptrType(ptrEncoder);
	ptrType$22 = $ptrType(condAddrEncoder);
	funcType = $funcType([sliceType$2, sliceType$2], [$Bool], false);
	ptrType$23 = $ptrType(scanner);
	funcType$1 = $funcType([ptrType$23, $Int], [$Int], false);
	Unmarshal = function(data, v) {
		var $ptr, _r$2, _r$3, d, data, err, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; d = $f.d; data = $f.data; err = $f.err; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = new decodeState.ptr(sliceType$2.nil, 0, new scanner.ptr($throwNilPointerError, false, sliceType$3.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0)), new scanner.ptr($throwNilPointerError, false, sliceType$3.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0)), $ifaceNil, false);
		_r$2 = checkValid(data, d.scan); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		err = _r$2;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		d.init(data);
		_r$3 = d.unmarshal(v); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Unmarshal }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.d = d; $f.data = data; $f.err = err; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Unmarshal = Unmarshal;
	UnmarshalTypeError.ptr.prototype.Error = function() {
		var $ptr, _r$2, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r$2 = e.Type.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return "json: cannot unmarshal " + e.Value + " into Go value of type " + _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: UnmarshalTypeError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	UnmarshalTypeError.prototype.Error = function() { return this.$val.Error(); };
	InvalidUnmarshalError.ptr.prototype.Error = function() {
		var $ptr, _r$2, _r$3, _r$4, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		if ($interfaceIsEqual(e.Type, $ifaceNil)) {
			return "json: Unmarshal(nil)";
		}
		_r$2 = e.Type.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (!((_r$2 === 22))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r$2 === 22))) { */ case 1:
			_r$3 = e.Type.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return "json: Unmarshal(non-pointer " + _r$3 + ")";
		/* } */ case 2:
		_r$4 = e.Type.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 7; case 7:
		return "json: Unmarshal(nil " + _r$4 + ")";
		/* */ } return; } if ($f === undefined) { $f = { $blk: InvalidUnmarshalError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	InvalidUnmarshalError.prototype.Error = function() { return this.$val.Error(); };
	decodeState.ptr.prototype.unmarshal = function(v) {
		var $ptr, _r$2, d, err, rv, v, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; d = $f.d; err = $f.err; rv = $f.rv; v = $f.v; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		err[0] = $ifaceNil;
		d = this;
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, ok, r;
			r = $recover();
			if (!($interfaceIsEqual(r, $ifaceNil))) {
				_tuple = $assertType(r, runtime.Error, true);
				ok = _tuple[1];
				if (ok) {
					$panic(r);
				}
				err[0] = $assertType(r, $error);
			}
		}; })(err), []]);
		_r$2 = reflect.ValueOf(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		rv = _r$2;
		if (!((rv.Kind() === 22)) || rv.IsNil()) {
			err[0] = new InvalidUnmarshalError.ptr(reflect.TypeOf(v));
			return err[0];
		}
		d.scan.reset();
		$r = d.value(rv); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		err[0] = d.savedError;
		return err[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.unmarshal }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.d = d; $f.err = err; $f.rv = rv; $f.v = v; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	decodeState.prototype.unmarshal = function(v) { return this.$val.unmarshal(v); };
	Number.prototype.String = function() {
		var $ptr, n;
		n = this.$val;
		return n;
	};
	$ptrType(Number).prototype.String = function() { return new Number(this.$get()).String(); };
	Number.prototype.Float64 = function() {
		var $ptr, n;
		n = this.$val;
		return strconv.ParseFloat(n, 64);
	};
	$ptrType(Number).prototype.Float64 = function() { return new Number(this.$get()).Float64(); };
	Number.prototype.Int64 = function() {
		var $ptr, n;
		n = this.$val;
		return strconv.ParseInt(n, 10, 64);
	};
	$ptrType(Number).prototype.Int64 = function() { return new Number(this.$get()).Int64(); };
	decodeState.ptr.prototype.init = function(data) {
		var $ptr, d, data;
		d = this;
		d.data = data;
		d.off = 0;
		d.savedError = $ifaceNil;
		return d;
	};
	decodeState.prototype.init = function(data) { return this.$val.init(data); };
	decodeState.ptr.prototype.error = function(err) {
		var $ptr, d, err;
		d = this;
		$panic(err);
	};
	decodeState.prototype.error = function(err) { return this.$val.error(err); };
	decodeState.ptr.prototype.saveError = function(err) {
		var $ptr, d, err;
		d = this;
		if ($interfaceIsEqual(d.savedError, $ifaceNil)) {
			d.savedError = err;
		}
	};
	decodeState.prototype.saveError = function(err) { return this.$val.saveError(err); };
	decodeState.ptr.prototype.next = function() {
		var $ptr, _r$2, _r$3, _r$4, _tuple, c, d, err, item, rest, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; c = $f.c; d = $f.d; err = $f.err; item = $f.item; rest = $f.rest; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		c = (x = d.data, x$1 = d.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		_r$2 = nextValue($subslice(d.data, d.off), d.nextscan); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		item = _tuple[0];
		rest = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			d.error(err);
		}
		d.off = d.data.$length - rest.$length >> 0;
		/* */ if (c === 123) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (c === 123) { */ case 2:
			_r$3 = d.scan.step(d.scan, 125); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			$s = 4; continue;
		/* } else { */ case 3:
			_r$4 = d.scan.step(d.scan, 93); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 4:
		return item;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.next }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.c = c; $f.d = d; $f.err = err; $f.item = item; $f.rest = rest; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.next = function() { return this.$val.next(); };
	decodeState.ptr.prototype.scanWhile = function(op) {
		var $ptr, _r$2, _r$3, c, d, newOp, op, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; d = $f.d; newOp = $f.newOp; op = $f.op; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		newOp = 0;
		/* while (true) { */ case 1:
			/* */ if (d.off >= d.data.$length) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (d.off >= d.data.$length) { */ case 3:
				_r$2 = d.scan.eof(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				newOp = _r$2;
				d.off = d.data.$length + 1 >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				c = ((x = d.data, x$1 = d.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])) >> 0);
				d.off = d.off + (1) >> 0;
				_r$3 = d.scan.step(d.scan, c); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				newOp = _r$3;
			/* } */ case 5:
			if (!((newOp === op))) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		return newOp;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.scanWhile }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.d = d; $f.newOp = newOp; $f.op = op; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.scanWhile = function(op) { return this.$val.scanWhile(op); };
	decodeState.ptr.prototype.value = function(v) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, d, err, n, op, rest, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; d = $f.d; err = $f.err; n = $f.n; op = $f.op; rest = $f.rest; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		d = this;
		/* */ if (!v.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!v.IsValid()) { */ case 1:
			_r$2 = nextValue($subslice(d.data, d.off), d.nextscan); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			rest = _tuple[1];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			d.off = d.data.$length - rest.$length >> 0;
			if (d.scan.redo) {
				d.scan.redo = false;
				d.scan.step = stateBeginValue;
			}
			_r$3 = d.scan.step(d.scan, 34); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_r$4 = d.scan.step(d.scan, 34); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			n = d.scan.parseState.$length;
			/* */ if (n > 0 && ((x = d.scan.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])) === 0)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (n > 0 && ((x = d.scan.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])) === 0)) { */ case 6:
				_r$5 = d.scan.step(d.scan, 58); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				_r$6 = d.scan.step(d.scan, 34); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				_r$7 = d.scan.step(d.scan, 34); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				_r$8 = d.scan.step(d.scan, 125); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
			/* } */ case 7:
			return;
		/* } */ case 2:
		_r$9 = d.scanWhile(9); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		op = _r$9;
		_ref = op;
		/* */ if (_ref === 6) { $s = 13; continue; }
		/* */ if (_ref === 2) { $s = 14; continue; }
		/* */ if (_ref === 1) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (_ref === 6) { */ case 13:
			$r = d.array(v); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 17; continue;
		/* } else if (_ref === 2) { */ case 14:
			$r = d.object(v); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 17; continue;
		/* } else if (_ref === 1) { */ case 15:
			$r = d.literal(v); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 17; continue;
		/* } else { */ case 16:
			d.error(errPhase);
		/* } */ case 17:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.value }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.n = n; $f.op = op; $f.rest = rest; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.value = function(v) { return this.$val.value(v); };
	decodeState.ptr.prototype.valueQuoted = function() {
		var $ptr, _r$2, _r$3, _ref, _ref$1, d, op, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; d = $f.d; op = $f.op; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$2 = d.scanWhile(9); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		_ref = op;
		/* */ if (_ref === 6) { $s = 2; continue; }
		/* */ if (_ref === 2) { $s = 3; continue; }
		/* */ if (_ref === 1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_ref === 6) { */ case 2:
			$r = d.array(new reflect.Value.ptr(ptrType$2.nil, 0, 0)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 6; continue;
		/* } else if (_ref === 2) { */ case 3:
			$r = d.object(new reflect.Value.ptr(ptrType$2.nil, 0, 0)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 6; continue;
		/* } else if (_ref === 1) { */ case 4:
			_r$3 = d.literalInterface(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_ref$1 = _r$3;
			/* */ if (_ref$1 === $ifaceNil || $assertType(_ref$1, $String, true)[1]) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_ref$1 === $ifaceNil || $assertType(_ref$1, $String, true)[1]) { */ case 10:
				v = _ref$1;
				return v;
			/* } */ case 11:
			$s = 6; continue;
		/* } else { */ case 5:
			d.error(errPhase);
		/* } */ case 6:
		return (x = new unquotedValue.ptr(), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.valueQuoted }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f.d = d; $f.op = op; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.valueQuoted = function() { return this.$val.valueQuoted(); };
	decodeState.ptr.prototype.indirect = function(v, decodingNull) {
		var $ptr, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _v, _v$1, _v$2, d, decodingNull, e, ok, ok$1, u, u$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; d = $f.d; decodingNull = $f.decodingNull; e = $f.e; ok = $f.ok; ok$1 = $f.ok$1; u = $f.u; u$1 = $f.u$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		d = this;
		if (!(!((v.Kind() === 22)))) { _v = false; $s = 3; continue s; }
		_r$2 = v.Type().Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = !(_r$2 === ""); case 3:
		/* */ if (_v && v.CanAddr()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v && v.CanAddr()) { */ case 1:
			v = v.Addr();
		/* } */ case 2:
		/* while (true) { */ case 5:
			/* */ if ((v.Kind() === 20) && !v.IsNil()) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((v.Kind() === 20) && !v.IsNil()) { */ case 7:
				_r$3 = v.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				e = _r$3;
				if (!((e.Kind() === 22) && !e.IsNil())) { _v$1 = false; $s = 12; continue s; }
				if (!decodingNull) { _v$2 = true; $s = 13; continue s; }
				_r$4 = e.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$5 = _r$4.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_v$2 = _r$5 === 22; case 13:
				_v$1 = _v$2; case 12:
				/* */ if (_v$1) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_v$1) { */ case 10:
					v = e;
					/* continue; */ $s = 5; continue;
				/* } */ case 11:
			/* } */ case 8:
			if (!((v.Kind() === 22))) {
				/* break; */ $s = 6; continue;
			}
			_r$6 = v.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = _r$6.Kind(); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (!((_r$7 === 22)) && decodingNull && v.CanSet()) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (!((_r$7 === 22)) && decodingNull && v.CanSet()) { */ case 16:
				/* break; */ $s = 6; continue;
			/* } */ case 17:
			/* */ if (v.IsNil()) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (v.IsNil()) { */ case 20:
				_r$8 = v.Type().Elem(); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = reflect.New(_r$8); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				$r = v.Set(_r$9); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 21:
			_r$10 = v.Type().NumMethod(); /* */ $s = 27; case 27: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			/* */ if (_r$10 > 0) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (_r$10 > 0) { */ case 25:
				_r$11 = v.Interface(); /* */ $s = 28; case 28: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_tuple = $assertType(_r$11, Unmarshaler, true);
				u = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if (ok) { */ case 29:
					return [u, $ifaceNil, new reflect.Value.ptr(ptrType$2.nil, 0, 0)];
				/* } */ case 30:
				_r$12 = v.Interface(); /* */ $s = 31; case 31: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_tuple$1 = $assertType(_r$12, encoding.TextUnmarshaler, true);
				u$1 = _tuple$1[0];
				ok$1 = _tuple$1[1];
				/* */ if (ok$1) { $s = 32; continue; }
				/* */ $s = 33; continue;
				/* if (ok$1) { */ case 32:
					return [$ifaceNil, u$1, new reflect.Value.ptr(ptrType$2.nil, 0, 0)];
				/* } */ case 33:
			/* } */ case 26:
			_r$13 = v.Elem(); /* */ $s = 34; case 34: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			v = _r$13;
		/* } */ $s = 5; continue; case 6:
		return [$ifaceNil, $ifaceNil, v];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.indirect }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.d = d; $f.decodingNull = decodingNull; $f.e = e; $f.ok = ok; $f.ok$1 = ok$1; $f.u = u; $f.u$1 = u$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.indirect = function(v, decodingNull) { return this.$val.indirect(v, decodingNull); };
	decodeState.ptr.prototype.array = function(v) {
		var $ptr, _q, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, d, err, i, newcap, newv, op, pv, u, ut, v, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; d = $f.d; err = $f.err; i = $f.i; newcap = $f.newcap; newv = $f.newv; op = $f.op; pv = $f.pv; u = $f.u; ut = $f.ut; v = $f.v; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		d = this;
		_r$2 = d.indirect(v, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		u = _tuple[0];
		ut = _tuple[1];
		pv = _tuple[2];
		/* */ if (!($interfaceIsEqual(u, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(u, $ifaceNil))) { */ case 2:
			d.off = d.off - (1) >> 0;
			_r$3 = d.next(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = u.UnmarshalJSON(_r$3); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			return;
		/* } */ case 3:
		/* */ if (!($interfaceIsEqual(ut, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(ut, $ifaceNil))) { */ case 6:
			d.saveError(new UnmarshalTypeError.ptr("array", v.Type(), new $Int64(0, d.off)));
			d.off = d.off - (1) >> 0;
			_r$5 = d.next(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			return;
		/* } */ case 7:
		v = pv;
		_ref = v.Kind();
		/* */ if (_ref === 20) { $s = 9; continue; }
		/* */ if (_ref === 17) { $s = 10; continue; }
		/* */ if (_ref === 23) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* switch (0) { default: if (_ref === 20) { */ case 9:
			/* */ if (v.NumMethod() === 0) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (v.NumMethod() === 0) { */ case 14:
				_r$6 = d.arrayInterface(); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$7 = reflect.ValueOf(_r$6); /* */ $s = 17; case 17: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$r = v.Set(_r$7); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 15:
			d.saveError(new UnmarshalTypeError.ptr("array", v.Type(), new $Int64(0, d.off)));
			d.off = d.off - (1) >> 0;
			_r$8 = d.next(); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$8;
			return;
		/* } else if (_ref === 17) { */ case 10:
			$s = 13; continue;
		/* } else if (_ref === 23) { */ case 11:
			/* break; */ $s = 13; continue;
			$s = 13; continue;
		/* } else { */ case 12:
			d.saveError(new UnmarshalTypeError.ptr("array", v.Type(), new $Int64(0, d.off)));
			d.off = d.off - (1) >> 0;
			_r$9 = d.next(); /* */ $s = 20; case 20: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
			return;
		/* } } */ case 13:
		i = 0;
		/* while (true) { */ case 21:
			_r$10 = d.scanWhile(9); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			op = _r$10;
			if (op === 8) {
				/* break; */ $s = 22; continue;
			}
			d.off = d.off - (1) >> 0;
			d.scan.undo(op);
			/* */ if (v.Kind() === 23) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (v.Kind() === 23) { */ case 24:
				/* */ if (i >= v.Cap()) { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* if (i >= v.Cap()) { */ case 26:
					newcap = v.Cap() + (_q = v.Cap() / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
					if (newcap < 4) {
						newcap = 4;
					}
					_r$11 = reflect.MakeSlice(v.Type(), v.Len(), newcap); /* */ $s = 28; case 28: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					newv = _r$11;
					_r$12 = reflect.Copy(newv, v); /* */ $s = 29; case 29: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_r$12;
					$r = v.Set(newv); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 27:
				if (i >= v.Len()) {
					v.SetLen(i + 1 >> 0);
				}
			/* } */ case 25:
			/* */ if (i < v.Len()) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (i < v.Len()) { */ case 31:
				_r$13 = v.Index(i); /* */ $s = 34; case 34: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				$r = d.value(_r$13); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 33; continue;
			/* } else { */ case 32:
				$r = d.value(new reflect.Value.ptr(ptrType$2.nil, 0, 0)); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 33:
			i = i + (1) >> 0;
			_r$14 = d.scanWhile(9); /* */ $s = 37; case 37: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			op = _r$14;
			if (op === 8) {
				/* break; */ $s = 22; continue;
			}
			if (!((op === 7))) {
				d.error(errPhase);
			}
		/* } */ $s = 21; continue; case 22:
		/* */ if (i < v.Len()) { $s = 38; continue; }
		/* */ $s = 39; continue;
		/* if (i < v.Len()) { */ case 38:
			/* */ if (v.Kind() === 17) { $s = 40; continue; }
			/* */ $s = 41; continue;
			/* if (v.Kind() === 17) { */ case 40:
				_r$15 = v.Type().Elem(); /* */ $s = 43; case 43: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$16 = reflect.Zero(_r$15); /* */ $s = 44; case 44: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				z = _r$16;
				/* while (true) { */ case 45:
					/* if (!(i < v.Len())) { break; } */ if(!(i < v.Len())) { $s = 46; continue; }
					_r$17 = v.Index(i); /* */ $s = 47; case 47: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					$r = _r$17.Set(z); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i = i + (1) >> 0;
				/* } */ $s = 45; continue; case 46:
				$s = 42; continue;
			/* } else { */ case 41:
				v.SetLen(i);
			/* } */ case 42:
		/* } */ case 39:
		/* */ if ((i === 0) && (v.Kind() === 23)) { $s = 49; continue; }
		/* */ $s = 50; continue;
		/* if ((i === 0) && (v.Kind() === 23)) { */ case 49:
			_r$18 = reflect.MakeSlice(v.Type(), 0, 0); /* */ $s = 51; case 51: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			$r = v.Set(_r$18); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 50:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.array }; } $f.$ptr = $ptr; $f._q = _q; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.i = i; $f.newcap = newcap; $f.newv = newv; $f.op = op; $f.pv = pv; $f.u = u; $f.ut = ut; $f.v = v; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.array = function(v) { return this.$val.array(v); };
	decodeState.ptr.prototype.object = function(v) {
		var $ptr, _i, _i$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _tuple, _tuple$1, _v, d, destring, elemType, err, f, ff, fields, i, i$1, item, key, kv, mapElem, ok, op, pv, qv, qv$1, qv$2, start, subv, t, u, ut, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; d = $f.d; destring = $f.destring; elemType = $f.elemType; err = $f.err; f = $f.f; ff = $f.ff; fields = $f.fields; i = $f.i; i$1 = $f.i$1; item = $f.item; key = $f.key; kv = $f.kv; mapElem = $f.mapElem; ok = $f.ok; op = $f.op; pv = $f.pv; qv = $f.qv; qv$1 = $f.qv$1; qv$2 = $f.qv$2; start = $f.start; subv = $f.subv; t = $f.t; u = $f.u; ut = $f.ut; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		d = this;
		_r$2 = d.indirect(v, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		u = _tuple[0];
		ut = _tuple[1];
		pv = _tuple[2];
		/* */ if (!($interfaceIsEqual(u, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(u, $ifaceNil))) { */ case 2:
			d.off = d.off - (1) >> 0;
			_r$3 = d.next(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = u.UnmarshalJSON(_r$3); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			return;
		/* } */ case 3:
		/* */ if (!($interfaceIsEqual(ut, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(ut, $ifaceNil))) { */ case 6:
			d.saveError(new UnmarshalTypeError.ptr("object", v.Type(), new $Int64(0, d.off)));
			d.off = d.off - (1) >> 0;
			_r$5 = d.next(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			return;
		/* } */ case 7:
		v = pv;
		/* */ if ((v.Kind() === 20) && (v.NumMethod() === 0)) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ((v.Kind() === 20) && (v.NumMethod() === 0)) { */ case 9:
			_r$6 = d.objectInterface(); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = reflect.ValueOf(new mapType$2(_r$6)); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$r = v.Set(_r$7); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 10:
		_ref = v.Kind();
		/* */ if (_ref === 21) { $s = 14; continue; }
		/* */ if (_ref === 25) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (_ref === 21) { */ case 14:
			t = v.Type();
			_r$8 = t.Key(); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = _r$8.Kind(); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			/* */ if (!((_r$9 === 24))) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (!((_r$9 === 24))) { */ case 18:
				d.saveError(new UnmarshalTypeError.ptr("object", v.Type(), new $Int64(0, d.off)));
				d.off = d.off - (1) >> 0;
				_r$10 = d.next(); /* */ $s = 22; case 22: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$10;
				return;
			/* } */ case 19:
			/* */ if (v.IsNil()) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (v.IsNil()) { */ case 23:
				_r$11 = reflect.MakeMap(t); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				$r = v.Set(_r$11); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 24:
			$s = 17; continue;
		/* } else if (_ref === 25) { */ case 15:
			$s = 17; continue;
		/* } else { */ case 16:
			d.saveError(new UnmarshalTypeError.ptr("object", v.Type(), new $Int64(0, d.off)));
			d.off = d.off - (1) >> 0;
			_r$12 = d.next(); /* */ $s = 27; case 27: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_r$12;
			return;
		/* } */ case 17:
		mapElem = new reflect.Value.ptr(ptrType$2.nil, 0, 0);
		/* while (true) { */ case 28:
			_r$13 = d.scanWhile(9); /* */ $s = 30; case 30: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			op = _r$13;
			if (op === 5) {
				/* break; */ $s = 29; continue;
			}
			if (!((op === 1))) {
				d.error(errPhase);
			}
			start = d.off - 1 >> 0;
			_r$14 = d.scanWhile(0); /* */ $s = 31; case 31: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			op = _r$14;
			item = $subslice(d.data, start, (d.off - 1 >> 0));
			_tuple$1 = unquoteBytes(item);
			key = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok) {
				d.error(errPhase);
			}
			subv = new reflect.Value.ptr(ptrType$2.nil, 0, 0);
			destring = false;
			/* */ if (v.Kind() === 21) { $s = 32; continue; }
			/* */ $s = 33; continue;
			/* if (v.Kind() === 21) { */ case 32:
				_r$15 = v.Type().Elem(); /* */ $s = 35; case 35: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				elemType = _r$15;
				/* */ if (!mapElem.IsValid()) { $s = 36; continue; }
				/* */ $s = 37; continue;
				/* if (!mapElem.IsValid()) { */ case 36:
					_r$16 = reflect.New(elemType); /* */ $s = 39; case 39: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					_r$17 = _r$16.Elem(); /* */ $s = 40; case 40: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					mapElem = _r$17;
					$s = 38; continue;
				/* } else { */ case 37:
					_r$18 = reflect.Zero(elemType); /* */ $s = 41; case 41: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					$r = mapElem.Set(_r$18); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 38:
				subv = mapElem;
				$s = 34; continue;
			/* } else { */ case 33:
				f = ptrType$3.nil;
				_r$19 = cachedTypeFields(v.Type()); /* */ $s = 43; case 43: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				fields = _r$19;
				_ref$1 = fields;
				_i = 0;
				/* while (true) { */ case 44:
					/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 45; continue; }
					i = _i;
					ff = ((i < 0 || i >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + i]);
					if (bytes.Equal(ff.nameBytes, key)) {
						f = ff;
						/* break; */ $s = 45; continue;
					}
					if (!(f === ptrType$3.nil)) { _v = false; $s = 48; continue s; }
					_r$20 = ff.equalFold(ff.nameBytes, key); /* */ $s = 49; case 49: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
					_v = _r$20; case 48:
					/* */ if (_v) { $s = 46; continue; }
					/* */ $s = 47; continue;
					/* if (_v) { */ case 46:
						f = ff;
					/* } */ case 47:
					_i++;
				/* } */ $s = 44; continue; case 45:
				/* */ if (!(f === ptrType$3.nil)) { $s = 50; continue; }
				/* */ $s = 51; continue;
				/* if (!(f === ptrType$3.nil)) { */ case 50:
					subv = v;
					destring = f.quoted;
					_ref$2 = f.index;
					_i$1 = 0;
					/* while (true) { */ case 52:
						/* if (!(_i$1 < _ref$2.$length)) { break; } */ if(!(_i$1 < _ref$2.$length)) { $s = 53; continue; }
						i$1 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]);
						/* */ if (subv.Kind() === 22) { $s = 54; continue; }
						/* */ $s = 55; continue;
						/* if (subv.Kind() === 22) { */ case 54:
							/* */ if (subv.IsNil()) { $s = 56; continue; }
							/* */ $s = 57; continue;
							/* if (subv.IsNil()) { */ case 56:
								_r$21 = subv.Type().Elem(); /* */ $s = 58; case 58: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
								_r$22 = reflect.New(_r$21); /* */ $s = 59; case 59: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
								$r = subv.Set(_r$22); /* */ $s = 60; case 60: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 57:
							_r$23 = subv.Elem(); /* */ $s = 61; case 61: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
							subv = _r$23;
						/* } */ case 55:
						_r$24 = subv.Field(i$1); /* */ $s = 62; case 62: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
						subv = _r$24;
						_i$1++;
					/* } */ $s = 52; continue; case 53:
				/* } */ case 51:
			/* } */ case 34:
			/* */ if (op === 9) { $s = 63; continue; }
			/* */ $s = 64; continue;
			/* if (op === 9) { */ case 63:
				_r$25 = d.scanWhile(9); /* */ $s = 65; case 65: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				op = _r$25;
			/* } */ case 64:
			if (!((op === 3))) {
				d.error(errPhase);
			}
			/* */ if (destring) { $s = 66; continue; }
			/* */ $s = 67; continue;
			/* if (destring) { */ case 66:
				_r$26 = d.valueQuoted(); /* */ $s = 69; case 69: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				_ref$3 = _r$26;
				/* */ if (_ref$3 === $ifaceNil) { $s = 70; continue; }
				/* */ if ($assertType(_ref$3, $String, true)[1]) { $s = 71; continue; }
				/* */ $s = 72; continue;
				/* if (_ref$3 === $ifaceNil) { */ case 70:
					qv = _ref$3;
					$r = d.literalStore(nullLiteral, subv, false); /* */ $s = 74; case 74: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 73; continue;
				/* } else if ($assertType(_ref$3, $String, true)[1]) { */ case 71:
					qv$1 = _ref$3.$val;
					$r = d.literalStore(new sliceType$2($stringToBytes(qv$1)), subv, true); /* */ $s = 75; case 75: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 73; continue;
				/* } else { */ case 72:
					qv$2 = _ref$3;
					_r$27 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal unquoted value into %v", new sliceType([subv.Type()])); /* */ $s = 76; case 76: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					$r = d.saveError(_r$27); /* */ $s = 77; case 77: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 73:
				$s = 68; continue;
			/* } else { */ case 67:
				$r = d.value(subv); /* */ $s = 78; case 78: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 68:
			/* */ if (v.Kind() === 21) { $s = 79; continue; }
			/* */ $s = 80; continue;
			/* if (v.Kind() === 21) { */ case 79:
				_r$28 = reflect.ValueOf(key); /* */ $s = 81; case 81: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				_r$29 = v.Type().Key(); /* */ $s = 82; case 82: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				_r$30 = _r$28.Convert(_r$29); /* */ $s = 83; case 83: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				kv = _r$30;
				$r = v.SetMapIndex(kv, subv); /* */ $s = 84; case 84: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 80:
			_r$31 = d.scanWhile(9); /* */ $s = 85; case 85: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			op = _r$31;
			if (op === 5) {
				/* break; */ $s = 29; continue;
			}
			if (!((op === 4))) {
				d.error(errPhase);
			}
		/* } */ $s = 28; continue; case 29:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.object }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.d = d; $f.destring = destring; $f.elemType = elemType; $f.err = err; $f.f = f; $f.ff = ff; $f.fields = fields; $f.i = i; $f.i$1 = i$1; $f.item = item; $f.key = key; $f.kv = kv; $f.mapElem = mapElem; $f.ok = ok; $f.op = op; $f.pv = pv; $f.qv = qv; $f.qv$1 = qv$1; $f.qv$2 = qv$2; $f.start = start; $f.subv = subv; $f.t = t; $f.u = u; $f.ut = ut; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.object = function(v) { return this.$val.object(v); };
	decodeState.ptr.prototype.literal = function(v) {
		var $ptr, _r$2, d, op, start, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; d = $f.d; op = $f.op; start = $f.start; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		d = this;
		start = d.off - 1 >> 0;
		_r$2 = d.scanWhile(0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		d.off = d.off - (1) >> 0;
		d.scan.undo(op);
		$r = d.literalStore($subslice(d.data, start, d.off), v, false); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.literal }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.d = d; $f.op = op; $f.start = start; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.literal = function(v) { return this.$val.literal(v); };
	decodeState.ptr.prototype.convertNumber = function(s) {
		var $ptr, _tuple, d, err, f, s;
		d = this;
		if (d.useNumber) {
			return [new Number(s), $ifaceNil];
		}
		_tuple = strconv.ParseFloat(s, 64);
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new UnmarshalTypeError.ptr("number " + s, reflect.TypeOf(new $Float64(0)), new $Int64(0, d.off))];
		}
		return [new $Float64(f), $ifaceNil];
	};
	decodeState.prototype.convertNumber = function(s) { return this.$val.convertNumber(s); };
	decodeState.ptr.prototype.literalStore = function(item, v, fromQuoted) {
		var $ptr, _arg, _arg$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, b, c, d, err, err$1, err$2, err$3, err$4, err$5, err$6, fromQuoted, item, n, n$1, n$2, n$3, n$4, ok, ok$1, pv, s, s$1, s$2, u, ut, v, value, wantptr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; b = $f.b; c = $f.c; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; fromQuoted = $f.fromQuoted; item = $f.item; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; n$3 = $f.n$3; n$4 = $f.n$4; ok = $f.ok; ok$1 = $f.ok$1; pv = $f.pv; s = $f.s; s$1 = $f.s$1; s$2 = $f.s$2; u = $f.u; ut = $f.ut; v = $f.v; value = $f.value; wantptr = $f.wantptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		d = this;
		/* */ if (item.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (item.$length === 0) { */ case 1:
			_r$2 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, v.Type()])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$r = d.saveError(_r$2); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 2:
		wantptr = (0 >= item.$length ? $throwRuntimeError("index out of range") : item.$array[item.$offset + 0]) === 110;
		_r$3 = d.indirect(v, wantptr); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		u = _tuple[0];
		ut = _tuple[1];
		pv = _tuple[2];
		/* */ if (!($interfaceIsEqual(u, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(u, $ifaceNil))) { */ case 6:
			_r$4 = u.UnmarshalJSON(item); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			return;
		/* } */ case 7:
		/* */ if (!($interfaceIsEqual(ut, $ifaceNil))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!($interfaceIsEqual(ut, $ifaceNil))) { */ case 9:
			/* */ if (!(((0 >= item.$length ? $throwRuntimeError("index out of range") : item.$array[item.$offset + 0]) === 34))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!(((0 >= item.$length ? $throwRuntimeError("index out of range") : item.$array[item.$offset + 0]) === 34))) { */ case 11:
				/* */ if (fromQuoted) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (fromQuoted) { */ case 13:
					_r$5 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, v.Type()])); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$r = d.saveError(_r$5); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 15; continue;
				/* } else { */ case 14:
					d.saveError(new UnmarshalTypeError.ptr("string", v.Type(), new $Int64(0, d.off)));
				/* } */ case 15:
				return;
			/* } */ case 12:
			_tuple$1 = unquoteBytes(item);
			s = _tuple$1[0];
			ok = _tuple$1[1];
			/* */ if (!ok) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (!ok) { */ case 18:
				/* */ if (fromQuoted) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (fromQuoted) { */ case 20:
					_r$6 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, v.Type()])); /* */ $s = 23; case 23: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$r = d.error(_r$6); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 22; continue;
				/* } else { */ case 21:
					d.error(errPhase);
				/* } */ case 22:
			/* } */ case 19:
			_r$7 = ut.UnmarshalText(s); /* */ $s = 25; case 25: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			err$1 = _r$7;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				d.error(err$1);
			}
			return;
		/* } */ case 10:
		v = pv;
		c = (0 >= item.$length ? $throwRuntimeError("index out of range") : item.$array[item.$offset + 0]);
		_ref = c;
		/* */ if (_ref === 110) { $s = 26; continue; }
		/* */ if (_ref === 116 || _ref === 102) { $s = 27; continue; }
		/* */ if (_ref === 34) { $s = 28; continue; }
		/* */ $s = 29; continue;
		/* if (_ref === 110) { */ case 26:
			_ref$1 = v.Kind();
			/* */ if (_ref$1 === 20 || _ref$1 === 22 || _ref$1 === 21 || _ref$1 === 23) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (_ref$1 === 20 || _ref$1 === 22 || _ref$1 === 21 || _ref$1 === 23) { */ case 31:
				_r$8 = reflect.Zero(v.Type()); /* */ $s = 33; case 33: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = v.Set(_r$8); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 32:
			$s = 30; continue;
		/* } else if (_ref === 116 || _ref === 102) { */ case 27:
			value = c === 116;
			_ref$2 = v.Kind();
			/* */ if (_ref$2 === 1) { $s = 35; continue; }
			/* */ if (_ref$2 === 20) { $s = 36; continue; }
			/* */ $s = 37; continue;
			/* if (_ref$2 === 1) { */ case 35:
				v.SetBool(value);
				$s = 38; continue;
			/* } else if (_ref$2 === 20) { */ case 36:
				/* */ if (v.NumMethod() === 0) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if (v.NumMethod() === 0) { */ case 39:
					_r$9 = reflect.ValueOf(new $Bool(value)); /* */ $s = 42; case 42: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					$r = v.Set(_r$9); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 41; continue;
				/* } else { */ case 40:
					d.saveError(new UnmarshalTypeError.ptr("bool", v.Type(), new $Int64(0, d.off)));
				/* } */ case 41:
				$s = 38; continue;
			/* } else { */ case 37:
				/* */ if (fromQuoted) { $s = 44; continue; }
				/* */ $s = 45; continue;
				/* if (fromQuoted) { */ case 44:
					_r$10 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, v.Type()])); /* */ $s = 47; case 47: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					$r = d.saveError(_r$10); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 46; continue;
				/* } else { */ case 45:
					d.saveError(new UnmarshalTypeError.ptr("bool", v.Type(), new $Int64(0, d.off)));
				/* } */ case 46:
			/* } */ case 38:
			$s = 30; continue;
		/* } else if (_ref === 34) { */ case 28:
			_tuple$2 = unquoteBytes(item);
			s$1 = _tuple$2[0];
			ok$1 = _tuple$2[1];
			/* */ if (!ok$1) { $s = 49; continue; }
			/* */ $s = 50; continue;
			/* if (!ok$1) { */ case 49:
				/* */ if (fromQuoted) { $s = 51; continue; }
				/* */ $s = 52; continue;
				/* if (fromQuoted) { */ case 51:
					_r$11 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, v.Type()])); /* */ $s = 54; case 54: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					$r = d.error(_r$11); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 53; continue;
				/* } else { */ case 52:
					d.error(errPhase);
				/* } */ case 53:
			/* } */ case 50:
			_ref$3 = v.Kind();
			/* */ if (_ref$3 === 23) { $s = 56; continue; }
			/* */ if (_ref$3 === 24) { $s = 57; continue; }
			/* */ if (_ref$3 === 20) { $s = 58; continue; }
			/* */ $s = 59; continue;
			/* switch (0) { default: if (_ref$3 === 23) { */ case 56:
				_r$12 = v.Type().Elem(); /* */ $s = 63; case 63: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$13 = _r$12.Kind(); /* */ $s = 64; case 64: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				/* */ if (!((_r$13 === 8))) { $s = 61; continue; }
				/* */ $s = 62; continue;
				/* if (!((_r$13 === 8))) { */ case 61:
					d.saveError(new UnmarshalTypeError.ptr("string", v.Type(), new $Int64(0, d.off)));
					/* break; */ $s = 60; continue;
				/* } */ case 62:
				b = $makeSlice(sliceType$2, base64.StdEncoding.DecodedLen(s$1.$length));
				_tuple$3 = base64.StdEncoding.Decode(b, s$1);
				n = _tuple$3[0];
				err$2 = _tuple$3[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					d.saveError(err$2);
					/* break; */ $s = 60; continue;
				}
				_r$14 = reflect.ValueOf($subslice(b, 0, n)); /* */ $s = 65; case 65: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$r = v.Set(_r$14); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 60; continue;
			/* } else if (_ref$3 === 24) { */ case 57:
				v.SetString($bytesToString(s$1));
				$s = 60; continue;
			/* } else if (_ref$3 === 20) { */ case 58:
				/* */ if (v.NumMethod() === 0) { $s = 67; continue; }
				/* */ $s = 68; continue;
				/* if (v.NumMethod() === 0) { */ case 67:
					_r$15 = reflect.ValueOf(new $String($bytesToString(s$1))); /* */ $s = 70; case 70: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					$r = v.Set(_r$15); /* */ $s = 71; case 71: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 69; continue;
				/* } else { */ case 68:
					d.saveError(new UnmarshalTypeError.ptr("string", v.Type(), new $Int64(0, d.off)));
				/* } */ case 69:
				$s = 60; continue;
			/* } else { */ case 59:
				d.saveError(new UnmarshalTypeError.ptr("string", v.Type(), new $Int64(0, d.off)));
			/* } } */ case 60:
			$s = 30; continue;
		/* } else { */ case 29:
			/* */ if (!((c === 45)) && (c < 48 || c > 57)) { $s = 72; continue; }
			/* */ $s = 73; continue;
			/* if (!((c === 45)) && (c < 48 || c > 57)) { */ case 72:
				/* */ if (fromQuoted) { $s = 74; continue; }
				/* */ $s = 75; continue;
				/* if (fromQuoted) { */ case 74:
					_r$16 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, v.Type()])); /* */ $s = 77; case 77: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					$r = d.error(_r$16); /* */ $s = 78; case 78: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 76; continue;
				/* } else { */ case 75:
					d.error(errPhase);
				/* } */ case 76:
			/* } */ case 73:
			s$2 = $bytesToString(item);
			_ref$4 = v.Kind();
			/* */ if (_ref$4 === 20) { $s = 79; continue; }
			/* */ if (_ref$4 === 2 || _ref$4 === 3 || _ref$4 === 4 || _ref$4 === 5 || _ref$4 === 6) { $s = 80; continue; }
			/* */ if (_ref$4 === 7 || _ref$4 === 8 || _ref$4 === 9 || _ref$4 === 10 || _ref$4 === 11 || _ref$4 === 12) { $s = 81; continue; }
			/* */ if (_ref$4 === 13 || _ref$4 === 14) { $s = 82; continue; }
			/* */ $s = 83; continue;
			/* switch (0) { default: if (_ref$4 === 20) { */ case 79:
				_tuple$4 = d.convertNumber(s$2);
				n$1 = _tuple$4[0];
				err$3 = _tuple$4[1];
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					d.saveError(err$3);
					/* break; */ $s = 84; continue;
				}
				if (!((v.NumMethod() === 0))) {
					d.saveError(new UnmarshalTypeError.ptr("number", v.Type(), new $Int64(0, d.off)));
					/* break; */ $s = 84; continue;
				}
				_r$17 = reflect.ValueOf(n$1); /* */ $s = 85; case 85: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				$r = v.Set(_r$17); /* */ $s = 86; case 86: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 84; continue;
			/* } else if (_ref$4 === 2 || _ref$4 === 3 || _ref$4 === 4 || _ref$4 === 5 || _ref$4 === 6) { */ case 80:
				_tuple$5 = strconv.ParseInt(s$2, 10, 64);
				n$2 = _tuple$5[0];
				err$4 = _tuple$5[1];
				if (!($interfaceIsEqual(err$4, $ifaceNil)) || v.OverflowInt(n$2)) {
					d.saveError(new UnmarshalTypeError.ptr("number " + s$2, v.Type(), new $Int64(0, d.off)));
					/* break; */ $s = 84; continue;
				}
				v.SetInt(n$2);
				$s = 84; continue;
			/* } else if (_ref$4 === 7 || _ref$4 === 8 || _ref$4 === 9 || _ref$4 === 10 || _ref$4 === 11 || _ref$4 === 12) { */ case 81:
				_tuple$6 = strconv.ParseUint(s$2, 10, 64);
				n$3 = _tuple$6[0];
				err$5 = _tuple$6[1];
				if (!($interfaceIsEqual(err$5, $ifaceNil)) || v.OverflowUint(n$3)) {
					d.saveError(new UnmarshalTypeError.ptr("number " + s$2, v.Type(), new $Int64(0, d.off)));
					/* break; */ $s = 84; continue;
				}
				v.SetUint(n$3);
				$s = 84; continue;
			/* } else if (_ref$4 === 13 || _ref$4 === 14) { */ case 82:
				_arg = s$2;
				_r$18 = v.Type().Bits(); /* */ $s = 87; case 87: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				_arg$1 = _r$18;
				_r$19 = strconv.ParseFloat(_arg, _arg$1); /* */ $s = 88; case 88: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				_tuple$7 = _r$19;
				n$4 = _tuple$7[0];
				err$6 = _tuple$7[1];
				if (!($interfaceIsEqual(err$6, $ifaceNil)) || v.OverflowFloat(n$4)) {
					d.saveError(new UnmarshalTypeError.ptr("number " + s$2, v.Type(), new $Int64(0, d.off)));
					/* break; */ $s = 84; continue;
				}
				v.SetFloat(n$4);
				$s = 84; continue;
			/* } else { */ case 83:
				if ((v.Kind() === 24) && $interfaceIsEqual(v.Type(), numberType)) {
					v.SetString(s$2);
					/* break; */ $s = 84; continue;
				}
				/* */ if (fromQuoted) { $s = 89; continue; }
				/* */ $s = 90; continue;
				/* if (fromQuoted) { */ case 89:
					_r$20 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, v.Type()])); /* */ $s = 92; case 92: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
					$r = d.error(_r$20); /* */ $s = 93; case 93: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 91; continue;
				/* } else { */ case 90:
					d.error(new UnmarshalTypeError.ptr("number", v.Type(), new $Int64(0, d.off)));
				/* } */ case 91:
			/* } } */ case 84:
		/* } */ case 30:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.literalStore }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.b = b; $f.c = c; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.fromQuoted = fromQuoted; $f.item = item; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.n$3 = n$3; $f.n$4 = n$4; $f.ok = ok; $f.ok$1 = ok$1; $f.pv = pv; $f.s = s; $f.s$1 = s$1; $f.s$2 = s$2; $f.u = u; $f.ut = ut; $f.v = v; $f.value = value; $f.wantptr = wantptr; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.literalStore = function(item, v, fromQuoted) { return this.$val.literalStore(item, v, fromQuoted); };
	decodeState.ptr.prototype.valueInterface = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _ref, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$2 = d.scanWhile(9); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_ref = _r$2;
		/* */ if (_ref === 6) { $s = 2; continue; }
		/* */ if (_ref === 2) { $s = 3; continue; }
		/* */ if (_ref === 1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_ref === 6) { */ case 2:
			_r$3 = d.arrayInterface(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ $s = 8; case 8:
			return _r$3;
		/* } else if (_ref === 2) { */ case 3:
			_r$4 = d.objectInterface(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ $s = 10; case 10:
			return new mapType$2(_r$4);
		/* } else if (_ref === 1) { */ case 4:
			_r$5 = d.literalInterface(); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ $s = 12; case 12:
			return _r$5;
		/* } else { */ case 5:
			d.error(errPhase);
			$panic(new $String("unreachable"));
		/* } */ case 6:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.valueInterface }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.valueInterface = function() { return this.$val.valueInterface(); };
	decodeState.ptr.prototype.arrayInterface = function() {
		var $ptr, _r$2, _r$3, _r$4, d, op, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; d = $f.d; op = $f.op; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		v = $makeSlice(sliceType, 0);
		/* while (true) { */ case 1:
			_r$2 = d.scanWhile(9); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			op = _r$2;
			if (op === 8) {
				/* break; */ $s = 2; continue;
			}
			d.off = d.off - (1) >> 0;
			d.scan.undo(op);
			_r$3 = d.valueInterface(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = $append(v, _r$3);
			_r$4 = d.scanWhile(9); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			op = _r$4;
			if (op === 8) {
				/* break; */ $s = 2; continue;
			}
			if (!((op === 7))) {
				d.error(errPhase);
			}
		/* } */ $s = 1; continue; case 2:
		return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.arrayInterface }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.d = d; $f.op = op; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.arrayInterface = function() { return this.$val.arrayInterface(); };
	decodeState.ptr.prototype.objectInterface = function() {
		var $ptr, _key, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, d, item, key, m, ok, op, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; d = $f.d; item = $f.item; key = $f.key; m = $f.m; ok = $f.ok; op = $f.op; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		m = {};
		/* while (true) { */ case 1:
			_r$2 = d.scanWhile(9); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			op = _r$2;
			if (op === 5) {
				/* break; */ $s = 2; continue;
			}
			if (!((op === 1))) {
				d.error(errPhase);
			}
			start = d.off - 1 >> 0;
			_r$3 = d.scanWhile(0); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			op = _r$3;
			item = $subslice(d.data, start, (d.off - 1 >> 0));
			_tuple = unquote(item);
			key = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				d.error(errPhase);
			}
			/* */ if (op === 9) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (op === 9) { */ case 5:
				_r$4 = d.scanWhile(9); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				op = _r$4;
			/* } */ case 6:
			if (!((op === 3))) {
				d.error(errPhase);
			}
			_r$5 = d.valueInterface(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_key = key; (m || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: _r$5 };
			_r$6 = d.scanWhile(9); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			op = _r$6;
			if (op === 5) {
				/* break; */ $s = 2; continue;
			}
			if (!((op === 4))) {
				d.error(errPhase);
			}
		/* } */ $s = 1; continue; case 2:
		return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.objectInterface }; } $f.$ptr = $ptr; $f._key = _key; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.d = d; $f.item = item; $f.key = key; $f.m = m; $f.ok = ok; $f.op = op; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.objectInterface = function() { return this.$val.objectInterface(); };
	decodeState.ptr.prototype.literalInterface = function() {
		var $ptr, _r$2, _ref, _tuple, _tuple$1, c, d, err, item, n, ok, op, s, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; d = $f.d; err = $f.err; item = $f.item; n = $f.n; ok = $f.ok; op = $f.op; s = $f.s; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		start = d.off - 1 >> 0;
		_r$2 = d.scanWhile(0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		d.off = d.off - (1) >> 0;
		d.scan.undo(op);
		item = $subslice(d.data, start, d.off);
		c = (0 >= item.$length ? $throwRuntimeError("index out of range") : item.$array[item.$offset + 0]);
		_ref = c;
		if (_ref === 110) {
			return $ifaceNil;
		} else if (_ref === 116 || _ref === 102) {
			return new $Bool((c === 116));
		} else if (_ref === 34) {
			_tuple = unquote(item);
			s = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				d.error(errPhase);
			}
			return new $String(s);
		} else {
			if (!((c === 45)) && (c < 48 || c > 57)) {
				d.error(errPhase);
			}
			_tuple$1 = d.convertNumber($bytesToString(item));
			n = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.saveError(err);
			}
			return n;
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.literalInterface }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.d = d; $f.err = err; $f.item = item; $f.n = n; $f.ok = ok; $f.op = op; $f.s = s; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.literalInterface = function() { return this.$val.literalInterface(); };
	getu4 = function(s) {
		var $ptr, _tuple, err, r, s;
		if (s.$length < 6 || !(((0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]) === 92)) || !(((1 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 1]) === 117))) {
			return -1;
		}
		_tuple = strconv.ParseUint($bytesToString($subslice(s, 2, 6)), 16, 64);
		r = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return -1;
		}
		return (r.$low >> 0);
	};
	unquote = function(s) {
		var $ptr, _tuple, ok, s, t;
		t = "";
		ok = false;
		_tuple = unquoteBytes(s);
		s = _tuple[0];
		ok = _tuple[1];
		t = $bytesToString(s);
		return [t, ok];
	};
	unquoteBytes = function(s) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, b, c, c$1, dec, nb, ok, r, rr, rr$1, rr$2, rr1, s, size, size$1, t, w, x;
		t = sliceType$2.nil;
		ok = false;
		if (s.$length < 2 || !(((0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]) === 34)) || !(((x = s.$length - 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x])) === 34))) {
			return [t, ok];
		}
		s = $subslice(s, 1, (s.$length - 1 >> 0));
		r = 0;
		while (true) {
			if (!(r < s.$length)) { break; }
			c = ((r < 0 || r >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + r]);
			if ((c === 92) || (c === 34) || c < 32) {
				break;
			}
			if (c < 128) {
				r = r + (1) >> 0;
				continue;
			}
			_tuple = utf8.DecodeRune($subslice(s, r));
			rr = _tuple[0];
			size = _tuple[1];
			if ((rr === 65533) && (size === 1)) {
				break;
			}
			r = r + (size) >> 0;
		}
		if (r === s.$length) {
			_tmp = s;
			_tmp$1 = true;
			t = _tmp;
			ok = _tmp$1;
			return [t, ok];
		}
		b = $makeSlice(sliceType$2, (s.$length + 8 >> 0));
		w = $copySlice(b, $subslice(s, 0, r));
		while (true) {
			if (!(r < s.$length)) { break; }
			if (w >= (b.$length - 8 >> 0)) {
				nb = $makeSlice(sliceType$2, ($imul(((b.$length + 4 >> 0)), 2)));
				$copySlice(nb, $subslice(b, 0, w));
				b = nb;
			}
			c$1 = ((r < 0 || r >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + r]);
			if (c$1 === 92) {
				r = r + (1) >> 0;
				if (r >= s.$length) {
					return [t, ok];
				}
				_ref = ((r < 0 || r >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + r]);
				switch (0) { default: if (_ref === 34 || _ref === 92 || _ref === 47 || _ref === 39) {
					((w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = ((r < 0 || r >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + r]));
					r = r + (1) >> 0;
					w = w + (1) >> 0;
				} else if (_ref === 98) {
					((w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = 8);
					r = r + (1) >> 0;
					w = w + (1) >> 0;
				} else if (_ref === 102) {
					((w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = 12);
					r = r + (1) >> 0;
					w = w + (1) >> 0;
				} else if (_ref === 110) {
					((w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = 10);
					r = r + (1) >> 0;
					w = w + (1) >> 0;
				} else if (_ref === 114) {
					((w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = 13);
					r = r + (1) >> 0;
					w = w + (1) >> 0;
				} else if (_ref === 116) {
					((w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = 9);
					r = r + (1) >> 0;
					w = w + (1) >> 0;
				} else if (_ref === 117) {
					r = r - (1) >> 0;
					rr$1 = getu4($subslice(s, r));
					if (rr$1 < 0) {
						return [t, ok];
					}
					r = r + (6) >> 0;
					if (utf16.IsSurrogate(rr$1)) {
						rr1 = getu4($subslice(s, r));
						dec = utf16.DecodeRune(rr$1, rr1);
						if (!((dec === 65533))) {
							r = r + (6) >> 0;
							w = w + (utf8.EncodeRune($subslice(b, w), dec)) >> 0;
							break;
						}
						rr$1 = 65533;
					}
					w = w + (utf8.EncodeRune($subslice(b, w), rr$1)) >> 0;
				} else {
					return [t, ok];
				} }
			} else if (c$1 === 34 || c$1 < 32) {
				return [t, ok];
			} else if (c$1 < 128) {
				((w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = c$1);
				r = r + (1) >> 0;
				w = w + (1) >> 0;
			} else {
				_tuple$1 = utf8.DecodeRune($subslice(s, r));
				rr$2 = _tuple$1[0];
				size$1 = _tuple$1[1];
				r = r + (size$1) >> 0;
				w = w + (utf8.EncodeRune($subslice(b, w), rr$2)) >> 0;
			}
		}
		_tmp$2 = $subslice(b, 0, w);
		_tmp$3 = true;
		t = _tmp$2;
		ok = _tmp$3;
		return [t, ok];
	};
	Marshal = function(v) {
		var $ptr, _r$2, e, err, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; e = $f.e; err = $f.err; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = new encodeState.ptr(new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType.zero(), arrayType$1.zero(), 0), arrayType$1.zero());
		_r$2 = e.marshal(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		err = _r$2;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [sliceType$2.nil, err];
		}
		return [e.Buffer.Bytes(), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Marshal }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.e = e; $f.err = err; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Marshal = Marshal;
	UnsupportedTypeError.ptr.prototype.Error = function() {
		var $ptr, _r$2, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r$2 = e.Type.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return "json: unsupported type: " + _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: UnsupportedTypeError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	UnsupportedTypeError.prototype.Error = function() { return this.$val.Error(); };
	UnsupportedValueError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "json: unsupported value: " + e.Str;
	};
	UnsupportedValueError.prototype.Error = function() { return this.$val.Error(); };
	MarshalerError.ptr.prototype.Error = function() {
		var $ptr, _r$2, _r$3, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r$2 = e.Type.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = e.Err.Error(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return "json: error calling MarshalJSON for type " + _r$2 + ": " + _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MarshalerError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	MarshalerError.prototype.Error = function() { return this.$val.Error(); };
	encodeState.ptr.prototype.marshal = function(v) {
		var $ptr, _r$2, e, err, v, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; e = $f.e; err = $f.err; v = $f.v; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		err[0] = $ifaceNil;
		e = this;
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, _tuple$1, ok, ok$1, r, s;
			r = $recover();
			if (!($interfaceIsEqual(r, $ifaceNil))) {
				_tuple = $assertType(r, runtime.Error, true);
				ok = _tuple[1];
				if (ok) {
					$panic(r);
				}
				_tuple$1 = $assertType(r, $String, true);
				s = _tuple$1[0];
				ok$1 = _tuple$1[1];
				if (ok$1) {
					$panic(new $String(s));
				}
				err[0] = $assertType(r, $error);
			}
		}; })(err), []]);
		_r$2 = reflect.ValueOf(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$r = e.reflectValue(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		err[0] = $ifaceNil;
		return err[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: encodeState.ptr.prototype.marshal }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.e = e; $f.err = err; $f.v = v; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	encodeState.prototype.marshal = function(v) { return this.$val.marshal(v); };
	encodeState.ptr.prototype.error = function(err) {
		var $ptr, e, err;
		e = this;
		$panic(err);
	};
	encodeState.prototype.error = function(err) { return this.$val.error(err); };
	isEmptyValue = function(v) {
		var $ptr, _ref, v, x, x$1;
		v = v;
		_ref = v.Kind();
		if (_ref === 17 || _ref === 21 || _ref === 23 || _ref === 24) {
			return v.Len() === 0;
		} else if (_ref === 1) {
			return !v.Bool();
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			return (x = v.Int(), (x.$high === 0 && x.$low === 0));
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			return (x$1 = v.Uint(), (x$1.$high === 0 && x$1.$low === 0));
		} else if (_ref === 13 || _ref === 14) {
			return v.Float() === 0;
		} else if (_ref === 20 || _ref === 22) {
			return v.IsNil();
		}
		return false;
	};
	encodeState.ptr.prototype.reflectValue = function(v) {
		var $ptr, _r$2, e, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; e = $f.e; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		e = this;
		_r$2 = valueEncoder(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$r = _r$2(e, v, false); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encodeState.ptr.prototype.reflectValue }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.e = e; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encodeState.prototype.reflectValue = function(v) { return this.$val.reflectValue(v); };
	valueEncoder = function(v) {
		var $ptr, _r$2, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if (!v.IsValid()) {
			return invalidValueEncoder;
		}
		_r$2 = typeEncoder(v.Type()); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	typeEncoder = function(t) {
		var $ptr, _entry, _key, _key$1, _r$2, f, t, wg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _key$1 = $f._key$1; _r$2 = $f._r$2; f = $f.f; t = $f.t; wg = $f.wg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = [f];
		wg = [wg];
		encoderCache.RWMutex.RLock();
		f[0] = (_entry = encoderCache.m[reflect.Type.keyFor(t)], _entry !== undefined ? _entry.v : $throwNilPointerError);
		encoderCache.RWMutex.RUnlock();
		if (!(f[0] === $throwNilPointerError)) {
			return f[0];
		}
		encoderCache.RWMutex.Lock();
		if (encoderCache.m === false) {
			encoderCache.m = {};
		}
		wg[0] = new nosync.WaitGroup.ptr(0);
		wg[0].Add(1);
		_key = t; (encoderCache.m || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: (function(f, wg) { return function $b(e, v, quoted) {
			var $ptr, e, quoted, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; quoted = $f.quoted; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = v;
			wg[0].Wait();
			$r = f[0](e, v, quoted); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.e = e; $f.quoted = quoted; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(f, wg) };
		encoderCache.RWMutex.Unlock();
		_r$2 = newTypeEncoder(t, true); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		f[0] = _r$2;
		wg[0].Done();
		encoderCache.RWMutex.Lock();
		_key$1 = t; (encoderCache.m || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$1)] = { k: _key$1, v: f[0] };
		encoderCache.RWMutex.Unlock();
		return f[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: typeEncoder }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._key$1 = _key$1; $f._r$2 = _r$2; $f.f = f; $f.t = t; $f.wg = wg; $f.$s = $s; $f.$r = $r; return $f;
	};
	newTypeEncoder = function(t, allowAddr) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, allowAddr, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; allowAddr = $f.allowAddr; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = t.Implements(marshalerType); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$2) { */ case 1:
			return marshalerEncoder;
		/* } */ case 2:
		_r$3 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!((_r$3 === 22)) && allowAddr) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((_r$3 === 22)) && allowAddr) { */ case 4:
			_r$4 = reflect.PtrTo(t).Implements(marshalerType); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_r$4) { */ case 7:
				_arg = addrMarshalerEncoder;
				_r$5 = newTypeEncoder(t, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_arg$1 = _r$5;
				_r$6 = newCondAddrEncoder(_arg, _arg$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				/* */ $s = 12; case 12:
				return _r$6;
			/* } */ case 8:
		/* } */ case 5:
		_r$7 = t.Implements(textMarshalerType); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		/* */ if (_r$7) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (_r$7) { */ case 13:
			return textMarshalerEncoder;
		/* } */ case 14:
		_r$8 = t.Kind(); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		/* */ if (!((_r$8 === 22)) && allowAddr) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (!((_r$8 === 22)) && allowAddr) { */ case 16:
			_r$9 = reflect.PtrTo(t).Implements(textMarshalerType); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			/* */ if (_r$9) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (_r$9) { */ case 19:
				_arg$2 = addrTextMarshalerEncoder;
				_r$10 = newTypeEncoder(t, false); /* */ $s = 22; case 22: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_arg$3 = _r$10;
				_r$11 = newCondAddrEncoder(_arg$2, _arg$3); /* */ $s = 23; case 23: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				/* */ $s = 24; case 24:
				return _r$11;
			/* } */ case 20:
		/* } */ case 17:
		_r$12 = t.Kind(); /* */ $s = 25; case 25: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_ref = _r$12;
		/* */ if (_ref === 1) { $s = 26; continue; }
		/* */ if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { $s = 27; continue; }
		/* */ if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { $s = 28; continue; }
		/* */ if (_ref === 13) { $s = 29; continue; }
		/* */ if (_ref === 14) { $s = 30; continue; }
		/* */ if (_ref === 24) { $s = 31; continue; }
		/* */ if (_ref === 20) { $s = 32; continue; }
		/* */ if (_ref === 25) { $s = 33; continue; }
		/* */ if (_ref === 21) { $s = 34; continue; }
		/* */ if (_ref === 23) { $s = 35; continue; }
		/* */ if (_ref === 17) { $s = 36; continue; }
		/* */ if (_ref === 22) { $s = 37; continue; }
		/* */ $s = 38; continue;
		/* if (_ref === 1) { */ case 26:
			return boolEncoder;
		/* } else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { */ case 27:
			return intEncoder;
		/* } else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { */ case 28:
			return uintEncoder;
		/* } else if (_ref === 13) { */ case 29:
			return float32Encoder;
		/* } else if (_ref === 14) { */ case 30:
			return float64Encoder;
		/* } else if (_ref === 24) { */ case 31:
			return stringEncoder;
		/* } else if (_ref === 20) { */ case 32:
			return interfaceEncoder;
		/* } else if (_ref === 25) { */ case 33:
			_r$13 = newStructEncoder(t); /* */ $s = 40; case 40: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 41; case 41:
			return _r$13;
		/* } else if (_ref === 21) { */ case 34:
			_r$14 = newMapEncoder(t); /* */ $s = 42; case 42: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 43; case 43:
			return _r$14;
		/* } else if (_ref === 23) { */ case 35:
			_r$15 = newSliceEncoder(t); /* */ $s = 44; case 44: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 45; case 45:
			return _r$15;
		/* } else if (_ref === 17) { */ case 36:
			_r$16 = newArrayEncoder(t); /* */ $s = 46; case 46: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ $s = 47; case 47:
			return _r$16;
		/* } else if (_ref === 22) { */ case 37:
			_r$17 = newPtrEncoder(t); /* */ $s = 48; case 48: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ $s = 49; case 49:
			return _r$17;
		/* } else { */ case 38:
			return unsupportedTypeEncoder;
		/* } */ case 39:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: newTypeEncoder }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.allowAddr = allowAddr; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	invalidValueEncoder = function(e, v, quoted) {
		var $ptr, e, quoted, v;
		v = v;
		e.Buffer.WriteString("null");
	};
	marshalerEncoder = function(e, v, quoted) {
		var $ptr, _r$2, _r$3, _r$4, _tuple, b, e, err, m, quoted, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; quoted = $f.quoted; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if ((v.Kind() === 22) && v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		_r$2 = v.Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		m = $assertType(_r$2, Marshaler);
		_r$3 = m.MarshalJSON(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		b = _tuple[0];
		err = _tuple[1];
		/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 3:
			_r$4 = compact(e.Buffer, b, true); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
		/* } */ case 4:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.ptr(v.Type(), err));
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: marshalerEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.quoted = quoted; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	addrMarshalerEncoder = function(e, v, quoted) {
		var $ptr, _r$2, _r$3, _r$4, _tuple, b, e, err, m, quoted, v, va, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; quoted = $f.quoted; v = $f.v; va = $f.va; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		va = v.Addr();
		if (va.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		_r$2 = va.Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		m = $assertType(_r$2, Marshaler);
		_r$3 = m.MarshalJSON(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		b = _tuple[0];
		err = _tuple[1];
		/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 3:
			_r$4 = compact(e.Buffer, b, true); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
		/* } */ case 4:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.ptr(v.Type(), err));
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: addrMarshalerEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.quoted = quoted; $f.v = v; $f.va = va; $f.$s = $s; $f.$r = $r; return $f;
	};
	textMarshalerEncoder = function(e, v, quoted) {
		var $ptr, _r$2, _r$3, _tuple, _tuple$1, b, e, err, m, quoted, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; e = $f.e; err = $f.err; m = $f.m; quoted = $f.quoted; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if ((v.Kind() === 22) && v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		_r$2 = v.Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		m = $assertType(_r$2, encoding.TextMarshaler);
		_r$3 = m.MarshalText(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		b = _tuple[0];
		err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			_tuple$1 = e.stringBytes(b);
			err = _tuple$1[1];
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.ptr(v.Type(), err));
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: textMarshalerEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.quoted = quoted; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	addrTextMarshalerEncoder = function(e, v, quoted) {
		var $ptr, _r$2, _r$3, _tuple, _tuple$1, b, e, err, m, quoted, v, va, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; e = $f.e; err = $f.err; m = $f.m; quoted = $f.quoted; v = $f.v; va = $f.va; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		va = v.Addr();
		if (va.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		_r$2 = va.Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		m = $assertType(_r$2, encoding.TextMarshaler);
		_r$3 = m.MarshalText(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		b = _tuple[0];
		err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			_tuple$1 = e.stringBytes(b);
			err = _tuple$1[1];
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.ptr(v.Type(), err));
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: addrTextMarshalerEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.quoted = quoted; $f.v = v; $f.va = va; $f.$s = $s; $f.$r = $r; return $f;
	};
	boolEncoder = function(e, v, quoted) {
		var $ptr, e, quoted, v;
		v = v;
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		if (v.Bool()) {
			e.Buffer.WriteString("true");
		} else {
			e.Buffer.WriteString("false");
		}
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	intEncoder = function(e, v, quoted) {
		var $ptr, b, e, quoted, v;
		v = v;
		b = strconv.AppendInt($subslice(new sliceType$2(e.scratch), 0, 0), v.Int(), 10);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		e.Buffer.Write(b);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	uintEncoder = function(e, v, quoted) {
		var $ptr, b, e, quoted, v;
		v = v;
		b = strconv.AppendUint($subslice(new sliceType$2(e.scratch), 0, 0), v.Uint(), 10);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		e.Buffer.Write(b);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	floatEncoder.prototype.encode = function(e, v, quoted) {
		var $ptr, b, bits, e, f, quoted, v;
		v = v;
		bits = this.$val;
		f = v.Float();
		if (math.IsInf(f, 0) || math.IsNaN(f)) {
			e.error(new UnsupportedValueError.ptr($clone(v, reflect.Value), strconv.FormatFloat(f, 103, -1, (bits >> 0))));
		}
		b = strconv.AppendFloat($subslice(new sliceType$2(e.scratch), 0, 0), f, 103, -1, (bits >> 0));
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		e.Buffer.Write(b);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	$ptrType(floatEncoder).prototype.encode = function(e, v, quoted) { return new floatEncoder(this.$get()).encode(e, v, quoted); };
	stringEncoder = function(e, v, quoted) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, e, err, numStr, quoted, sb, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; e = $f.e; err = $f.err; numStr = $f.numStr; quoted = $f.quoted; sb = $f.sb; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		/* */ if ($interfaceIsEqual(v.Type(), numberType)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(v.Type(), numberType)) { */ case 1:
			_r$2 = v.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			numStr = _r$2;
			if (numStr === "") {
				numStr = "0";
			}
			e.Buffer.WriteString(numStr);
			return;
		/* } */ case 2:
		/* */ if (quoted) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (quoted) { */ case 4:
			_r$3 = v.String(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = Marshal(new $String(_r$3)); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple = _r$4;
			sb = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				e.error(err);
			}
			e.string($bytesToString(sb));
			$s = 6; continue;
		/* } else { */ case 5:
			_r$5 = v.String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = e.string(_r$5); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
		/* } */ case 6:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: stringEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.e = e; $f.err = err; $f.numStr = numStr; $f.quoted = quoted; $f.sb = sb; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	interfaceEncoder = function(e, v, quoted) {
		var $ptr, _r$2, e, quoted, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; e = $f.e; quoted = $f.quoted; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		_r$2 = v.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$r = e.reflectValue(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: interfaceEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.e = e; $f.quoted = quoted; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	unsupportedTypeEncoder = function(e, v, quoted) {
		var $ptr, e, quoted, v;
		v = v;
		e.error(new UnsupportedTypeError.ptr(v.Type()));
	};
	structEncoder.ptr.prototype.encode = function(e, v, quoted) {
		var $ptr, _i, _r$2, _ref, e, f, first, fv, i, quoted, se, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _ref = $f._ref; e = $f.e; f = $f.f; first = $f.first; fv = $f.fv; i = $f.i; quoted = $f.quoted; se = $f.se; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		se = this;
		e.Buffer.WriteByte(123);
		first = true;
		_ref = se.fields;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			f = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
			_r$2 = fieldByIndex(v, f.index); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			fv = _r$2;
			/* */ if (!fv.IsValid() || f.omitEmpty && isEmptyValue(fv)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!fv.IsValid() || f.omitEmpty && isEmptyValue(fv)) { */ case 4:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			if (first) {
				first = false;
			} else {
				e.Buffer.WriteByte(44);
			}
			e.string(f.name);
			e.Buffer.WriteByte(58);
			$r = (x = se.fieldEncs, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]))(e, fv, f.quoted); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		e.Buffer.WriteByte(125);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structEncoder.ptr.prototype.encode }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._ref = _ref; $f.e = e; $f.f = f; $f.first = first; $f.fv = fv; $f.i = i; $f.quoted = quoted; $f.se = se; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structEncoder.prototype.encode = function(e, v, quoted) { return this.$val.encode(e, v, quoted); };
	newStructEncoder = function(t) {
		var $ptr, _i, _r$2, _r$3, _r$4, _ref, f, fields, i, se, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; f = $f.f; fields = $f.fields; i = $f.i; se = $f.se; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = cachedTypeFields(t); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		fields = _r$2;
		se = new structEncoder.ptr(fields, $makeSlice(sliceType$4, fields.$length));
		_ref = fields;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			f = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
			_r$3 = typeByIndex(t, f.index); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = typeEncoder(_r$3); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			(x = se.fieldEncs, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = _r$4));
			_i++;
		/* } */ $s = 2; continue; case 3:
		return $methodVal(se, "encode");
		/* */ } return; } if ($f === undefined) { $f = { $blk: newStructEncoder }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.f = f; $f.fields = fields; $f.i = i; $f.se = se; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapEncoder.ptr.prototype.encode = function(e, v, param) {
		var $ptr, _arg, _arg$1, _i, _r$2, _r$3, _r$4, _r$5, _ref, e, i, k, me, param, sv, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; e = $f.e; i = $f.i; k = $f.k; me = $f.me; param = $f.param; sv = $f.sv; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		me = this;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		e.Buffer.WriteByte(123);
		_r$2 = v.MapKeys(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		sv = (x = _r$2, $subslice(new stringValues(x.$array), x.$offset, x.$offset + x.$length));
		$r = sort.Sort(sv); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = sv;
		_i = 0;
		/* while (true) { */ case 3:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
			i = _i;
			k = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				e.Buffer.WriteByte(44);
			}
			_r$3 = k.String(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = e.string(_r$3); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			e.Buffer.WriteByte(58);
			_arg = e;
			_r$5 = v.MapIndex(k); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_arg$1 = _r$5;
			$r = me.elemEnc(_arg, _arg$1, false); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 3; continue; case 4:
		e.Buffer.WriteByte(125);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: mapEncoder.ptr.prototype.encode }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.e = e; $f.i = i; $f.k = k; $f.me = me; $f.param = param; $f.sv = sv; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapEncoder.prototype.encode = function(e, v, param) { return this.$val.encode(e, v, param); };
	newMapEncoder = function(t) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, me, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; me = $f.me; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = t.Key(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!((_r$3 === 24))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r$3 === 24))) { */ case 1:
			return unsupportedTypeEncoder;
		/* } */ case 2:
		_r$4 = t.Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = typeEncoder(_r$4); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		me = new mapEncoder.ptr(_r$5);
		return $methodVal(me, "encode");
		/* */ } return; } if ($f === undefined) { $f = { $blk: newMapEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.me = me; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	encodeByteSlice = function(e, v, param) {
		var $ptr, _r$2, _r$3, _r$4, dst, e, enc, param, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; dst = $f.dst; e = $f.e; enc = $f.enc; param = $f.param; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		_r$2 = v.Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		s = _r$2;
		e.Buffer.WriteByte(34);
		/* */ if (s.$length < 1024) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (s.$length < 1024) { */ case 2:
			dst = $makeSlice(sliceType$2, base64.StdEncoding.EncodedLen(s.$length));
			base64.StdEncoding.Encode(dst, s);
			e.Buffer.Write(dst);
			$s = 4; continue;
		/* } else { */ case 3:
			enc = base64.NewEncoder(base64.StdEncoding, e);
			_r$3 = enc.Write(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_r$4 = enc.Close(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 4:
		e.Buffer.WriteByte(34);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encodeByteSlice }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.dst = dst; $f.e = e; $f.enc = enc; $f.param = param; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	sliceEncoder.ptr.prototype.encode = function(e, v, param) {
		var $ptr, e, param, se, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; param = $f.param; se = $f.se; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		se = this;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		$r = se.arrayEnc(e, v, false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: sliceEncoder.ptr.prototype.encode }; } $f.$ptr = $ptr; $f.e = e; $f.param = param; $f.se = se; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	sliceEncoder.prototype.encode = function(e, v, param) { return this.$val.encode(e, v, param); };
	newSliceEncoder = function(t) {
		var $ptr, _r$2, _r$3, _r$4, enc, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; enc = $f.enc; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = t.Elem(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 8) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$3 === 8) { */ case 1:
			return encodeByteSlice;
		/* } */ case 2:
		_r$4 = newArrayEncoder(t); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		enc = new sliceEncoder.ptr(_r$4);
		return $methodVal(enc, "encode");
		/* */ } return; } if ($f === undefined) { $f = { $blk: newSliceEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.enc = enc; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	arrayEncoder.ptr.prototype.encode = function(e, v, param) {
		var $ptr, _arg, _arg$1, _r$2, ae, e, i, n, param, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$2 = $f._r$2; ae = $f.ae; e = $f.e; i = $f.i; n = $f.n; param = $f.param; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		ae = this;
		e.Buffer.WriteByte(91);
		n = v.Len();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			if (i > 0) {
				e.Buffer.WriteByte(44);
			}
			_arg = e;
			_r$2 = v.Index(i); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg$1 = _r$2;
			$r = ae.elemEnc(_arg, _arg$1, false); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		e.Buffer.WriteByte(93);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: arrayEncoder.ptr.prototype.encode }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$2 = _r$2; $f.ae = ae; $f.e = e; $f.i = i; $f.n = n; $f.param = param; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	arrayEncoder.prototype.encode = function(e, v, param) { return this.$val.encode(e, v, param); };
	newArrayEncoder = function(t) {
		var $ptr, _r$2, _r$3, enc, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; enc = $f.enc; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = t.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = typeEncoder(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		enc = new arrayEncoder.ptr(_r$3);
		return $methodVal(enc, "encode");
		/* */ } return; } if ($f === undefined) { $f = { $blk: newArrayEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.enc = enc; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrEncoder.ptr.prototype.encode = function(e, v, quoted) {
		var $ptr, _arg, _arg$1, _arg$2, _r$2, e, pe, quoted, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r$2 = $f._r$2; e = $f.e; pe = $f.pe; quoted = $f.quoted; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		pe = this;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		_arg = e;
		_r$2 = v.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = _r$2;
		_arg$2 = quoted;
		$r = pe.elemEnc(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ptrEncoder.ptr.prototype.encode }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r$2 = _r$2; $f.e = e; $f.pe = pe; $f.quoted = quoted; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrEncoder.prototype.encode = function(e, v, quoted) { return this.$val.encode(e, v, quoted); };
	newPtrEncoder = function(t) {
		var $ptr, _r$2, _r$3, enc, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; enc = $f.enc; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = t.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = typeEncoder(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		enc = new ptrEncoder.ptr(_r$3);
		return $methodVal(enc, "encode");
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPtrEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.enc = enc; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	condAddrEncoder.ptr.prototype.encode = function(e, v, quoted) {
		var $ptr, ce, e, quoted, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; ce = $f.ce; e = $f.e; quoted = $f.quoted; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		ce = this;
		/* */ if (v.CanAddr()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v.CanAddr()) { */ case 1:
			$r = ce.canAddrEnc(e, v, quoted); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			$r = ce.elseEnc(e, v, quoted); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: condAddrEncoder.ptr.prototype.encode }; } $f.$ptr = $ptr; $f.ce = ce; $f.e = e; $f.quoted = quoted; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	condAddrEncoder.prototype.encode = function(e, v, quoted) { return this.$val.encode(e, v, quoted); };
	newCondAddrEncoder = function(canAddrEnc, elseEnc) {
		var $ptr, canAddrEnc, elseEnc, enc;
		enc = new condAddrEncoder.ptr(canAddrEnc, elseEnc);
		return $methodVal(enc, "encode");
	};
	isValidTag = function(s) {
		var $ptr, _i, _ref, _rune, c, s;
		if (s === "") {
			return false;
		}
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (strings.ContainsRune("!#$%&()*+-./:<=>?@[]^_{|}~ ", c)) {
			} else {
				if (!unicode.IsLetter(c) && !unicode.IsDigit(c)) {
					return false;
				}
			}
			_i += _rune[1];
		}
		return true;
	};
	fieldByIndex = function(v, index) {
		var $ptr, _i, _r$2, _r$3, _ref, i, index, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; i = $f.i; index = $f.index; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (v.Kind() === 22) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (v.Kind() === 22) { */ case 3:
				if (v.IsNil()) {
					return new reflect.Value.ptr(ptrType$2.nil, 0, 0);
				}
				_r$2 = v.Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				v = _r$2;
			/* } */ case 4:
			_r$3 = v.Field(i); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		/* } */ $s = 1; continue; case 2:
		return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.i = i; $f.index = index; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	typeByIndex = function(t, index) {
		var $ptr, _i, _r$2, _r$3, _r$4, _ref, i, index, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; i = $f.i; index = $f.index; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$2 = t.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2 === 22) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r$2 === 22) { */ case 3:
				_r$3 = t.Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				t = _r$3;
			/* } */ case 4:
			_r$4 = t.Field(i); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			t = _r$4.Type;
			_i++;
		/* } */ $s = 1; continue; case 2:
		return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: typeByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.i = i; $f.index = index; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	stringValues.prototype.Len = function() {
		var $ptr, sv;
		sv = this;
		return sv.$length;
	};
	$ptrType(stringValues).prototype.Len = function() { return this.$get().Len(); };
	stringValues.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, sv;
		sv = this;
		_tmp = ((j < 0 || j >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + j]);
		_tmp$1 = ((i < 0 || i >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + i]);
		((i < 0 || i >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + i] = _tmp);
		((j < 0 || j >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + j] = _tmp$1);
	};
	$ptrType(stringValues).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	stringValues.prototype.Less = function(i, j) {
		var $ptr, _r$2, _r$3, i, j, sv, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; j = $f.j; sv = $f.sv; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		sv = this;
		_r$2 = sv.get(i); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = sv.get(j); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$2 < _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stringValues.prototype.Less }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.j = j; $f.sv = sv; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(stringValues).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	stringValues.prototype.get = function(i) {
		var $ptr, _r$2, i, sv, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; i = $f.i; sv = $f.sv; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		sv = this;
		_r$2 = ((i < 0 || i >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + i]).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stringValues.prototype.get }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.i = i; $f.sv = sv; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(stringValues).prototype.get = function(i) { return this.$get().get(i); };
	encodeState.ptr.prototype.string = function(s) {
		var $ptr, _ref, _tuple, b, c, e, i, len0, s, size, start;
		e = this;
		len0 = e.Buffer.Len();
		e.Buffer.WriteByte(34);
		start = 0;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			b = s.charCodeAt(i);
			if (b < 128) {
				if (32 <= b && !((b === 92)) && !((b === 34)) && !((b === 60)) && !((b === 62)) && !((b === 38))) {
					i = i + (1) >> 0;
					continue;
				}
				if (start < i) {
					e.Buffer.WriteString(s.substring(start, i));
				}
				_ref = b;
				if (_ref === 92 || _ref === 34) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(b);
				} else if (_ref === 10) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(110);
				} else if (_ref === 13) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(114);
				} else if (_ref === 9) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(116);
				} else {
					e.Buffer.WriteString("\\u00");
					e.Buffer.WriteByte(hex.charCodeAt((b >>> 4 << 24 >>> 24)));
					e.Buffer.WriteByte(hex.charCodeAt(((b & 15) >>> 0)));
				}
				i = i + (1) >> 0;
				start = i;
				continue;
			}
			_tuple = utf8.DecodeRuneInString(s.substring(i));
			c = _tuple[0];
			size = _tuple[1];
			if ((c === 65533) && (size === 1)) {
				if (start < i) {
					e.Buffer.WriteString(s.substring(start, i));
				}
				e.Buffer.WriteString("\\ufffd");
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			if ((c === 8232) || (c === 8233)) {
				if (start < i) {
					e.Buffer.WriteString(s.substring(start, i));
				}
				e.Buffer.WriteString("\\u202");
				e.Buffer.WriteByte(hex.charCodeAt((c & 15)));
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			i = i + (size) >> 0;
		}
		if (start < s.length) {
			e.Buffer.WriteString(s.substring(start));
		}
		e.Buffer.WriteByte(34);
		return [e.Buffer.Len() - len0 >> 0, $ifaceNil];
	};
	encodeState.prototype.string = function(s) { return this.$val.string(s); };
	encodeState.ptr.prototype.stringBytes = function(s) {
		var $ptr, _ref, _tuple, b, c, e, i, len0, s, size, start;
		e = this;
		len0 = e.Buffer.Len();
		e.Buffer.WriteByte(34);
		start = 0;
		i = 0;
		while (true) {
			if (!(i < s.$length)) { break; }
			b = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			if (b < 128) {
				if (32 <= b && !((b === 92)) && !((b === 34)) && !((b === 60)) && !((b === 62)) && !((b === 38))) {
					i = i + (1) >> 0;
					continue;
				}
				if (start < i) {
					e.Buffer.Write($subslice(s, start, i));
				}
				_ref = b;
				if (_ref === 92 || _ref === 34) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(b);
				} else if (_ref === 10) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(110);
				} else if (_ref === 13) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(114);
				} else if (_ref === 9) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(116);
				} else {
					e.Buffer.WriteString("\\u00");
					e.Buffer.WriteByte(hex.charCodeAt((b >>> 4 << 24 >>> 24)));
					e.Buffer.WriteByte(hex.charCodeAt(((b & 15) >>> 0)));
				}
				i = i + (1) >> 0;
				start = i;
				continue;
			}
			_tuple = utf8.DecodeRune($subslice(s, i));
			c = _tuple[0];
			size = _tuple[1];
			if ((c === 65533) && (size === 1)) {
				if (start < i) {
					e.Buffer.Write($subslice(s, start, i));
				}
				e.Buffer.WriteString("\\ufffd");
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			if ((c === 8232) || (c === 8233)) {
				if (start < i) {
					e.Buffer.Write($subslice(s, start, i));
				}
				e.Buffer.WriteString("\\u202");
				e.Buffer.WriteByte(hex.charCodeAt((c & 15)));
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			i = i + (size) >> 0;
		}
		if (start < s.$length) {
			e.Buffer.Write($subslice(s, start));
		}
		e.Buffer.WriteByte(34);
		return [e.Buffer.Len() - len0 >> 0, $ifaceNil];
	};
	encodeState.prototype.stringBytes = function(s) { return this.$val.stringBytes(s); };
	fillField = function(f) {
		var $ptr, f;
		f = $clone(f, field);
		f.nameBytes = new sliceType$2($stringToBytes(f.name));
		f.equalFold = foldFunc(f.nameBytes);
		return f;
	};
	byName.prototype.Len = function() {
		var $ptr, x;
		x = this;
		return x.$length;
	};
	$ptrType(byName).prototype.Len = function() { return this.$get().Len(); };
	byName.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, x;
		x = this;
		_tmp = $clone(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), field);
		_tmp$1 = $clone(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), field);
		field.copy(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), _tmp);
		field.copy(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), _tmp$1);
	};
	$ptrType(byName).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	byName.prototype.Less = function(i, j) {
		var $ptr, i, j, x;
		x = this;
		if (!(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).name === ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).name)) {
			return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).name < ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).name;
		}
		if (!((((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index.$length === ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length))) {
			return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index.$length < ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length;
		}
		if (!(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).tag === ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).tag)) {
			return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).tag;
		}
		return $subslice(new byIndex(x.$array), x.$offset, x.$offset + x.$length).Less(i, j);
	};
	$ptrType(byName).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	byIndex.prototype.Len = function() {
		var $ptr, x;
		x = this;
		return x.$length;
	};
	$ptrType(byIndex).prototype.Len = function() { return this.$get().Len(); };
	byIndex.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, x;
		x = this;
		_tmp = $clone(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), field);
		_tmp$1 = $clone(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), field);
		field.copy(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), _tmp);
		field.copy(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), _tmp$1);
	};
	$ptrType(byIndex).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	byIndex.prototype.Less = function(i, j) {
		var $ptr, _i, _ref, i, j, k, x, x$1, x$2, xik;
		x = this;
		_ref = ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			k = _i;
			xik = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (k >= ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length) {
				return false;
			}
			if (!((xik === (x$1 = ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index, ((k < 0 || k >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + k]))))) {
				return xik < (x$2 = ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index, ((k < 0 || k >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + k]));
			}
			_i++;
		}
		return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index.$length < ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length;
	};
	$ptrType(byIndex).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	typeFields = function(t) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _i, _key, _key$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _v, _v$1, advance, count, current, dominant, f, fi, fields, fj, ft, i, i$1, index, name, name$1, next, nextCount, ok, opts, out, quoted, sf, t, tag, tagged, visited, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; _v$1 = $f._v$1; advance = $f.advance; count = $f.count; current = $f.current; dominant = $f.dominant; f = $f.f; fi = $f.fi; fields = $f.fields; fj = $f.fj; ft = $f.ft; i = $f.i; i$1 = $f.i$1; index = $f.index; name = $f.name; name$1 = $f.name$1; next = $f.next; nextCount = $f.nextCount; ok = $f.ok; opts = $f.opts; out = $f.out; quoted = $f.quoted; sf = $f.sf; t = $f.t; tag = $f.tag; tagged = $f.tagged; visited = $f.visited; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		current = new sliceType$1([]);
		next = new sliceType$1([new field.ptr("", sliceType$2.nil, $throwNilPointerError, false, sliceType$3.nil, t, false, false)]);
		count = $makeMap(reflect.Type.keyFor, []);
		nextCount = $makeMap(reflect.Type.keyFor, []);
		visited = $makeMap(reflect.Type.keyFor, []);
		fields = sliceType$1.nil;
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			_tmp$2 = nextCount;
			_tmp$3 = $makeMap(reflect.Type.keyFor, []);
			count = _tmp$2;
			nextCount = _tmp$3;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				f = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
				/* */ if ((_entry = visited[reflect.Type.keyFor(f.typ)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[reflect.Type.keyFor(f.typ)], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key = f.typ; (visited || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: true };
				i = 0;
				/* while (true) { */ case 7:
					_r$2 = f.typ.NumField(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* if (!(i < _r$2)) { break; } */ if(!(i < _r$2)) { $s = 8; continue; }
					_r$3 = f.typ.Field(i); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					sf = $clone(_r$3, reflect.StructField);
					/* */ if (!(sf.PkgPath === "")) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (!(sf.PkgPath === "")) { */ case 11:
						i = i + (1) >> 0;
						/* continue; */ $s = 7; continue;
					/* } */ case 12:
					tag = new reflect.StructTag(sf.Tag).Get("json");
					/* */ if (tag === "-") { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if (tag === "-") { */ case 13:
						i = i + (1) >> 0;
						/* continue; */ $s = 7; continue;
					/* } */ case 14:
					_tuple = parseTag(tag);
					name = _tuple[0];
					opts = _tuple[1];
					if (!isValidTag(name)) {
						name = "";
					}
					index = $makeSlice(sliceType$3, (f.index.$length + 1 >> 0));
					$copySlice(index, f.index);
					(x = f.index.$length, ((x < 0 || x >= index.$length) ? $throwRuntimeError("index out of range") : index.$array[index.$offset + x] = i));
					ft = sf.Type;
					_r$4 = ft.Name(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					if (!(_r$4 === "")) { _v = false; $s = 17; continue s; }
					_r$5 = ft.Kind(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_v = _r$5 === 22; case 17:
					/* */ if (_v) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (_v) { */ case 15:
						_r$6 = ft.Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						ft = _r$6;
					/* } */ case 16:
					quoted = false;
					/* */ if (new tagOptions(opts).Contains("string")) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (new tagOptions(opts).Contains("string")) { */ case 21:
						_r$7 = ft.Kind(); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						_ref$1 = _r$7;
						/* */ if (_ref$1 === 1 || _ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6 || _ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11 || _ref$1 === 13 || _ref$1 === 14 || _ref$1 === 24) { $s = 24; continue; }
						/* */ $s = 25; continue;
						/* if (_ref$1 === 1 || _ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6 || _ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11 || _ref$1 === 13 || _ref$1 === 14 || _ref$1 === 24) { */ case 24:
							quoted = true;
						/* } */ case 25:
					/* } */ case 22:
					if (!(name === "") || !sf.Anonymous) { _v$1 = true; $s = 28; continue s; }
					_r$8 = ft.Kind(); /* */ $s = 29; case 29: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_v$1 = !((_r$8 === 25)); case 28:
					/* */ if (_v$1) { $s = 26; continue; }
					/* */ $s = 27; continue;
					/* if (_v$1) { */ case 26:
						tagged = !(name === "");
						if (name === "") {
							name = sf.Name;
						}
						fields = $append(fields, fillField(new field.ptr(name, sliceType$2.nil, $throwNilPointerError, tagged, index, ft, new tagOptions(opts).Contains("omitempty"), quoted)));
						if ((_entry$1 = count[reflect.Type.keyFor(f.typ)], _entry$1 !== undefined ? _entry$1.v : 0) > 1) {
							fields = $append(fields, (x$1 = fields.$length - 1 >> 0, ((x$1 < 0 || x$1 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + x$1])));
						}
						i = i + (1) >> 0;
						/* continue; */ $s = 7; continue;
					/* } */ case 27:
					_key$1 = ft; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$1)] = { k: _key$1, v: (_entry$2 = nextCount[reflect.Type.keyFor(ft)], _entry$2 !== undefined ? _entry$2.v : 0) + (1) >> 0 };
					/* */ if ((_entry$3 = nextCount[reflect.Type.keyFor(ft)], _entry$3 !== undefined ? _entry$3.v : 0) === 1) { $s = 30; continue; }
					/* */ $s = 31; continue;
					/* if ((_entry$3 = nextCount[reflect.Type.keyFor(ft)], _entry$3 !== undefined ? _entry$3.v : 0) === 1) { */ case 30:
						_r$9 = ft.Name(); /* */ $s = 32; case 32: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$10 = fillField(new field.ptr(_r$9, sliceType$2.nil, $throwNilPointerError, false, index, ft, false, false)); /* */ $s = 33; case 33: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						next = $append(next, _r$10);
					/* } */ case 31:
					i = i + (1) >> 0;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
		/* } */ $s = 1; continue; case 2:
		$r = sort.Sort($subslice(new byName(fields.$array), fields.$offset, fields.$offset + fields.$length)); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		out = $subslice(fields, 0, 0);
		_tmp$4 = 0;
		_tmp$5 = 0;
		advance = _tmp$4;
		i$1 = _tmp$5;
		/* while (true) { */ case 35:
			/* if (!(i$1 < fields.$length)) { break; } */ if(!(i$1 < fields.$length)) { $s = 36; continue; }
			fi = $clone(((i$1 < 0 || i$1 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + i$1]), field);
			name$1 = fi.name;
			advance = 1;
			while (true) {
				if (!((i$1 + advance >> 0) < fields.$length)) { break; }
				fj = $clone((x$2 = i$1 + advance >> 0, ((x$2 < 0 || x$2 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + x$2])), field);
				if (!(fj.name === name$1)) {
					break;
				}
				advance = advance + (1) >> 0;
			}
			if (advance === 1) {
				out = $append(out, fi);
				i$1 = i$1 + (advance) >> 0;
				/* continue; */ $s = 35; continue;
			}
			_tuple$1 = dominantField($subslice(fields, i$1, (i$1 + advance >> 0)));
			dominant = $clone(_tuple$1[0], field);
			ok = _tuple$1[1];
			if (ok) {
				out = $append(out, dominant);
			}
			i$1 = i$1 + (advance) >> 0;
		/* } */ $s = 35; continue; case 36:
		fields = out;
		$r = sort.Sort($subslice(new byIndex(fields.$array), fields.$offset, fields.$offset + fields.$length)); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return fields;
		/* */ } return; } if ($f === undefined) { $f = { $blk: typeFields }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f._v$1 = _v$1; $f.advance = advance; $f.count = count; $f.current = current; $f.dominant = dominant; $f.f = f; $f.fi = fi; $f.fields = fields; $f.fj = fj; $f.ft = ft; $f.i = i; $f.i$1 = i$1; $f.index = index; $f.name = name; $f.name$1 = name$1; $f.next = next; $f.nextCount = nextCount; $f.ok = ok; $f.opts = opts; $f.out = out; $f.quoted = quoted; $f.sf = sf; $f.t = t; $f.tag = tag; $f.tagged = tagged; $f.visited = visited; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	dominantField = function(fields) {
		var $ptr, _i, _ref, f, fields, i, length, tagged;
		length = (0 >= fields.$length ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + 0]).index.$length;
		tagged = -1;
		_ref = fields;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			f = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
			if (f.index.$length > length) {
				fields = $subslice(fields, 0, i);
				break;
			}
			if (f.tag) {
				if (tagged >= 0) {
					return [new field.ptr("", sliceType$2.nil, $throwNilPointerError, false, sliceType$3.nil, $ifaceNil, false, false), false];
				}
				tagged = i;
			}
			_i++;
		}
		if (tagged >= 0) {
			return [((tagged < 0 || tagged >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + tagged]), true];
		}
		if (fields.$length > 1) {
			return [new field.ptr("", sliceType$2.nil, $throwNilPointerError, false, sliceType$3.nil, $ifaceNil, false, false), false];
		}
		return [(0 >= fields.$length ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + 0]), true];
	};
	cachedTypeFields = function(t) {
		var $ptr, _entry, _key, _r$2, f, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r$2 = $f._r$2; f = $f.f; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fieldCache.RWMutex.RLock();
		f = (_entry = fieldCache.m[reflect.Type.keyFor(t)], _entry !== undefined ? _entry.v : sliceType$1.nil);
		fieldCache.RWMutex.RUnlock();
		if (!(f === sliceType$1.nil)) {
			return f;
		}
		_r$2 = typeFields(t); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		f = _r$2;
		if (f === sliceType$1.nil) {
			f = new sliceType$1([]);
		}
		fieldCache.RWMutex.Lock();
		if (fieldCache.m === false) {
			fieldCache.m = $makeMap(reflect.Type.keyFor, []);
		}
		_key = t; (fieldCache.m || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: f };
		fieldCache.RWMutex.Unlock();
		return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cachedTypeFields }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r$2 = _r$2; $f.f = f; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	foldFunc = function(s) {
		var $ptr, _i, _ref, b, nonLetter, s, special, upper;
		nonLetter = false;
		special = false;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b >= 128) {
				return bytes.EqualFold;
			}
			upper = (b & 223) >>> 0;
			if (upper < 65 || upper > 90) {
				nonLetter = true;
			} else if ((upper === 75) || (upper === 83)) {
				special = true;
			}
			_i++;
		}
		if (special) {
			return equalFoldRight;
		}
		if (nonLetter) {
			return asciiEqualFold;
		}
		return simpleLetterEqualFold;
	};
	equalFoldRight = function(s, t) {
		var $ptr, _i, _ref, _ref$1, _tuple, s, sb, sbUpper, size, t, tb, tr;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sb = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (t.$length === 0) {
				return false;
			}
			tb = (0 >= t.$length ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 0]);
			if (tb < 128) {
				if (!((sb === tb))) {
					sbUpper = (sb & 223) >>> 0;
					if (65 <= sbUpper && sbUpper <= 90) {
						if (!((sbUpper === ((tb & 223) >>> 0)))) {
							return false;
						}
					} else {
						return false;
					}
				}
				t = $subslice(t, 1);
				_i++;
				continue;
			}
			_tuple = utf8.DecodeRune(t);
			tr = _tuple[0];
			size = _tuple[1];
			_ref$1 = sb;
			if (_ref$1 === 115 || _ref$1 === 83) {
				if (!((tr === 383))) {
					return false;
				}
			} else if (_ref$1 === 107 || _ref$1 === 75) {
				if (!((tr === 8490))) {
					return false;
				}
			} else {
				return false;
			}
			t = $subslice(t, size);
			_i++;
		}
		if (t.$length > 0) {
			return false;
		}
		return true;
	};
	asciiEqualFold = function(s, t) {
		var $ptr, _i, _ref, i, s, sb, t, tb;
		if (!((s.$length === t.$length))) {
			return false;
		}
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			sb = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			tb = ((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]);
			if (sb === tb) {
				_i++;
				continue;
			}
			if ((97 <= sb && sb <= 122) || (65 <= sb && sb <= 90)) {
				if (!((((sb & 223) >>> 0) === ((tb & 223) >>> 0)))) {
					return false;
				}
			} else {
				return false;
			}
			_i++;
		}
		return true;
	};
	simpleLetterEqualFold = function(s, t) {
		var $ptr, _i, _ref, b, i, s, t;
		if (!((s.$length === t.$length))) {
			return false;
		}
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((((b & 223) >>> 0) === ((((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]) & 223) >>> 0)))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	compact = function(dst, src, escape) {
		var $ptr, _i, _r$2, _r$3, _ref, c, dst, escape, i, origLen, scan, src, start, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; c = $f.c; dst = $f.dst; escape = $f.escape; i = $f.i; origLen = $f.origLen; scan = $f.scan; src = $f.src; start = $f.start; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		scan = [scan];
		origLen = dst.Len();
		scan[0] = new scanner.ptr($throwNilPointerError, false, sliceType$3.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0));
		scan[0].reset();
		start = 0;
		_ref = src;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (escape && ((c === 60) || (c === 62) || (c === 38))) {
				if (start < i) {
					dst.Write($subslice(src, start, i));
				}
				dst.WriteString("\\u00");
				dst.WriteByte(hex.charCodeAt((c >>> 4 << 24 >>> 24)));
				dst.WriteByte(hex.charCodeAt(((c & 15) >>> 0)));
				start = i + 1 >> 0;
			}
			if ((c === 226) && (i + 2 >> 0) < src.$length && ((x = i + 1 >> 0, ((x < 0 || x >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x])) === 128) && ((((x$1 = i + 2 >> 0, ((x$1 < 0 || x$1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$1])) & ~1) << 24 >>> 24) === 168)) {
				if (start < i) {
					dst.Write($subslice(src, start, i));
				}
				dst.WriteString("\\u202");
				dst.WriteByte(hex.charCodeAt((((x$2 = i + 2 >> 0, ((x$2 < 0 || x$2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$2])) & 15) >>> 0)));
				start = i + 3 >> 0;
			}
			_r$2 = scan[0].step(scan[0], (c >> 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
			if (v >= 9) {
				if (v === 11) {
					/* break; */ $s = 2; continue;
				}
				if (start < i) {
					dst.Write($subslice(src, start, i));
				}
				start = i + 1 >> 0;
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$3 = scan[0].eof(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 11) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 11) { */ case 4:
			dst.Truncate(origLen);
			return scan[0].err;
		/* } */ case 5:
		if (start < src.$length) {
			dst.Write($subslice(src, start));
		}
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: compact }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.c = c; $f.dst = dst; $f.escape = escape; $f.i = i; $f.origLen = origLen; $f.scan = scan; $f.src = src; $f.start = start; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	newline = function(dst, prefix, indent, depth) {
		var $ptr, depth, dst, i, indent, prefix;
		dst.WriteByte(10);
		dst.WriteString(prefix);
		i = 0;
		while (true) {
			if (!(i < depth)) { break; }
			dst.WriteString(indent);
			i = i + (1) >> 0;
		}
	};
	Indent = function(dst, src, prefix, indent) {
		var $ptr, _i, _r$2, _r$3, _ref, _ref$1, c, depth, dst, indent, needIndent, origLen, prefix, scan, src, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; depth = $f.depth; dst = $f.dst; indent = $f.indent; needIndent = $f.needIndent; origLen = $f.origLen; prefix = $f.prefix; scan = $f.scan; src = $f.src; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		scan = [scan];
		origLen = dst.Len();
		scan[0] = new scanner.ptr($throwNilPointerError, false, sliceType$3.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0));
		scan[0].reset();
		needIndent = false;
		depth = 0;
		_ref = src;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			scan[0].bytes = (x = scan[0].bytes, x$1 = new $Int64(0, 1), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
			_r$2 = scan[0].step(scan[0], (c >> 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
			if (v === 9) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			if (v === 11) {
				/* break; */ $s = 2; continue;
			}
			if (needIndent && !((v === 5)) && !((v === 8))) {
				needIndent = false;
				depth = depth + (1) >> 0;
				newline(dst, prefix, indent, depth);
			}
			if (v === 0) {
				dst.WriteByte(c);
				_i++;
				/* continue; */ $s = 1; continue;
			}
			_ref$1 = c;
			if (_ref$1 === 123 || _ref$1 === 91) {
				needIndent = true;
				dst.WriteByte(c);
			} else if (_ref$1 === 44) {
				dst.WriteByte(c);
				newline(dst, prefix, indent, depth);
			} else if (_ref$1 === 58) {
				dst.WriteByte(c);
				dst.WriteByte(32);
			} else if (_ref$1 === 125 || _ref$1 === 93) {
				if (needIndent) {
					needIndent = false;
				} else {
					depth = depth - (1) >> 0;
					newline(dst, prefix, indent, depth);
				}
				dst.WriteByte(c);
			} else {
				dst.WriteByte(c);
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$3 = scan[0].eof(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 11) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 11) { */ case 4:
			dst.Truncate(origLen);
			return scan[0].err;
		/* } */ case 5:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Indent }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.depth = depth; $f.dst = dst; $f.indent = indent; $f.needIndent = needIndent; $f.origLen = origLen; $f.prefix = prefix; $f.scan = scan; $f.src = src; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Indent = Indent;
	checkValid = function(data, scan) {
		var $ptr, _i, _r$2, _r$3, _ref, c, data, scan, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; c = $f.c; data = $f.data; scan = $f.scan; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		scan.reset();
		_ref = data;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			scan.bytes = (x = scan.bytes, x$1 = new $Int64(0, 1), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
			_r$2 = scan.step(scan, (c >> 0)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2 === 11) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r$2 === 11) { */ case 3:
				return scan.err;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$3 = scan.eof(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 11) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_r$3 === 11) { */ case 6:
			return scan.err;
		/* } */ case 7:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: checkValid }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.c = c; $f.data = data; $f.scan = scan; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	nextValue = function(data, scan) {
		var $ptr, _i, _r$2, _r$3, _r$4, _ref, _ref$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, data, err, i, rest, scan, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; c = $f.c; data = $f.data; err = $f.err; i = $f.i; rest = $f.rest; scan = $f.scan; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = sliceType$2.nil;
		rest = sliceType$2.nil;
		err = $ifaceNil;
		scan.reset();
		_ref = data;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$2 = scan.step(scan, (c >> 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
			/* */ if (v >= 5) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (v >= 5) { */ case 4:
				_ref$1 = v;
				/* */ if (_ref$1 === 5 || _ref$1 === 8) { $s = 6; continue; }
				/* */ if (_ref$1 === 11) { $s = 7; continue; }
				/* */ if (_ref$1 === 10) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_ref$1 === 5 || _ref$1 === 8) { */ case 6:
					_r$3 = scan.step(scan, 32); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (_r$3 === 10) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_r$3 === 10) { */ case 10:
						_tmp = $subslice(data, 0, (i + 1 >> 0));
						_tmp$1 = $subslice(data, (i + 1 >> 0));
						_tmp$2 = $ifaceNil;
						value = _tmp;
						rest = _tmp$1;
						err = _tmp$2;
						return [value, rest, err];
					/* } */ case 11:
					$s = 9; continue;
				/* } else if (_ref$1 === 11) { */ case 7:
					_tmp$3 = sliceType$2.nil;
					_tmp$4 = sliceType$2.nil;
					_tmp$5 = scan.err;
					value = _tmp$3;
					rest = _tmp$4;
					err = _tmp$5;
					return [value, rest, err];
				/* } else if (_ref$1 === 10) { */ case 8:
					_tmp$6 = $subslice(data, 0, i);
					_tmp$7 = $subslice(data, i);
					_tmp$8 = $ifaceNil;
					value = _tmp$6;
					rest = _tmp$7;
					err = _tmp$8;
					return [value, rest, err];
				/* } */ case 9:
			/* } */ case 5:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$4 = scan.eof(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4 === 11) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (_r$4 === 11) { */ case 13:
			_tmp$9 = sliceType$2.nil;
			_tmp$10 = sliceType$2.nil;
			_tmp$11 = scan.err;
			value = _tmp$9;
			rest = _tmp$10;
			err = _tmp$11;
			return [value, rest, err];
		/* } */ case 14:
		_tmp$12 = data;
		_tmp$13 = sliceType$2.nil;
		_tmp$14 = $ifaceNil;
		value = _tmp$12;
		rest = _tmp$13;
		err = _tmp$14;
		return [value, rest, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: nextValue }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.c = c; $f.data = data; $f.err = err; $f.i = i; $f.rest = rest; $f.scan = scan; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyntaxError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return e.msg;
	};
	SyntaxError.prototype.Error = function() { return this.$val.Error(); };
	scanner.ptr.prototype.reset = function() {
		var $ptr, s;
		s = this;
		s.step = stateBeginValue;
		s.parseState = $subslice(s.parseState, 0, 0);
		s.err = $ifaceNil;
		s.redo = false;
		s.endTop = false;
	};
	scanner.prototype.reset = function() { return this.$val.reset(); };
	scanner.ptr.prototype.eof = function() {
		var $ptr, _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!($interfaceIsEqual(s.err, $ifaceNil))) {
			return 11;
		}
		if (s.endTop) {
			return 10;
		}
		_r$2 = s.step(s, 32); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		if (s.endTop) {
			return 10;
		}
		if ($interfaceIsEqual(s.err, $ifaceNil)) {
			s.err = new SyntaxError.ptr("unexpected end of JSON input", s.bytes);
		}
		return 11;
		/* */ } return; } if ($f === undefined) { $f = { $blk: scanner.ptr.prototype.eof }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	scanner.prototype.eof = function() { return this.$val.eof(); };
	scanner.ptr.prototype.pushParseState = function(p) {
		var $ptr, p, s;
		s = this;
		s.parseState = $append(s.parseState, p);
	};
	scanner.prototype.pushParseState = function(p) { return this.$val.pushParseState(p); };
	scanner.ptr.prototype.popParseState = function() {
		var $ptr, n, s;
		s = this;
		n = s.parseState.$length - 1 >> 0;
		s.parseState = $subslice(s.parseState, 0, n);
		s.redo = false;
		if (n === 0) {
			s.step = stateEndTop;
			s.endTop = true;
		} else {
			s.step = stateEndValue;
		}
	};
	scanner.prototype.popParseState = function() { return this.$val.popParseState(); };
	isSpace = function(c) {
		var $ptr, c;
		return (c === 32) || (c === 9) || (c === 13) || (c === 10);
	};
	stateBeginValueOrEmpty = function(s, c) {
		var $ptr, c, s;
		if (c <= 32 && isSpace((c >> 0))) {
			return 9;
		}
		if (c === 93) {
			return stateEndValue(s, c);
		}
		return stateBeginValue(s, c);
	};
	stateBeginValue = function(s, c) {
		var $ptr, _ref, c, s;
		if (c <= 32 && isSpace((c >> 0))) {
			return 9;
		}
		_ref = c;
		if (_ref === 123) {
			s.step = stateBeginStringOrEmpty;
			s.pushParseState(0);
			return 2;
		} else if (_ref === 91) {
			s.step = stateBeginValueOrEmpty;
			s.pushParseState(2);
			return 6;
		} else if (_ref === 34) {
			s.step = stateInString;
			return 1;
		} else if (_ref === 45) {
			s.step = stateNeg;
			return 1;
		} else if (_ref === 48) {
			s.step = state0;
			return 1;
		} else if (_ref === 116) {
			s.step = stateT;
			return 1;
		} else if (_ref === 102) {
			s.step = stateF;
			return 1;
		} else if (_ref === 110) {
			s.step = stateN;
			return 1;
		}
		if (49 <= c && c <= 57) {
			s.step = state1;
			return 1;
		}
		return s.error(c, "looking for beginning of value");
	};
	stateBeginStringOrEmpty = function(s, c) {
		var $ptr, c, n, s, x, x$1;
		if (c <= 32 && isSpace((c >> 0))) {
			return 9;
		}
		if (c === 125) {
			n = s.parseState.$length;
			(x = s.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = 1));
			return stateEndValue(s, c);
		}
		return stateBeginString(s, c);
	};
	stateBeginString = function(s, c) {
		var $ptr, c, s;
		if (c <= 32 && isSpace((c >> 0))) {
			return 9;
		}
		if (c === 34) {
			s.step = stateInString;
			return 1;
		}
		return s.error(c, "looking for beginning of object key string");
	};
	stateEndValue = function(s, c) {
		var $ptr, _ref, c, n, ps, s, x, x$1, x$2, x$3, x$4, x$5;
		n = s.parseState.$length;
		if (n === 0) {
			s.step = stateEndTop;
			s.endTop = true;
			return stateEndTop(s, c);
		}
		if (c <= 32 && isSpace((c >> 0))) {
			s.step = stateEndValue;
			return 9;
		}
		ps = (x = s.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		_ref = ps;
		if (_ref === 0) {
			if (c === 58) {
				(x$2 = s.parseState, x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3] = 1));
				s.step = stateBeginValue;
				return 3;
			}
			return s.error(c, "after object key");
		} else if (_ref === 1) {
			if (c === 44) {
				(x$4 = s.parseState, x$5 = n - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5] = 0));
				s.step = stateBeginString;
				return 4;
			}
			if (c === 125) {
				s.popParseState();
				return 5;
			}
			return s.error(c, "after object key:value pair");
		} else if (_ref === 2) {
			if (c === 44) {
				s.step = stateBeginValue;
				return 7;
			}
			if (c === 93) {
				s.popParseState();
				return 8;
			}
			return s.error(c, "after array element");
		}
		return s.error(c, "");
	};
	stateEndTop = function(s, c) {
		var $ptr, c, s;
		if (!((c === 32)) && !((c === 9)) && !((c === 13)) && !((c === 10))) {
			s.error(c, "after top-level value");
		}
		return 10;
	};
	stateInString = function(s, c) {
		var $ptr, c, s;
		if (c === 34) {
			s.step = stateEndValue;
			return 0;
		}
		if (c === 92) {
			s.step = stateInStringEsc;
			return 0;
		}
		if (c < 32) {
			return s.error(c, "in string literal");
		}
		return 0;
	};
	stateInStringEsc = function(s, c) {
		var $ptr, _ref, c, s;
		_ref = c;
		if (_ref === 98 || _ref === 102 || _ref === 110 || _ref === 114 || _ref === 116 || _ref === 92 || _ref === 47 || _ref === 34) {
			s.step = stateInString;
			return 0;
		}
		if (c === 117) {
			s.step = stateInStringEscU;
			return 0;
		}
		return s.error(c, "in string escape code");
	};
	stateInStringEscU = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU1;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU1 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU12;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU12 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU123;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU123 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInString;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateNeg = function(s, c) {
		var $ptr, c, s;
		if (c === 48) {
			s.step = state0;
			return 0;
		}
		if (49 <= c && c <= 57) {
			s.step = state1;
			return 0;
		}
		return s.error(c, "in numeric literal");
	};
	state1 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			s.step = state1;
			return 0;
		}
		return state0(s, c);
	};
	state0 = function(s, c) {
		var $ptr, c, s;
		if (c === 46) {
			s.step = stateDot;
			return 0;
		}
		if ((c === 101) || (c === 69)) {
			s.step = stateE;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateDot = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			s.step = stateDot0;
			return 0;
		}
		return s.error(c, "after decimal point in numeric literal");
	};
	stateDot0 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			s.step = stateDot0;
			return 0;
		}
		if ((c === 101) || (c === 69)) {
			s.step = stateE;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateE = function(s, c) {
		var $ptr, c, s;
		if (c === 43) {
			s.step = stateESign;
			return 0;
		}
		if (c === 45) {
			s.step = stateESign;
			return 0;
		}
		return stateESign(s, c);
	};
	stateESign = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			s.step = stateE0;
			return 0;
		}
		return s.error(c, "in exponent of numeric literal");
	};
	stateE0 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			s.step = stateE0;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateT = function(s, c) {
		var $ptr, c, s;
		if (c === 114) {
			s.step = stateTr;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'r')");
	};
	stateTr = function(s, c) {
		var $ptr, c, s;
		if (c === 117) {
			s.step = stateTru;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'u')");
	};
	stateTru = function(s, c) {
		var $ptr, c, s;
		if (c === 101) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'e')");
	};
	stateF = function(s, c) {
		var $ptr, c, s;
		if (c === 97) {
			s.step = stateFa;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'a')");
	};
	stateFa = function(s, c) {
		var $ptr, c, s;
		if (c === 108) {
			s.step = stateFal;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'l')");
	};
	stateFal = function(s, c) {
		var $ptr, c, s;
		if (c === 115) {
			s.step = stateFals;
			return 0;
		}
		return s.error(c, "in literal false (expecting 's')");
	};
	stateFals = function(s, c) {
		var $ptr, c, s;
		if (c === 101) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'e')");
	};
	stateN = function(s, c) {
		var $ptr, c, s;
		if (c === 117) {
			s.step = stateNu;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'u')");
	};
	stateNu = function(s, c) {
		var $ptr, c, s;
		if (c === 108) {
			s.step = stateNul;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'l')");
	};
	stateNul = function(s, c) {
		var $ptr, c, s;
		if (c === 108) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'l')");
	};
	stateError = function(s, c) {
		var $ptr, c, s;
		return 11;
	};
	scanner.ptr.prototype.error = function(c, context) {
		var $ptr, c, context, s;
		s = this;
		s.step = stateError;
		s.err = new SyntaxError.ptr("invalid character " + quoteChar(c) + " " + context, s.bytes);
		return 11;
	};
	scanner.prototype.error = function(c, context) { return this.$val.error(c, context); };
	quoteChar = function(c) {
		var $ptr, c, s;
		if (c === 39) {
			return "'\\''";
		}
		if (c === 34) {
			return "'\"'";
		}
		s = strconv.Quote($encodeRune(c));
		return "'" + s.substring(1, (s.length - 1 >> 0)) + "'";
	};
	scanner.ptr.prototype.undo = function(scanCode) {
		var $ptr, s, scanCode;
		s = this;
		if (s.redo) {
			$panic(new $String("json: invalid use of scanner"));
		}
		s.redoCode = scanCode;
		s.redoState = s.step;
		s.step = stateRedo;
		s.redo = true;
	};
	scanner.prototype.undo = function(scanCode) { return this.$val.undo(scanCode); };
	stateRedo = function(s, c) {
		var $ptr, c, s;
		s.redo = false;
		s.step = s.redoState;
		return s.redoCode;
	};
	parseTag = function(tag) {
		var $ptr, idx, tag;
		idx = strings.Index(tag, ",");
		if (!((idx === -1))) {
			return [tag.substring(0, idx), tag.substring((idx + 1 >> 0))];
		}
		return [tag, ""];
	};
	tagOptions.prototype.Contains = function(optionName) {
		var $ptr, _tmp, _tmp$1, i, next, o, optionName, s;
		o = this.$val;
		if (o.length === 0) {
			return false;
		}
		s = o;
		while (true) {
			if (!(!(s === ""))) { break; }
			next = "";
			i = strings.Index(s, ",");
			if (i >= 0) {
				_tmp = s.substring(0, i);
				_tmp$1 = s.substring((i + 1 >> 0));
				s = _tmp;
				next = _tmp$1;
			}
			if (s === optionName) {
				return true;
			}
			s = next;
		}
		return false;
	};
	$ptrType(tagOptions).prototype.Contains = function(optionName) { return new tagOptions(this.$get()).Contains(optionName); };
	ptrType$9.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$11.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Number.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64, $error], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64, $error], false)}];
	ptrType$12.methods = [{prop: "unmarshal", name: "unmarshal", pkg: "encoding/json", typ: $funcType([$emptyInterface], [$error], false)}, {prop: "init", name: "init", pkg: "encoding/json", typ: $funcType([sliceType$2], [ptrType$12], false)}, {prop: "error", name: "error", pkg: "encoding/json", typ: $funcType([$error], [], false)}, {prop: "saveError", name: "saveError", pkg: "encoding/json", typ: $funcType([$error], [], false)}, {prop: "next", name: "next", pkg: "encoding/json", typ: $funcType([], [sliceType$2], false)}, {prop: "scanWhile", name: "scanWhile", pkg: "encoding/json", typ: $funcType([$Int], [$Int], false)}, {prop: "value", name: "value", pkg: "encoding/json", typ: $funcType([reflect.Value], [], false)}, {prop: "valueQuoted", name: "valueQuoted", pkg: "encoding/json", typ: $funcType([], [$emptyInterface], false)}, {prop: "indirect", name: "indirect", pkg: "encoding/json", typ: $funcType([reflect.Value, $Bool], [Unmarshaler, encoding.TextUnmarshaler, reflect.Value], false)}, {prop: "array", name: "array", pkg: "encoding/json", typ: $funcType([reflect.Value], [], false)}, {prop: "object", name: "object", pkg: "encoding/json", typ: $funcType([reflect.Value], [], false)}, {prop: "literal", name: "literal", pkg: "encoding/json", typ: $funcType([reflect.Value], [], false)}, {prop: "convertNumber", name: "convertNumber", pkg: "encoding/json", typ: $funcType([$String], [$emptyInterface, $error], false)}, {prop: "literalStore", name: "literalStore", pkg: "encoding/json", typ: $funcType([sliceType$2, reflect.Value, $Bool], [], false)}, {prop: "valueInterface", name: "valueInterface", pkg: "encoding/json", typ: $funcType([], [$emptyInterface], false)}, {prop: "arrayInterface", name: "arrayInterface", pkg: "encoding/json", typ: $funcType([], [sliceType], false)}, {prop: "objectInterface", name: "objectInterface", pkg: "encoding/json", typ: $funcType([], [mapType$2], false)}, {prop: "literalInterface", name: "literalInterface", pkg: "encoding/json", typ: $funcType([], [$emptyInterface], false)}];
	ptrType$13.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$14.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$16.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "marshal", name: "marshal", pkg: "encoding/json", typ: $funcType([$emptyInterface], [$error], false)}, {prop: "error", name: "error", pkg: "encoding/json", typ: $funcType([$error], [], false)}, {prop: "reflectValue", name: "reflectValue", pkg: "encoding/json", typ: $funcType([reflect.Value], [], false)}, {prop: "string", name: "string", pkg: "encoding/json", typ: $funcType([$String], [$Int, $error], false)}, {prop: "stringBytes", name: "stringBytes", pkg: "encoding/json", typ: $funcType([sliceType$2], [$Int, $error], false)}];
	floatEncoder.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$17.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$18.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$19.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$20.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$21.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$22.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	stringValues.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "get", name: "get", pkg: "encoding/json", typ: $funcType([$Int], [$String], false)}];
	byName.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	byIndex.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	ptrType$8.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$23.methods = [{prop: "reset", name: "reset", pkg: "encoding/json", typ: $funcType([], [], false)}, {prop: "eof", name: "eof", pkg: "encoding/json", typ: $funcType([], [$Int], false)}, {prop: "pushParseState", name: "pushParseState", pkg: "encoding/json", typ: $funcType([$Int], [], false)}, {prop: "popParseState", name: "popParseState", pkg: "encoding/json", typ: $funcType([], [], false)}, {prop: "error", name: "error", pkg: "encoding/json", typ: $funcType([$Int, $String], [$Int], false)}, {prop: "undo", name: "undo", pkg: "encoding/json", typ: $funcType([$Int], [], false)}];
	tagOptions.methods = [{prop: "Contains", name: "Contains", pkg: "", typ: $funcType([$String], [$Bool], false)}];
	Unmarshaler.init([{prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$2], [$error], false)}]);
	UnmarshalTypeError.init([{prop: "Value", name: "Value", pkg: "", typ: $String, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: reflect.Type, tag: ""}, {prop: "Offset", name: "Offset", pkg: "", typ: $Int64, tag: ""}]);
	InvalidUnmarshalError.init([{prop: "Type", name: "Type", pkg: "", typ: reflect.Type, tag: ""}]);
	decodeState.init([{prop: "data", name: "data", pkg: "encoding/json", typ: sliceType$2, tag: ""}, {prop: "off", name: "off", pkg: "encoding/json", typ: $Int, tag: ""}, {prop: "scan", name: "scan", pkg: "encoding/json", typ: scanner, tag: ""}, {prop: "nextscan", name: "nextscan", pkg: "encoding/json", typ: scanner, tag: ""}, {prop: "savedError", name: "savedError", pkg: "encoding/json", typ: $error, tag: ""}, {prop: "useNumber", name: "useNumber", pkg: "encoding/json", typ: $Bool, tag: ""}]);
	unquotedValue.init([]);
	Marshaler.init([{prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$2, $error], false)}]);
	UnsupportedTypeError.init([{prop: "Type", name: "Type", pkg: "", typ: reflect.Type, tag: ""}]);
	UnsupportedValueError.init([{prop: "Value", name: "Value", pkg: "", typ: reflect.Value, tag: ""}, {prop: "Str", name: "Str", pkg: "", typ: $String, tag: ""}]);
	MarshalerError.init([{prop: "Type", name: "Type", pkg: "", typ: reflect.Type, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	encodeState.init([{prop: "Buffer", name: "", pkg: "", typ: bytes.Buffer, tag: ""}, {prop: "scratch", name: "scratch", pkg: "encoding/json", typ: arrayType$1, tag: ""}]);
	encoderFunc.init([ptrType$4, reflect.Value, $Bool], [], false);
	structEncoder.init([{prop: "fields", name: "fields", pkg: "encoding/json", typ: sliceType$1, tag: ""}, {prop: "fieldEncs", name: "fieldEncs", pkg: "encoding/json", typ: sliceType$4, tag: ""}]);
	mapEncoder.init([{prop: "elemEnc", name: "elemEnc", pkg: "encoding/json", typ: encoderFunc, tag: ""}]);
	sliceEncoder.init([{prop: "arrayEnc", name: "arrayEnc", pkg: "encoding/json", typ: encoderFunc, tag: ""}]);
	arrayEncoder.init([{prop: "elemEnc", name: "elemEnc", pkg: "encoding/json", typ: encoderFunc, tag: ""}]);
	ptrEncoder.init([{prop: "elemEnc", name: "elemEnc", pkg: "encoding/json", typ: encoderFunc, tag: ""}]);
	condAddrEncoder.init([{prop: "canAddrEnc", name: "canAddrEnc", pkg: "encoding/json", typ: encoderFunc, tag: ""}, {prop: "elseEnc", name: "elseEnc", pkg: "encoding/json", typ: encoderFunc, tag: ""}]);
	stringValues.init(reflect.Value);
	field.init([{prop: "name", name: "name", pkg: "encoding/json", typ: $String, tag: ""}, {prop: "nameBytes", name: "nameBytes", pkg: "encoding/json", typ: sliceType$2, tag: ""}, {prop: "equalFold", name: "equalFold", pkg: "encoding/json", typ: funcType, tag: ""}, {prop: "tag", name: "tag", pkg: "encoding/json", typ: $Bool, tag: ""}, {prop: "index", name: "index", pkg: "encoding/json", typ: sliceType$3, tag: ""}, {prop: "typ", name: "typ", pkg: "encoding/json", typ: reflect.Type, tag: ""}, {prop: "omitEmpty", name: "omitEmpty", pkg: "encoding/json", typ: $Bool, tag: ""}, {prop: "quoted", name: "quoted", pkg: "encoding/json", typ: $Bool, tag: ""}]);
	byName.init(field);
	byIndex.init(field);
	SyntaxError.init([{prop: "msg", name: "msg", pkg: "encoding/json", typ: $String, tag: ""}, {prop: "Offset", name: "Offset", pkg: "", typ: $Int64, tag: ""}]);
	scanner.init([{prop: "step", name: "step", pkg: "encoding/json", typ: funcType$1, tag: ""}, {prop: "endTop", name: "endTop", pkg: "encoding/json", typ: $Bool, tag: ""}, {prop: "parseState", name: "parseState", pkg: "encoding/json", typ: sliceType$3, tag: ""}, {prop: "err", name: "err", pkg: "encoding/json", typ: $error, tag: ""}, {prop: "redo", name: "redo", pkg: "encoding/json", typ: $Bool, tag: ""}, {prop: "redoCode", name: "redoCode", pkg: "encoding/json", typ: $Int, tag: ""}, {prop: "redoState", name: "redoState", pkg: "encoding/json", typ: funcType$1, tag: ""}, {prop: "bytes", name: "bytes", pkg: "encoding/json", typ: $Int64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = encoding.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = base64.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = testing.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf16.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		encoderCache = new structType.ptr(new nosync.RWMutex.ptr(false, 0), false);
		fieldCache = new structType$1.ptr(new nosync.RWMutex.ptr(false, 0), false);
		errPhase = errors.New("JSON decoder out of sync - data changing underfoot?");
		nullLiteral = new sliceType$2($stringToBytes("null"));
		numberType = reflect.TypeOf(new Number(""));
		hex = "0123456789abcdef";
		_r = reflect.TypeOf($newDataPointer($ifaceNil, ptrType)).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		marshalerType = _r;
		_r$1 = reflect.TypeOf($newDataPointer($ifaceNil, ptrType$1)).Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		textMarshalerType = _r$1;
		float32Encoder = $methodVal(new floatEncoder(32), "encode");
		float64Encoder = $methodVal(new floatEncoder(64), "encode");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/robertkrimen/otto/file"] = (function() {
	var $pkg = {}, $init, fmt, strings, Idx, Position, FileSet, File, sliceType, ptrType, ptrType$1, sliceType$1, ptrType$2, NewFile;
	fmt = $packages["fmt"];
	strings = $packages["strings"];
	Idx = $pkg.Idx = $newType(4, $kindInt, "file.Idx", "Idx", "github.com/robertkrimen/otto/file", null);
	Position = $pkg.Position = $newType(0, $kindStruct, "file.Position", "Position", "github.com/robertkrimen/otto/file", function(Filename_, Offset_, Line_, Column_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Filename = "";
			this.Offset = 0;
			this.Line = 0;
			this.Column = 0;
			return;
		}
		this.Filename = Filename_;
		this.Offset = Offset_;
		this.Line = Line_;
		this.Column = Column_;
	});
	FileSet = $pkg.FileSet = $newType(0, $kindStruct, "file.FileSet", "FileSet", "github.com/robertkrimen/otto/file", function(files_, last_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.files = sliceType$1.nil;
			this.last = ptrType.nil;
			return;
		}
		this.files = files_;
		this.last = last_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "file.File", "File", "github.com/robertkrimen/otto/file", function(name_, src_, base_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.src = "";
			this.base = 0;
			return;
		}
		this.name = name_;
		this.src = src_;
		this.base = base_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(File);
	ptrType$1 = $ptrType(Position);
	sliceType$1 = $sliceType(ptrType);
	ptrType$2 = $ptrType(FileSet);
	Position.ptr.prototype.isValid = function() {
		var $ptr, self;
		self = this;
		return self.Line > 0;
	};
	Position.prototype.isValid = function() { return this.$val.isValid(); };
	Position.ptr.prototype.String = function() {
		var $ptr, _r, self, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		str = self.Filename;
		/* */ if (self.isValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.isValid()) { */ case 1:
			if (!(str === "")) {
				str = str + (":");
			}
			_r = fmt.Sprintf("%d:%d", new sliceType([new $Int(self.Line), new $Int(self.Column)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			str = str + (_r);
		/* } */ case 2:
		if (str === "") {
			str = "-";
		}
		return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Position.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	Position.prototype.String = function() { return this.$val.String(); };
	FileSet.ptr.prototype.AddFile = function(filename, src) {
		var $ptr, base, file, filename, self, src;
		self = this;
		base = self.nextBase();
		file = new File.ptr(filename, src, base);
		self.files = $append(self.files, file);
		self.last = file;
		return base;
	};
	FileSet.prototype.AddFile = function(filename, src) { return this.$val.AddFile(filename, src); };
	FileSet.ptr.prototype.nextBase = function() {
		var $ptr, self;
		self = this;
		if (self.last === ptrType.nil) {
			return 1;
		}
		return (self.last.base + self.last.src.length >> 0) + 1 >> 0;
	};
	FileSet.prototype.nextBase = function() { return this.$val.nextBase(); };
	FileSet.ptr.prototype.File = function(idx) {
		var $ptr, _i, _ref, file, idx, self;
		self = this;
		_ref = self.files;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			file = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (idx <= ((file.base + file.src.length >> 0) >> 0)) {
				return file;
			}
			_i++;
		}
		return ptrType.nil;
	};
	FileSet.prototype.File = function(idx) { return this.$val.File(idx); };
	FileSet.ptr.prototype.Position = function(idx) {
		var $ptr, _i, _ref, file, idx, index, offset, position, self, src;
		self = this;
		position = new Position.ptr("", 0, 0, 0);
		_ref = self.files;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			file = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (idx <= ((file.base + file.src.length >> 0) >> 0)) {
				offset = (idx >> 0) - file.base >> 0;
				src = file.src.substring(0, offset);
				position.Filename = file.name;
				position.Offset = offset;
				position.Line = 1 + strings.Count(src, "\n") >> 0;
				index = strings.LastIndex(src, "\n");
				if (index >= 0) {
					position.Column = offset - index >> 0;
				} else {
					position.Column = 1 + src.length >> 0;
				}
			}
			_i++;
		}
		return position;
	};
	FileSet.prototype.Position = function(idx) { return this.$val.Position(idx); };
	NewFile = function(filename, src, base) {
		var $ptr, base, filename, src;
		return new File.ptr(filename, src, base);
	};
	$pkg.NewFile = NewFile;
	File.ptr.prototype.Name = function() {
		var $ptr, fl;
		fl = this;
		return fl.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	File.ptr.prototype.Source = function() {
		var $ptr, fl;
		fl = this;
		return fl.src;
	};
	File.prototype.Source = function() { return this.$val.Source(); };
	File.ptr.prototype.Base = function() {
		var $ptr, fl;
		fl = this;
		return fl.base;
	};
	File.prototype.Base = function() { return this.$val.Base(); };
	ptrType$1.methods = [{prop: "isValid", name: "isValid", pkg: "github.com/robertkrimen/otto/file", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "AddFile", name: "AddFile", pkg: "", typ: $funcType([$String, $String], [$Int], false)}, {prop: "nextBase", name: "nextBase", pkg: "github.com/robertkrimen/otto/file", typ: $funcType([], [$Int], false)}, {prop: "File", name: "File", pkg: "", typ: $funcType([Idx], [ptrType], false)}, {prop: "Position", name: "Position", pkg: "", typ: $funcType([Idx], [ptrType$1], false)}];
	ptrType.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Source", name: "Source", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Base", name: "Base", pkg: "", typ: $funcType([], [$Int], false)}];
	Position.init([{prop: "Filename", name: "Filename", pkg: "", typ: $String, tag: ""}, {prop: "Offset", name: "Offset", pkg: "", typ: $Int, tag: ""}, {prop: "Line", name: "Line", pkg: "", typ: $Int, tag: ""}, {prop: "Column", name: "Column", pkg: "", typ: $Int, tag: ""}]);
	FileSet.init([{prop: "files", name: "files", pkg: "github.com/robertkrimen/otto/file", typ: sliceType$1, tag: ""}, {prop: "last", name: "last", pkg: "github.com/robertkrimen/otto/file", typ: ptrType, tag: ""}]);
	File.init([{prop: "name", name: "name", pkg: "github.com/robertkrimen/otto/file", typ: $String, tag: ""}, {prop: "src", name: "src", pkg: "github.com/robertkrimen/otto/file", typ: $String, tag: ""}, {prop: "base", name: "base", pkg: "github.com/robertkrimen/otto/file", typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/robertkrimen/otto/token"] = (function() {
	var $pkg = {}, $init, strconv, Token, _keyword, token2string, keywordTable, IsKeyword;
	strconv = $packages["strconv"];
	Token = $pkg.Token = $newType(4, $kindInt, "token.Token", "Token", "github.com/robertkrimen/otto/token", null);
	_keyword = $pkg._keyword = $newType(0, $kindStruct, "token._keyword", "_keyword", "github.com/robertkrimen/otto/token", function(token_, futureKeyword_, strict_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.token = 0;
			this.futureKeyword = false;
			this.strict = false;
			return;
		}
		this.token = token_;
		this.futureKeyword = futureKeyword_;
		this.strict = strict_;
	});
	Token.prototype.String = function() {
		var $ptr, tkn;
		tkn = this.$val;
		if (0 === tkn) {
			return "UNKNOWN";
		}
		if (tkn < 87) {
			return ((tkn < 0 || tkn >= token2string.length) ? $throwRuntimeError("index out of range") : token2string[tkn]);
		}
		return "token(" + strconv.Itoa((tkn >> 0)) + ")";
	};
	$ptrType(Token).prototype.String = function() { return new Token(this.$get()).String(); };
	IsKeyword = function(literal) {
		var $ptr, _entry, _tuple, exists, keyword, literal;
		_tuple = (_entry = keywordTable[$String.keyFor(literal)], _entry !== undefined ? [_entry.v, true] : [new _keyword.ptr(0, false, false), false]);
		keyword = $clone(_tuple[0], _keyword);
		exists = _tuple[1];
		if (exists) {
			if (keyword.futureKeyword) {
				return [4, keyword.strict];
			}
			return [keyword.token, false];
		}
		return [0, false];
	};
	$pkg.IsKeyword = IsKeyword;
	Token.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "precedence", name: "precedence", pkg: "github.com/robertkrimen/otto/token", typ: $funcType([$Bool], [$Int], false)}];
	_keyword.init([{prop: "token", name: "token", pkg: "github.com/robertkrimen/otto/token", typ: Token, tag: ""}, {prop: "futureKeyword", name: "futureKeyword", pkg: "github.com/robertkrimen/otto/token", typ: $Bool, tag: ""}, {prop: "strict", name: "strict", pkg: "github.com/robertkrimen/otto/token", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = strconv.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		token2string = $toNativeArray($kindString, ["", "ILLEGAL", "EOF", "COMMENT", "KEYWORD", "STRING", "BOOLEAN", "NULL", "NUMBER", "IDENTIFIER", "+", "-", "*", "/", "%", "&", "|", "^", "<<", ">>", ">>>", "&^", "+=", "-=", "*=", "/=", "%=", "&=", "|=", "^=", "<<=", ">>=", ">>>=", "&^=", "&&", "||", "++", "--", "==", "===", "<", ">", "=", "!", "~", "!=", "!==", "<=", ">=", "(", "[", "{", ",", ".", ")", "]", "}", ";", ":", "?", "", "if", "in", "do", "var", "for", "new", "try", "this", "else", "case", "void", "with", "while", "break", "catch", "throw", "return", "typeof", "delete", "switch", "default", "finally", "function", "continue", "debugger", "instanceof"]);
		keywordTable = $makeMap($String.keyFor, [{ k: "if", v: new _keyword.ptr(61, false, false) }, { k: "in", v: new _keyword.ptr(62, false, false) }, { k: "do", v: new _keyword.ptr(63, false, false) }, { k: "var", v: new _keyword.ptr(64, false, false) }, { k: "for", v: new _keyword.ptr(65, false, false) }, { k: "new", v: new _keyword.ptr(66, false, false) }, { k: "try", v: new _keyword.ptr(67, false, false) }, { k: "this", v: new _keyword.ptr(68, false, false) }, { k: "else", v: new _keyword.ptr(69, false, false) }, { k: "case", v: new _keyword.ptr(70, false, false) }, { k: "void", v: new _keyword.ptr(71, false, false) }, { k: "with", v: new _keyword.ptr(72, false, false) }, { k: "while", v: new _keyword.ptr(73, false, false) }, { k: "break", v: new _keyword.ptr(74, false, false) }, { k: "catch", v: new _keyword.ptr(75, false, false) }, { k: "throw", v: new _keyword.ptr(76, false, false) }, { k: "return", v: new _keyword.ptr(77, false, false) }, { k: "typeof", v: new _keyword.ptr(78, false, false) }, { k: "delete", v: new _keyword.ptr(79, false, false) }, { k: "switch", v: new _keyword.ptr(80, false, false) }, { k: "default", v: new _keyword.ptr(81, false, false) }, { k: "finally", v: new _keyword.ptr(82, false, false) }, { k: "function", v: new _keyword.ptr(83, false, false) }, { k: "continue", v: new _keyword.ptr(84, false, false) }, { k: "debugger", v: new _keyword.ptr(85, false, false) }, { k: "instanceof", v: new _keyword.ptr(86, false, false) }, { k: "const", v: new _keyword.ptr(4, true, false) }, { k: "class", v: new _keyword.ptr(4, true, false) }, { k: "enum", v: new _keyword.ptr(4, true, false) }, { k: "export", v: new _keyword.ptr(4, true, false) }, { k: "extends", v: new _keyword.ptr(4, true, false) }, { k: "import", v: new _keyword.ptr(4, true, false) }, { k: "super", v: new _keyword.ptr(4, true, false) }, { k: "implements", v: new _keyword.ptr(4, true, true) }, { k: "interface", v: new _keyword.ptr(4, true, true) }, { k: "let", v: new _keyword.ptr(4, true, true) }, { k: "package", v: new _keyword.ptr(4, true, true) }, { k: "private", v: new _keyword.ptr(4, true, true) }, { k: "protected", v: new _keyword.ptr(4, true, true) }, { k: "public", v: new _keyword.ptr(4, true, true) }, { k: "static", v: new _keyword.ptr(4, true, true) }]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/robertkrimen/otto/ast"] = (function() {
	var $pkg = {}, $init, file, token, Expression, ArrayLiteral, AssignExpression, BadExpression, BinaryExpression, BooleanLiteral, BracketExpression, CallExpression, ConditionalExpression, DotExpression, FunctionLiteral, Identifier, NewExpression, NullLiteral, NumberLiteral, ObjectLiteral, ParameterList, Property, RegExpLiteral, SequenceExpression, StringLiteral, ThisExpression, UnaryExpression, VariableExpression, Statement, BadStatement, BlockStatement, BranchStatement, CaseStatement, CatchStatement, DebuggerStatement, DoWhileStatement, EmptyStatement, ExpressionStatement, ForInStatement, ForStatement, IfStatement, LabelledStatement, ReturnStatement, SwitchStatement, ThrowStatement, TryStatement, VariableStatement, WhileStatement, WithStatement, Declaration, FunctionDeclaration, VariableDeclaration, Program, sliceType, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, sliceType$1, ptrType$11, ptrType$12, ptrType$13, ptrType$14, sliceType$2, ptrType$15, sliceType$3, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, sliceType$4, ptrType$23, ptrType$24, ptrType$25, ptrType$26, ptrType$27, ptrType$28, ptrType$29, ptrType$30, ptrType$31, ptrType$32, ptrType$33, ptrType$34, ptrType$35, sliceType$5, ptrType$36, ptrType$37, ptrType$38, ptrType$39, ptrType$40, ptrType$41, ptrType$42, sliceType$6, ptrType$43, ptrType$44, ptrType$45;
	file = $packages["github.com/robertkrimen/otto/file"];
	token = $packages["github.com/robertkrimen/otto/token"];
	Expression = $pkg.Expression = $newType(8, $kindInterface, "ast.Expression", "Expression", "github.com/robertkrimen/otto/ast", null);
	ArrayLiteral = $pkg.ArrayLiteral = $newType(0, $kindStruct, "ast.ArrayLiteral", "ArrayLiteral", "github.com/robertkrimen/otto/ast", function(LeftBracket_, RightBracket_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.LeftBracket = 0;
			this.RightBracket = 0;
			this.Value = sliceType.nil;
			return;
		}
		this.LeftBracket = LeftBracket_;
		this.RightBracket = RightBracket_;
		this.Value = Value_;
	});
	AssignExpression = $pkg.AssignExpression = $newType(0, $kindStruct, "ast.AssignExpression", "AssignExpression", "github.com/robertkrimen/otto/ast", function(Operator_, Left_, Right_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Operator = 0;
			this.Left = $ifaceNil;
			this.Right = $ifaceNil;
			return;
		}
		this.Operator = Operator_;
		this.Left = Left_;
		this.Right = Right_;
	});
	BadExpression = $pkg.BadExpression = $newType(0, $kindStruct, "ast.BadExpression", "BadExpression", "github.com/robertkrimen/otto/ast", function(From_, To_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.From = 0;
			this.To = 0;
			return;
		}
		this.From = From_;
		this.To = To_;
	});
	BinaryExpression = $pkg.BinaryExpression = $newType(0, $kindStruct, "ast.BinaryExpression", "BinaryExpression", "github.com/robertkrimen/otto/ast", function(Operator_, Left_, Right_, Comparison_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Operator = 0;
			this.Left = $ifaceNil;
			this.Right = $ifaceNil;
			this.Comparison = false;
			return;
		}
		this.Operator = Operator_;
		this.Left = Left_;
		this.Right = Right_;
		this.Comparison = Comparison_;
	});
	BooleanLiteral = $pkg.BooleanLiteral = $newType(0, $kindStruct, "ast.BooleanLiteral", "BooleanLiteral", "github.com/robertkrimen/otto/ast", function(Idx_, Literal_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Idx = 0;
			this.Literal = "";
			this.Value = false;
			return;
		}
		this.Idx = Idx_;
		this.Literal = Literal_;
		this.Value = Value_;
	});
	BracketExpression = $pkg.BracketExpression = $newType(0, $kindStruct, "ast.BracketExpression", "BracketExpression", "github.com/robertkrimen/otto/ast", function(Left_, Member_, LeftBracket_, RightBracket_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Left = $ifaceNil;
			this.Member = $ifaceNil;
			this.LeftBracket = 0;
			this.RightBracket = 0;
			return;
		}
		this.Left = Left_;
		this.Member = Member_;
		this.LeftBracket = LeftBracket_;
		this.RightBracket = RightBracket_;
	});
	CallExpression = $pkg.CallExpression = $newType(0, $kindStruct, "ast.CallExpression", "CallExpression", "github.com/robertkrimen/otto/ast", function(Callee_, LeftParenthesis_, ArgumentList_, RightParenthesis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Callee = $ifaceNil;
			this.LeftParenthesis = 0;
			this.ArgumentList = sliceType.nil;
			this.RightParenthesis = 0;
			return;
		}
		this.Callee = Callee_;
		this.LeftParenthesis = LeftParenthesis_;
		this.ArgumentList = ArgumentList_;
		this.RightParenthesis = RightParenthesis_;
	});
	ConditionalExpression = $pkg.ConditionalExpression = $newType(0, $kindStruct, "ast.ConditionalExpression", "ConditionalExpression", "github.com/robertkrimen/otto/ast", function(Test_, Consequent_, Alternate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Test = $ifaceNil;
			this.Consequent = $ifaceNil;
			this.Alternate = $ifaceNil;
			return;
		}
		this.Test = Test_;
		this.Consequent = Consequent_;
		this.Alternate = Alternate_;
	});
	DotExpression = $pkg.DotExpression = $newType(0, $kindStruct, "ast.DotExpression", "DotExpression", "github.com/robertkrimen/otto/ast", function(Left_, Identifier_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Left = $ifaceNil;
			this.Identifier = new Identifier.ptr("", 0);
			return;
		}
		this.Left = Left_;
		this.Identifier = Identifier_;
	});
	FunctionLiteral = $pkg.FunctionLiteral = $newType(0, $kindStruct, "ast.FunctionLiteral", "FunctionLiteral", "github.com/robertkrimen/otto/ast", function(Function_, Name_, ParameterList_, Body_, Source_, DeclarationList_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Function = 0;
			this.Name = ptrType$9.nil;
			this.ParameterList = ptrType$10.nil;
			this.Body = $ifaceNil;
			this.Source = "";
			this.DeclarationList = sliceType$1.nil;
			return;
		}
		this.Function = Function_;
		this.Name = Name_;
		this.ParameterList = ParameterList_;
		this.Body = Body_;
		this.Source = Source_;
		this.DeclarationList = DeclarationList_;
	});
	Identifier = $pkg.Identifier = $newType(0, $kindStruct, "ast.Identifier", "Identifier", "github.com/robertkrimen/otto/ast", function(Name_, Idx_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Idx = 0;
			return;
		}
		this.Name = Name_;
		this.Idx = Idx_;
	});
	NewExpression = $pkg.NewExpression = $newType(0, $kindStruct, "ast.NewExpression", "NewExpression", "github.com/robertkrimen/otto/ast", function(New_, Callee_, LeftParenthesis_, ArgumentList_, RightParenthesis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.New = 0;
			this.Callee = $ifaceNil;
			this.LeftParenthesis = 0;
			this.ArgumentList = sliceType.nil;
			this.RightParenthesis = 0;
			return;
		}
		this.New = New_;
		this.Callee = Callee_;
		this.LeftParenthesis = LeftParenthesis_;
		this.ArgumentList = ArgumentList_;
		this.RightParenthesis = RightParenthesis_;
	});
	NullLiteral = $pkg.NullLiteral = $newType(0, $kindStruct, "ast.NullLiteral", "NullLiteral", "github.com/robertkrimen/otto/ast", function(Idx_, Literal_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Idx = 0;
			this.Literal = "";
			return;
		}
		this.Idx = Idx_;
		this.Literal = Literal_;
	});
	NumberLiteral = $pkg.NumberLiteral = $newType(0, $kindStruct, "ast.NumberLiteral", "NumberLiteral", "github.com/robertkrimen/otto/ast", function(Idx_, Literal_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Idx = 0;
			this.Literal = "";
			this.Value = $ifaceNil;
			return;
		}
		this.Idx = Idx_;
		this.Literal = Literal_;
		this.Value = Value_;
	});
	ObjectLiteral = $pkg.ObjectLiteral = $newType(0, $kindStruct, "ast.ObjectLiteral", "ObjectLiteral", "github.com/robertkrimen/otto/ast", function(LeftBrace_, RightBrace_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.LeftBrace = 0;
			this.RightBrace = 0;
			this.Value = sliceType$2.nil;
			return;
		}
		this.LeftBrace = LeftBrace_;
		this.RightBrace = RightBrace_;
		this.Value = Value_;
	});
	ParameterList = $pkg.ParameterList = $newType(0, $kindStruct, "ast.ParameterList", "ParameterList", "github.com/robertkrimen/otto/ast", function(Opening_, List_, Closing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Opening = 0;
			this.List = sliceType$3.nil;
			this.Closing = 0;
			return;
		}
		this.Opening = Opening_;
		this.List = List_;
		this.Closing = Closing_;
	});
	Property = $pkg.Property = $newType(0, $kindStruct, "ast.Property", "Property", "github.com/robertkrimen/otto/ast", function(Key_, Kind_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Key = "";
			this.Kind = "";
			this.Value = $ifaceNil;
			return;
		}
		this.Key = Key_;
		this.Kind = Kind_;
		this.Value = Value_;
	});
	RegExpLiteral = $pkg.RegExpLiteral = $newType(0, $kindStruct, "ast.RegExpLiteral", "RegExpLiteral", "github.com/robertkrimen/otto/ast", function(Idx_, Literal_, Pattern_, Flags_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Idx = 0;
			this.Literal = "";
			this.Pattern = "";
			this.Flags = "";
			this.Value = "";
			return;
		}
		this.Idx = Idx_;
		this.Literal = Literal_;
		this.Pattern = Pattern_;
		this.Flags = Flags_;
		this.Value = Value_;
	});
	SequenceExpression = $pkg.SequenceExpression = $newType(0, $kindStruct, "ast.SequenceExpression", "SequenceExpression", "github.com/robertkrimen/otto/ast", function(Sequence_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Sequence = sliceType.nil;
			return;
		}
		this.Sequence = Sequence_;
	});
	StringLiteral = $pkg.StringLiteral = $newType(0, $kindStruct, "ast.StringLiteral", "StringLiteral", "github.com/robertkrimen/otto/ast", function(Idx_, Literal_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Idx = 0;
			this.Literal = "";
			this.Value = "";
			return;
		}
		this.Idx = Idx_;
		this.Literal = Literal_;
		this.Value = Value_;
	});
	ThisExpression = $pkg.ThisExpression = $newType(0, $kindStruct, "ast.ThisExpression", "ThisExpression", "github.com/robertkrimen/otto/ast", function(Idx_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Idx = 0;
			return;
		}
		this.Idx = Idx_;
	});
	UnaryExpression = $pkg.UnaryExpression = $newType(0, $kindStruct, "ast.UnaryExpression", "UnaryExpression", "github.com/robertkrimen/otto/ast", function(Operator_, Idx_, Operand_, Postfix_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Operator = 0;
			this.Idx = 0;
			this.Operand = $ifaceNil;
			this.Postfix = false;
			return;
		}
		this.Operator = Operator_;
		this.Idx = Idx_;
		this.Operand = Operand_;
		this.Postfix = Postfix_;
	});
	VariableExpression = $pkg.VariableExpression = $newType(0, $kindStruct, "ast.VariableExpression", "VariableExpression", "github.com/robertkrimen/otto/ast", function(Name_, Idx_, Initializer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Idx = 0;
			this.Initializer = $ifaceNil;
			return;
		}
		this.Name = Name_;
		this.Idx = Idx_;
		this.Initializer = Initializer_;
	});
	Statement = $pkg.Statement = $newType(8, $kindInterface, "ast.Statement", "Statement", "github.com/robertkrimen/otto/ast", null);
	BadStatement = $pkg.BadStatement = $newType(0, $kindStruct, "ast.BadStatement", "BadStatement", "github.com/robertkrimen/otto/ast", function(From_, To_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.From = 0;
			this.To = 0;
			return;
		}
		this.From = From_;
		this.To = To_;
	});
	BlockStatement = $pkg.BlockStatement = $newType(0, $kindStruct, "ast.BlockStatement", "BlockStatement", "github.com/robertkrimen/otto/ast", function(LeftBrace_, List_, RightBrace_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.LeftBrace = 0;
			this.List = sliceType$4.nil;
			this.RightBrace = 0;
			return;
		}
		this.LeftBrace = LeftBrace_;
		this.List = List_;
		this.RightBrace = RightBrace_;
	});
	BranchStatement = $pkg.BranchStatement = $newType(0, $kindStruct, "ast.BranchStatement", "BranchStatement", "github.com/robertkrimen/otto/ast", function(Idx_, Token_, Label_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Idx = 0;
			this.Token = 0;
			this.Label = ptrType$9.nil;
			return;
		}
		this.Idx = Idx_;
		this.Token = Token_;
		this.Label = Label_;
	});
	CaseStatement = $pkg.CaseStatement = $newType(0, $kindStruct, "ast.CaseStatement", "CaseStatement", "github.com/robertkrimen/otto/ast", function(Case_, Test_, Consequent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Case = 0;
			this.Test = $ifaceNil;
			this.Consequent = sliceType$4.nil;
			return;
		}
		this.Case = Case_;
		this.Test = Test_;
		this.Consequent = Consequent_;
	});
	CatchStatement = $pkg.CatchStatement = $newType(0, $kindStruct, "ast.CatchStatement", "CatchStatement", "github.com/robertkrimen/otto/ast", function(Catch_, Parameter_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Catch = 0;
			this.Parameter = ptrType$9.nil;
			this.Body = $ifaceNil;
			return;
		}
		this.Catch = Catch_;
		this.Parameter = Parameter_;
		this.Body = Body_;
	});
	DebuggerStatement = $pkg.DebuggerStatement = $newType(0, $kindStruct, "ast.DebuggerStatement", "DebuggerStatement", "github.com/robertkrimen/otto/ast", function(Debugger_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Debugger = 0;
			return;
		}
		this.Debugger = Debugger_;
	});
	DoWhileStatement = $pkg.DoWhileStatement = $newType(0, $kindStruct, "ast.DoWhileStatement", "DoWhileStatement", "github.com/robertkrimen/otto/ast", function(Do_, Test_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Do = 0;
			this.Test = $ifaceNil;
			this.Body = $ifaceNil;
			return;
		}
		this.Do = Do_;
		this.Test = Test_;
		this.Body = Body_;
	});
	EmptyStatement = $pkg.EmptyStatement = $newType(0, $kindStruct, "ast.EmptyStatement", "EmptyStatement", "github.com/robertkrimen/otto/ast", function(Semicolon_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Semicolon = 0;
			return;
		}
		this.Semicolon = Semicolon_;
	});
	ExpressionStatement = $pkg.ExpressionStatement = $newType(0, $kindStruct, "ast.ExpressionStatement", "ExpressionStatement", "github.com/robertkrimen/otto/ast", function(Expression_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Expression = $ifaceNil;
			return;
		}
		this.Expression = Expression_;
	});
	ForInStatement = $pkg.ForInStatement = $newType(0, $kindStruct, "ast.ForInStatement", "ForInStatement", "github.com/robertkrimen/otto/ast", function(For_, Into_, Source_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.For = 0;
			this.Into = $ifaceNil;
			this.Source = $ifaceNil;
			this.Body = $ifaceNil;
			return;
		}
		this.For = For_;
		this.Into = Into_;
		this.Source = Source_;
		this.Body = Body_;
	});
	ForStatement = $pkg.ForStatement = $newType(0, $kindStruct, "ast.ForStatement", "ForStatement", "github.com/robertkrimen/otto/ast", function(For_, Initializer_, Update_, Test_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.For = 0;
			this.Initializer = $ifaceNil;
			this.Update = $ifaceNil;
			this.Test = $ifaceNil;
			this.Body = $ifaceNil;
			return;
		}
		this.For = For_;
		this.Initializer = Initializer_;
		this.Update = Update_;
		this.Test = Test_;
		this.Body = Body_;
	});
	IfStatement = $pkg.IfStatement = $newType(0, $kindStruct, "ast.IfStatement", "IfStatement", "github.com/robertkrimen/otto/ast", function(If_, Test_, Consequent_, Alternate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.If = 0;
			this.Test = $ifaceNil;
			this.Consequent = $ifaceNil;
			this.Alternate = $ifaceNil;
			return;
		}
		this.If = If_;
		this.Test = Test_;
		this.Consequent = Consequent_;
		this.Alternate = Alternate_;
	});
	LabelledStatement = $pkg.LabelledStatement = $newType(0, $kindStruct, "ast.LabelledStatement", "LabelledStatement", "github.com/robertkrimen/otto/ast", function(Label_, Colon_, Statement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Label = ptrType$9.nil;
			this.Colon = 0;
			this.Statement = $ifaceNil;
			return;
		}
		this.Label = Label_;
		this.Colon = Colon_;
		this.Statement = Statement_;
	});
	ReturnStatement = $pkg.ReturnStatement = $newType(0, $kindStruct, "ast.ReturnStatement", "ReturnStatement", "github.com/robertkrimen/otto/ast", function(Return_, Argument_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Return = 0;
			this.Argument = $ifaceNil;
			return;
		}
		this.Return = Return_;
		this.Argument = Argument_;
	});
	SwitchStatement = $pkg.SwitchStatement = $newType(0, $kindStruct, "ast.SwitchStatement", "SwitchStatement", "github.com/robertkrimen/otto/ast", function(Switch_, Discriminant_, Default_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Switch = 0;
			this.Discriminant = $ifaceNil;
			this.Default = 0;
			this.Body = sliceType$5.nil;
			return;
		}
		this.Switch = Switch_;
		this.Discriminant = Discriminant_;
		this.Default = Default_;
		this.Body = Body_;
	});
	ThrowStatement = $pkg.ThrowStatement = $newType(0, $kindStruct, "ast.ThrowStatement", "ThrowStatement", "github.com/robertkrimen/otto/ast", function(Throw_, Argument_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Throw = 0;
			this.Argument = $ifaceNil;
			return;
		}
		this.Throw = Throw_;
		this.Argument = Argument_;
	});
	TryStatement = $pkg.TryStatement = $newType(0, $kindStruct, "ast.TryStatement", "TryStatement", "github.com/robertkrimen/otto/ast", function(Try_, Body_, Catch_, Finally_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Try = 0;
			this.Body = $ifaceNil;
			this.Catch = ptrType$26.nil;
			this.Finally = $ifaceNil;
			return;
		}
		this.Try = Try_;
		this.Body = Body_;
		this.Catch = Catch_;
		this.Finally = Finally_;
	});
	VariableStatement = $pkg.VariableStatement = $newType(0, $kindStruct, "ast.VariableStatement", "VariableStatement", "github.com/robertkrimen/otto/ast", function(Var_, List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Var = 0;
			this.List = sliceType.nil;
			return;
		}
		this.Var = Var_;
		this.List = List_;
	});
	WhileStatement = $pkg.WhileStatement = $newType(0, $kindStruct, "ast.WhileStatement", "WhileStatement", "github.com/robertkrimen/otto/ast", function(While_, Test_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.While = 0;
			this.Test = $ifaceNil;
			this.Body = $ifaceNil;
			return;
		}
		this.While = While_;
		this.Test = Test_;
		this.Body = Body_;
	});
	WithStatement = $pkg.WithStatement = $newType(0, $kindStruct, "ast.WithStatement", "WithStatement", "github.com/robertkrimen/otto/ast", function(With_, Object_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.With = 0;
			this.Object = $ifaceNil;
			this.Body = $ifaceNil;
			return;
		}
		this.With = With_;
		this.Object = Object_;
		this.Body = Body_;
	});
	Declaration = $pkg.Declaration = $newType(8, $kindInterface, "ast.Declaration", "Declaration", "github.com/robertkrimen/otto/ast", null);
	FunctionDeclaration = $pkg.FunctionDeclaration = $newType(0, $kindStruct, "ast.FunctionDeclaration", "FunctionDeclaration", "github.com/robertkrimen/otto/ast", function(Function_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Function = ptrType$11.nil;
			return;
		}
		this.Function = Function_;
	});
	VariableDeclaration = $pkg.VariableDeclaration = $newType(0, $kindStruct, "ast.VariableDeclaration", "VariableDeclaration", "github.com/robertkrimen/otto/ast", function(Var_, List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Var = 0;
			this.List = sliceType$6.nil;
			return;
		}
		this.Var = Var_;
		this.List = List_;
	});
	Program = $pkg.Program = $newType(0, $kindStruct, "ast.Program", "Program", "github.com/robertkrimen/otto/ast", function(Body_, DeclarationList_, File_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Body = sliceType$4.nil;
			this.DeclarationList = sliceType$1.nil;
			this.File = ptrType$44.nil;
			return;
		}
		this.Body = Body_;
		this.DeclarationList = DeclarationList_;
		this.File = File_;
	});
	sliceType = $sliceType(Expression);
	ptrType = $ptrType(ArrayLiteral);
	ptrType$1 = $ptrType(AssignExpression);
	ptrType$2 = $ptrType(BadExpression);
	ptrType$3 = $ptrType(BinaryExpression);
	ptrType$4 = $ptrType(BooleanLiteral);
	ptrType$5 = $ptrType(BracketExpression);
	ptrType$6 = $ptrType(CallExpression);
	ptrType$7 = $ptrType(ConditionalExpression);
	ptrType$8 = $ptrType(DotExpression);
	ptrType$9 = $ptrType(Identifier);
	ptrType$10 = $ptrType(ParameterList);
	sliceType$1 = $sliceType(Declaration);
	ptrType$11 = $ptrType(FunctionLiteral);
	ptrType$12 = $ptrType(NewExpression);
	ptrType$13 = $ptrType(NullLiteral);
	ptrType$14 = $ptrType(NumberLiteral);
	sliceType$2 = $sliceType(Property);
	ptrType$15 = $ptrType(ObjectLiteral);
	sliceType$3 = $sliceType(ptrType$9);
	ptrType$16 = $ptrType(RegExpLiteral);
	ptrType$17 = $ptrType(SequenceExpression);
	ptrType$18 = $ptrType(StringLiteral);
	ptrType$19 = $ptrType(ThisExpression);
	ptrType$20 = $ptrType(UnaryExpression);
	ptrType$21 = $ptrType(VariableExpression);
	ptrType$22 = $ptrType(BadStatement);
	sliceType$4 = $sliceType(Statement);
	ptrType$23 = $ptrType(BlockStatement);
	ptrType$24 = $ptrType(BranchStatement);
	ptrType$25 = $ptrType(CaseStatement);
	ptrType$26 = $ptrType(CatchStatement);
	ptrType$27 = $ptrType(DebuggerStatement);
	ptrType$28 = $ptrType(DoWhileStatement);
	ptrType$29 = $ptrType(EmptyStatement);
	ptrType$30 = $ptrType(ExpressionStatement);
	ptrType$31 = $ptrType(ForInStatement);
	ptrType$32 = $ptrType(ForStatement);
	ptrType$33 = $ptrType(IfStatement);
	ptrType$34 = $ptrType(LabelledStatement);
	ptrType$35 = $ptrType(ReturnStatement);
	sliceType$5 = $sliceType(ptrType$25);
	ptrType$36 = $ptrType(SwitchStatement);
	ptrType$37 = $ptrType(ThrowStatement);
	ptrType$38 = $ptrType(TryStatement);
	ptrType$39 = $ptrType(VariableStatement);
	ptrType$40 = $ptrType(WhileStatement);
	ptrType$41 = $ptrType(WithStatement);
	ptrType$42 = $ptrType(FunctionDeclaration);
	sliceType$6 = $sliceType(ptrType$21);
	ptrType$43 = $ptrType(VariableDeclaration);
	ptrType$44 = $ptrType(file.File);
	ptrType$45 = $ptrType(Program);
	ArrayLiteral.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.LeftBracket;
	};
	ArrayLiteral.prototype.Idx0 = function() { return this.$val.Idx0(); };
	AssignExpression.ptr.prototype.Idx0 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Left.Idx0(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: AssignExpression.ptr.prototype.Idx0 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	AssignExpression.prototype.Idx0 = function() { return this.$val.Idx0(); };
	BadExpression.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.From;
	};
	BadExpression.prototype.Idx0 = function() { return this.$val.Idx0(); };
	BinaryExpression.ptr.prototype.Idx0 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Left.Idx0(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BinaryExpression.ptr.prototype.Idx0 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	BinaryExpression.prototype.Idx0 = function() { return this.$val.Idx0(); };
	BooleanLiteral.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Idx;
	};
	BooleanLiteral.prototype.Idx0 = function() { return this.$val.Idx0(); };
	BracketExpression.ptr.prototype.Idx0 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Left.Idx0(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BracketExpression.ptr.prototype.Idx0 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	BracketExpression.prototype.Idx0 = function() { return this.$val.Idx0(); };
	CallExpression.ptr.prototype.Idx0 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Callee.Idx0(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CallExpression.ptr.prototype.Idx0 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	CallExpression.prototype.Idx0 = function() { return this.$val.Idx0(); };
	ConditionalExpression.ptr.prototype.Idx0 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Test.Idx0(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ConditionalExpression.ptr.prototype.Idx0 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	ConditionalExpression.prototype.Idx0 = function() { return this.$val.Idx0(); };
	DotExpression.ptr.prototype.Idx0 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Left.Idx0(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DotExpression.ptr.prototype.Idx0 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	DotExpression.prototype.Idx0 = function() { return this.$val.Idx0(); };
	FunctionLiteral.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Function;
	};
	FunctionLiteral.prototype.Idx0 = function() { return this.$val.Idx0(); };
	Identifier.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Idx;
	};
	Identifier.prototype.Idx0 = function() { return this.$val.Idx0(); };
	NewExpression.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.New;
	};
	NewExpression.prototype.Idx0 = function() { return this.$val.Idx0(); };
	NullLiteral.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Idx;
	};
	NullLiteral.prototype.Idx0 = function() { return this.$val.Idx0(); };
	NumberLiteral.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Idx;
	};
	NumberLiteral.prototype.Idx0 = function() { return this.$val.Idx0(); };
	ObjectLiteral.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.LeftBrace;
	};
	ObjectLiteral.prototype.Idx0 = function() { return this.$val.Idx0(); };
	RegExpLiteral.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Idx;
	};
	RegExpLiteral.prototype.Idx0 = function() { return this.$val.Idx0(); };
	SequenceExpression.ptr.prototype.Idx0 = function() {
		var $ptr, _r, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = (x = self.Sequence, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Idx0(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SequenceExpression.ptr.prototype.Idx0 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	SequenceExpression.prototype.Idx0 = function() { return this.$val.Idx0(); };
	StringLiteral.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Idx;
	};
	StringLiteral.prototype.Idx0 = function() { return this.$val.Idx0(); };
	ThisExpression.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Idx;
	};
	ThisExpression.prototype.Idx0 = function() { return this.$val.Idx0(); };
	UnaryExpression.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Idx;
	};
	UnaryExpression.prototype.Idx0 = function() { return this.$val.Idx0(); };
	VariableExpression.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Idx;
	};
	VariableExpression.prototype.Idx0 = function() { return this.$val.Idx0(); };
	BadStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.From;
	};
	BadStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	BlockStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.LeftBrace;
	};
	BlockStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	BranchStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Idx;
	};
	BranchStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	CaseStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Case;
	};
	CaseStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	CatchStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Catch;
	};
	CatchStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	DebuggerStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Debugger;
	};
	DebuggerStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	DoWhileStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Do;
	};
	DoWhileStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	EmptyStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Semicolon;
	};
	EmptyStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	ExpressionStatement.ptr.prototype.Idx0 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Expression.Idx0(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ExpressionStatement.ptr.prototype.Idx0 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	ExpressionStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	ForInStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.For;
	};
	ForInStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	ForStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.For;
	};
	ForStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	IfStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.If;
	};
	IfStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	LabelledStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Label.Idx0();
	};
	LabelledStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	Program.ptr.prototype.Idx0 = function() {
		var $ptr, _r, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = (x = self.Body, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Idx0(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Program.ptr.prototype.Idx0 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Program.prototype.Idx0 = function() { return this.$val.Idx0(); };
	ReturnStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Return;
	};
	ReturnStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	SwitchStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Switch;
	};
	SwitchStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	ThrowStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Throw;
	};
	ThrowStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	TryStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Try;
	};
	TryStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	VariableStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.Var;
	};
	VariableStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	WhileStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.While;
	};
	WhileStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	WithStatement.ptr.prototype.Idx0 = function() {
		var $ptr, self;
		self = this;
		return self.With;
	};
	WithStatement.prototype.Idx0 = function() { return this.$val.Idx0(); };
	ArrayLiteral.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return self.RightBracket;
	};
	ArrayLiteral.prototype.Idx1 = function() { return this.$val.Idx1(); };
	AssignExpression.ptr.prototype.Idx1 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Right.Idx1(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: AssignExpression.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	AssignExpression.prototype.Idx1 = function() { return this.$val.Idx1(); };
	BadExpression.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return self.To;
	};
	BadExpression.prototype.Idx1 = function() { return this.$val.Idx1(); };
	BinaryExpression.ptr.prototype.Idx1 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Right.Idx1(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BinaryExpression.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	BinaryExpression.prototype.Idx1 = function() { return this.$val.Idx1(); };
	BooleanLiteral.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return (((self.Idx >> 0) + self.Literal.length >> 0) >> 0);
	};
	BooleanLiteral.prototype.Idx1 = function() { return this.$val.Idx1(); };
	BracketExpression.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return self.RightBracket + 1 >> 0;
	};
	BracketExpression.prototype.Idx1 = function() { return this.$val.Idx1(); };
	CallExpression.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return self.RightParenthesis + 1 >> 0;
	};
	CallExpression.prototype.Idx1 = function() { return this.$val.Idx1(); };
	ConditionalExpression.ptr.prototype.Idx1 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Test.Idx1(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ConditionalExpression.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	ConditionalExpression.prototype.Idx1 = function() { return this.$val.Idx1(); };
	DotExpression.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return self.Identifier.Idx1();
	};
	DotExpression.prototype.Idx1 = function() { return this.$val.Idx1(); };
	FunctionLiteral.ptr.prototype.Idx1 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Body.Idx1(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunctionLiteral.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunctionLiteral.prototype.Idx1 = function() { return this.$val.Idx1(); };
	Identifier.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return (((self.Idx >> 0) + self.Name.length >> 0) >> 0);
	};
	Identifier.prototype.Idx1 = function() { return this.$val.Idx1(); };
	NewExpression.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return self.RightParenthesis + 1 >> 0;
	};
	NewExpression.prototype.Idx1 = function() { return this.$val.Idx1(); };
	NullLiteral.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return (((self.Idx >> 0) + 4 >> 0) >> 0);
	};
	NullLiteral.prototype.Idx1 = function() { return this.$val.Idx1(); };
	NumberLiteral.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return (((self.Idx >> 0) + self.Literal.length >> 0) >> 0);
	};
	NumberLiteral.prototype.Idx1 = function() { return this.$val.Idx1(); };
	ObjectLiteral.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return self.RightBrace;
	};
	ObjectLiteral.prototype.Idx1 = function() { return this.$val.Idx1(); };
	RegExpLiteral.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return (((self.Idx >> 0) + self.Literal.length >> 0) >> 0);
	};
	RegExpLiteral.prototype.Idx1 = function() { return this.$val.Idx1(); };
	SequenceExpression.ptr.prototype.Idx1 = function() {
		var $ptr, _r, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = (x = self.Sequence, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Idx1(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SequenceExpression.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	SequenceExpression.prototype.Idx1 = function() { return this.$val.Idx1(); };
	StringLiteral.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return (((self.Idx >> 0) + self.Literal.length >> 0) >> 0);
	};
	StringLiteral.prototype.Idx1 = function() { return this.$val.Idx1(); };
	ThisExpression.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return self.Idx;
	};
	ThisExpression.prototype.Idx1 = function() { return this.$val.Idx1(); };
	UnaryExpression.ptr.prototype.Idx1 = function() {
		var $ptr, _r, _r$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (self.Postfix) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.Postfix) { */ case 1:
			_r = self.Operand.Idx1(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r + 2 >> 0;
		/* } */ case 2:
		_r$1 = self.Operand.Idx1(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: UnaryExpression.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	UnaryExpression.prototype.Idx1 = function() { return this.$val.Idx1(); };
	VariableExpression.ptr.prototype.Idx1 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		if ($interfaceIsEqual(self.Initializer, $ifaceNil)) {
			return ((((self.Idx >> 0) + self.Name.length >> 0) + 1 >> 0) >> 0);
		}
		_r = self.Initializer.Idx1(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: VariableExpression.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	VariableExpression.prototype.Idx1 = function() { return this.$val.Idx1(); };
	BadStatement.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return self.To;
	};
	BadStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	BlockStatement.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return self.RightBrace + 1 >> 0;
	};
	BlockStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	BranchStatement.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return self.Idx;
	};
	BranchStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	CaseStatement.ptr.prototype.Idx1 = function() {
		var $ptr, _r, self, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = (x = self.Consequent, x$1 = self.Consequent.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).Idx1(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CaseStatement.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	CaseStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	CatchStatement.ptr.prototype.Idx1 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Body.Idx1(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CatchStatement.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	CatchStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	DebuggerStatement.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return self.Debugger + 8 >> 0;
	};
	DebuggerStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	DoWhileStatement.ptr.prototype.Idx1 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Test.Idx1(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DoWhileStatement.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	DoWhileStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	EmptyStatement.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return self.Semicolon + 1 >> 0;
	};
	EmptyStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	ExpressionStatement.ptr.prototype.Idx1 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Expression.Idx1(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ExpressionStatement.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	ExpressionStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	ForInStatement.ptr.prototype.Idx1 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Body.Idx1(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ForInStatement.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	ForInStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	ForStatement.ptr.prototype.Idx1 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Body.Idx1(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ForStatement.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	ForStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	IfStatement.ptr.prototype.Idx1 = function() {
		var $ptr, _r, _r$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (!($interfaceIsEqual(self.Alternate, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(self.Alternate, $ifaceNil))) { */ case 1:
			_r = self.Alternate.Idx1(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		_r$1 = self.Consequent.Idx1(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IfStatement.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	IfStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	LabelledStatement.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return self.Colon + 1 >> 0;
	};
	LabelledStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	Program.ptr.prototype.Idx1 = function() {
		var $ptr, _r, self, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = (x = self.Body, x$1 = self.Body.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).Idx1(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Program.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Program.prototype.Idx1 = function() { return this.$val.Idx1(); };
	ReturnStatement.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return self.Return;
	};
	ReturnStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	SwitchStatement.ptr.prototype.Idx1 = function() {
		var $ptr, _r, self, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = (x = self.Body, x$1 = self.Body.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).Idx1(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SwitchStatement.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	SwitchStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	ThrowStatement.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return self.Throw;
	};
	ThrowStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	TryStatement.ptr.prototype.Idx1 = function() {
		var $ptr, self;
		self = this;
		return self.Try;
	};
	TryStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	VariableStatement.ptr.prototype.Idx1 = function() {
		var $ptr, _r, self, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = (x = self.List, x$1 = self.List.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).Idx1(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: VariableStatement.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	VariableStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	WhileStatement.ptr.prototype.Idx1 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Body.Idx1(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WhileStatement.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	WhileStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	WithStatement.ptr.prototype.Idx1 = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Body.Idx1(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WithStatement.ptr.prototype.Idx1 }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	WithStatement.prototype.Idx1 = function() { return this.$val.Idx1(); };
	ptrType.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$1.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$2.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$3.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$4.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$5.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$6.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$7.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$8.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$11.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$9.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$12.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$13.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$14.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$15.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$16.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$17.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$18.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$19.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$20.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$21.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$22.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$23.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$24.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$25.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$26.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$27.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$28.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$29.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$30.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$31.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$32.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$33.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$34.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$35.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$36.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$37.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$38.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$39.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$40.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$41.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}, {prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	ptrType$42.methods = [{prop: "_declarationNode", name: "_declarationNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}];
	ptrType$43.methods = [{prop: "_declarationNode", name: "_declarationNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}];
	ptrType$45.methods = [{prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}];
	Expression.init([{prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}]);
	ArrayLiteral.init([{prop: "LeftBracket", name: "LeftBracket", pkg: "", typ: file.Idx, tag: ""}, {prop: "RightBracket", name: "RightBracket", pkg: "", typ: file.Idx, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: sliceType, tag: ""}]);
	AssignExpression.init([{prop: "Operator", name: "Operator", pkg: "", typ: token.Token, tag: ""}, {prop: "Left", name: "Left", pkg: "", typ: Expression, tag: ""}, {prop: "Right", name: "Right", pkg: "", typ: Expression, tag: ""}]);
	BadExpression.init([{prop: "From", name: "From", pkg: "", typ: file.Idx, tag: ""}, {prop: "To", name: "To", pkg: "", typ: file.Idx, tag: ""}]);
	BinaryExpression.init([{prop: "Operator", name: "Operator", pkg: "", typ: token.Token, tag: ""}, {prop: "Left", name: "Left", pkg: "", typ: Expression, tag: ""}, {prop: "Right", name: "Right", pkg: "", typ: Expression, tag: ""}, {prop: "Comparison", name: "Comparison", pkg: "", typ: $Bool, tag: ""}]);
	BooleanLiteral.init([{prop: "Idx", name: "Idx", pkg: "", typ: file.Idx, tag: ""}, {prop: "Literal", name: "Literal", pkg: "", typ: $String, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: $Bool, tag: ""}]);
	BracketExpression.init([{prop: "Left", name: "Left", pkg: "", typ: Expression, tag: ""}, {prop: "Member", name: "Member", pkg: "", typ: Expression, tag: ""}, {prop: "LeftBracket", name: "LeftBracket", pkg: "", typ: file.Idx, tag: ""}, {prop: "RightBracket", name: "RightBracket", pkg: "", typ: file.Idx, tag: ""}]);
	CallExpression.init([{prop: "Callee", name: "Callee", pkg: "", typ: Expression, tag: ""}, {prop: "LeftParenthesis", name: "LeftParenthesis", pkg: "", typ: file.Idx, tag: ""}, {prop: "ArgumentList", name: "ArgumentList", pkg: "", typ: sliceType, tag: ""}, {prop: "RightParenthesis", name: "RightParenthesis", pkg: "", typ: file.Idx, tag: ""}]);
	ConditionalExpression.init([{prop: "Test", name: "Test", pkg: "", typ: Expression, tag: ""}, {prop: "Consequent", name: "Consequent", pkg: "", typ: Expression, tag: ""}, {prop: "Alternate", name: "Alternate", pkg: "", typ: Expression, tag: ""}]);
	DotExpression.init([{prop: "Left", name: "Left", pkg: "", typ: Expression, tag: ""}, {prop: "Identifier", name: "Identifier", pkg: "", typ: Identifier, tag: ""}]);
	FunctionLiteral.init([{prop: "Function", name: "Function", pkg: "", typ: file.Idx, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: ptrType$9, tag: ""}, {prop: "ParameterList", name: "ParameterList", pkg: "", typ: ptrType$10, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: Statement, tag: ""}, {prop: "Source", name: "Source", pkg: "", typ: $String, tag: ""}, {prop: "DeclarationList", name: "DeclarationList", pkg: "", typ: sliceType$1, tag: ""}]);
	Identifier.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "Idx", name: "Idx", pkg: "", typ: file.Idx, tag: ""}]);
	NewExpression.init([{prop: "New", name: "New", pkg: "", typ: file.Idx, tag: ""}, {prop: "Callee", name: "Callee", pkg: "", typ: Expression, tag: ""}, {prop: "LeftParenthesis", name: "LeftParenthesis", pkg: "", typ: file.Idx, tag: ""}, {prop: "ArgumentList", name: "ArgumentList", pkg: "", typ: sliceType, tag: ""}, {prop: "RightParenthesis", name: "RightParenthesis", pkg: "", typ: file.Idx, tag: ""}]);
	NullLiteral.init([{prop: "Idx", name: "Idx", pkg: "", typ: file.Idx, tag: ""}, {prop: "Literal", name: "Literal", pkg: "", typ: $String, tag: ""}]);
	NumberLiteral.init([{prop: "Idx", name: "Idx", pkg: "", typ: file.Idx, tag: ""}, {prop: "Literal", name: "Literal", pkg: "", typ: $String, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: $emptyInterface, tag: ""}]);
	ObjectLiteral.init([{prop: "LeftBrace", name: "LeftBrace", pkg: "", typ: file.Idx, tag: ""}, {prop: "RightBrace", name: "RightBrace", pkg: "", typ: file.Idx, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: sliceType$2, tag: ""}]);
	ParameterList.init([{prop: "Opening", name: "Opening", pkg: "", typ: file.Idx, tag: ""}, {prop: "List", name: "List", pkg: "", typ: sliceType$3, tag: ""}, {prop: "Closing", name: "Closing", pkg: "", typ: file.Idx, tag: ""}]);
	Property.init([{prop: "Key", name: "Key", pkg: "", typ: $String, tag: ""}, {prop: "Kind", name: "Kind", pkg: "", typ: $String, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: Expression, tag: ""}]);
	RegExpLiteral.init([{prop: "Idx", name: "Idx", pkg: "", typ: file.Idx, tag: ""}, {prop: "Literal", name: "Literal", pkg: "", typ: $String, tag: ""}, {prop: "Pattern", name: "Pattern", pkg: "", typ: $String, tag: ""}, {prop: "Flags", name: "Flags", pkg: "", typ: $String, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: $String, tag: ""}]);
	SequenceExpression.init([{prop: "Sequence", name: "Sequence", pkg: "", typ: sliceType, tag: ""}]);
	StringLiteral.init([{prop: "Idx", name: "Idx", pkg: "", typ: file.Idx, tag: ""}, {prop: "Literal", name: "Literal", pkg: "", typ: $String, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: $String, tag: ""}]);
	ThisExpression.init([{prop: "Idx", name: "Idx", pkg: "", typ: file.Idx, tag: ""}]);
	UnaryExpression.init([{prop: "Operator", name: "Operator", pkg: "", typ: token.Token, tag: ""}, {prop: "Idx", name: "Idx", pkg: "", typ: file.Idx, tag: ""}, {prop: "Operand", name: "Operand", pkg: "", typ: Expression, tag: ""}, {prop: "Postfix", name: "Postfix", pkg: "", typ: $Bool, tag: ""}]);
	VariableExpression.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "Idx", name: "Idx", pkg: "", typ: file.Idx, tag: ""}, {prop: "Initializer", name: "Initializer", pkg: "", typ: Expression, tag: ""}]);
	Statement.init([{prop: "Idx0", name: "Idx0", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "Idx1", name: "Idx1", pkg: "", typ: $funcType([], [file.Idx], false)}, {prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}]);
	BadStatement.init([{prop: "From", name: "From", pkg: "", typ: file.Idx, tag: ""}, {prop: "To", name: "To", pkg: "", typ: file.Idx, tag: ""}]);
	BlockStatement.init([{prop: "LeftBrace", name: "LeftBrace", pkg: "", typ: file.Idx, tag: ""}, {prop: "List", name: "List", pkg: "", typ: sliceType$4, tag: ""}, {prop: "RightBrace", name: "RightBrace", pkg: "", typ: file.Idx, tag: ""}]);
	BranchStatement.init([{prop: "Idx", name: "Idx", pkg: "", typ: file.Idx, tag: ""}, {prop: "Token", name: "Token", pkg: "", typ: token.Token, tag: ""}, {prop: "Label", name: "Label", pkg: "", typ: ptrType$9, tag: ""}]);
	CaseStatement.init([{prop: "Case", name: "Case", pkg: "", typ: file.Idx, tag: ""}, {prop: "Test", name: "Test", pkg: "", typ: Expression, tag: ""}, {prop: "Consequent", name: "Consequent", pkg: "", typ: sliceType$4, tag: ""}]);
	CatchStatement.init([{prop: "Catch", name: "Catch", pkg: "", typ: file.Idx, tag: ""}, {prop: "Parameter", name: "Parameter", pkg: "", typ: ptrType$9, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: Statement, tag: ""}]);
	DebuggerStatement.init([{prop: "Debugger", name: "Debugger", pkg: "", typ: file.Idx, tag: ""}]);
	DoWhileStatement.init([{prop: "Do", name: "Do", pkg: "", typ: file.Idx, tag: ""}, {prop: "Test", name: "Test", pkg: "", typ: Expression, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: Statement, tag: ""}]);
	EmptyStatement.init([{prop: "Semicolon", name: "Semicolon", pkg: "", typ: file.Idx, tag: ""}]);
	ExpressionStatement.init([{prop: "Expression", name: "Expression", pkg: "", typ: Expression, tag: ""}]);
	ForInStatement.init([{prop: "For", name: "For", pkg: "", typ: file.Idx, tag: ""}, {prop: "Into", name: "Into", pkg: "", typ: Expression, tag: ""}, {prop: "Source", name: "Source", pkg: "", typ: Expression, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: Statement, tag: ""}]);
	ForStatement.init([{prop: "For", name: "For", pkg: "", typ: file.Idx, tag: ""}, {prop: "Initializer", name: "Initializer", pkg: "", typ: Expression, tag: ""}, {prop: "Update", name: "Update", pkg: "", typ: Expression, tag: ""}, {prop: "Test", name: "Test", pkg: "", typ: Expression, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: Statement, tag: ""}]);
	IfStatement.init([{prop: "If", name: "If", pkg: "", typ: file.Idx, tag: ""}, {prop: "Test", name: "Test", pkg: "", typ: Expression, tag: ""}, {prop: "Consequent", name: "Consequent", pkg: "", typ: Statement, tag: ""}, {prop: "Alternate", name: "Alternate", pkg: "", typ: Statement, tag: ""}]);
	LabelledStatement.init([{prop: "Label", name: "Label", pkg: "", typ: ptrType$9, tag: ""}, {prop: "Colon", name: "Colon", pkg: "", typ: file.Idx, tag: ""}, {prop: "Statement", name: "Statement", pkg: "", typ: Statement, tag: ""}]);
	ReturnStatement.init([{prop: "Return", name: "Return", pkg: "", typ: file.Idx, tag: ""}, {prop: "Argument", name: "Argument", pkg: "", typ: Expression, tag: ""}]);
	SwitchStatement.init([{prop: "Switch", name: "Switch", pkg: "", typ: file.Idx, tag: ""}, {prop: "Discriminant", name: "Discriminant", pkg: "", typ: Expression, tag: ""}, {prop: "Default", name: "Default", pkg: "", typ: $Int, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: sliceType$5, tag: ""}]);
	ThrowStatement.init([{prop: "Throw", name: "Throw", pkg: "", typ: file.Idx, tag: ""}, {prop: "Argument", name: "Argument", pkg: "", typ: Expression, tag: ""}]);
	TryStatement.init([{prop: "Try", name: "Try", pkg: "", typ: file.Idx, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: Statement, tag: ""}, {prop: "Catch", name: "Catch", pkg: "", typ: ptrType$26, tag: ""}, {prop: "Finally", name: "Finally", pkg: "", typ: Statement, tag: ""}]);
	VariableStatement.init([{prop: "Var", name: "Var", pkg: "", typ: file.Idx, tag: ""}, {prop: "List", name: "List", pkg: "", typ: sliceType, tag: ""}]);
	WhileStatement.init([{prop: "While", name: "While", pkg: "", typ: file.Idx, tag: ""}, {prop: "Test", name: "Test", pkg: "", typ: Expression, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: Statement, tag: ""}]);
	WithStatement.init([{prop: "With", name: "With", pkg: "", typ: file.Idx, tag: ""}, {prop: "Object", name: "Object", pkg: "", typ: Expression, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: Statement, tag: ""}]);
	Declaration.init([{prop: "_declarationNode", name: "_declarationNode", pkg: "github.com/robertkrimen/otto/ast", typ: $funcType([], [], false)}]);
	FunctionDeclaration.init([{prop: "Function", name: "Function", pkg: "", typ: ptrType$11, tag: ""}]);
	VariableDeclaration.init([{prop: "Var", name: "Var", pkg: "", typ: file.Idx, tag: ""}, {prop: "List", name: "List", pkg: "", typ: sliceType$6, tag: ""}]);
	Program.init([{prop: "Body", name: "Body", pkg: "", typ: sliceType$4, tag: ""}, {prop: "DeclarationList", name: "DeclarationList", pkg: "", typ: sliceType$1, tag: ""}, {prop: "File", name: "File", pkg: "", typ: ptrType$44, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = file.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = token.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["log"] = (function() {
	var $pkg = {}, $init, fmt, nosync, io, os, runtime, time, Logger, sliceType, arrayType, ptrType, sliceType$1, ptrType$1, std, New, itoa, Printf, Println, Fatalf, Panicf;
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	time = $packages["time"];
	Logger = $pkg.Logger = $newType(0, $kindStruct, "log.Logger", "Logger", "log", function(mu_, prefix_, flag_, out_, buf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new nosync.Mutex.ptr(false);
			this.prefix = "";
			this.flag = 0;
			this.out = $ifaceNil;
			this.buf = sliceType.nil;
			return;
		}
		this.mu = mu_;
		this.prefix = prefix_;
		this.flag = flag_;
		this.out = out_;
		this.buf = buf_;
	});
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 20);
	ptrType = $ptrType(sliceType);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(Logger);
	New = function(out, prefix, flag) {
		var $ptr, flag, out, prefix;
		return new Logger.ptr(new nosync.Mutex.ptr(false), prefix, flag, out, sliceType.nil);
	};
	$pkg.New = New;
	Logger.ptr.prototype.SetOutput = function(w) {
		var $ptr, l, w, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.out = w;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetOutput = function(w) { return this.$val.SetOutput(w); };
	itoa = function(buf, i, wid) {
		var $ptr, _q, b, bp, buf, i, q, wid;
		b = arrayType.zero();
		bp = 19;
		while (true) {
			if (!(i >= 10 || wid > 1)) { break; }
			wid = wid - (1) >> 0;
			q = (_q = i / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			((bp < 0 || bp >= b.length) ? $throwRuntimeError("index out of range") : b[bp] = (((48 + i >> 0) - ($imul(q, 10)) >> 0) << 24 >>> 24));
			bp = bp - (1) >> 0;
			i = q;
		}
		((bp < 0 || bp >= b.length) ? $throwRuntimeError("index out of range") : b[bp] = ((48 + i >> 0) << 24 >>> 24));
		buf.$set($appendSlice(buf.$get(), $subslice(new sliceType(b), bp)));
	};
	Logger.ptr.prototype.formatHeader = function(buf, t, file, line) {
		var $ptr, _q, _r, _r$1, _tuple, _tuple$1, buf, day, file, hour, i, l, line, min, month, sec, short$1, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; day = $f.day; file = $f.file; hour = $f.hour; i = $f.i; l = $f.l; line = $f.line; min = $f.min; month = $f.month; sec = $f.sec; short$1 = $f.short$1; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(t, time.Time);
		l = this;
		buf.$set($appendSlice(buf.$get(), l.prefix));
		if (!(((l.flag & 32) === 0))) {
			time.Time.copy(t, t.UTC());
		}
		/* */ if (!(((l.flag & 7) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(((l.flag & 7) === 0))) { */ case 1:
			/* */ if (!(((l.flag & 1) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(((l.flag & 1) === 0))) { */ case 3:
				_r = t.Date(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				year = _tuple[0];
				month = _tuple[1];
				day = _tuple[2];
				itoa(buf, year, 4);
				buf.$set($append(buf.$get(), 47));
				itoa(buf, (month >> 0), 2);
				buf.$set($append(buf.$get(), 47));
				itoa(buf, day, 2);
				buf.$set($append(buf.$get(), 32));
			/* } */ case 4:
			/* */ if (!(((l.flag & 6) === 0))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(((l.flag & 6) === 0))) { */ case 6:
				_r$1 = t.Clock(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				hour = _tuple$1[0];
				min = _tuple$1[1];
				sec = _tuple$1[2];
				itoa(buf, hour, 2);
				buf.$set($append(buf.$get(), 58));
				itoa(buf, min, 2);
				buf.$set($append(buf.$get(), 58));
				itoa(buf, sec, 2);
				if (!(((l.flag & 4) === 0))) {
					buf.$set($append(buf.$get(), 46));
					itoa(buf, (_q = t.Nanosecond() / 1000, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), 6);
				}
				buf.$set($append(buf.$get(), 32));
			/* } */ case 7:
		/* } */ case 2:
		if (!(((l.flag & 24) === 0))) {
			if (!(((l.flag & 16) === 0))) {
				short$1 = file;
				i = file.length - 1 >> 0;
				while (true) {
					if (!(i > 0)) { break; }
					if (file.charCodeAt(i) === 47) {
						short$1 = file.substring((i + 1 >> 0));
						break;
					}
					i = i - (1) >> 0;
				}
				file = short$1;
			}
			buf.$set($appendSlice(buf.$get(), file));
			buf.$set($append(buf.$get(), 58));
			itoa(buf, line, -1);
			buf.$set($appendSlice(buf.$get(), ": "));
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.formatHeader }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.day = day; $f.file = file; $f.hour = hour; $f.i = i; $f.l = l; $f.line = line; $f.min = min; $f.month = month; $f.sec = sec; $f.short$1 = short$1; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.formatHeader = function(buf, t, file, line) { return this.$val.formatHeader(buf, t, file, line); };
	Logger.ptr.prototype.Output = function(calldepth, s) {
		var $ptr, _r, _tuple, _tuple$1, calldepth, err, file, l, line, now, ok, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; calldepth = $f.calldepth; err = $f.err; file = $f.file; l = $f.l; line = $f.line; now = $f.now; ok = $f.ok; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		now = $clone(time.Now(), time.Time);
		file = "";
		line = 0;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		if (!(((l.flag & 24) === 0))) {
			l.mu.Unlock();
			ok = false;
			_tuple = runtime.Caller(calldepth);
			file = _tuple[1];
			line = _tuple[2];
			ok = _tuple[3];
			if (!ok) {
				file = "???";
				line = 0;
			}
			l.mu.Lock();
		}
		l.buf = $subslice(l.buf, 0, 0);
		$r = l.formatHeader((l.$ptr_buf || (l.$ptr_buf = new ptrType(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, l))), now, file, line); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		l.buf = $appendSlice(l.buf, s);
		if ((s.length === 0) || !((s.charCodeAt((s.length - 1 >> 0)) === 10))) {
			l.buf = $append(l.buf, 10);
		}
		_r = l.out.Write(l.buf); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		err = _tuple$1[1];
		return err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Output }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.calldepth = calldepth; $f.err = err; $f.file = file; $f.l = l; $f.line = line; $f.now = now; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Logger.prototype.Output = function(calldepth, s) { return this.$val.Output(calldepth, s); };
	Logger.ptr.prototype.Printf = function(format, v) {
		var $ptr, _arg, _r, _r$1, format, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Printf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Printf = function(format, v) { return this.$val.Printf(format, v); };
	Logger.ptr.prototype.Print = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Print }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Print = function(v) { return this.$val.Print(v); };
	Logger.ptr.prototype.Println = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Println }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Println = function(v) { return this.$val.Println(v); };
	Logger.ptr.prototype.Fatal = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatal }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatal = function(v) { return this.$val.Fatal(v); };
	Logger.ptr.prototype.Fatalf = function(format, v) {
		var $ptr, _arg, _r, _r$1, format, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatalf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatalf = function(format, v) { return this.$val.Fatalf(format, v); };
	Logger.ptr.prototype.Fatalln = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatalln }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatalln = function(v) { return this.$val.Fatalln(v); };
	Logger.ptr.prototype.Panic = function(v) {
		var $ptr, _r, _r$1, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panic }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panic = function(v) { return this.$val.Panic(v); };
	Logger.ptr.prototype.Panicf = function(format, v) {
		var $ptr, _r, _r$1, format, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panicf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panicf = function(format, v) { return this.$val.Panicf(format, v); };
	Logger.ptr.prototype.Panicln = function(v) {
		var $ptr, _r, _r$1, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panicln }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panicln = function(v) { return this.$val.Panicln(v); };
	Logger.ptr.prototype.Flags = function() {
		var $ptr, l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		return l.flag;
		/* */ } catch(err) { $err = err; return 0; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.Flags = function() { return this.$val.Flags(); };
	Logger.ptr.prototype.SetFlags = function(flag) {
		var $ptr, flag, l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.flag = flag;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetFlags = function(flag) { return this.$val.SetFlags(flag); };
	Logger.ptr.prototype.Prefix = function() {
		var $ptr, l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		return l.prefix;
		/* */ } catch(err) { $err = err; return ""; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.Prefix = function() { return this.$val.Prefix(); };
	Logger.ptr.prototype.SetPrefix = function(prefix) {
		var $ptr, l, prefix, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.prefix = prefix;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetPrefix = function(prefix) { return this.$val.SetPrefix(prefix); };
	Printf = function(format, v) {
		var $ptr, _arg, _r, _r$1, format, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = std.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Printf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Printf = Printf;
	Println = function(v) {
		var $ptr, _arg, _r, _r$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = std.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Println }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Println = Println;
	Fatalf = function(format, v) {
		var $ptr, _arg, _r, _r$1, format, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = std.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Fatalf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fatalf = Fatalf;
	Panicf = function(format, v) {
		var $ptr, _r, _r$1, format, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; format = $f.format; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = std.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Panicf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Panicf = Panicf;
	ptrType$1.methods = [{prop: "SetOutput", name: "SetOutput", pkg: "", typ: $funcType([io.Writer], [], false)}, {prop: "formatHeader", name: "formatHeader", pkg: "log", typ: $funcType([ptrType, time.Time, $String, $Int], [], false)}, {prop: "Output", name: "Output", pkg: "", typ: $funcType([$Int, $String], [$error], false)}, {prop: "Printf", name: "Printf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Print", name: "Print", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Println", name: "Println", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Fatal", name: "Fatal", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Fatalf", name: "Fatalf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Fatalln", name: "Fatalln", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Panic", name: "Panic", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Panicf", name: "Panicf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Panicln", name: "Panicln", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Flags", name: "Flags", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetFlags", name: "SetFlags", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Prefix", name: "Prefix", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetPrefix", name: "SetPrefix", pkg: "", typ: $funcType([$String], [], false)}];
	Logger.init([{prop: "mu", name: "mu", pkg: "log", typ: nosync.Mutex, tag: ""}, {prop: "prefix", name: "prefix", pkg: "log", typ: $String, tag: ""}, {prop: "flag", name: "flag", pkg: "log", typ: $Int, tag: ""}, {prop: "out", name: "out", pkg: "log", typ: io.Writer, tag: ""}, {prop: "buf", name: "buf", pkg: "log", typ: sliceType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		std = New(os.Stderr, "", 3);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["regexp/syntax"] = (function() {
	var $pkg = {}, $init, bytes, sort, strconv, strings, unicode, utf8, patchList, frag, compiler, Error, ErrorCode, Flags, parser, charGroup, ranges, Prog, InstOp, EmptyOp, Inst, Regexp, Op, sliceType, sliceType$1, sliceType$2, sliceType$3, ptrType, sliceType$4, ptrType$1, sliceType$5, arrayType, arrayType$1, ptrType$2, ptrType$3, sliceType$6, arrayType$2, arrayType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, anyRuneNotNL, anyRune, anyTable, code1, code2, code3, perlGroup, code4, code5, code6, code7, code8, code9, code10, code11, code12, code13, code14, code15, code16, code17, posixGroup, instOpNames, Compile, minFoldRune, repeatIsValid, cleanAlt, literalRegexp, Parse, isValidCaptureName, isCharClass, matchRune, mergeCharClass, unicodeTable, cleanClass, appendLiteral, appendRange, appendFoldedRange, appendClass, appendFoldedClass, appendNegatedClass, appendTable, appendNegatedTable, negateClass, checkUTF8, nextRune, isalnum, unhex, EmptyOpContext, IsWordChar, wordRune, bw, dumpProg, u32, dumpInst, writeRegexp, escape, simplify1;
	bytes = $packages["bytes"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	patchList = $pkg.patchList = $newType(4, $kindUint32, "syntax.patchList", "patchList", "regexp/syntax", null);
	frag = $pkg.frag = $newType(0, $kindStruct, "syntax.frag", "frag", "regexp/syntax", function(i_, out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.i = 0;
			this.out = 0;
			return;
		}
		this.i = i_;
		this.out = out_;
	});
	compiler = $pkg.compiler = $newType(0, $kindStruct, "syntax.compiler", "compiler", "regexp/syntax", function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = ptrType.nil;
			return;
		}
		this.p = p_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "syntax.Error", "Error", "regexp/syntax", function(Code_, Expr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Code = "";
			this.Expr = "";
			return;
		}
		this.Code = Code_;
		this.Expr = Expr_;
	});
	ErrorCode = $pkg.ErrorCode = $newType(8, $kindString, "syntax.ErrorCode", "ErrorCode", "regexp/syntax", null);
	Flags = $pkg.Flags = $newType(2, $kindUint16, "syntax.Flags", "Flags", "regexp/syntax", null);
	parser = $pkg.parser = $newType(0, $kindStruct, "syntax.parser", "parser", "regexp/syntax", function(flags_, stack_, free_, numCap_, wholeRegexp_, tmpClass_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.flags = 0;
			this.stack = sliceType$5.nil;
			this.free = ptrType$1.nil;
			this.numCap = 0;
			this.wholeRegexp = "";
			this.tmpClass = sliceType.nil;
			return;
		}
		this.flags = flags_;
		this.stack = stack_;
		this.free = free_;
		this.numCap = numCap_;
		this.wholeRegexp = wholeRegexp_;
		this.tmpClass = tmpClass_;
	});
	charGroup = $pkg.charGroup = $newType(0, $kindStruct, "syntax.charGroup", "charGroup", "regexp/syntax", function(sign_, class$1_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sign = 0;
			this.class$1 = sliceType.nil;
			return;
		}
		this.sign = sign_;
		this.class$1 = class$1_;
	});
	ranges = $pkg.ranges = $newType(0, $kindStruct, "syntax.ranges", "ranges", "regexp/syntax", function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = ptrType$2.nil;
			return;
		}
		this.p = p_;
	});
	Prog = $pkg.Prog = $newType(0, $kindStruct, "syntax.Prog", "Prog", "regexp/syntax", function(Inst_, Start_, NumCap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Inst = sliceType$4.nil;
			this.Start = 0;
			this.NumCap = 0;
			return;
		}
		this.Inst = Inst_;
		this.Start = Start_;
		this.NumCap = NumCap_;
	});
	InstOp = $pkg.InstOp = $newType(1, $kindUint8, "syntax.InstOp", "InstOp", "regexp/syntax", null);
	EmptyOp = $pkg.EmptyOp = $newType(1, $kindUint8, "syntax.EmptyOp", "EmptyOp", "regexp/syntax", null);
	Inst = $pkg.Inst = $newType(0, $kindStruct, "syntax.Inst", "Inst", "regexp/syntax", function(Op_, Out_, Arg_, Rune_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = 0;
			this.Out = 0;
			this.Arg = 0;
			this.Rune = sliceType.nil;
			return;
		}
		this.Op = Op_;
		this.Out = Out_;
		this.Arg = Arg_;
		this.Rune = Rune_;
	});
	Regexp = $pkg.Regexp = $newType(0, $kindStruct, "syntax.Regexp", "Regexp", "regexp/syntax", function(Op_, Flags_, Sub_, Sub0_, Rune_, Rune0_, Min_, Max_, Cap_, Name_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = 0;
			this.Flags = 0;
			this.Sub = sliceType$5.nil;
			this.Sub0 = arrayType.zero();
			this.Rune = sliceType.nil;
			this.Rune0 = arrayType$1.zero();
			this.Min = 0;
			this.Max = 0;
			this.Cap = 0;
			this.Name = "";
			return;
		}
		this.Op = Op_;
		this.Flags = Flags_;
		this.Sub = Sub_;
		this.Sub0 = Sub0_;
		this.Rune = Rune_;
		this.Rune0 = Rune0_;
		this.Min = Min_;
		this.Max = Max_;
		this.Cap = Cap_;
		this.Name = Name_;
	});
	Op = $pkg.Op = $newType(1, $kindUint8, "syntax.Op", "Op", "regexp/syntax", null);
	sliceType = $sliceType($Int32);
	sliceType$1 = $sliceType(unicode.Range16);
	sliceType$2 = $sliceType(unicode.Range32);
	sliceType$3 = $sliceType($String);
	ptrType = $ptrType(Prog);
	sliceType$4 = $sliceType(Inst);
	ptrType$1 = $ptrType(Regexp);
	sliceType$5 = $sliceType(ptrType$1);
	arrayType = $arrayType(ptrType$1, 1);
	arrayType$1 = $arrayType($Int32, 2);
	ptrType$2 = $ptrType(sliceType);
	ptrType$3 = $ptrType(unicode.RangeTable);
	sliceType$6 = $sliceType($Uint8);
	arrayType$2 = $arrayType($Uint8, 4);
	arrayType$3 = $arrayType($Uint8, 64);
	ptrType$4 = $ptrType(compiler);
	ptrType$5 = $ptrType(Error);
	ptrType$6 = $ptrType(parser);
	ptrType$7 = $ptrType(Inst);
	patchList.prototype.next = function(p) {
		var $ptr, i, l, p, x, x$1;
		l = this.$val;
		i = (x = p.Inst, x$1 = l >>> 1 >>> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		if (((l & 1) >>> 0) === 0) {
			return (i.Out >>> 0);
		}
		return (i.Arg >>> 0);
	};
	$ptrType(patchList).prototype.next = function(p) { return new patchList(this.$get()).next(p); };
	patchList.prototype.patch = function(p, val) {
		var $ptr, i, l, p, val, x, x$1;
		l = this.$val;
		while (true) {
			if (!(!((l === 0)))) { break; }
			i = (x = p.Inst, x$1 = l >>> 1 >>> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
			if (((l & 1) >>> 0) === 0) {
				l = (i.Out >>> 0);
				i.Out = val;
			} else {
				l = (i.Arg >>> 0);
				i.Arg = val;
			}
		}
	};
	$ptrType(patchList).prototype.patch = function(p, val) { return new patchList(this.$get()).patch(p, val); };
	patchList.prototype.append = function(p, l2) {
		var $ptr, i, l1, l2, last, next, p, x, x$1;
		l1 = this.$val;
		if (l1 === 0) {
			return l2;
		}
		if (l2 === 0) {
			return l1;
		}
		last = l1;
		while (true) {
			next = new patchList(last).next(p);
			if (next === 0) {
				break;
			}
			last = next;
		}
		i = (x = p.Inst, x$1 = last >>> 1 >>> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		if (((last & 1) >>> 0) === 0) {
			i.Out = (l2 >>> 0);
		} else {
			i.Arg = (l2 >>> 0);
		}
		return l1;
	};
	$ptrType(patchList).prototype.append = function(p, l2) { return new patchList(this.$get()).append(p, l2); };
	Compile = function(re) {
		var $ptr, c, f, re;
		c = new compiler.ptr(ptrType.nil);
		c.init();
		f = $clone(c.compile(re), frag);
		new patchList(f.out).patch(c.p, c.inst(4).i);
		c.p.Start = (f.i >> 0);
		return [c.p, $ifaceNil];
	};
	$pkg.Compile = Compile;
	compiler.ptr.prototype.init = function() {
		var $ptr, c;
		c = this;
		c.p = new Prog.ptr(sliceType$4.nil, 0, 0);
		c.p.NumCap = 2;
		c.inst(5);
	};
	compiler.prototype.init = function() { return this.$val.init(); };
	compiler.ptr.prototype.compile = function(re) {
		var $ptr, _i, _i$1, _i$2, _ref, _ref$1, _ref$2, _ref$3, bra, c, f, f$1, f$2, f1, i, j, ket, re, sub, sub$1, sub$2, x, x$1, x$2, x$3;
		c = this;
		_ref = re.Op;
		if (_ref === 1) {
			return c.fail();
		} else if (_ref === 2) {
			return c.nop();
		} else if (_ref === 3) {
			if (re.Rune.$length === 0) {
				return c.nop();
			}
			f = new frag.ptr(0, 0);
			_ref$1 = re.Rune;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				j = _i;
				f1 = $clone(c.rune($subslice(re.Rune, j, (j + 1 >> 0)), re.Flags), frag);
				if (j === 0) {
					frag.copy(f, f1);
				} else {
					frag.copy(f, c.cat(f, f1));
				}
				_i++;
			}
			return f;
		} else if (_ref === 4) {
			return c.rune(re.Rune, re.Flags);
		} else if (_ref === 5) {
			return c.rune(anyRuneNotNL, 0);
		} else if (_ref === 6) {
			return c.rune(anyRune, 0);
		} else if (_ref === 7) {
			return c.empty(1);
		} else if (_ref === 8) {
			return c.empty(2);
		} else if (_ref === 9) {
			return c.empty(4);
		} else if (_ref === 10) {
			return c.empty(8);
		} else if (_ref === 11) {
			return c.empty(16);
		} else if (_ref === 12) {
			return c.empty(32);
		} else if (_ref === 13) {
			bra = $clone(c.cap(((re.Cap << 1 >> 0) >>> 0)), frag);
			sub = $clone(c.compile((x = re.Sub, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))), frag);
			ket = $clone(c.cap((((re.Cap << 1 >> 0) | 1) >>> 0)), frag);
			return c.cat(c.cat(bra, sub), ket);
		} else if (_ref === 14) {
			return c.star(c.compile((x$1 = re.Sub, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0]))), !((((re.Flags & 32) >>> 0) === 0)));
		} else if (_ref === 15) {
			return c.plus(c.compile((x$2 = re.Sub, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0]))), !((((re.Flags & 32) >>> 0) === 0)));
		} else if (_ref === 16) {
			return c.quest(c.compile((x$3 = re.Sub, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0]))), !((((re.Flags & 32) >>> 0) === 0)));
		} else if (_ref === 18) {
			if (re.Sub.$length === 0) {
				return c.nop();
			}
			f$1 = new frag.ptr(0, 0);
			_ref$2 = re.Sub;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$2.$length)) { break; }
				i = _i$1;
				sub$1 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]);
				if (i === 0) {
					frag.copy(f$1, c.compile(sub$1));
				} else {
					frag.copy(f$1, c.cat(f$1, c.compile(sub$1)));
				}
				_i$1++;
			}
			return f$1;
		} else if (_ref === 19) {
			f$2 = new frag.ptr(0, 0);
			_ref$3 = re.Sub;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$3.$length)) { break; }
				sub$2 = ((_i$2 < 0 || _i$2 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$2]);
				frag.copy(f$2, c.alt(f$2, c.compile(sub$2)));
				_i$2++;
			}
			return f$2;
		}
		$panic(new $String("regexp: unhandled case in compile"));
	};
	compiler.prototype.compile = function(re) { return this.$val.compile(re); };
	compiler.ptr.prototype.inst = function(op) {
		var $ptr, c, f, op;
		c = this;
		f = new frag.ptr((c.p.Inst.$length >>> 0), 0);
		c.p.Inst = $append(c.p.Inst, new Inst.ptr(op, 0, 0, sliceType.nil));
		return f;
	};
	compiler.prototype.inst = function(op) { return this.$val.inst(op); };
	compiler.ptr.prototype.nop = function() {
		var $ptr, c, f;
		c = this;
		f = $clone(c.inst(6), frag);
		f.out = ((f.i << 1 >>> 0) >>> 0);
		return f;
	};
	compiler.prototype.nop = function() { return this.$val.nop(); };
	compiler.ptr.prototype.fail = function() {
		var $ptr, c;
		c = this;
		return new frag.ptr(0, 0);
	};
	compiler.prototype.fail = function() { return this.$val.fail(); };
	compiler.ptr.prototype.cap = function(arg) {
		var $ptr, arg, c, f, x, x$1;
		c = this;
		f = $clone(c.inst(2), frag);
		f.out = ((f.i << 1 >>> 0) >>> 0);
		(x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).Arg = arg;
		if (c.p.NumCap < ((arg >> 0) + 1 >> 0)) {
			c.p.NumCap = (arg >> 0) + 1 >> 0;
		}
		return f;
	};
	compiler.prototype.cap = function(arg) { return this.$val.cap(arg); };
	compiler.ptr.prototype.cat = function(f1, f2) {
		var $ptr, c, f1, f2;
		f2 = $clone(f2, frag);
		f1 = $clone(f1, frag);
		c = this;
		if ((f1.i === 0) || (f2.i === 0)) {
			return new frag.ptr(0, 0);
		}
		new patchList(f1.out).patch(c.p, f2.i);
		return new frag.ptr(f1.i, f2.out);
	};
	compiler.prototype.cat = function(f1, f2) { return this.$val.cat(f1, f2); };
	compiler.ptr.prototype.alt = function(f1, f2) {
		var $ptr, c, f, f1, f2, i, x, x$1;
		f2 = $clone(f2, frag);
		f1 = $clone(f1, frag);
		c = this;
		if (f1.i === 0) {
			return f2;
		}
		if (f2.i === 0) {
			return f1;
		}
		f = $clone(c.inst(0), frag);
		i = (x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		i.Out = f1.i;
		i.Arg = f2.i;
		f.out = new patchList(f1.out).append(c.p, f2.out);
		return f;
	};
	compiler.prototype.alt = function(f1, f2) { return this.$val.alt(f1, f2); };
	compiler.ptr.prototype.quest = function(f1, nongreedy) {
		var $ptr, c, f, f1, i, nongreedy, x, x$1;
		f1 = $clone(f1, frag);
		c = this;
		f = $clone(c.inst(0), frag);
		i = (x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		if (nongreedy) {
			i.Arg = f1.i;
			f.out = ((f.i << 1 >>> 0) >>> 0);
		} else {
			i.Out = f1.i;
			f.out = ((((f.i << 1 >>> 0) | 1) >>> 0) >>> 0);
		}
		f.out = new patchList(f.out).append(c.p, f1.out);
		return f;
	};
	compiler.prototype.quest = function(f1, nongreedy) { return this.$val.quest(f1, nongreedy); };
	compiler.ptr.prototype.star = function(f1, nongreedy) {
		var $ptr, c, f, f1, i, nongreedy, x, x$1;
		f1 = $clone(f1, frag);
		c = this;
		f = $clone(c.inst(0), frag);
		i = (x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		if (nongreedy) {
			i.Arg = f1.i;
			f.out = ((f.i << 1 >>> 0) >>> 0);
		} else {
			i.Out = f1.i;
			f.out = ((((f.i << 1 >>> 0) | 1) >>> 0) >>> 0);
		}
		new patchList(f1.out).patch(c.p, f.i);
		return f;
	};
	compiler.prototype.star = function(f1, nongreedy) { return this.$val.star(f1, nongreedy); };
	compiler.ptr.prototype.plus = function(f1, nongreedy) {
		var $ptr, c, f1, nongreedy;
		f1 = $clone(f1, frag);
		c = this;
		return new frag.ptr(f1.i, c.star(f1, nongreedy).out);
	};
	compiler.prototype.plus = function(f1, nongreedy) { return this.$val.plus(f1, nongreedy); };
	compiler.ptr.prototype.empty = function(op) {
		var $ptr, c, f, op, x, x$1;
		c = this;
		f = $clone(c.inst(3), frag);
		(x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).Arg = (op >>> 0);
		f.out = ((f.i << 1 >>> 0) >>> 0);
		return f;
	};
	compiler.prototype.empty = function(op) { return this.$val.empty(op); };
	compiler.ptr.prototype.rune = function(r, flags) {
		var $ptr, c, f, flags, i, r, x, x$1;
		c = this;
		f = $clone(c.inst(7), frag);
		i = (x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		i.Rune = r;
		flags = (flags & (1)) >>> 0;
		if (!((r.$length === 1)) || (unicode.SimpleFold((0 >= r.$length ? $throwRuntimeError("index out of range") : r.$array[r.$offset + 0])) === (0 >= r.$length ? $throwRuntimeError("index out of range") : r.$array[r.$offset + 0]))) {
			flags = (flags & ~(1)) << 16 >>> 16;
		}
		i.Arg = (flags >>> 0);
		f.out = ((f.i << 1 >>> 0) >>> 0);
		if ((((flags & 1) >>> 0) === 0) && ((r.$length === 1) || (r.$length === 2) && ((0 >= r.$length ? $throwRuntimeError("index out of range") : r.$array[r.$offset + 0]) === (1 >= r.$length ? $throwRuntimeError("index out of range") : r.$array[r.$offset + 1])))) {
			i.Op = 8;
		} else if ((r.$length === 2) && ((0 >= r.$length ? $throwRuntimeError("index out of range") : r.$array[r.$offset + 0]) === 0) && ((1 >= r.$length ? $throwRuntimeError("index out of range") : r.$array[r.$offset + 1]) === 1114111)) {
			i.Op = 9;
		} else if ((r.$length === 4) && ((0 >= r.$length ? $throwRuntimeError("index out of range") : r.$array[r.$offset + 0]) === 0) && ((1 >= r.$length ? $throwRuntimeError("index out of range") : r.$array[r.$offset + 1]) === 9) && ((2 >= r.$length ? $throwRuntimeError("index out of range") : r.$array[r.$offset + 2]) === 11) && ((3 >= r.$length ? $throwRuntimeError("index out of range") : r.$array[r.$offset + 3]) === 1114111)) {
			i.Op = 10;
		}
		return f;
	};
	compiler.prototype.rune = function(r, flags) { return this.$val.rune(r, flags); };
	Error.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "error parsing regexp: " + new ErrorCode(e.Code).String() + ": `" + e.Expr + "`";
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	ErrorCode.prototype.String = function() {
		var $ptr, e;
		e = this.$val;
		return e;
	};
	$ptrType(ErrorCode).prototype.String = function() { return new ErrorCode(this.$get()).String(); };
	parser.ptr.prototype.newRegexp = function(op) {
		var $ptr, op, p, re;
		p = this;
		re = p.free;
		if (!(re === ptrType$1.nil)) {
			p.free = re.Sub0[0];
			Regexp.copy(re, new Regexp.ptr(0, 0, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, ""));
		} else {
			re = new Regexp.ptr(0, 0, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, "");
		}
		re.Op = op;
		return re;
	};
	parser.prototype.newRegexp = function(op) { return this.$val.newRegexp(op); };
	parser.ptr.prototype.reuse = function(re) {
		var $ptr, p, re;
		p = this;
		re.Sub0[0] = p.free;
		p.free = re;
	};
	parser.prototype.reuse = function(re) { return this.$val.reuse(re); };
	parser.ptr.prototype.push = function(re) {
		var $ptr, p, re, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		p = this;
		if ((re.Op === 4) && (re.Rune.$length === 2) && ((x = re.Rune, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])) === (x$1 = re.Rune, (1 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 1])))) {
			if (p.maybeConcat((x$16 = re.Rune, (0 >= x$16.$length ? $throwRuntimeError("index out of range") : x$16.$array[x$16.$offset + 0])), (p.flags & ~1) << 16 >>> 16)) {
				return ptrType$1.nil;
			}
			re.Op = 3;
			re.Rune = $subslice(re.Rune, 0, 1);
			re.Flags = (p.flags & ~1) << 16 >>> 16;
		} else if ((re.Op === 4) && (re.Rune.$length === 4) && ((x$2 = re.Rune, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])) === (x$3 = re.Rune, (1 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 1]))) && ((x$4 = re.Rune, (2 >= x$4.$length ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 2])) === (x$5 = re.Rune, (3 >= x$5.$length ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + 3]))) && (unicode.SimpleFold((x$6 = re.Rune, (0 >= x$6.$length ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + 0]))) === (x$7 = re.Rune, (2 >= x$7.$length ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + 2]))) && (unicode.SimpleFold((x$8 = re.Rune, (2 >= x$8.$length ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + 2]))) === (x$9 = re.Rune, (0 >= x$9.$length ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + 0]))) || (re.Op === 4) && (re.Rune.$length === 2) && (((x$10 = re.Rune, (0 >= x$10.$length ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + 0])) + 1 >> 0) === (x$11 = re.Rune, (1 >= x$11.$length ? $throwRuntimeError("index out of range") : x$11.$array[x$11.$offset + 1]))) && (unicode.SimpleFold((x$12 = re.Rune, (0 >= x$12.$length ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + 0]))) === (x$13 = re.Rune, (1 >= x$13.$length ? $throwRuntimeError("index out of range") : x$13.$array[x$13.$offset + 1]))) && (unicode.SimpleFold((x$14 = re.Rune, (1 >= x$14.$length ? $throwRuntimeError("index out of range") : x$14.$array[x$14.$offset + 1]))) === (x$15 = re.Rune, (0 >= x$15.$length ? $throwRuntimeError("index out of range") : x$15.$array[x$15.$offset + 0])))) {
			if (p.maybeConcat((x$17 = re.Rune, (0 >= x$17.$length ? $throwRuntimeError("index out of range") : x$17.$array[x$17.$offset + 0])), (p.flags | 1) >>> 0)) {
				return ptrType$1.nil;
			}
			re.Op = 3;
			re.Rune = $subslice(re.Rune, 0, 1);
			re.Flags = (p.flags | 1) >>> 0;
		} else {
			p.maybeConcat(-1, 0);
		}
		p.stack = $append(p.stack, re);
		return re;
	};
	parser.prototype.push = function(re) { return this.$val.push(re); };
	parser.ptr.prototype.maybeConcat = function(r, flags) {
		var $ptr, flags, n, p, r, re1, re2, x, x$1, x$2, x$3, x$4;
		p = this;
		n = p.stack.$length;
		if (n < 2) {
			return false;
		}
		re1 = (x = p.stack, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		re2 = (x$2 = p.stack, x$3 = n - 2 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3]));
		if (!((re1.Op === 3)) || !((re2.Op === 3)) || !((((re1.Flags & 1) >>> 0) === ((re2.Flags & 1) >>> 0)))) {
			return false;
		}
		re2.Rune = $appendSlice(re2.Rune, re1.Rune);
		if (r >= 0) {
			re1.Rune = $subslice(new sliceType(re1.Rune0), 0, 1);
			(x$4 = re1.Rune, (0 >= x$4.$length ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 0] = r));
			re1.Flags = flags;
			return true;
		}
		p.stack = $subslice(p.stack, 0, (n - 1 >> 0));
		p.reuse(re1);
		return false;
	};
	parser.prototype.maybeConcat = function(r, flags) { return this.$val.maybeConcat(r, flags); };
	parser.ptr.prototype.newLiteral = function(r, flags) {
		var $ptr, flags, p, r, re;
		p = this;
		re = p.newRegexp(3);
		re.Flags = flags;
		if (!((((flags & 1) >>> 0) === 0))) {
			r = minFoldRune(r);
		}
		re.Rune0[0] = r;
		re.Rune = $subslice(new sliceType(re.Rune0), 0, 1);
		return re;
	};
	parser.prototype.newLiteral = function(r, flags) { return this.$val.newLiteral(r, flags); };
	minFoldRune = function(r) {
		var $ptr, min, r, r0;
		if (r < 65 || r > 71903) {
			return r;
		}
		min = r;
		r0 = r;
		r = unicode.SimpleFold(r);
		while (true) {
			if (!(!((r === r0)))) { break; }
			if (min > r) {
				min = r;
			}
			r = unicode.SimpleFold(r);
		}
		return min;
	};
	parser.ptr.prototype.literal = function(r) {
		var $ptr, p, r;
		p = this;
		p.push(p.newLiteral(r, p.flags));
	};
	parser.prototype.literal = function(r) { return this.$val.literal(r); };
	parser.ptr.prototype.op = function(op) {
		var $ptr, op, p, re;
		p = this;
		re = p.newRegexp(op);
		re.Flags = p.flags;
		return p.push(re);
	};
	parser.prototype.op = function(op) { return this.$val.op(op); };
	parser.ptr.prototype.repeat = function(op, min, max, before, after, lastRepeat) {
		var $ptr, after, before, flags, lastRepeat, max, min, n, op, p, re, sub, x, x$1, x$2, x$3, x$4;
		p = this;
		flags = p.flags;
		if (!((((p.flags & 64) >>> 0) === 0))) {
			if (after.length > 0 && (after.charCodeAt(0) === 63)) {
				after = after.substring(1);
				flags = (flags ^ (32)) << 16 >>> 16;
			}
			if (!(lastRepeat === "")) {
				return ["", new Error.ptr("invalid nested repetition operator", lastRepeat.substring(0, (lastRepeat.length - after.length >> 0)))];
			}
		}
		n = p.stack.$length;
		if (n === 0) {
			return ["", new Error.ptr("missing argument to repetition operator", before.substring(0, (before.length - after.length >> 0)))];
		}
		sub = (x = p.stack, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		if (sub.Op >= 128) {
			return ["", new Error.ptr("missing argument to repetition operator", before.substring(0, (before.length - after.length >> 0)))];
		}
		re = p.newRegexp(op);
		re.Min = min;
		re.Max = max;
		re.Flags = flags;
		re.Sub = $subslice(new sliceType$5(re.Sub0), 0, 1);
		(x$2 = re.Sub, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0] = sub));
		(x$3 = p.stack, x$4 = n - 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + x$4] = re));
		if ((op === 17) && (min >= 2 || max >= 2) && !repeatIsValid(re, 1000)) {
			return ["", new Error.ptr("invalid repeat count", before.substring(0, (before.length - after.length >> 0)))];
		}
		return [after, $ifaceNil];
	};
	parser.prototype.repeat = function(op, min, max, before, after, lastRepeat) { return this.$val.repeat(op, min, max, before, after, lastRepeat); };
	repeatIsValid = function(re, n) {
		var $ptr, _i, _q, _ref, m, n, re, sub;
		if (re.Op === 17) {
			m = re.Max;
			if (m === 0) {
				return true;
			}
			if (m < 0) {
				m = re.Min;
			}
			if (m > n) {
				return false;
			}
			if (m > 0) {
				n = (_q = n / (m), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			}
		}
		_ref = re.Sub;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sub = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!repeatIsValid(sub, n)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	parser.ptr.prototype.concat = function() {
		var $ptr, _r, _r$1, i, p, subs, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; i = $f.i; p = $f.p; subs = $f.subs; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.maybeConcat(-1, 0);
		i = p.stack.$length;
		while (true) {
			if (!(i > 0 && (x = p.stack, x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).Op < 128)) { break; }
			i = i - (1) >> 0;
		}
		subs = $subslice(p.stack, i);
		p.stack = $subslice(p.stack, 0, i);
		if (subs.$length === 0) {
			return p.push(p.newRegexp(2));
		}
		_r = p.collapse(subs, 18); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = p.push(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.concat }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.p = p; $f.subs = subs; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.concat = function() { return this.$val.concat(); };
	parser.ptr.prototype.alternate = function() {
		var $ptr, _r, _r$1, i, p, subs, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; i = $f.i; p = $f.p; subs = $f.subs; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		i = p.stack.$length;
		while (true) {
			if (!(i > 0 && (x = p.stack, x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).Op < 128)) { break; }
			i = i - (1) >> 0;
		}
		subs = $subslice(p.stack, i);
		p.stack = $subslice(p.stack, 0, i);
		/* */ if (subs.$length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (subs.$length > 0) { */ case 1:
			$r = cleanAlt((x$2 = subs.$length - 1 >> 0, ((x$2 < 0 || x$2 >= subs.$length) ? $throwRuntimeError("index out of range") : subs.$array[subs.$offset + x$2]))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (subs.$length === 0) {
			return p.push(p.newRegexp(1));
		}
		_r = p.collapse(subs, 19); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = p.push(_r); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.alternate }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.p = p; $f.subs = subs; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.alternate = function() { return this.$val.alternate(); };
	cleanAlt = function(re) {
		var $ptr, _r, _ref, re, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; re = $f.re; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = re.Op;
		/* */ if (_ref === 4) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_ref === 4) { */ case 1:
			_r = cleanClass((re.$ptr_Rune || (re.$ptr_Rune = new ptrType$2(function() { return this.$target.Rune; }, function($v) { this.$target.Rune = $v; }, re)))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			re.Rune = _r;
			if ((re.Rune.$length === 2) && ((x = re.Rune, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])) === 0) && ((x$1 = re.Rune, (1 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 1])) === 1114111)) {
				re.Rune = sliceType.nil;
				re.Op = 6;
				return;
			}
			if ((re.Rune.$length === 4) && ((x$2 = re.Rune, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])) === 0) && ((x$3 = re.Rune, (1 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 1])) === 9) && ((x$4 = re.Rune, (2 >= x$4.$length ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 2])) === 11) && ((x$5 = re.Rune, (3 >= x$5.$length ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + 3])) === 1114111)) {
				re.Rune = sliceType.nil;
				re.Op = 5;
				return;
			}
			if ((re.Rune.$capacity - re.Rune.$length >> 0) > 100) {
				re.Rune = $appendSlice($subslice(new sliceType(re.Rune0), 0, 0), re.Rune);
			}
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cleanAlt }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.re = re; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.ptr.prototype.collapse = function(subs, op) {
		var $ptr, _i, _r, _ref, old, op, p, re, sub, subs, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; old = $f.old; op = $f.op; p = $f.p; re = $f.re; sub = $f.sub; subs = $f.subs; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (subs.$length === 1) {
			return (0 >= subs.$length ? $throwRuntimeError("index out of range") : subs.$array[subs.$offset + 0]);
		}
		re = p.newRegexp(op);
		re.Sub = $subslice(new sliceType$5(re.Sub0), 0, 0);
		_ref = subs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sub = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (sub.Op === op) {
				re.Sub = $appendSlice(re.Sub, sub.Sub);
				p.reuse(sub);
			} else {
				re.Sub = $append(re.Sub, sub);
			}
			_i++;
		}
		/* */ if (op === 19) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (op === 19) { */ case 1:
			_r = p.factor(re.Sub, re.Flags); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			re.Sub = _r;
			if (re.Sub.$length === 1) {
				old = re;
				re = (x = re.Sub, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
				p.reuse(old);
			}
		/* } */ case 2:
		return re;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.collapse }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.old = old; $f.op = op; $f.p = p; $f.re = re; $f.sub = sub; $f.subs = subs; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.collapse = function(subs, op) { return this.$val.collapse(subs, op); };
	parser.ptr.prototype.factor = function(sub, flags) {
		var $ptr, _i, _r, _r$1, _ref, _tmp, _tmp$1, _tuple, first, flags, i, i$1, i$2, i$3, ifirst, iflags, istr, j, j$1, j$2, j$3, max, out, p, prefix, prefix$1, re, re$1, reuse, same, start, str, strflags, sub, suffix, suffix$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; first = $f.first; flags = $f.flags; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; ifirst = $f.ifirst; iflags = $f.iflags; istr = $f.istr; j = $f.j; j$1 = $f.j$1; j$2 = $f.j$2; j$3 = $f.j$3; max = $f.max; out = $f.out; p = $f.p; prefix = $f.prefix; prefix$1 = $f.prefix$1; re = $f.re; re$1 = $f.re$1; reuse = $f.reuse; same = $f.same; start = $f.start; str = $f.str; strflags = $f.strflags; sub = $f.sub; suffix = $f.suffix; suffix$1 = $f.suffix$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (sub.$length < 2) {
			return sub;
		}
		str = sliceType.nil;
		strflags = 0;
		start = 0;
		out = $subslice(sub, 0, 0);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i <= sub.$length)) { break; } */ if(!(i <= sub.$length)) { $s = 2; continue; }
			istr = sliceType.nil;
			iflags = 0;
			/* */ if (i < sub.$length) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i < sub.$length) { */ case 3:
				_tuple = p.leadingString(((i < 0 || i >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + i]));
				istr = _tuple[0];
				iflags = _tuple[1];
				if (iflags === strflags) {
					same = 0;
					while (true) {
						if (!(same < str.$length && same < istr.$length && (((same < 0 || same >= str.$length) ? $throwRuntimeError("index out of range") : str.$array[str.$offset + same]) === ((same < 0 || same >= istr.$length) ? $throwRuntimeError("index out of range") : istr.$array[istr.$offset + same])))) { break; }
						same = same + (1) >> 0;
					}
					if (same > 0) {
						str = $subslice(str, 0, same);
						i = i + (1) >> 0;
						/* continue; */ $s = 1; continue;
					}
				}
			/* } */ case 4:
			/* */ if (i === start) { $s = 5; continue; }
			/* */ if (i === (start + 1 >> 0)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (i === start) { */ case 5:
				$s = 8; continue;
			/* } else if (i === (start + 1 >> 0)) { */ case 6:
				out = $append(out, ((start < 0 || start >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + start]));
				$s = 8; continue;
			/* } else { */ case 7:
				prefix = p.newRegexp(3);
				prefix.Flags = strflags;
				prefix.Rune = $appendSlice($subslice(prefix.Rune, 0, 0), str);
				j = start;
				while (true) {
					if (!(j < i)) { break; }
					((j < 0 || j >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + j] = p.removeLeadingString(((j < 0 || j >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + j]), str.$length));
					j = j + (1) >> 0;
				}
				_r = p.collapse($subslice(sub, start, i), 19); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				suffix = _r;
				re = p.newRegexp(18);
				re.Sub = $append($subslice(re.Sub, 0, 0), prefix, suffix);
				out = $append(out, re);
			/* } */ case 8:
			start = i;
			str = istr;
			strflags = iflags;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		sub = out;
		start = 0;
		out = $subslice(sub, 0, 0);
		first = ptrType$1.nil;
		i$1 = 0;
		/* while (true) { */ case 10:
			/* if (!(i$1 <= sub.$length)) { break; } */ if(!(i$1 <= sub.$length)) { $s = 11; continue; }
			ifirst = ptrType$1.nil;
			/* */ if (i$1 < sub.$length) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (i$1 < sub.$length) { */ case 12:
				ifirst = p.leadingRegexp(((i$1 < 0 || i$1 >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + i$1]));
				if (!(first === ptrType$1.nil) && first.Equal(ifirst)) {
					i$1 = i$1 + (1) >> 0;
					/* continue; */ $s = 10; continue;
				}
			/* } */ case 13:
			/* */ if (i$1 === start) { $s = 14; continue; }
			/* */ if (i$1 === (start + 1 >> 0)) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (i$1 === start) { */ case 14:
				$s = 17; continue;
			/* } else if (i$1 === (start + 1 >> 0)) { */ case 15:
				out = $append(out, ((start < 0 || start >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + start]));
				$s = 17; continue;
			/* } else { */ case 16:
				prefix$1 = first;
				j$1 = start;
				while (true) {
					if (!(j$1 < i$1)) { break; }
					reuse = !((j$1 === start));
					((j$1 < 0 || j$1 >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + j$1] = p.removeLeadingRegexp(((j$1 < 0 || j$1 >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + j$1]), reuse));
					j$1 = j$1 + (1) >> 0;
				}
				_r$1 = p.collapse($subslice(sub, start, i$1), 19); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				suffix$1 = _r$1;
				re$1 = p.newRegexp(18);
				re$1.Sub = $append($subslice(re$1.Sub, 0, 0), prefix$1, suffix$1);
				out = $append(out, re$1);
			/* } */ case 17:
			start = i$1;
			first = ifirst;
			i$1 = i$1 + (1) >> 0;
		/* } */ $s = 10; continue; case 11:
		sub = out;
		start = 0;
		out = $subslice(sub, 0, 0);
		i$2 = 0;
		/* while (true) { */ case 19:
			/* if (!(i$2 <= sub.$length)) { break; } */ if(!(i$2 <= sub.$length)) { $s = 20; continue; }
			/* */ if (i$2 < sub.$length && isCharClass(((i$2 < 0 || i$2 >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + i$2]))) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (i$2 < sub.$length && isCharClass(((i$2 < 0 || i$2 >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + i$2]))) { */ case 21:
				i$2 = i$2 + (1) >> 0;
				/* continue; */ $s = 19; continue;
			/* } */ case 22:
			/* */ if (i$2 === start) { $s = 23; continue; }
			/* */ if (i$2 === (start + 1 >> 0)) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (i$2 === start) { */ case 23:
				$s = 26; continue;
			/* } else if (i$2 === (start + 1 >> 0)) { */ case 24:
				out = $append(out, ((start < 0 || start >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + start]));
				$s = 26; continue;
			/* } else { */ case 25:
				max = start;
				j$2 = start + 1 >> 0;
				while (true) {
					if (!(j$2 < i$2)) { break; }
					if (((max < 0 || max >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + max]).Op < ((j$2 < 0 || j$2 >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + j$2]).Op || (((max < 0 || max >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + max]).Op === ((j$2 < 0 || j$2 >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + j$2]).Op) && ((max < 0 || max >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + max]).Rune.$length < ((j$2 < 0 || j$2 >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + j$2]).Rune.$length) {
						max = j$2;
					}
					j$2 = j$2 + (1) >> 0;
				}
				_tmp = ((max < 0 || max >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + max]);
				_tmp$1 = ((start < 0 || start >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + start]);
				((start < 0 || start >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + start] = _tmp);
				((max < 0 || max >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + max] = _tmp$1);
				j$3 = start + 1 >> 0;
				while (true) {
					if (!(j$3 < i$2)) { break; }
					mergeCharClass(((start < 0 || start >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + start]), ((j$3 < 0 || j$3 >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + j$3]));
					p.reuse(((j$3 < 0 || j$3 >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + j$3]));
					j$3 = j$3 + (1) >> 0;
				}
				$r = cleanAlt(((start < 0 || start >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + start])); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				out = $append(out, ((start < 0 || start >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + start]));
			/* } */ case 26:
			if (i$2 < sub.$length) {
				out = $append(out, ((i$2 < 0 || i$2 >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + i$2]));
			}
			start = i$2 + 1 >> 0;
			i$2 = i$2 + (1) >> 0;
		/* } */ $s = 19; continue; case 20:
		sub = out;
		start = 0;
		out = $subslice(sub, 0, 0);
		_ref = sub;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$3 = _i;
			if ((i$3 + 1 >> 0) < sub.$length && (((i$3 < 0 || i$3 >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + i$3]).Op === 2) && ((x = i$3 + 1 >> 0, ((x < 0 || x >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + x])).Op === 2)) {
				_i++;
				continue;
			}
			out = $append(out, ((i$3 < 0 || i$3 >= sub.$length) ? $throwRuntimeError("index out of range") : sub.$array[sub.$offset + i$3]));
			_i++;
		}
		sub = out;
		return sub;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.factor }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.first = first; $f.flags = flags; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.ifirst = ifirst; $f.iflags = iflags; $f.istr = istr; $f.j = j; $f.j$1 = j$1; $f.j$2 = j$2; $f.j$3 = j$3; $f.max = max; $f.out = out; $f.p = p; $f.prefix = prefix; $f.prefix$1 = prefix$1; $f.re = re; $f.re$1 = re$1; $f.reuse = reuse; $f.same = same; $f.start = start; $f.str = str; $f.strflags = strflags; $f.sub = sub; $f.suffix = suffix; $f.suffix$1 = suffix$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.factor = function(sub, flags) { return this.$val.factor(sub, flags); };
	parser.ptr.prototype.leadingString = function(re) {
		var $ptr, p, re, x;
		p = this;
		if ((re.Op === 18) && re.Sub.$length > 0) {
			re = (x = re.Sub, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		}
		if (!((re.Op === 3))) {
			return [sliceType.nil, 0];
		}
		return [re.Rune, (re.Flags & 1) >>> 0];
	};
	parser.prototype.leadingString = function(re) { return this.$val.leadingString(re); };
	parser.ptr.prototype.removeLeadingString = function(re, n) {
		var $ptr, _ref, n, old, p, re, sub, x, x$1, x$2;
		p = this;
		if ((re.Op === 18) && re.Sub.$length > 0) {
			sub = (x = re.Sub, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
			sub = p.removeLeadingString(sub, n);
			(x$1 = re.Sub, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0] = sub));
			if (sub.Op === 2) {
				p.reuse(sub);
				_ref = re.Sub.$length;
				if (_ref === 0 || _ref === 1) {
					re.Op = 2;
					re.Sub = sliceType$5.nil;
				} else if (_ref === 2) {
					old = re;
					re = (x$2 = re.Sub, (1 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 1]));
					p.reuse(old);
				} else {
					$copySlice(re.Sub, $subslice(re.Sub, 1));
					re.Sub = $subslice(re.Sub, 0, (re.Sub.$length - 1 >> 0));
				}
			}
			return re;
		}
		if (re.Op === 3) {
			re.Rune = $subslice(re.Rune, 0, $copySlice(re.Rune, $subslice(re.Rune, n)));
			if (re.Rune.$length === 0) {
				re.Op = 2;
			}
		}
		return re;
	};
	parser.prototype.removeLeadingString = function(re, n) { return this.$val.removeLeadingString(re, n); };
	parser.ptr.prototype.leadingRegexp = function(re) {
		var $ptr, p, re, sub, x;
		p = this;
		if (re.Op === 2) {
			return ptrType$1.nil;
		}
		if ((re.Op === 18) && re.Sub.$length > 0) {
			sub = (x = re.Sub, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
			if (sub.Op === 2) {
				return ptrType$1.nil;
			}
			return sub;
		}
		return re;
	};
	parser.prototype.leadingRegexp = function(re) { return this.$val.leadingRegexp(re); };
	parser.ptr.prototype.removeLeadingRegexp = function(re, reuse) {
		var $ptr, _ref, old, p, re, reuse, x, x$1;
		p = this;
		if ((re.Op === 18) && re.Sub.$length > 0) {
			if (reuse) {
				p.reuse((x = re.Sub, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])));
			}
			re.Sub = $subslice(re.Sub, 0, $copySlice(re.Sub, $subslice(re.Sub, 1)));
			_ref = re.Sub.$length;
			if (_ref === 0) {
				re.Op = 2;
				re.Sub = sliceType$5.nil;
			} else if (_ref === 1) {
				old = re;
				re = (x$1 = re.Sub, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0]));
				p.reuse(old);
			}
			return re;
		}
		if (reuse) {
			p.reuse(re);
		}
		return p.newRegexp(2);
	};
	parser.prototype.removeLeadingRegexp = function(re, reuse) { return this.$val.removeLeadingRegexp(re, reuse); };
	literalRegexp = function(s, flags) {
		var $ptr, _i, _ref, _rune, c, flags, re, s;
		re = new Regexp.ptr(3, 0, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, "");
		re.Flags = flags;
		re.Rune = $subslice(new sliceType(re.Rune0), 0, 0);
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (re.Rune.$length >= re.Rune.$capacity) {
				re.Rune = new sliceType($stringToRunes(s));
				break;
			}
			re.Rune = $append(re.Rune, c);
			_i += _rune[1];
		}
		return re;
	};
	Parse = function(s, flags) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _ref$1, _ref$2, _struct, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, after, after$1, before, before$1, c, err, err$1, err$2, flags, i, lastRepeat, lit, max, min, n, ok, op, p, r, r$1, re, repeat, rest, rest$1, s, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _struct = $f._struct; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; after = $f.after; after$1 = $f.after$1; before = $f.before; before$1 = $f.before$1; c = $f.c; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; flags = $f.flags; i = $f.i; lastRepeat = $f.lastRepeat; lit = $f.lit; max = $f.max; min = $f.min; n = $f.n; ok = $f.ok; op = $f.op; p = $f.p; r = $f.r; r$1 = $f.r$1; re = $f.re; repeat = $f.repeat; rest = $f.rest; rest$1 = $f.rest$1; s = $f.s; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!((((flags & 2) >>> 0) === 0))) {
			err = checkUTF8(s);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ptrType$1.nil, err];
			}
			return [literalRegexp(s, flags), $ifaceNil];
		}
		p = new parser.ptr(0, sliceType$5.nil, ptrType$1.nil, 0, "", sliceType.nil);
		err$1 = $ifaceNil;
		c = 0;
		op = 0;
		lastRepeat = "";
		p.flags = flags;
		p.wholeRegexp = s;
		t = s;
		/* while (true) { */ case 1:
			/* if (!(!(t === ""))) { break; } */ if(!(!(t === ""))) { $s = 2; continue; }
			repeat = "";
			_ref = t.charCodeAt(0);
			/* */ if (_ref === 40) { $s = 3; continue; }
			/* */ if (_ref === 124) { $s = 4; continue; }
			/* */ if (_ref === 41) { $s = 5; continue; }
			/* */ if (_ref === 94) { $s = 6; continue; }
			/* */ if (_ref === 36) { $s = 7; continue; }
			/* */ if (_ref === 46) { $s = 8; continue; }
			/* */ if (_ref === 91) { $s = 9; continue; }
			/* */ if (_ref === 42 || _ref === 43 || _ref === 63) { $s = 10; continue; }
			/* */ if (_ref === 123) { $s = 11; continue; }
			/* */ if (_ref === 92) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* switch (0) { default: if (_ref === 40) { */ case 3:
				if (!((((p.flags & 64) >>> 0) === 0)) && t.length >= 2 && (t.charCodeAt(1) === 63)) {
					_tuple = p.parsePerlFlags(t);
					t = _tuple[0];
					err$1 = _tuple[1];
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						return [ptrType$1.nil, err$1];
					}
					/* break; */ $s = 14; continue;
				}
				p.numCap = p.numCap + (1) >> 0;
				p.op(128).Cap = p.numCap;
				t = t.substring(1);
				$s = 14; continue;
			/* } else if (_ref === 124) { */ case 4:
				_r = p.parseVerticalBar(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				err$1 = _r;
				/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 16:
					return [ptrType$1.nil, err$1];
				/* } */ case 17:
				t = t.substring(1);
				$s = 14; continue;
			/* } else if (_ref === 41) { */ case 5:
				_r$1 = p.parseRightParen(); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err$1 = _r$1;
				/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 19:
					return [ptrType$1.nil, err$1];
				/* } */ case 20:
				t = t.substring(1);
				$s = 14; continue;
			/* } else if (_ref === 94) { */ case 6:
				if (!((((p.flags & 16) >>> 0) === 0))) {
					p.op(9);
				} else {
					p.op(7);
				}
				t = t.substring(1);
				$s = 14; continue;
			/* } else if (_ref === 36) { */ case 7:
				if (!((((p.flags & 16) >>> 0) === 0))) {
					_struct = p.op(10);
					_struct.Flags = (_struct.Flags | (256)) >>> 0;
				} else {
					p.op(8);
				}
				t = t.substring(1);
				$s = 14; continue;
			/* } else if (_ref === 46) { */ case 8:
				if (!((((p.flags & 8) >>> 0) === 0))) {
					p.op(6);
				} else {
					p.op(5);
				}
				t = t.substring(1);
				$s = 14; continue;
			/* } else if (_ref === 91) { */ case 9:
				_r$2 = p.parseClass(t); /* */ $s = 21; case 21: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				t = _tuple$1[0];
				err$1 = _tuple$1[1];
				/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 22:
					return [ptrType$1.nil, err$1];
				/* } */ case 23:
				$s = 14; continue;
			/* } else if (_ref === 42 || _ref === 43 || _ref === 63) { */ case 10:
				before = t;
				_ref$1 = t.charCodeAt(0);
				if (_ref$1 === 42) {
					op = 14;
				} else if (_ref$1 === 43) {
					op = 15;
				} else if (_ref$1 === 63) {
					op = 16;
				}
				after = t.substring(1);
				_tuple$2 = p.repeat(op, 0, 0, before, after, lastRepeat);
				after = _tuple$2[0];
				err$1 = _tuple$2[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					return [ptrType$1.nil, err$1];
				}
				repeat = before;
				t = after;
				$s = 14; continue;
			/* } else if (_ref === 123) { */ case 11:
				op = 17;
				before$1 = t;
				_tuple$3 = p.parseRepeat(t);
				min = _tuple$3[0];
				max = _tuple$3[1];
				after$1 = _tuple$3[2];
				ok = _tuple$3[3];
				if (!ok) {
					p.literal(123);
					t = t.substring(1);
					/* break; */ $s = 14; continue;
				}
				if (min < 0 || min > 1000 || max > 1000 || max >= 0 && min > max) {
					return [ptrType$1.nil, new Error.ptr("invalid repeat count", before$1.substring(0, (before$1.length - after$1.length >> 0)))];
				}
				_tuple$4 = p.repeat(op, min, max, before$1, after$1, lastRepeat);
				after$1 = _tuple$4[0];
				err$1 = _tuple$4[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					return [ptrType$1.nil, err$1];
				}
				repeat = before$1;
				t = after$1;
				$s = 14; continue;
			/* } else if (_ref === 92) { */ case 12:
				if (!((((p.flags & 64) >>> 0) === 0)) && t.length >= 2) {
					_ref$2 = t.charCodeAt(1);
					if (_ref$2 === 65) {
						p.op(9);
						t = t.substring(2);
						/* break BigSwitch; */ $s = 14; continue s;
					} else if (_ref$2 === 98) {
						p.op(11);
						t = t.substring(2);
						/* break BigSwitch; */ $s = 14; continue s;
					} else if (_ref$2 === 66) {
						p.op(12);
						t = t.substring(2);
						/* break BigSwitch; */ $s = 14; continue s;
					} else if (_ref$2 === 67) {
						return [ptrType$1.nil, new Error.ptr("invalid escape sequence", t.substring(0, 2))];
					} else if (_ref$2 === 81) {
						lit = "";
						i = strings.Index(t, "\\E");
						if (i < 0) {
							lit = t.substring(2);
							t = "";
						} else {
							lit = t.substring(2, i);
							t = t.substring((i + 2 >> 0));
						}
						p.push(literalRegexp(lit, p.flags));
						/* break BigSwitch; */ $s = 14; continue s;
					} else if (_ref$2 === 122) {
						p.op(10);
						t = t.substring(2);
						/* break BigSwitch; */ $s = 14; continue s;
					}
				}
				re = p.newRegexp(4);
				re.Flags = p.flags;
				/* */ if (t.length >= 2 && ((t.charCodeAt(1) === 112) || (t.charCodeAt(1) === 80))) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (t.length >= 2 && ((t.charCodeAt(1) === 112) || (t.charCodeAt(1) === 80))) { */ case 24:
					_r$3 = p.parseUnicodeClass(t, $subslice(new sliceType(re.Rune0), 0, 0)); /* */ $s = 26; case 26: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$5 = _r$3;
					r = _tuple$5[0];
					rest = _tuple$5[1];
					err$2 = _tuple$5[2];
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						return [ptrType$1.nil, err$2];
					}
					if (!(r === sliceType.nil)) {
						re.Rune = r;
						t = rest;
						p.push(re);
						/* break BigSwitch; */ $s = 14; continue s;
					}
				/* } */ case 25:
				_r$4 = p.parsePerlClassEscape(t, $subslice(new sliceType(re.Rune0), 0, 0)); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$6 = _r$4;
				r$1 = _tuple$6[0];
				rest$1 = _tuple$6[1];
				/* */ if (!(r$1 === sliceType.nil)) { $s = 28; continue; }
				/* */ $s = 29; continue;
				/* if (!(r$1 === sliceType.nil)) { */ case 28:
					re.Rune = r$1;
					t = rest$1;
					p.push(re);
					/* break BigSwitch; */ $s = 14; continue s;
				/* } */ case 29:
				p.reuse(re);
				_tuple$7 = p.parseEscape(t);
				c = _tuple$7[0];
				t = _tuple$7[1];
				err$1 = _tuple$7[2];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					return [ptrType$1.nil, err$1];
				}
				p.literal(c);
				$s = 14; continue;
			/* } else { */ case 13:
				_tuple$8 = nextRune(t);
				c = _tuple$8[0];
				t = _tuple$8[1];
				err$1 = _tuple$8[2];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					return [ptrType$1.nil, err$1];
				}
				p.literal(c);
			/* } } */ case 14:
			lastRepeat = repeat;
		/* } */ $s = 1; continue; case 2:
		_r$5 = p.concat(); /* */ $s = 30; case 30: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = p.swapVerticalBar(); /* */ $s = 33; case 33: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ if (_r$6) { $s = 31; continue; }
		/* */ $s = 32; continue;
		/* if (_r$6) { */ case 31:
			p.stack = $subslice(p.stack, 0, (p.stack.$length - 1 >> 0));
		/* } */ case 32:
		_r$7 = p.alternate(); /* */ $s = 34; case 34: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		n = p.stack.$length;
		if (!((n === 1))) {
			return [ptrType$1.nil, new Error.ptr("missing closing )", s)];
		}
		return [(x = p.stack, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._struct = _struct; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f.after = after; $f.after$1 = after$1; $f.before = before; $f.before$1 = before$1; $f.c = c; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.flags = flags; $f.i = i; $f.lastRepeat = lastRepeat; $f.lit = lit; $f.max = max; $f.min = min; $f.n = n; $f.ok = ok; $f.op = op; $f.p = p; $f.r = r; $f.r$1 = r$1; $f.re = re; $f.repeat = repeat; $f.rest = rest; $f.rest$1 = rest$1; $f.s = s; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parser.ptr.prototype.parseRepeat = function(s) {
		var $ptr, _tuple, _tuple$1, max, min, ok, ok1, p, rest, s;
		min = 0;
		max = 0;
		rest = "";
		ok = false;
		p = this;
		if (s === "" || !((s.charCodeAt(0) === 123))) {
			return [min, max, rest, ok];
		}
		s = s.substring(1);
		ok1 = false;
		_tuple = p.parseInt(s);
		min = _tuple[0];
		s = _tuple[1];
		ok1 = _tuple[2];
		if (!ok1) {
			return [min, max, rest, ok];
		}
		if (s === "") {
			return [min, max, rest, ok];
		}
		if (!((s.charCodeAt(0) === 44))) {
			max = min;
		} else {
			s = s.substring(1);
			if (s === "") {
				return [min, max, rest, ok];
			}
			if (s.charCodeAt(0) === 125) {
				max = -1;
			} else {
				_tuple$1 = p.parseInt(s);
				max = _tuple$1[0];
				s = _tuple$1[1];
				ok1 = _tuple$1[2];
				if (!ok1) {
					return [min, max, rest, ok];
				} else if (max < 0) {
					min = -1;
				}
			}
		}
		if (s === "" || !((s.charCodeAt(0) === 125))) {
			return [min, max, rest, ok];
		}
		rest = s.substring(1);
		ok = true;
		return [min, max, rest, ok];
	};
	parser.prototype.parseRepeat = function(s) { return this.$val.parseRepeat(s); };
	parser.ptr.prototype.parsePerlFlags = function(s) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, c, capture, end, err, flags, name, p, re, rest, s, sawFlag, sign, t;
		rest = "";
		err = $ifaceNil;
		p = this;
		t = s;
		if (t.length > 4 && (t.charCodeAt(2) === 80) && (t.charCodeAt(3) === 60)) {
			end = strings.IndexRune(t, 62);
			if (end < 0) {
				err = checkUTF8(t);
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp = "";
					_tmp$1 = err;
					rest = _tmp;
					err = _tmp$1;
					return [rest, err];
				}
				_tmp$2 = "";
				_tmp$3 = new Error.ptr("invalid named capture", s);
				rest = _tmp$2;
				err = _tmp$3;
				return [rest, err];
			}
			capture = t.substring(0, (end + 1 >> 0));
			name = t.substring(4, end);
			err = checkUTF8(name);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$4 = "";
				_tmp$5 = err;
				rest = _tmp$4;
				err = _tmp$5;
				return [rest, err];
			}
			if (!isValidCaptureName(name)) {
				_tmp$6 = "";
				_tmp$7 = new Error.ptr("invalid named capture", capture);
				rest = _tmp$6;
				err = _tmp$7;
				return [rest, err];
			}
			p.numCap = p.numCap + (1) >> 0;
			re = p.op(128);
			re.Cap = p.numCap;
			re.Name = name;
			_tmp$8 = t.substring((end + 1 >> 0));
			_tmp$9 = $ifaceNil;
			rest = _tmp$8;
			err = _tmp$9;
			return [rest, err];
		}
		c = 0;
		t = t.substring(2);
		flags = p.flags;
		sign = 1;
		sawFlag = false;
		Loop:
		while (true) {
			if (!(!(t === ""))) { break; }
			_tuple = nextRune(t);
			c = _tuple[0];
			t = _tuple[1];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$10 = "";
				_tmp$11 = err;
				rest = _tmp$10;
				err = _tmp$11;
				return [rest, err];
			}
			_ref = c;
			if (_ref === 105) {
				flags = (flags | (1)) >>> 0;
				sawFlag = true;
			} else if (_ref === 109) {
				flags = (flags & ~(16)) << 16 >>> 16;
				sawFlag = true;
			} else if (_ref === 115) {
				flags = (flags | (8)) >>> 0;
				sawFlag = true;
			} else if (_ref === 85) {
				flags = (flags | (32)) >>> 0;
				sawFlag = true;
			} else if (_ref === 45) {
				if (sign < 0) {
					break Loop;
				}
				sign = -1;
				flags = ~flags << 16 >>> 16;
				sawFlag = false;
			} else if (_ref === 58 || _ref === 41) {
				if (sign < 0) {
					if (!sawFlag) {
						break Loop;
					}
					flags = ~flags << 16 >>> 16;
				}
				if (c === 58) {
					p.op(128);
				}
				p.flags = flags;
				_tmp$12 = t;
				_tmp$13 = $ifaceNil;
				rest = _tmp$12;
				err = _tmp$13;
				return [rest, err];
			} else {
				break Loop;
			}
		}
		_tmp$14 = "";
		_tmp$15 = new Error.ptr("invalid or unsupported Perl syntax", s.substring(0, (s.length - t.length >> 0)));
		rest = _tmp$14;
		err = _tmp$15;
		return [rest, err];
	};
	parser.prototype.parsePerlFlags = function(s) { return this.$val.parsePerlFlags(s); };
	isValidCaptureName = function(name) {
		var $ptr, _i, _ref, _rune, c, name;
		if (name === "") {
			return false;
		}
		_ref = name;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (!((c === 95)) && !isalnum(c)) {
				return false;
			}
			_i += _rune[1];
		}
		return true;
	};
	parser.ptr.prototype.parseInt = function(s) {
		var $ptr, i, n, ok, p, rest, s, t;
		n = 0;
		rest = "";
		ok = false;
		p = this;
		if (s === "" || s.charCodeAt(0) < 48 || 57 < s.charCodeAt(0)) {
			return [n, rest, ok];
		}
		if (s.length >= 2 && (s.charCodeAt(0) === 48) && 48 <= s.charCodeAt(1) && s.charCodeAt(1) <= 57) {
			return [n, rest, ok];
		}
		t = s;
		while (true) {
			if (!(!(s === "") && 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) { break; }
			s = s.substring(1);
		}
		rest = s;
		ok = true;
		t = t.substring(0, (t.length - s.length >> 0));
		i = 0;
		while (true) {
			if (!(i < t.length)) { break; }
			if (n >= 100000000) {
				n = -1;
				break;
			}
			n = (($imul(n, 10)) + (t.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
			i = i + (1) >> 0;
		}
		return [n, rest, ok];
	};
	parser.prototype.parseInt = function(s) { return this.$val.parseInt(s); };
	isCharClass = function(re) {
		var $ptr, re;
		return (re.Op === 3) && (re.Rune.$length === 1) || (re.Op === 4) || (re.Op === 5) || (re.Op === 6);
	};
	matchRune = function(re, r) {
		var $ptr, _ref, i, r, re, x, x$1, x$2, x$3;
		_ref = re.Op;
		if (_ref === 3) {
			return (re.Rune.$length === 1) && ((x = re.Rune, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])) === r);
		} else if (_ref === 4) {
			i = 0;
			while (true) {
				if (!(i < re.Rune.$length)) { break; }
				if ((x$1 = re.Rune, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])) <= r && r <= (x$2 = re.Rune, x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3]))) {
					return true;
				}
				i = i + (2) >> 0;
			}
			return false;
		} else if (_ref === 5) {
			return !((r === 10));
		} else if (_ref === 6) {
			return true;
		}
		return false;
	};
	parser.ptr.prototype.parseVerticalBar = function() {
		var $ptr, _r, _r$1, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.concat(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_r$1 = p.swapVerticalBar(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!_r$1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!_r$1) { */ case 2:
			p.op(129);
		/* } */ case 3:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseVerticalBar }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseVerticalBar = function() { return this.$val.parseVerticalBar(); };
	mergeCharClass = function(dst, src) {
		var $ptr, _ref, dst, src, x, x$1, x$2, x$3, x$4;
		_ref = dst.Op;
		switch (0) { default: if (_ref === 6) {
		} else if (_ref === 5) {
			if (matchRune(src, 10)) {
				dst.Op = 6;
			}
		} else if (_ref === 4) {
			if (src.Op === 3) {
				dst.Rune = appendLiteral(dst.Rune, (x = src.Rune, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), src.Flags);
			} else {
				dst.Rune = appendClass(dst.Rune, src.Rune);
			}
		} else if (_ref === 3) {
			if (((x$1 = src.Rune, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])) === (x$2 = dst.Rune, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0]))) && (src.Flags === dst.Flags)) {
				break;
			}
			dst.Op = 4;
			dst.Rune = appendLiteral($subslice(dst.Rune, 0, 0), (x$3 = dst.Rune, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])), dst.Flags);
			dst.Rune = appendLiteral(dst.Rune, (x$4 = src.Rune, (0 >= x$4.$length ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 0])), src.Flags);
		} }
	};
	parser.ptr.prototype.swapVerticalBar = function() {
		var $ptr, _tmp, _tmp$1, n, p, re1, re1$1, re2, re3, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; n = $f.n; p = $f.p; re1 = $f.re1; re1$1 = $f.re1$1; re2 = $f.re2; re3 = $f.re3; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$2 = $f.x$2; x$20 = $f.x$20; x$21 = $f.x$21; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		n = p.stack.$length;
		if (n >= 3 && ((x = p.stack, x$1 = n - 2 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).Op === 129) && isCharClass((x$2 = p.stack, x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3]))) && isCharClass((x$4 = p.stack, x$5 = n - 3 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])))) {
			re1 = (x$6 = p.stack, x$7 = n - 1 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + x$7]));
			re3 = (x$8 = p.stack, x$9 = n - 3 >> 0, ((x$9 < 0 || x$9 >= x$8.$length) ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + x$9]));
			if (re1.Op > re3.Op) {
				_tmp = re3;
				_tmp$1 = re1;
				re1 = _tmp;
				re3 = _tmp$1;
				(x$10 = p.stack, x$11 = n - 3 >> 0, ((x$11 < 0 || x$11 >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + x$11] = re3));
			}
			mergeCharClass(re3, re1);
			p.reuse(re1);
			p.stack = $subslice(p.stack, 0, (n - 1 >> 0));
			return true;
		}
		/* */ if (n >= 2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n >= 2) { */ case 1:
			re1$1 = (x$12 = p.stack, x$13 = n - 1 >> 0, ((x$13 < 0 || x$13 >= x$12.$length) ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + x$13]));
			re2 = (x$14 = p.stack, x$15 = n - 2 >> 0, ((x$15 < 0 || x$15 >= x$14.$length) ? $throwRuntimeError("index out of range") : x$14.$array[x$14.$offset + x$15]));
			/* */ if (re2.Op === 129) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (re2.Op === 129) { */ case 3:
				/* */ if (n >= 3) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (n >= 3) { */ case 5:
					$r = cleanAlt((x$16 = p.stack, x$17 = n - 3 >> 0, ((x$17 < 0 || x$17 >= x$16.$length) ? $throwRuntimeError("index out of range") : x$16.$array[x$16.$offset + x$17]))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
				(x$18 = p.stack, x$19 = n - 2 >> 0, ((x$19 < 0 || x$19 >= x$18.$length) ? $throwRuntimeError("index out of range") : x$18.$array[x$18.$offset + x$19] = re1$1));
				(x$20 = p.stack, x$21 = n - 1 >> 0, ((x$21 < 0 || x$21 >= x$20.$length) ? $throwRuntimeError("index out of range") : x$20.$array[x$20.$offset + x$21] = re2));
				return true;
			/* } */ case 4:
		/* } */ case 2:
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.swapVerticalBar }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.n = n; $f.p = p; $f.re1 = re1; $f.re1$1 = re1$1; $f.re2 = re2; $f.re3 = re3; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$2 = x$2; $f.x$20 = x$20; $f.x$21 = x$21; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.swapVerticalBar = function() { return this.$val.swapVerticalBar(); };
	parser.ptr.prototype.parseRightParen = function() {
		var $ptr, _r, _r$1, _r$2, n, p, re1, re2, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; n = $f.n; p = $f.p; re1 = $f.re1; re2 = $f.re2; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.concat(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_r$1 = p.swapVerticalBar(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r$1) { */ case 2:
			p.stack = $subslice(p.stack, 0, (p.stack.$length - 1 >> 0));
		/* } */ case 3:
		_r$2 = p.alternate(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		n = p.stack.$length;
		if (n < 2) {
			return new Error.ptr("unexpected )", p.wholeRegexp);
		}
		re1 = (x = p.stack, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		re2 = (x$2 = p.stack, x$3 = n - 2 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3]));
		p.stack = $subslice(p.stack, 0, (n - 2 >> 0));
		if (!((re2.Op === 128))) {
			return new Error.ptr("unexpected )", p.wholeRegexp);
		}
		p.flags = re2.Flags;
		if (re2.Cap === 0) {
			p.push(re1);
		} else {
			re2.Op = 13;
			re2.Sub = $subslice(new sliceType$5(re2.Sub0), 0, 1);
			(x$4 = re2.Sub, (0 >= x$4.$length ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 0] = re1));
			p.push(re2);
		}
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseRightParen }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.n = n; $f.p = p; $f.re1 = re1; $f.re2 = re2; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseRightParen = function() { return this.$val.parseRightParen(); };
	parser.ptr.prototype.parseEscape = function(s) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, c, err, i, nhex, p, r, rest, s, t, v, x, y;
		r = 0;
		rest = "";
		err = $ifaceNil;
		p = this;
		t = s.substring(1);
		if (t === "") {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = new Error.ptr("trailing backslash at end of expression", "");
			r = _tmp;
			rest = _tmp$1;
			err = _tmp$2;
			return [r, rest, err];
		}
		_tuple = nextRune(t);
		c = _tuple[0];
		t = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$3 = 0;
			_tmp$4 = "";
			_tmp$5 = err;
			r = _tmp$3;
			rest = _tmp$4;
			err = _tmp$5;
			return [r, rest, err];
		}
		_ref = c;
		Switch:
		switch (0) { default: if (_ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) {
			if (t === "" || t.charCodeAt(0) < 48 || t.charCodeAt(0) > 55) {
				break;
			}
			r = c - 48 >> 0;
			i = 1;
			while (true) {
				if (!(i < 3)) { break; }
				if (t === "" || t.charCodeAt(0) < 48 || t.charCodeAt(0) > 55) {
					break;
				}
				r = (($imul(r, 8)) + (t.charCodeAt(0) >> 0) >> 0) - 48 >> 0;
				t = t.substring(1);
				i = i + (1) >> 0;
			}
			_tmp$6 = r;
			_tmp$7 = t;
			_tmp$8 = $ifaceNil;
			r = _tmp$6;
			rest = _tmp$7;
			err = _tmp$8;
			return [r, rest, err];
		} else if (_ref === 48) {
			r = c - 48 >> 0;
			i = 1;
			while (true) {
				if (!(i < 3)) { break; }
				if (t === "" || t.charCodeAt(0) < 48 || t.charCodeAt(0) > 55) {
					break;
				}
				r = (($imul(r, 8)) + (t.charCodeAt(0) >> 0) >> 0) - 48 >> 0;
				t = t.substring(1);
				i = i + (1) >> 0;
			}
			_tmp$9 = r;
			_tmp$10 = t;
			_tmp$11 = $ifaceNil;
			r = _tmp$9;
			rest = _tmp$10;
			err = _tmp$11;
			return [r, rest, err];
		} else if (_ref === 120) {
			if (t === "") {
				break;
			}
			_tuple$1 = nextRune(t);
			c = _tuple$1[0];
			t = _tuple$1[1];
			err = _tuple$1[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$12 = 0;
				_tmp$13 = "";
				_tmp$14 = err;
				r = _tmp$12;
				rest = _tmp$13;
				err = _tmp$14;
				return [r, rest, err];
			}
			if (c === 123) {
				nhex = 0;
				r = 0;
				while (true) {
					if (t === "") {
						break Switch;
					}
					_tuple$2 = nextRune(t);
					c = _tuple$2[0];
					t = _tuple$2[1];
					err = _tuple$2[2];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						_tmp$15 = 0;
						_tmp$16 = "";
						_tmp$17 = err;
						r = _tmp$15;
						rest = _tmp$16;
						err = _tmp$17;
						return [r, rest, err];
					}
					if (c === 125) {
						break;
					}
					v = unhex(c);
					if (v < 0) {
						break Switch;
					}
					r = ($imul(r, 16)) + v >> 0;
					if (r > 1114111) {
						break Switch;
					}
					nhex = nhex + (1) >> 0;
				}
				if (nhex === 0) {
					break Switch;
				}
				_tmp$18 = r;
				_tmp$19 = t;
				_tmp$20 = $ifaceNil;
				r = _tmp$18;
				rest = _tmp$19;
				err = _tmp$20;
				return [r, rest, err];
			}
			x = unhex(c);
			_tuple$3 = nextRune(t);
			c = _tuple$3[0];
			t = _tuple$3[1];
			err = _tuple$3[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$21 = 0;
				_tmp$22 = "";
				_tmp$23 = err;
				r = _tmp$21;
				rest = _tmp$22;
				err = _tmp$23;
				return [r, rest, err];
			}
			y = unhex(c);
			if (x < 0 || y < 0) {
				break;
			}
			_tmp$24 = ($imul(x, 16)) + y >> 0;
			_tmp$25 = t;
			_tmp$26 = $ifaceNil;
			r = _tmp$24;
			rest = _tmp$25;
			err = _tmp$26;
			return [r, rest, err];
		} else if (_ref === 97) {
			_tmp$27 = 7;
			_tmp$28 = t;
			_tmp$29 = err;
			r = _tmp$27;
			rest = _tmp$28;
			err = _tmp$29;
			return [r, rest, err];
		} else if (_ref === 102) {
			_tmp$30 = 12;
			_tmp$31 = t;
			_tmp$32 = err;
			r = _tmp$30;
			rest = _tmp$31;
			err = _tmp$32;
			return [r, rest, err];
		} else if (_ref === 110) {
			_tmp$33 = 10;
			_tmp$34 = t;
			_tmp$35 = err;
			r = _tmp$33;
			rest = _tmp$34;
			err = _tmp$35;
			return [r, rest, err];
		} else if (_ref === 114) {
			_tmp$36 = 13;
			_tmp$37 = t;
			_tmp$38 = err;
			r = _tmp$36;
			rest = _tmp$37;
			err = _tmp$38;
			return [r, rest, err];
		} else if (_ref === 116) {
			_tmp$39 = 9;
			_tmp$40 = t;
			_tmp$41 = err;
			r = _tmp$39;
			rest = _tmp$40;
			err = _tmp$41;
			return [r, rest, err];
		} else if (_ref === 118) {
			_tmp$42 = 11;
			_tmp$43 = t;
			_tmp$44 = err;
			r = _tmp$42;
			rest = _tmp$43;
			err = _tmp$44;
			return [r, rest, err];
		} else {
			if (c < 128 && !isalnum(c)) {
				_tmp$45 = c;
				_tmp$46 = t;
				_tmp$47 = $ifaceNil;
				r = _tmp$45;
				rest = _tmp$46;
				err = _tmp$47;
				return [r, rest, err];
			}
		} }
		_tmp$48 = 0;
		_tmp$49 = "";
		_tmp$50 = new Error.ptr("invalid escape sequence", s.substring(0, (s.length - t.length >> 0)));
		r = _tmp$48;
		rest = _tmp$49;
		err = _tmp$50;
		return [r, rest, err];
	};
	parser.prototype.parseEscape = function(s) { return this.$val.parseEscape(s); };
	parser.ptr.prototype.parseClassChar = function(s, wholeClass) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, err, p, r, rest, s, wholeClass;
		r = 0;
		rest = "";
		err = $ifaceNil;
		p = this;
		if (s === "") {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = new Error.ptr("missing closing ]", wholeClass);
			r = _tmp;
			rest = _tmp$1;
			err = _tmp$2;
			return [r, rest, err];
		}
		if (s.charCodeAt(0) === 92) {
			_tuple = p.parseEscape(s);
			r = _tuple[0];
			rest = _tuple[1];
			err = _tuple[2];
			return [r, rest, err];
		}
		_tuple$1 = nextRune(s);
		r = _tuple$1[0];
		rest = _tuple$1[1];
		err = _tuple$1[2];
		return [r, rest, err];
	};
	parser.prototype.parseClassChar = function(s, wholeClass) { return this.$val.parseClassChar(s, wholeClass); };
	parser.ptr.prototype.parsePerlClassEscape = function(s, r) {
		var $ptr, _entry, _r, _tmp, _tmp$1, g, out, p, r, rest, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; g = $f.g; out = $f.out; p = $f.p; r = $f.r; rest = $f.rest; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		out = sliceType.nil;
		rest = "";
		p = this;
		if ((((p.flags & 64) >>> 0) === 0) || s.length < 2 || !((s.charCodeAt(0) === 92))) {
			return [out, rest];
		}
		g = $clone((_entry = perlGroup[$String.keyFor(s.substring(0, 2))], _entry !== undefined ? _entry.v : new charGroup.ptr(0, sliceType.nil)), charGroup);
		if (g.sign === 0) {
			return [out, rest];
		}
		_r = p.appendGroup(r, g); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tmp = _r;
		_tmp$1 = s.substring(2);
		out = _tmp;
		rest = _tmp$1;
		/* */ $s = 2; case 2:
		return [out, rest];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parsePerlClassEscape }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.g = g; $f.out = out; $f.p = p; $f.r = r; $f.rest = rest; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parsePerlClassEscape = function(s, r) { return this.$val.parsePerlClassEscape(s, r); };
	parser.ptr.prototype.parseNamedClass = function(s, r) {
		var $ptr, _entry, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, err, g, i, name, out, p, r, rest, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; err = $f.err; g = $f.g; i = $f.i; name = $f.name; out = $f.out; p = $f.p; r = $f.r; rest = $f.rest; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		out = sliceType.nil;
		rest = "";
		err = $ifaceNil;
		p = this;
		if (s.length < 2 || !((s.charCodeAt(0) === 91)) || !((s.charCodeAt(1) === 58))) {
			return [out, rest, err];
		}
		i = strings.Index(s.substring(2), ":]");
		if (i < 0) {
			return [out, rest, err];
		}
		i = i + (2) >> 0;
		_tmp = s.substring(0, (i + 2 >> 0));
		_tmp$1 = s.substring((i + 2 >> 0));
		name = _tmp;
		s = _tmp$1;
		g = $clone((_entry = posixGroup[$String.keyFor(name)], _entry !== undefined ? _entry.v : new charGroup.ptr(0, sliceType.nil)), charGroup);
		if (g.sign === 0) {
			_tmp$2 = sliceType.nil;
			_tmp$3 = "";
			_tmp$4 = new Error.ptr("invalid character class range", name);
			out = _tmp$2;
			rest = _tmp$3;
			err = _tmp$4;
			return [out, rest, err];
		}
		_r = p.appendGroup(r, g); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tmp$5 = _r;
		_tmp$6 = s;
		_tmp$7 = $ifaceNil;
		out = _tmp$5;
		rest = _tmp$6;
		err = _tmp$7;
		/* */ $s = 2; case 2:
		return [out, rest, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseNamedClass }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f.err = err; $f.g = g; $f.i = i; $f.name = name; $f.out = out; $f.p = p; $f.r = r; $f.rest = rest; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseNamedClass = function(s, r) { return this.$val.parseNamedClass(s, r); };
	parser.ptr.prototype.appendGroup = function(r, g) {
		var $ptr, _r, g, p, r, tmp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; g = $f.g; p = $f.p; r = $f.r; tmp = $f.tmp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = $clone(g, charGroup);
		p = this;
		/* */ if (((p.flags & 1) >>> 0) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (((p.flags & 1) >>> 0) === 0) { */ case 1:
			if (g.sign < 0) {
				r = appendNegatedClass(r, g.class$1);
			} else {
				r = appendClass(r, g.class$1);
			}
			$s = 3; continue;
		/* } else { */ case 2:
			tmp = $subslice(p.tmpClass, 0, 0);
			tmp = appendFoldedClass(tmp, g.class$1);
			p.tmpClass = tmp;
			_r = cleanClass((p.$ptr_tmpClass || (p.$ptr_tmpClass = new ptrType$2(function() { return this.$target.tmpClass; }, function($v) { this.$target.tmpClass = $v; }, p)))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			tmp = _r;
			if (g.sign < 0) {
				r = appendNegatedClass(r, tmp);
			} else {
				r = appendClass(r, tmp);
			}
		/* } */ case 3:
		return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.appendGroup }; } $f.$ptr = $ptr; $f._r = _r; $f.g = g; $f.p = p; $f.r = r; $f.tmp = tmp; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.appendGroup = function(r, g) { return this.$val.appendGroup(r, g); };
	unicodeTable = function(name) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, name, t, t$1;
		if (name === "Any") {
			return [anyTable, anyTable];
		}
		t = (_entry = unicode.Categories[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$3.nil);
		if (!(t === ptrType$3.nil)) {
			return [t, (_entry$1 = unicode.FoldCategory[$String.keyFor(name)], _entry$1 !== undefined ? _entry$1.v : ptrType$3.nil)];
		}
		t$1 = (_entry$2 = unicode.Scripts[$String.keyFor(name)], _entry$2 !== undefined ? _entry$2.v : ptrType$3.nil);
		if (!(t$1 === ptrType$3.nil)) {
			return [t$1, (_entry$3 = unicode.FoldScript[$String.keyFor(name)], _entry$3 !== undefined ? _entry$3.v : ptrType$3.nil)];
		}
		return [ptrType$3.nil, ptrType$3.nil];
	};
	parser.ptr.prototype.parseUnicodeClass = function(s, r) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, c, end, err, fold, name, out, p, r, rest, s, seq, sign, t, tab, tmp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; end = $f.end; err = $f.err; fold = $f.fold; name = $f.name; out = $f.out; p = $f.p; r = $f.r; rest = $f.rest; s = $f.s; seq = $f.seq; sign = $f.sign; t = $f.t; tab = $f.tab; tmp = $f.tmp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		out = sliceType.nil;
		rest = "";
		err = $ifaceNil;
		p = this;
		if ((((p.flags & 128) >>> 0) === 0) || s.length < 2 || !((s.charCodeAt(0) === 92)) || !((s.charCodeAt(1) === 112)) && !((s.charCodeAt(1) === 80))) {
			return [out, rest, err];
		}
		sign = 1;
		if (s.charCodeAt(1) === 80) {
			sign = -1;
		}
		t = s.substring(2);
		_tuple = nextRune(t);
		c = _tuple[0];
		t = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [out, rest, err];
		}
		_tmp = "";
		_tmp$1 = "";
		seq = _tmp;
		name = _tmp$1;
		if (!((c === 123))) {
			seq = s.substring(0, (s.length - t.length >> 0));
			name = seq.substring(2);
		} else {
			end = strings.IndexRune(s, 125);
			if (end < 0) {
				err = checkUTF8(s);
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [out, rest, err];
				}
				_tmp$2 = sliceType.nil;
				_tmp$3 = "";
				_tmp$4 = new Error.ptr("invalid character class range", s);
				out = _tmp$2;
				rest = _tmp$3;
				err = _tmp$4;
				return [out, rest, err];
			}
			_tmp$5 = s.substring(0, (end + 1 >> 0));
			_tmp$6 = s.substring((end + 1 >> 0));
			seq = _tmp$5;
			t = _tmp$6;
			name = s.substring(3, end);
			err = checkUTF8(name);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [out, rest, err];
			}
		}
		if (!(name === "") && (name.charCodeAt(0) === 94)) {
			sign = -sign;
			name = name.substring(1);
		}
		_tuple$1 = unicodeTable(name);
		tab = _tuple$1[0];
		fold = _tuple$1[1];
		if (tab === ptrType$3.nil) {
			_tmp$7 = sliceType.nil;
			_tmp$8 = "";
			_tmp$9 = new Error.ptr("invalid character class range", seq);
			out = _tmp$7;
			rest = _tmp$8;
			err = _tmp$9;
			return [out, rest, err];
		}
		/* */ if ((((p.flags & 1) >>> 0) === 0) || fold === ptrType$3.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((((p.flags & 1) >>> 0) === 0) || fold === ptrType$3.nil) { */ case 1:
			if (sign > 0) {
				r = appendTable(r, tab);
			} else {
				r = appendNegatedTable(r, tab);
			}
			$s = 3; continue;
		/* } else { */ case 2:
			tmp = $subslice(p.tmpClass, 0, 0);
			tmp = appendTable(tmp, tab);
			tmp = appendTable(tmp, fold);
			p.tmpClass = tmp;
			_r = cleanClass((p.$ptr_tmpClass || (p.$ptr_tmpClass = new ptrType$2(function() { return this.$target.tmpClass; }, function($v) { this.$target.tmpClass = $v; }, p)))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			tmp = _r;
			if (sign > 0) {
				r = appendClass(r, tmp);
			} else {
				r = appendNegatedClass(r, tmp);
			}
		/* } */ case 3:
		_tmp$10 = r;
		_tmp$11 = t;
		_tmp$12 = $ifaceNil;
		out = _tmp$10;
		rest = _tmp$11;
		err = _tmp$12;
		return [out, rest, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseUnicodeClass }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.end = end; $f.err = err; $f.fold = fold; $f.name = name; $f.out = out; $f.p = p; $f.r = r; $f.rest = rest; $f.s = s; $f.seq = seq; $f.sign = sign; $f.t = t; $f.tab = tab; $f.tmp = tmp; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseUnicodeClass = function(s, r) { return this.$val.parseUnicodeClass(s, r); };
	parser.ptr.prototype.parseClass = function(s) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, class$1, err, err$1, err$2, first, hi, lo, nclass, nclass$1, nclass$2, nt, nt$1, nt$2, p, re, rest, rng, s, sign, size, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; class$1 = $f.class$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; first = $f.first; hi = $f.hi; lo = $f.lo; nclass = $f.nclass; nclass$1 = $f.nclass$1; nclass$2 = $f.nclass$2; nt = $f.nt; nt$1 = $f.nt$1; nt$2 = $f.nt$2; p = $f.p; re = $f.re; rest = $f.rest; rng = $f.rng; s = $f.s; sign = $f.sign; size = $f.size; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rest = "";
		err = $ifaceNil;
		p = this;
		t = s.substring(1);
		re = p.newRegexp(4);
		re.Flags = p.flags;
		re.Rune = $subslice(new sliceType(re.Rune0), 0, 0);
		sign = 1;
		if (!(t === "") && (t.charCodeAt(0) === 94)) {
			sign = -1;
			t = t.substring(1);
			if (((p.flags & 4) >>> 0) === 0) {
				re.Rune = $append(re.Rune, 10, 10);
			}
		}
		class$1 = re.Rune;
		first = true;
		/* while (true) { */ case 1:
			/* if (!(t === "" || !((t.charCodeAt(0) === 93)) || first)) { break; } */ if(!(t === "" || !((t.charCodeAt(0) === 93)) || first)) { $s = 2; continue; }
			if (!(t === "") && (t.charCodeAt(0) === 45) && (((p.flags & 64) >>> 0) === 0) && !first && ((t.length === 1) || !((t.charCodeAt(1) === 93)))) {
				_tuple = utf8.DecodeRuneInString(t.substring(1));
				size = _tuple[1];
				_tmp = "";
				_tmp$1 = new Error.ptr("invalid character class range", t.substring(0, (1 + size >> 0)));
				rest = _tmp;
				err = _tmp$1;
				return [rest, err];
			}
			first = false;
			/* */ if (t.length > 2 && (t.charCodeAt(0) === 91) && (t.charCodeAt(1) === 58)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (t.length > 2 && (t.charCodeAt(0) === 91) && (t.charCodeAt(1) === 58)) { */ case 3:
				_r = p.parseNamedClass(t, class$1); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				nclass = _tuple$1[0];
				nt = _tuple$1[1];
				err$1 = _tuple$1[2];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp$2 = "";
					_tmp$3 = err$1;
					rest = _tmp$2;
					err = _tmp$3;
					return [rest, err];
				}
				if (!(nclass === sliceType.nil)) {
					_tmp$4 = nclass;
					_tmp$5 = nt;
					class$1 = _tmp$4;
					t = _tmp$5;
					/* continue; */ $s = 1; continue;
				}
			/* } */ case 4:
			_r$1 = p.parseUnicodeClass(t, class$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$2 = _r$1;
			nclass$1 = _tuple$2[0];
			nt$1 = _tuple$2[1];
			err$2 = _tuple$2[2];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				_tmp$6 = "";
				_tmp$7 = err$2;
				rest = _tmp$6;
				err = _tmp$7;
				return [rest, err];
			}
			/* */ if (!(nclass$1 === sliceType.nil)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(nclass$1 === sliceType.nil)) { */ case 7:
				_tmp$8 = nclass$1;
				_tmp$9 = nt$1;
				class$1 = _tmp$8;
				t = _tmp$9;
				/* continue; */ $s = 1; continue;
			/* } */ case 8:
			_r$2 = p.parsePerlClassEscape(t, class$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$3 = _r$2;
			nclass$2 = _tuple$3[0];
			nt$2 = _tuple$3[1];
			/* */ if (!(nclass$2 === sliceType.nil)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!(nclass$2 === sliceType.nil)) { */ case 10:
				_tmp$10 = nclass$2;
				_tmp$11 = nt$2;
				class$1 = _tmp$10;
				t = _tmp$11;
				/* continue; */ $s = 1; continue;
			/* } */ case 11:
			rng = t;
			_tmp$12 = 0;
			_tmp$13 = 0;
			lo = _tmp$12;
			hi = _tmp$13;
			_tuple$4 = p.parseClassChar(t, s);
			lo = _tuple$4[0];
			t = _tuple$4[1];
			err$2 = _tuple$4[2];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				_tmp$14 = "";
				_tmp$15 = err$2;
				rest = _tmp$14;
				err = _tmp$15;
				return [rest, err];
			}
			hi = lo;
			if (t.length >= 2 && (t.charCodeAt(0) === 45) && !((t.charCodeAt(1) === 93))) {
				t = t.substring(1);
				_tuple$5 = p.parseClassChar(t, s);
				hi = _tuple$5[0];
				t = _tuple$5[1];
				err$2 = _tuple$5[2];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					_tmp$16 = "";
					_tmp$17 = err$2;
					rest = _tmp$16;
					err = _tmp$17;
					return [rest, err];
				}
				if (hi < lo) {
					rng = rng.substring(0, (rng.length - t.length >> 0));
					_tmp$18 = "";
					_tmp$19 = new Error.ptr("invalid character class range", rng);
					rest = _tmp$18;
					err = _tmp$19;
					return [rest, err];
				}
			}
			if (((p.flags & 1) >>> 0) === 0) {
				class$1 = appendRange(class$1, lo, hi);
			} else {
				class$1 = appendFoldedRange(class$1, lo, hi);
			}
		/* } */ $s = 1; continue; case 2:
		t = t.substring(1);
		re.Rune = class$1;
		_r$3 = cleanClass((re.$ptr_Rune || (re.$ptr_Rune = new ptrType$2(function() { return this.$target.Rune; }, function($v) { this.$target.Rune = $v; }, re)))); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		class$1 = _r$3;
		if (sign < 0) {
			class$1 = negateClass(class$1);
		}
		re.Rune = class$1;
		p.push(re);
		_tmp$20 = t;
		_tmp$21 = $ifaceNil;
		rest = _tmp$20;
		err = _tmp$21;
		return [rest, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseClass }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.class$1 = class$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.first = first; $f.hi = hi; $f.lo = lo; $f.nclass = nclass; $f.nclass$1 = nclass$1; $f.nclass$2 = nclass$2; $f.nt = nt; $f.nt$1 = nt$1; $f.nt$2 = nt$2; $f.p = p; $f.re = re; $f.rest = rest; $f.rng = rng; $f.s = s; $f.sign = sign; $f.size = size; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseClass = function(s) { return this.$val.parseClass(s); };
	cleanClass = function(rp) {
		var $ptr, _tmp, _tmp$1, hi, i, lo, r, rp, w, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; hi = $f.hi; i = $f.i; lo = $f.lo; r = $f.r; rp = $f.rp; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = sort.Sort((x = new ranges.ptr(rp), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = rp.$get();
		if (r.$length < 2) {
			return r;
		}
		w = 2;
		i = 2;
		while (true) {
			if (!(i < r.$length)) { break; }
			_tmp = ((i < 0 || i >= r.$length) ? $throwRuntimeError("index out of range") : r.$array[r.$offset + i]);
			_tmp$1 = (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= r.$length) ? $throwRuntimeError("index out of range") : r.$array[r.$offset + x$1]));
			lo = _tmp;
			hi = _tmp$1;
			if (lo <= ((x$2 = w - 1 >> 0, ((x$2 < 0 || x$2 >= r.$length) ? $throwRuntimeError("index out of range") : r.$array[r.$offset + x$2])) + 1 >> 0)) {
				if (hi > (x$3 = w - 1 >> 0, ((x$3 < 0 || x$3 >= r.$length) ? $throwRuntimeError("index out of range") : r.$array[r.$offset + x$3]))) {
					(x$4 = w - 1 >> 0, ((x$4 < 0 || x$4 >= r.$length) ? $throwRuntimeError("index out of range") : r.$array[r.$offset + x$4] = hi));
				}
				i = i + (2) >> 0;
				continue;
			}
			((w < 0 || w >= r.$length) ? $throwRuntimeError("index out of range") : r.$array[r.$offset + w] = lo);
			(x$5 = w + 1 >> 0, ((x$5 < 0 || x$5 >= r.$length) ? $throwRuntimeError("index out of range") : r.$array[r.$offset + x$5] = hi));
			w = w + (2) >> 0;
			i = i + (2) >> 0;
		}
		return $subslice(r, 0, w);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cleanClass }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.hi = hi; $f.i = i; $f.lo = lo; $f.r = r; $f.rp = rp; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	appendLiteral = function(r, x, flags) {
		var $ptr, flags, r, x;
		if (!((((flags & 1) >>> 0) === 0))) {
			return appendFoldedRange(r, x, x);
		}
		return appendRange(r, x, x);
	};
	appendRange = function(r, lo, hi) {
		var $ptr, _tmp, _tmp$1, hi, i, lo, n, r, rhi, rlo, x, x$1, x$2, x$3;
		n = r.$length;
		i = 2;
		while (true) {
			if (!(i <= 4)) { break; }
			if (n >= i) {
				_tmp = (x = n - i >> 0, ((x < 0 || x >= r.$length) ? $throwRuntimeError("index out of range") : r.$array[r.$offset + x]));
				_tmp$1 = (x$1 = (n - i >> 0) + 1 >> 0, ((x$1 < 0 || x$1 >= r.$length) ? $throwRuntimeError("index out of range") : r.$array[r.$offset + x$1]));
				rlo = _tmp;
				rhi = _tmp$1;
				if (lo <= (rhi + 1 >> 0) && rlo <= (hi + 1 >> 0)) {
					if (lo < rlo) {
						(x$2 = n - i >> 0, ((x$2 < 0 || x$2 >= r.$length) ? $throwRuntimeError("index out of range") : r.$array[r.$offset + x$2] = lo));
					}
					if (hi > rhi) {
						(x$3 = (n - i >> 0) + 1 >> 0, ((x$3 < 0 || x$3 >= r.$length) ? $throwRuntimeError("index out of range") : r.$array[r.$offset + x$3] = hi));
					}
					return r;
				}
			}
			i = i + (2) >> 0;
		}
		return $append(r, lo, hi);
	};
	appendFoldedRange = function(r, lo, hi) {
		var $ptr, c, f, hi, lo, r;
		if (lo <= 65 && hi >= 71903) {
			return appendRange(r, lo, hi);
		}
		if (hi < 65 || lo > 71903) {
			return appendRange(r, lo, hi);
		}
		if (lo < 65) {
			r = appendRange(r, lo, 64);
			lo = 65;
		}
		if (hi > 71903) {
			r = appendRange(r, 71904, hi);
			hi = 71903;
		}
		c = lo;
		while (true) {
			if (!(c <= hi)) { break; }
			r = appendRange(r, c, c);
			f = unicode.SimpleFold(c);
			while (true) {
				if (!(!((f === c)))) { break; }
				r = appendRange(r, f, f);
				f = unicode.SimpleFold(f);
			}
			c = c + (1) >> 0;
		}
		return r;
	};
	appendClass = function(r, x) {
		var $ptr, i, r, x, x$1;
		i = 0;
		while (true) {
			if (!(i < x.$length)) { break; }
			r = appendRange(r, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])));
			i = i + (2) >> 0;
		}
		return r;
	};
	appendFoldedClass = function(r, x) {
		var $ptr, i, r, x, x$1;
		i = 0;
		while (true) {
			if (!(i < x.$length)) { break; }
			r = appendFoldedRange(r, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])));
			i = i + (2) >> 0;
		}
		return r;
	};
	appendNegatedClass = function(r, x) {
		var $ptr, _tmp, _tmp$1, hi, i, lo, nextLo, r, x, x$1;
		nextLo = 0;
		i = 0;
		while (true) {
			if (!(i < x.$length)) { break; }
			_tmp = ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]);
			_tmp$1 = (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
			lo = _tmp;
			hi = _tmp$1;
			if (nextLo <= (lo - 1 >> 0)) {
				r = appendRange(r, nextLo, lo - 1 >> 0);
			}
			nextLo = hi + 1 >> 0;
			i = i + (2) >> 0;
		}
		if (nextLo <= 1114111) {
			r = appendRange(r, nextLo, 1114111);
		}
		return r;
	};
	appendTable = function(r, x) {
		var $ptr, _i, _i$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, c, c$1, hi, hi$1, lo, lo$1, r, stride, stride$1, x, xr, xr$1;
		_ref = x.R16;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			xr = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), unicode.Range16);
			_tmp = (xr.Lo >> 0);
			_tmp$1 = (xr.Hi >> 0);
			_tmp$2 = (xr.Stride >> 0);
			lo = _tmp;
			hi = _tmp$1;
			stride = _tmp$2;
			if (stride === 1) {
				r = appendRange(r, lo, hi);
				_i++;
				continue;
			}
			c = lo;
			while (true) {
				if (!(c <= hi)) { break; }
				r = appendRange(r, c, c);
				c = c + (stride) >> 0;
			}
			_i++;
		}
		_ref$1 = x.R32;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			xr$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]), unicode.Range32);
			_tmp$3 = (xr$1.Lo >> 0);
			_tmp$4 = (xr$1.Hi >> 0);
			_tmp$5 = (xr$1.Stride >> 0);
			lo$1 = _tmp$3;
			hi$1 = _tmp$4;
			stride$1 = _tmp$5;
			if (stride$1 === 1) {
				r = appendRange(r, lo$1, hi$1);
				_i$1++;
				continue;
			}
			c$1 = lo$1;
			while (true) {
				if (!(c$1 <= hi$1)) { break; }
				r = appendRange(r, c$1, c$1);
				c$1 = c$1 + (stride$1) >> 0;
			}
			_i$1++;
		}
		return r;
	};
	appendNegatedTable = function(r, x) {
		var $ptr, _i, _i$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, c, c$1, hi, hi$1, lo, lo$1, nextLo, r, stride, stride$1, x, xr, xr$1;
		nextLo = 0;
		_ref = x.R16;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			xr = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), unicode.Range16);
			_tmp = (xr.Lo >> 0);
			_tmp$1 = (xr.Hi >> 0);
			_tmp$2 = (xr.Stride >> 0);
			lo = _tmp;
			hi = _tmp$1;
			stride = _tmp$2;
			if (stride === 1) {
				if (nextLo <= (lo - 1 >> 0)) {
					r = appendRange(r, nextLo, lo - 1 >> 0);
				}
				nextLo = hi + 1 >> 0;
				_i++;
				continue;
			}
			c = lo;
			while (true) {
				if (!(c <= hi)) { break; }
				if (nextLo <= (c - 1 >> 0)) {
					r = appendRange(r, nextLo, c - 1 >> 0);
				}
				nextLo = c + 1 >> 0;
				c = c + (stride) >> 0;
			}
			_i++;
		}
		_ref$1 = x.R32;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			xr$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]), unicode.Range32);
			_tmp$3 = (xr$1.Lo >> 0);
			_tmp$4 = (xr$1.Hi >> 0);
			_tmp$5 = (xr$1.Stride >> 0);
			lo$1 = _tmp$3;
			hi$1 = _tmp$4;
			stride$1 = _tmp$5;
			if (stride$1 === 1) {
				if (nextLo <= (lo$1 - 1 >> 0)) {
					r = appendRange(r, nextLo, lo$1 - 1 >> 0);
				}
				nextLo = hi$1 + 1 >> 0;
				_i$1++;
				continue;
			}
			c$1 = lo$1;
			while (true) {
				if (!(c$1 <= hi$1)) { break; }
				if (nextLo <= (c$1 - 1 >> 0)) {
					r = appendRange(r, nextLo, c$1 - 1 >> 0);
				}
				nextLo = c$1 + 1 >> 0;
				c$1 = c$1 + (stride$1) >> 0;
			}
			_i$1++;
		}
		if (nextLo <= 1114111) {
			r = appendRange(r, nextLo, 1114111);
		}
		return r;
	};
	negateClass = function(r) {
		var $ptr, _tmp, _tmp$1, hi, i, lo, nextLo, r, w, x, x$1;
		nextLo = 0;
		w = 0;
		i = 0;
		while (true) {
			if (!(i < r.$length)) { break; }
			_tmp = ((i < 0 || i >= r.$length) ? $throwRuntimeError("index out of range") : r.$array[r.$offset + i]);
			_tmp$1 = (x = i + 1 >> 0, ((x < 0 || x >= r.$length) ? $throwRuntimeError("index out of range") : r.$array[r.$offset + x]));
			lo = _tmp;
			hi = _tmp$1;
			if (nextLo <= (lo - 1 >> 0)) {
				((w < 0 || w >= r.$length) ? $throwRuntimeError("index out of range") : r.$array[r.$offset + w] = nextLo);
				(x$1 = w + 1 >> 0, ((x$1 < 0 || x$1 >= r.$length) ? $throwRuntimeError("index out of range") : r.$array[r.$offset + x$1] = (lo - 1 >> 0)));
				w = w + (2) >> 0;
			}
			nextLo = hi + 1 >> 0;
			i = i + (2) >> 0;
		}
		r = $subslice(r, 0, w);
		if (nextLo <= 1114111) {
			r = $append(r, nextLo, 1114111);
		}
		return r;
	};
	ranges.ptr.prototype.Less = function(i, j) {
		var $ptr, i, j, p, ra, x, x$1;
		ra = $clone(this, ranges);
		p = ra.p.$get();
		i = $imul(i, (2));
		j = $imul(j, (2));
		return ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]) || (((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]) === ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j])) && (x = i + 1 >> 0, ((x < 0 || x >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x])) > (x$1 = j + 1 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$1]));
	};
	ranges.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	ranges.ptr.prototype.Len = function() {
		var $ptr, _q, ra;
		ra = $clone(this, ranges);
		return (_q = ra.p.$get().$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	ranges.prototype.Len = function() { return this.$val.Len(); };
	ranges.ptr.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, i, j, p, ra, x, x$1, x$2, x$3;
		ra = $clone(this, ranges);
		p = ra.p.$get();
		i = $imul(i, (2));
		j = $imul(j, (2));
		_tmp = ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]);
		_tmp$1 = (x = j + 1 >> 0, ((x < 0 || x >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x]));
		_tmp$2 = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]);
		_tmp$3 = (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$1]));
		((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i] = _tmp);
		(x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$2] = _tmp$1));
		((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j] = _tmp$2);
		(x$3 = j + 1 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$3] = _tmp$3));
	};
	ranges.prototype.Swap = function(i, j) { return this.$val.Swap(i, j); };
	checkUTF8 = function(s) {
		var $ptr, _tuple, rune, s, size;
		while (true) {
			if (!(!(s === ""))) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			rune = _tuple[0];
			size = _tuple[1];
			if ((rune === 65533) && (size === 1)) {
				return new Error.ptr("invalid UTF-8", s);
			}
			s = s.substring(size);
		}
		return $ifaceNil;
	};
	nextRune = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, err, s, size, t;
		c = 0;
		t = "";
		err = $ifaceNil;
		_tuple = utf8.DecodeRuneInString(s);
		c = _tuple[0];
		size = _tuple[1];
		if ((c === 65533) && (size === 1)) {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = new Error.ptr("invalid UTF-8", s);
			c = _tmp;
			t = _tmp$1;
			err = _tmp$2;
			return [c, t, err];
		}
		_tmp$3 = c;
		_tmp$4 = s.substring(size);
		_tmp$5 = $ifaceNil;
		c = _tmp$3;
		t = _tmp$4;
		err = _tmp$5;
		return [c, t, err];
	};
	isalnum = function(c) {
		var $ptr, c;
		return 48 <= c && c <= 57 || 65 <= c && c <= 90 || 97 <= c && c <= 122;
	};
	unhex = function(c) {
		var $ptr, c;
		if (48 <= c && c <= 57) {
			return c - 48 >> 0;
		}
		if (97 <= c && c <= 102) {
			return (c - 97 >> 0) + 10 >> 0;
		}
		if (65 <= c && c <= 70) {
			return (c - 65 >> 0) + 10 >> 0;
		}
		return -1;
	};
	InstOp.prototype.String = function() {
		var $ptr, i;
		i = this.$val;
		if ((i >>> 0) >= (instOpNames.$length >>> 0)) {
			return "";
		}
		return ((i < 0 || i >= instOpNames.$length) ? $throwRuntimeError("index out of range") : instOpNames.$array[instOpNames.$offset + i]);
	};
	$ptrType(InstOp).prototype.String = function() { return new InstOp(this.$get()).String(); };
	EmptyOpContext = function(r1, r2) {
		var $ptr, boundary, op, r1, r2;
		op = 32;
		boundary = 0;
		if (IsWordChar(r1)) {
			boundary = 1;
		} else if (r1 === 10) {
			op = (op | (1)) >>> 0;
		} else if (r1 < 0) {
			op = (op | (5)) >>> 0;
		}
		if (IsWordChar(r2)) {
			boundary = (boundary ^ (1)) << 24 >>> 24;
		} else if (r2 === 10) {
			op = (op | (2)) >>> 0;
		} else if (r2 < 0) {
			op = (op | (10)) >>> 0;
		}
		if (!((boundary === 0))) {
			op = (op ^ (48)) << 24 >>> 24;
		}
		return op;
	};
	$pkg.EmptyOpContext = EmptyOpContext;
	IsWordChar = function(r) {
		var $ptr, r;
		return 65 <= r && r <= 90 || 97 <= r && r <= 122 || 48 <= r && r <= 57 || (r === 95);
	};
	$pkg.IsWordChar = IsWordChar;
	Prog.ptr.prototype.String = function() {
		var $ptr, b, p;
		p = this;
		b = new bytes.Buffer.ptr(sliceType$6.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		dumpProg(b, p);
		return b.String();
	};
	Prog.prototype.String = function() { return this.$val.String(); };
	Prog.ptr.prototype.skipNop = function(pc) {
		var $ptr, i, p, pc, x, x$1;
		p = this;
		i = (x = p.Inst, ((pc < 0 || pc >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + pc]));
		while (true) {
			if (!((i.Op === 6) || (i.Op === 2))) { break; }
			pc = i.Out;
			i = (x$1 = p.Inst, ((pc < 0 || pc >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + pc]));
		}
		return [i, pc];
	};
	Prog.prototype.skipNop = function(pc) { return this.$val.skipNop(pc); };
	Inst.ptr.prototype.op = function() {
		var $ptr, _ref, i, op;
		i = this;
		op = i.Op;
		_ref = op;
		if (_ref === 8 || _ref === 9 || _ref === 10) {
			op = 7;
		}
		return op;
	};
	Inst.prototype.op = function() { return this.$val.op(); };
	Prog.ptr.prototype.Prefix = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, buf, complete, i, p, prefix, x;
		prefix = "";
		complete = false;
		p = this;
		_tuple = p.skipNop((p.Start >>> 0));
		i = _tuple[0];
		if (!((i.op() === 7)) || !((i.Rune.$length === 1))) {
			_tmp = "";
			_tmp$1 = i.Op === 4;
			prefix = _tmp;
			complete = _tmp$1;
			return [prefix, complete];
		}
		buf = new bytes.Buffer.ptr(sliceType$6.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		while (true) {
			if (!((i.op() === 7) && (i.Rune.$length === 1) && ((((i.Arg << 16 >>> 16) & 1) >>> 0) === 0))) { break; }
			buf.WriteRune((x = i.Rune, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])));
			_tuple$1 = p.skipNop(i.Out);
			i = _tuple$1[0];
		}
		_tmp$2 = buf.String();
		_tmp$3 = i.Op === 4;
		prefix = _tmp$2;
		complete = _tmp$3;
		return [prefix, complete];
	};
	Prog.prototype.Prefix = function() { return this.$val.Prefix(); };
	Prog.ptr.prototype.StartCond = function() {
		var $ptr, _ref, flag, i, p, pc, x, x$1;
		p = this;
		flag = 0;
		pc = (p.Start >>> 0);
		i = (x = p.Inst, ((pc < 0 || pc >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + pc]));
		Loop:
		while (true) {
			_ref = i.Op;
			if (_ref === 3) {
				flag = (flag | ((i.Arg << 24 >>> 24))) >>> 0;
			} else if (_ref === 5) {
				return 255;
			} else if (_ref === 2 || _ref === 6) {
			} else {
				break Loop;
			}
			pc = i.Out;
			i = (x$1 = p.Inst, ((pc < 0 || pc >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + pc]));
		}
		return flag;
	};
	Prog.prototype.StartCond = function() { return this.$val.StartCond(); };
	Inst.ptr.prototype.MatchRune = function(r) {
		var $ptr, i, r;
		i = this;
		return !((i.MatchRunePos(r) === -1));
	};
	Inst.prototype.MatchRune = function(r) { return this.$val.MatchRune(r); };
	Inst.ptr.prototype.MatchRunePos = function(r) {
		var $ptr, _q, _q$1, _q$2, c, hi, i, j, lo, m, r, r0, r1, rune, x, x$1, x$2;
		i = this;
		rune = i.Rune;
		if (rune.$length === 1) {
			r0 = (0 >= rune.$length ? $throwRuntimeError("index out of range") : rune.$array[rune.$offset + 0]);
			if (r === r0) {
				return 0;
			}
			if (!(((((i.Arg << 16 >>> 16) & 1) >>> 0) === 0))) {
				r1 = unicode.SimpleFold(r0);
				while (true) {
					if (!(!((r1 === r0)))) { break; }
					if (r === r1) {
						return 0;
					}
					r1 = unicode.SimpleFold(r1);
				}
			}
			return -1;
		}
		j = 0;
		while (true) {
			if (!(j < rune.$length && j <= 8)) { break; }
			if (r < ((j < 0 || j >= rune.$length) ? $throwRuntimeError("index out of range") : rune.$array[rune.$offset + j])) {
				return -1;
			}
			if (r <= (x = j + 1 >> 0, ((x < 0 || x >= rune.$length) ? $throwRuntimeError("index out of range") : rune.$array[rune.$offset + x]))) {
				return (_q = j / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			}
			j = j + (2) >> 0;
		}
		lo = 0;
		hi = (_q$1 = rune.$length / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q$2 = ((hi - lo >> 0)) / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			c = (x$1 = $imul(2, m), ((x$1 < 0 || x$1 >= rune.$length) ? $throwRuntimeError("index out of range") : rune.$array[rune.$offset + x$1]));
			if (c <= r) {
				if (r <= (x$2 = ($imul(2, m)) + 1 >> 0, ((x$2 < 0 || x$2 >= rune.$length) ? $throwRuntimeError("index out of range") : rune.$array[rune.$offset + x$2]))) {
					return m;
				}
				lo = m + 1 >> 0;
			} else {
				hi = m;
			}
		}
		return -1;
	};
	Inst.prototype.MatchRunePos = function(r) { return this.$val.MatchRunePos(r); };
	wordRune = function(r) {
		var $ptr, r;
		return (r === 95) || (65 <= r && r <= 90) || (97 <= r && r <= 122) || (48 <= r && r <= 57);
	};
	Inst.ptr.prototype.MatchEmptyWidth = function(before, after) {
		var $ptr, _ref, after, before, i;
		i = this;
		_ref = (i.Arg << 24 >>> 24);
		if (_ref === 1) {
			return (before === 10) || (before === -1);
		} else if (_ref === 2) {
			return (after === 10) || (after === -1);
		} else if (_ref === 4) {
			return before === -1;
		} else if (_ref === 8) {
			return after === -1;
		} else if (_ref === 16) {
			return !(wordRune(before) === wordRune(after));
		} else if (_ref === 32) {
			return wordRune(before) === wordRune(after);
		}
		$panic(new $String("unknown empty width arg"));
	};
	Inst.prototype.MatchEmptyWidth = function(before, after) { return this.$val.MatchEmptyWidth(before, after); };
	Inst.ptr.prototype.String = function() {
		var $ptr, b, i;
		i = this;
		b = new bytes.Buffer.ptr(sliceType$6.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		dumpInst(b, i);
		return b.String();
	};
	Inst.prototype.String = function() { return this.$val.String(); };
	bw = function(b, args) {
		var $ptr, _i, _ref, args, b, s;
		_ref = args;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			b.WriteString(s);
			_i++;
		}
	};
	dumpProg = function(b, p) {
		var $ptr, _i, _ref, b, i, j, p, pc, x;
		_ref = p.Inst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			j = _i;
			i = (x = p.Inst, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]));
			pc = strconv.Itoa(j);
			if (pc.length < 3) {
				b.WriteString("   ".substring(pc.length));
			}
			if (j === p.Start) {
				pc = pc + ("*");
			}
			bw(b, new sliceType$3([pc, "\t"]));
			dumpInst(b, i);
			bw(b, new sliceType$3(["\n"]));
			_i++;
		}
	};
	u32 = function(i) {
		var $ptr, i;
		return strconv.FormatUint(new $Uint64(0, i), 10);
	};
	dumpInst = function(b, i) {
		var $ptr, _ref, b, i;
		_ref = i.Op;
		if (_ref === 0) {
			bw(b, new sliceType$3(["alt -> ", u32(i.Out), ", ", u32(i.Arg)]));
		} else if (_ref === 1) {
			bw(b, new sliceType$3(["altmatch -> ", u32(i.Out), ", ", u32(i.Arg)]));
		} else if (_ref === 2) {
			bw(b, new sliceType$3(["cap ", u32(i.Arg), " -> ", u32(i.Out)]));
		} else if (_ref === 3) {
			bw(b, new sliceType$3(["empty ", u32(i.Arg), " -> ", u32(i.Out)]));
		} else if (_ref === 4) {
			bw(b, new sliceType$3(["match"]));
		} else if (_ref === 5) {
			bw(b, new sliceType$3(["fail"]));
		} else if (_ref === 6) {
			bw(b, new sliceType$3(["nop -> ", u32(i.Out)]));
		} else if (_ref === 7) {
			if (i.Rune === sliceType.nil) {
				bw(b, new sliceType$3(["rune <nil>"]));
			}
			bw(b, new sliceType$3(["rune ", strconv.QuoteToASCII($runesToString(i.Rune))]));
			if (!(((((i.Arg << 16 >>> 16) & 1) >>> 0) === 0))) {
				bw(b, new sliceType$3(["/i"]));
			}
			bw(b, new sliceType$3([" -> ", u32(i.Out)]));
		} else if (_ref === 8) {
			bw(b, new sliceType$3(["rune1 ", strconv.QuoteToASCII($runesToString(i.Rune)), " -> ", u32(i.Out)]));
		} else if (_ref === 9) {
			bw(b, new sliceType$3(["any -> ", u32(i.Out)]));
		} else if (_ref === 10) {
			bw(b, new sliceType$3(["anynotnl -> ", u32(i.Out)]));
		}
	};
	Regexp.ptr.prototype.Equal = function(y) {
		var $ptr, _i, _i$1, _ref, _ref$1, _ref$2, i, i$1, r, sub, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y;
		x = this;
		if (x === ptrType$1.nil || y === ptrType$1.nil) {
			return x === y;
		}
		if (!((x.Op === y.Op))) {
			return false;
		}
		_ref = x.Op;
		if (_ref === 10) {
			if (!((((x.Flags & 256) >>> 0) === ((y.Flags & 256) >>> 0)))) {
				return false;
			}
		} else if (_ref === 3 || _ref === 4) {
			if (!((x.Rune.$length === y.Rune.$length))) {
				return false;
			}
			_ref$1 = x.Rune;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				i = _i;
				r = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				if (!((r === (x$1 = y.Rune, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]))))) {
					return false;
				}
				_i++;
			}
		} else if (_ref === 19 || _ref === 18) {
			if (!((x.Sub.$length === y.Sub.$length))) {
				return false;
			}
			_ref$2 = x.Sub;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$2.$length)) { break; }
				i$1 = _i$1;
				sub = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]);
				if (!sub.Equal((x$2 = y.Sub, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1])))) {
					return false;
				}
				_i$1++;
			}
		} else if (_ref === 14 || _ref === 15 || _ref === 16) {
			if (!((((x.Flags & 32) >>> 0) === ((y.Flags & 32) >>> 0))) || !(x$3 = x.Sub, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).Equal((x$4 = y.Sub, (0 >= x$4.$length ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 0])))) {
				return false;
			}
		} else if (_ref === 17) {
			if (!((((x.Flags & 32) >>> 0) === ((y.Flags & 32) >>> 0))) || !((x.Min === y.Min)) || !((x.Max === y.Max)) || !(x$5 = x.Sub, (0 >= x$5.$length ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + 0])).Equal((x$6 = y.Sub, (0 >= x$6.$length ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + 0])))) {
				return false;
			}
		} else if (_ref === 13) {
			if (!((x.Cap === y.Cap)) || !(x.Name === y.Name) || !(x$7 = x.Sub, (0 >= x$7.$length ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + 0])).Equal((x$8 = y.Sub, (0 >= x$8.$length ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + 0])))) {
				return false;
			}
		}
		return true;
	};
	Regexp.prototype.Equal = function(y) { return this.$val.Equal(y); };
	writeRegexp = function(b, re) {
		var $ptr, _i, _i$1, _i$2, _r, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tmp, _tmp$1, _tmp$2, _tmp$3, b, hi, hi$1, i, i$1, i$2, lo, lo$1, r, re, sub, sub$1, sub$2, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_ref = re.Op;
		switch (0) { default: if (_ref === 1) {
			b.WriteString("[^\\x00-\\x{10FFFF}]");
		} else if (_ref === 2) {
			b.WriteString("(?:)");
		} else if (_ref === 3) {
			if (!((((re.Flags & 1) >>> 0) === 0))) {
				b.WriteString("(?i:");
			}
			_ref$1 = re.Rune;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				r = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				escape(b, r, false);
				_i++;
			}
			if (!((((re.Flags & 1) >>> 0) === 0))) {
				b.WriteString(")");
			}
		} else if (_ref === 4) {
			if (!(((_r = re.Rune.$length % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0))) {
				b.WriteString("[invalid char class]");
				break;
			}
			b.WriteRune(91);
			if (re.Rune.$length === 0) {
				b.WriteString("^\\x00-\\x{10FFFF}");
			} else if (((x = re.Rune, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])) === 0) && ((x$1 = re.Rune, x$2 = re.Rune.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2])) === 1114111)) {
				b.WriteRune(94);
				i = 1;
				while (true) {
					if (!(i < (re.Rune.$length - 1 >> 0))) { break; }
					_tmp = (x$3 = re.Rune, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i])) + 1 >> 0;
					_tmp$1 = (x$4 = re.Rune, x$5 = i + 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])) - 1 >> 0;
					lo = _tmp;
					hi = _tmp$1;
					escape(b, lo, lo === 45);
					if (!((lo === hi))) {
						b.WriteRune(45);
						escape(b, hi, hi === 45);
					}
					i = i + (2) >> 0;
				}
			} else {
				i$1 = 0;
				while (true) {
					if (!(i$1 < re.Rune.$length)) { break; }
					_tmp$2 = (x$6 = re.Rune, ((i$1 < 0 || i$1 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + i$1]));
					_tmp$3 = (x$7 = re.Rune, x$8 = i$1 + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + x$8]));
					lo$1 = _tmp$2;
					hi$1 = _tmp$3;
					escape(b, lo$1, lo$1 === 45);
					if (!((lo$1 === hi$1))) {
						b.WriteRune(45);
						escape(b, hi$1, hi$1 === 45);
					}
					i$1 = i$1 + (2) >> 0;
				}
			}
			b.WriteRune(93);
		} else if (_ref === 5) {
			b.WriteString("(?-s:.)");
		} else if (_ref === 6) {
			b.WriteString("(?s:.)");
		} else if (_ref === 7) {
			b.WriteRune(94);
		} else if (_ref === 8) {
			b.WriteRune(36);
		} else if (_ref === 9) {
			b.WriteString("\\A");
		} else if (_ref === 10) {
			if (!((((re.Flags & 256) >>> 0) === 0))) {
				b.WriteString("(?-m:$)");
			} else {
				b.WriteString("\\z");
			}
		} else if (_ref === 11) {
			b.WriteString("\\b");
		} else if (_ref === 12) {
			b.WriteString("\\B");
		} else if (_ref === 13) {
			if (!(re.Name === "")) {
				b.WriteString("(?P<");
				b.WriteString(re.Name);
				b.WriteRune(62);
			} else {
				b.WriteRune(40);
			}
			if (!(((x$9 = re.Sub, (0 >= x$9.$length ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + 0])).Op === 2))) {
				writeRegexp(b, (x$10 = re.Sub, (0 >= x$10.$length ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + 0])));
			}
			b.WriteRune(41);
		} else if (_ref === 14 || _ref === 15 || _ref === 16 || _ref === 17) {
			sub = (x$11 = re.Sub, (0 >= x$11.$length ? $throwRuntimeError("index out of range") : x$11.$array[x$11.$offset + 0]));
			if (sub.Op > 13 || (sub.Op === 3) && sub.Rune.$length > 1) {
				b.WriteString("(?:");
				writeRegexp(b, sub);
				b.WriteString(")");
			} else {
				writeRegexp(b, sub);
			}
			_ref$2 = re.Op;
			if (_ref$2 === 14) {
				b.WriteRune(42);
			} else if (_ref$2 === 15) {
				b.WriteRune(43);
			} else if (_ref$2 === 16) {
				b.WriteRune(63);
			} else if (_ref$2 === 17) {
				b.WriteRune(123);
				b.WriteString(strconv.Itoa(re.Min));
				if (!((re.Max === re.Min))) {
					b.WriteRune(44);
					if (re.Max >= 0) {
						b.WriteString(strconv.Itoa(re.Max));
					}
				}
				b.WriteRune(125);
			}
			if (!((((re.Flags & 32) >>> 0) === 0))) {
				b.WriteRune(63);
			}
		} else if (_ref === 18) {
			_ref$3 = re.Sub;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$3.$length)) { break; }
				sub$1 = ((_i$1 < 0 || _i$1 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$1]);
				if (sub$1.Op === 19) {
					b.WriteString("(?:");
					writeRegexp(b, sub$1);
					b.WriteString(")");
				} else {
					writeRegexp(b, sub$1);
				}
				_i$1++;
			}
		} else if (_ref === 19) {
			_ref$4 = re.Sub;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$4.$length)) { break; }
				i$2 = _i$2;
				sub$2 = ((_i$2 < 0 || _i$2 >= _ref$4.$length) ? $throwRuntimeError("index out of range") : _ref$4.$array[_ref$4.$offset + _i$2]);
				if (i$2 > 0) {
					b.WriteRune(124);
				}
				writeRegexp(b, sub$2);
				_i$2++;
			}
		} else {
			b.WriteString("<invalid op" + strconv.Itoa((re.Op >> 0)) + ">");
		} }
	};
	Regexp.ptr.prototype.String = function() {
		var $ptr, b, re;
		re = this;
		b = new bytes.Buffer.ptr(sliceType$6.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		writeRegexp(b, re);
		return b.String();
	};
	Regexp.prototype.String = function() { return this.$val.String(); };
	escape = function(b, r, force) {
		var $ptr, _ref, b, force, r, s;
		if (unicode.IsPrint(r)) {
			if (strings.IndexRune("\\.+*?()|[]{}^$", r) >= 0 || force) {
				b.WriteRune(92);
			}
			b.WriteRune(r);
			return;
		}
		_ref = r;
		switch (0) { default: if (_ref === 7) {
			b.WriteString("\\a");
		} else if (_ref === 12) {
			b.WriteString("\\f");
		} else if (_ref === 10) {
			b.WriteString("\\n");
		} else if (_ref === 13) {
			b.WriteString("\\r");
		} else if (_ref === 9) {
			b.WriteString("\\t");
		} else if (_ref === 11) {
			b.WriteString("\\v");
		} else {
			if (r < 256) {
				b.WriteString("\\x");
				s = strconv.FormatInt(new $Int64(0, r), 16);
				if (s.length === 1) {
					b.WriteRune(48);
				}
				b.WriteString(s);
				break;
			}
			b.WriteString("\\x{");
			b.WriteString(strconv.FormatInt(new $Int64(0, r), 16));
			b.WriteString("}");
		} }
	};
	Regexp.ptr.prototype.MaxCap = function() {
		var $ptr, _i, _ref, m, n, re, sub;
		re = this;
		m = 0;
		if (re.Op === 13) {
			m = re.Cap;
		}
		_ref = re.Sub;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sub = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			n = sub.MaxCap();
			if (m < n) {
				m = n;
			}
			_i++;
		}
		return m;
	};
	Regexp.prototype.MaxCap = function() { return this.$val.MaxCap(); };
	Regexp.ptr.prototype.CapNames = function() {
		var $ptr, names, re;
		re = this;
		names = $makeSlice(sliceType$3, (re.MaxCap() + 1 >> 0));
		re.capNames(names);
		return names;
	};
	Regexp.prototype.CapNames = function() { return this.$val.CapNames(); };
	Regexp.ptr.prototype.capNames = function(names) {
		var $ptr, _i, _ref, names, re, sub, x;
		re = this;
		if (re.Op === 13) {
			(x = re.Cap, ((x < 0 || x >= names.$length) ? $throwRuntimeError("index out of range") : names.$array[names.$offset + x] = re.Name));
		}
		_ref = re.Sub;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sub = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			sub.capNames(names);
			_i++;
		}
	};
	Regexp.prototype.capNames = function(names) { return this.$val.capNames(names); };
	Regexp.ptr.prototype.Simplify = function() {
		var $ptr, _i, _ref, _ref$1, i, i$1, i$2, i$3, nre, nre$1, nre2, nsub, prefix, re, sub, sub$1, sub$2, suffix, x, x$1;
		re = this;
		if (re === ptrType$1.nil) {
			return ptrType$1.nil;
		}
		_ref = re.Op;
		if (_ref === 13 || _ref === 18 || _ref === 19) {
			nre = re;
			_ref$1 = re.Sub;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				i = _i;
				sub = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				nsub = sub.Simplify();
				if (nre === re && !(nsub === sub)) {
					nre = new Regexp.ptr(0, 0, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, "");
					Regexp.copy(nre, re);
					nre.Rune = sliceType.nil;
					nre.Sub = $appendSlice($subslice(new sliceType$5(nre.Sub0), 0, 0), $subslice(re.Sub, 0, i));
				}
				if (!(nre === re)) {
					nre.Sub = $append(nre.Sub, nsub);
				}
				_i++;
			}
			return nre;
		} else if (_ref === 14 || _ref === 15 || _ref === 16) {
			sub$1 = (x = re.Sub, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Simplify();
			return simplify1(re.Op, re.Flags, sub$1, re);
		} else if (_ref === 17) {
			if ((re.Min === 0) && (re.Max === 0)) {
				return new Regexp.ptr(2, 0, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, "");
			}
			sub$2 = (x$1 = re.Sub, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])).Simplify();
			if (re.Max === -1) {
				if (re.Min === 0) {
					return simplify1(14, re.Flags, sub$2, ptrType$1.nil);
				}
				if (re.Min === 1) {
					return simplify1(15, re.Flags, sub$2, ptrType$1.nil);
				}
				nre$1 = new Regexp.ptr(18, 0, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, "");
				nre$1.Sub = $subslice(new sliceType$5(nre$1.Sub0), 0, 0);
				i$1 = 0;
				while (true) {
					if (!(i$1 < (re.Min - 1 >> 0))) { break; }
					nre$1.Sub = $append(nre$1.Sub, sub$2);
					i$1 = i$1 + (1) >> 0;
				}
				nre$1.Sub = $append(nre$1.Sub, simplify1(15, re.Flags, sub$2, ptrType$1.nil));
				return nre$1;
			}
			if ((re.Min === 1) && (re.Max === 1)) {
				return sub$2;
			}
			prefix = ptrType$1.nil;
			if (re.Min > 0) {
				prefix = new Regexp.ptr(18, 0, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, "");
				prefix.Sub = $subslice(new sliceType$5(prefix.Sub0), 0, 0);
				i$2 = 0;
				while (true) {
					if (!(i$2 < re.Min)) { break; }
					prefix.Sub = $append(prefix.Sub, sub$2);
					i$2 = i$2 + (1) >> 0;
				}
			}
			if (re.Max > re.Min) {
				suffix = simplify1(16, re.Flags, sub$2, ptrType$1.nil);
				i$3 = re.Min + 1 >> 0;
				while (true) {
					if (!(i$3 < re.Max)) { break; }
					nre2 = new Regexp.ptr(18, 0, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, "");
					nre2.Sub = $append($subslice(new sliceType$5(nre2.Sub0), 0, 0), sub$2, suffix);
					suffix = simplify1(16, re.Flags, nre2, ptrType$1.nil);
					i$3 = i$3 + (1) >> 0;
				}
				if (prefix === ptrType$1.nil) {
					return suffix;
				}
				prefix.Sub = $append(prefix.Sub, suffix);
			}
			if (!(prefix === ptrType$1.nil)) {
				return prefix;
			}
			return new Regexp.ptr(1, 0, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, "");
		}
		return re;
	};
	Regexp.prototype.Simplify = function() { return this.$val.Simplify(); };
	simplify1 = function(op, flags, sub, re) {
		var $ptr, flags, op, re, sub, x;
		if (sub.Op === 2) {
			return sub;
		}
		if ((op === sub.Op) && (((flags & 32) >>> 0) === ((sub.Flags & 32) >>> 0))) {
			return sub;
		}
		if (!(re === ptrType$1.nil) && (re.Op === op) && (((re.Flags & 32) >>> 0) === ((flags & 32) >>> 0)) && sub === (x = re.Sub, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))) {
			return re;
		}
		re = new Regexp.ptr(op, flags, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, "");
		re.Sub = $append($subslice(new sliceType$5(re.Sub0), 0, 0), sub);
		return re;
	};
	patchList.methods = [{prop: "next", name: "next", pkg: "regexp/syntax", typ: $funcType([ptrType], [patchList], false)}, {prop: "patch", name: "patch", pkg: "regexp/syntax", typ: $funcType([ptrType, $Uint32], [], false)}, {prop: "append", name: "append", pkg: "regexp/syntax", typ: $funcType([ptrType, patchList], [patchList], false)}];
	ptrType$4.methods = [{prop: "init", name: "init", pkg: "regexp/syntax", typ: $funcType([], [], false)}, {prop: "compile", name: "compile", pkg: "regexp/syntax", typ: $funcType([ptrType$1], [frag], false)}, {prop: "inst", name: "inst", pkg: "regexp/syntax", typ: $funcType([InstOp], [frag], false)}, {prop: "nop", name: "nop", pkg: "regexp/syntax", typ: $funcType([], [frag], false)}, {prop: "fail", name: "fail", pkg: "regexp/syntax", typ: $funcType([], [frag], false)}, {prop: "cap", name: "cap", pkg: "regexp/syntax", typ: $funcType([$Uint32], [frag], false)}, {prop: "cat", name: "cat", pkg: "regexp/syntax", typ: $funcType([frag, frag], [frag], false)}, {prop: "alt", name: "alt", pkg: "regexp/syntax", typ: $funcType([frag, frag], [frag], false)}, {prop: "quest", name: "quest", pkg: "regexp/syntax", typ: $funcType([frag, $Bool], [frag], false)}, {prop: "star", name: "star", pkg: "regexp/syntax", typ: $funcType([frag, $Bool], [frag], false)}, {prop: "plus", name: "plus", pkg: "regexp/syntax", typ: $funcType([frag, $Bool], [frag], false)}, {prop: "empty", name: "empty", pkg: "regexp/syntax", typ: $funcType([EmptyOp], [frag], false)}, {prop: "rune", name: "rune", pkg: "regexp/syntax", typ: $funcType([sliceType, Flags], [frag], false)}];
	ptrType$5.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ErrorCode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$6.methods = [{prop: "newRegexp", name: "newRegexp", pkg: "regexp/syntax", typ: $funcType([Op], [ptrType$1], false)}, {prop: "reuse", name: "reuse", pkg: "regexp/syntax", typ: $funcType([ptrType$1], [], false)}, {prop: "push", name: "push", pkg: "regexp/syntax", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "maybeConcat", name: "maybeConcat", pkg: "regexp/syntax", typ: $funcType([$Int32, Flags], [$Bool], false)}, {prop: "newLiteral", name: "newLiteral", pkg: "regexp/syntax", typ: $funcType([$Int32, Flags], [ptrType$1], false)}, {prop: "literal", name: "literal", pkg: "regexp/syntax", typ: $funcType([$Int32], [], false)}, {prop: "op", name: "op", pkg: "regexp/syntax", typ: $funcType([Op], [ptrType$1], false)}, {prop: "repeat", name: "repeat", pkg: "regexp/syntax", typ: $funcType([Op, $Int, $Int, $String, $String, $String], [$String, $error], false)}, {prop: "concat", name: "concat", pkg: "regexp/syntax", typ: $funcType([], [ptrType$1], false)}, {prop: "alternate", name: "alternate", pkg: "regexp/syntax", typ: $funcType([], [ptrType$1], false)}, {prop: "collapse", name: "collapse", pkg: "regexp/syntax", typ: $funcType([sliceType$5, Op], [ptrType$1], false)}, {prop: "factor", name: "factor", pkg: "regexp/syntax", typ: $funcType([sliceType$5, Flags], [sliceType$5], false)}, {prop: "leadingString", name: "leadingString", pkg: "regexp/syntax", typ: $funcType([ptrType$1], [sliceType, Flags], false)}, {prop: "removeLeadingString", name: "removeLeadingString", pkg: "regexp/syntax", typ: $funcType([ptrType$1, $Int], [ptrType$1], false)}, {prop: "leadingRegexp", name: "leadingRegexp", pkg: "regexp/syntax", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "removeLeadingRegexp", name: "removeLeadingRegexp", pkg: "regexp/syntax", typ: $funcType([ptrType$1, $Bool], [ptrType$1], false)}, {prop: "parseRepeat", name: "parseRepeat", pkg: "regexp/syntax", typ: $funcType([$String], [$Int, $Int, $String, $Bool], false)}, {prop: "parsePerlFlags", name: "parsePerlFlags", pkg: "regexp/syntax", typ: $funcType([$String], [$String, $error], false)}, {prop: "parseInt", name: "parseInt", pkg: "regexp/syntax", typ: $funcType([$String], [$Int, $String, $Bool], false)}, {prop: "parseVerticalBar", name: "parseVerticalBar", pkg: "regexp/syntax", typ: $funcType([], [$error], false)}, {prop: "swapVerticalBar", name: "swapVerticalBar", pkg: "regexp/syntax", typ: $funcType([], [$Bool], false)}, {prop: "parseRightParen", name: "parseRightParen", pkg: "regexp/syntax", typ: $funcType([], [$error], false)}, {prop: "parseEscape", name: "parseEscape", pkg: "regexp/syntax", typ: $funcType([$String], [$Int32, $String, $error], false)}, {prop: "parseClassChar", name: "parseClassChar", pkg: "regexp/syntax", typ: $funcType([$String, $String], [$Int32, $String, $error], false)}, {prop: "parsePerlClassEscape", name: "parsePerlClassEscape", pkg: "regexp/syntax", typ: $funcType([$String, sliceType], [sliceType, $String], false)}, {prop: "parseNamedClass", name: "parseNamedClass", pkg: "regexp/syntax", typ: $funcType([$String, sliceType], [sliceType, $String, $error], false)}, {prop: "appendGroup", name: "appendGroup", pkg: "regexp/syntax", typ: $funcType([sliceType, charGroup], [sliceType], false)}, {prop: "parseUnicodeClass", name: "parseUnicodeClass", pkg: "regexp/syntax", typ: $funcType([$String, sliceType], [sliceType, $String, $error], false)}, {prop: "parseClass", name: "parseClass", pkg: "regexp/syntax", typ: $funcType([$String], [$String, $error], false)}];
	ranges.methods = [{prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	ptrType.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "skipNop", name: "skipNop", pkg: "regexp/syntax", typ: $funcType([$Uint32], [ptrType$7, $Uint32], false)}, {prop: "Prefix", name: "Prefix", pkg: "", typ: $funcType([], [$String, $Bool], false)}, {prop: "StartCond", name: "StartCond", pkg: "", typ: $funcType([], [EmptyOp], false)}];
	InstOp.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$7.methods = [{prop: "op", name: "op", pkg: "regexp/syntax", typ: $funcType([], [InstOp], false)}, {prop: "MatchRune", name: "MatchRune", pkg: "", typ: $funcType([$Int32], [$Bool], false)}, {prop: "MatchRunePos", name: "MatchRunePos", pkg: "", typ: $funcType([$Int32], [$Int], false)}, {prop: "MatchEmptyWidth", name: "MatchEmptyWidth", pkg: "", typ: $funcType([$Int32, $Int32], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "Equal", name: "Equal", pkg: "", typ: $funcType([ptrType$1], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "MaxCap", name: "MaxCap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "CapNames", name: "CapNames", pkg: "", typ: $funcType([], [sliceType$3], false)}, {prop: "capNames", name: "capNames", pkg: "regexp/syntax", typ: $funcType([sliceType$3], [], false)}, {prop: "Simplify", name: "Simplify", pkg: "", typ: $funcType([], [ptrType$1], false)}];
	frag.init([{prop: "i", name: "i", pkg: "regexp/syntax", typ: $Uint32, tag: ""}, {prop: "out", name: "out", pkg: "regexp/syntax", typ: patchList, tag: ""}]);
	compiler.init([{prop: "p", name: "p", pkg: "regexp/syntax", typ: ptrType, tag: ""}]);
	Error.init([{prop: "Code", name: "Code", pkg: "", typ: ErrorCode, tag: ""}, {prop: "Expr", name: "Expr", pkg: "", typ: $String, tag: ""}]);
	parser.init([{prop: "flags", name: "flags", pkg: "regexp/syntax", typ: Flags, tag: ""}, {prop: "stack", name: "stack", pkg: "regexp/syntax", typ: sliceType$5, tag: ""}, {prop: "free", name: "free", pkg: "regexp/syntax", typ: ptrType$1, tag: ""}, {prop: "numCap", name: "numCap", pkg: "regexp/syntax", typ: $Int, tag: ""}, {prop: "wholeRegexp", name: "wholeRegexp", pkg: "regexp/syntax", typ: $String, tag: ""}, {prop: "tmpClass", name: "tmpClass", pkg: "regexp/syntax", typ: sliceType, tag: ""}]);
	charGroup.init([{prop: "sign", name: "sign", pkg: "regexp/syntax", typ: $Int, tag: ""}, {prop: "class$1", name: "class", pkg: "regexp/syntax", typ: sliceType, tag: ""}]);
	ranges.init([{prop: "p", name: "p", pkg: "regexp/syntax", typ: ptrType$2, tag: ""}]);
	Prog.init([{prop: "Inst", name: "Inst", pkg: "", typ: sliceType$4, tag: ""}, {prop: "Start", name: "Start", pkg: "", typ: $Int, tag: ""}, {prop: "NumCap", name: "NumCap", pkg: "", typ: $Int, tag: ""}]);
	Inst.init([{prop: "Op", name: "Op", pkg: "", typ: InstOp, tag: ""}, {prop: "Out", name: "Out", pkg: "", typ: $Uint32, tag: ""}, {prop: "Arg", name: "Arg", pkg: "", typ: $Uint32, tag: ""}, {prop: "Rune", name: "Rune", pkg: "", typ: sliceType, tag: ""}]);
	Regexp.init([{prop: "Op", name: "Op", pkg: "", typ: Op, tag: ""}, {prop: "Flags", name: "Flags", pkg: "", typ: Flags, tag: ""}, {prop: "Sub", name: "Sub", pkg: "", typ: sliceType$5, tag: ""}, {prop: "Sub0", name: "Sub0", pkg: "", typ: arrayType, tag: ""}, {prop: "Rune", name: "Rune", pkg: "", typ: sliceType, tag: ""}, {prop: "Rune0", name: "Rune0", pkg: "", typ: arrayType$1, tag: ""}, {prop: "Min", name: "Min", pkg: "", typ: $Int, tag: ""}, {prop: "Max", name: "Max", pkg: "", typ: $Int, tag: ""}, {prop: "Cap", name: "Cap", pkg: "", typ: $Int, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		anyRuneNotNL = new sliceType([0, 9, 11, 1114111]);
		anyRune = new sliceType([0, 1114111]);
		anyTable = new unicode.RangeTable.ptr(new sliceType$1([new unicode.Range16.ptr(0, 65535, 1)]), new sliceType$2([new unicode.Range32.ptr(65536, 1114111, 1)]), 0);
		code1 = new sliceType([48, 57]);
		code2 = new sliceType([9, 10, 12, 13, 32, 32]);
		code3 = new sliceType([48, 57, 65, 90, 95, 95, 97, 122]);
		perlGroup = $makeMap($String.keyFor, [{ k: "\\d", v: new charGroup.ptr(1, code1) }, { k: "\\D", v: new charGroup.ptr(-1, code1) }, { k: "\\s", v: new charGroup.ptr(1, code2) }, { k: "\\S", v: new charGroup.ptr(-1, code2) }, { k: "\\w", v: new charGroup.ptr(1, code3) }, { k: "\\W", v: new charGroup.ptr(-1, code3) }]);
		code4 = new sliceType([48, 57, 65, 90, 97, 122]);
		code5 = new sliceType([65, 90, 97, 122]);
		code6 = new sliceType([0, 127]);
		code7 = new sliceType([9, 9, 32, 32]);
		code8 = new sliceType([0, 31, 127, 127]);
		code9 = new sliceType([48, 57]);
		code10 = new sliceType([33, 126]);
		code11 = new sliceType([97, 122]);
		code12 = new sliceType([32, 126]);
		code13 = new sliceType([33, 47, 58, 64, 91, 96, 123, 126]);
		code14 = new sliceType([9, 13, 32, 32]);
		code15 = new sliceType([65, 90]);
		code16 = new sliceType([48, 57, 65, 90, 95, 95, 97, 122]);
		code17 = new sliceType([48, 57, 65, 70, 97, 102]);
		posixGroup = $makeMap($String.keyFor, [{ k: "[:alnum:]", v: new charGroup.ptr(1, code4) }, { k: "[:^alnum:]", v: new charGroup.ptr(-1, code4) }, { k: "[:alpha:]", v: new charGroup.ptr(1, code5) }, { k: "[:^alpha:]", v: new charGroup.ptr(-1, code5) }, { k: "[:ascii:]", v: new charGroup.ptr(1, code6) }, { k: "[:^ascii:]", v: new charGroup.ptr(-1, code6) }, { k: "[:blank:]", v: new charGroup.ptr(1, code7) }, { k: "[:^blank:]", v: new charGroup.ptr(-1, code7) }, { k: "[:cntrl:]", v: new charGroup.ptr(1, code8) }, { k: "[:^cntrl:]", v: new charGroup.ptr(-1, code8) }, { k: "[:digit:]", v: new charGroup.ptr(1, code9) }, { k: "[:^digit:]", v: new charGroup.ptr(-1, code9) }, { k: "[:graph:]", v: new charGroup.ptr(1, code10) }, { k: "[:^graph:]", v: new charGroup.ptr(-1, code10) }, { k: "[:lower:]", v: new charGroup.ptr(1, code11) }, { k: "[:^lower:]", v: new charGroup.ptr(-1, code11) }, { k: "[:print:]", v: new charGroup.ptr(1, code12) }, { k: "[:^print:]", v: new charGroup.ptr(-1, code12) }, { k: "[:punct:]", v: new charGroup.ptr(1, code13) }, { k: "[:^punct:]", v: new charGroup.ptr(-1, code13) }, { k: "[:space:]", v: new charGroup.ptr(1, code14) }, { k: "[:^space:]", v: new charGroup.ptr(-1, code14) }, { k: "[:upper:]", v: new charGroup.ptr(1, code15) }, { k: "[:^upper:]", v: new charGroup.ptr(-1, code15) }, { k: "[:word:]", v: new charGroup.ptr(1, code16) }, { k: "[:^word:]", v: new charGroup.ptr(-1, code16) }, { k: "[:xdigit:]", v: new charGroup.ptr(1, code17) }, { k: "[:^xdigit:]", v: new charGroup.ptr(-1, code17) }]);
		instOpNames = new sliceType$3(["InstAlt", "InstAltMatch", "InstCapture", "InstEmptyWidth", "InstMatch", "InstFail", "InstNop", "InstRune", "InstRune1", "InstRuneAny", "InstRuneAnyNotNL"]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["regexp"] = (function() {
	var $pkg = {}, $init, bytes, nosync, io, syntax, sort, strconv, strings, unicode, utf8, job, bitState, queue, entry, thread, machine, onePassProg, onePassInst, queueOnePass, runeSlice, Regexp, input, inputString, inputBytes, inputReader, ptrType, sliceType, sliceType$1, sliceType$2, ptrType$1, sliceType$3, ptrType$2, sliceType$4, ptrType$3, sliceType$5, ptrType$4, sliceType$6, ptrType$5, ptrType$6, arrayType, arrayType$1, ptrType$7, sliceType$7, ptrType$8, sliceType$8, ptrType$9, sliceType$9, ptrType$10, sliceType$10, sliceType$11, sliceType$12, sliceType$13, sliceType$14, ptrType$11, funcType, funcType$1, funcType$2, funcType$3, ptrType$12, ptrType$13, ptrType$14, notBacktrack, empty, noRune, noNext, anyRuneNotNL, anyRune, notOnePass, specialBytes, maxBitStateLen, newBitState, shouldBacktrack, progMachine, onePassPrefix, onePassNext, iop, newQueue, mergeRuneSets, cleanupOnePass, onePassCopy, makeOnePass, compileOnePass, Compile, compile, MustCompile, quote, special, QuoteMeta, extract;
	bytes = $packages["bytes"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	syntax = $packages["regexp/syntax"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	job = $pkg.job = $newType(0, $kindStruct, "regexp.job", "job", "regexp", function(pc_, arg_, pos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pc = 0;
			this.arg = 0;
			this.pos = 0;
			return;
		}
		this.pc = pc_;
		this.arg = arg_;
		this.pos = pos_;
	});
	bitState = $pkg.bitState = $newType(0, $kindStruct, "regexp.bitState", "bitState", "regexp", function(prog_, end_, cap_, input_, jobs_, visited_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.prog = ptrType$2.nil;
			this.end = 0;
			this.cap = sliceType.nil;
			this.input = $ifaceNil;
			this.jobs = sliceType$4.nil;
			this.visited = sliceType$2.nil;
			return;
		}
		this.prog = prog_;
		this.end = end_;
		this.cap = cap_;
		this.input = input_;
		this.jobs = jobs_;
		this.visited = visited_;
	});
	queue = $pkg.queue = $newType(0, $kindStruct, "regexp.queue", "queue", "regexp", function(sparse_, dense_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sparse = sliceType$2.nil;
			this.dense = sliceType$5.nil;
			return;
		}
		this.sparse = sparse_;
		this.dense = dense_;
	});
	entry = $pkg.entry = $newType(0, $kindStruct, "regexp.entry", "entry", "regexp", function(pc_, t_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pc = 0;
			this.t = ptrType$4.nil;
			return;
		}
		this.pc = pc_;
		this.t = t_;
	});
	thread = $pkg.thread = $newType(0, $kindStruct, "regexp.thread", "thread", "regexp", function(inst_, cap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.inst = ptrType$5.nil;
			this.cap = sliceType.nil;
			return;
		}
		this.inst = inst_;
		this.cap = cap_;
	});
	machine = $pkg.machine = $newType(0, $kindStruct, "regexp.machine", "machine", "regexp", function(re_, p_, op_, maxBitStateLen_, b_, q0_, q1_, pool_, matched_, matchcap_, inputBytes_, inputString_, inputReader_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.re = ptrType$3.nil;
			this.p = ptrType$2.nil;
			this.op = ptrType$1.nil;
			this.maxBitStateLen = 0;
			this.b = ptrType.nil;
			this.q0 = new queue.ptr(sliceType$2.nil, sliceType$5.nil);
			this.q1 = new queue.ptr(sliceType$2.nil, sliceType$5.nil);
			this.pool = sliceType$6.nil;
			this.matched = false;
			this.matchcap = sliceType.nil;
			this.inputBytes = new inputBytes.ptr(sliceType$3.nil);
			this.inputString = new inputString.ptr("");
			this.inputReader = new inputReader.ptr($ifaceNil, false, 0);
			return;
		}
		this.re = re_;
		this.p = p_;
		this.op = op_;
		this.maxBitStateLen = maxBitStateLen_;
		this.b = b_;
		this.q0 = q0_;
		this.q1 = q1_;
		this.pool = pool_;
		this.matched = matched_;
		this.matchcap = matchcap_;
		this.inputBytes = inputBytes_;
		this.inputString = inputString_;
		this.inputReader = inputReader_;
	});
	onePassProg = $pkg.onePassProg = $newType(0, $kindStruct, "regexp.onePassProg", "onePassProg", "regexp", function(Inst_, Start_, NumCap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Inst = sliceType$7.nil;
			this.Start = 0;
			this.NumCap = 0;
			return;
		}
		this.Inst = Inst_;
		this.Start = Start_;
		this.NumCap = NumCap_;
	});
	onePassInst = $pkg.onePassInst = $newType(0, $kindStruct, "regexp.onePassInst", "onePassInst", "regexp", function(Inst_, Next_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Inst = new syntax.Inst.ptr(0, 0, 0, sliceType$1.nil);
			this.Next = sliceType$2.nil;
			return;
		}
		this.Inst = Inst_;
		this.Next = Next_;
	});
	queueOnePass = $pkg.queueOnePass = $newType(0, $kindStruct, "regexp.queueOnePass", "queueOnePass", "regexp", function(sparse_, dense_, size_, nextIndex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sparse = sliceType$2.nil;
			this.dense = sliceType$2.nil;
			this.size = 0;
			this.nextIndex = 0;
			return;
		}
		this.sparse = sparse_;
		this.dense = dense_;
		this.size = size_;
		this.nextIndex = nextIndex_;
	});
	runeSlice = $pkg.runeSlice = $newType(12, $kindSlice, "regexp.runeSlice", "runeSlice", "regexp", null);
	Regexp = $pkg.Regexp = $newType(0, $kindStruct, "regexp.Regexp", "Regexp", "regexp", function(expr_, prog_, onepass_, prefix_, prefixBytes_, prefixComplete_, prefixRune_, prefixEnd_, cond_, numSubexp_, subexpNames_, longest_, mu_, machine_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.expr = "";
			this.prog = ptrType$2.nil;
			this.onepass = ptrType$1.nil;
			this.prefix = "";
			this.prefixBytes = sliceType$3.nil;
			this.prefixComplete = false;
			this.prefixRune = 0;
			this.prefixEnd = 0;
			this.cond = 0;
			this.numSubexp = 0;
			this.subexpNames = sliceType$9.nil;
			this.longest = false;
			this.mu = new nosync.Mutex.ptr(false);
			this.machine = sliceType$10.nil;
			return;
		}
		this.expr = expr_;
		this.prog = prog_;
		this.onepass = onepass_;
		this.prefix = prefix_;
		this.prefixBytes = prefixBytes_;
		this.prefixComplete = prefixComplete_;
		this.prefixRune = prefixRune_;
		this.prefixEnd = prefixEnd_;
		this.cond = cond_;
		this.numSubexp = numSubexp_;
		this.subexpNames = subexpNames_;
		this.longest = longest_;
		this.mu = mu_;
		this.machine = machine_;
	});
	input = $pkg.input = $newType(8, $kindInterface, "regexp.input", "input", "regexp", null);
	inputString = $pkg.inputString = $newType(0, $kindStruct, "regexp.inputString", "inputString", "regexp", function(str_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.str = "";
			return;
		}
		this.str = str_;
	});
	inputBytes = $pkg.inputBytes = $newType(0, $kindStruct, "regexp.inputBytes", "inputBytes", "regexp", function(str_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.str = sliceType$3.nil;
			return;
		}
		this.str = str_;
	});
	inputReader = $pkg.inputReader = $newType(0, $kindStruct, "regexp.inputReader", "inputReader", "regexp", function(r_, atEOT_, pos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.atEOT = false;
			this.pos = 0;
			return;
		}
		this.r = r_;
		this.atEOT = atEOT_;
		this.pos = pos_;
	});
	ptrType = $ptrType(bitState);
	sliceType = $sliceType($Int);
	sliceType$1 = $sliceType($Int32);
	sliceType$2 = $sliceType($Uint32);
	ptrType$1 = $ptrType(onePassProg);
	sliceType$3 = $sliceType($Uint8);
	ptrType$2 = $ptrType(syntax.Prog);
	sliceType$4 = $sliceType(job);
	ptrType$3 = $ptrType(Regexp);
	sliceType$5 = $sliceType(entry);
	ptrType$4 = $ptrType(thread);
	sliceType$6 = $sliceType(ptrType$4);
	ptrType$5 = $ptrType(syntax.Inst);
	ptrType$6 = $ptrType($Int);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$7 = $ptrType(queueOnePass);
	sliceType$7 = $sliceType(onePassInst);
	ptrType$8 = $ptrType($Uint32);
	sliceType$8 = $sliceType(sliceType$1);
	ptrType$9 = $ptrType(sliceType$1);
	sliceType$9 = $sliceType($String);
	ptrType$10 = $ptrType(machine);
	sliceType$10 = $sliceType(ptrType$10);
	sliceType$11 = $sliceType(sliceType$3);
	sliceType$12 = $sliceType(sliceType);
	sliceType$13 = $sliceType(sliceType$11);
	sliceType$14 = $sliceType(sliceType$9);
	ptrType$11 = $ptrType(queue);
	funcType = $funcType([$String], [$String], false);
	funcType$1 = $funcType([sliceType$3, sliceType], [sliceType$3], false);
	funcType$2 = $funcType([sliceType$3], [sliceType$3], false);
	funcType$3 = $funcType([sliceType], [], false);
	ptrType$12 = $ptrType(inputString);
	ptrType$13 = $ptrType(inputBytes);
	ptrType$14 = $ptrType(inputReader);
	maxBitStateLen = function(prog) {
		var $ptr, _q, prog;
		if (!shouldBacktrack(prog)) {
			return 0;
		}
		return (_q = 262144 / prog.Inst.$length, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	newBitState = function(prog) {
		var $ptr, prog;
		if (!shouldBacktrack(prog)) {
			return notBacktrack;
		}
		return new bitState.ptr(prog, 0, sliceType.nil, $ifaceNil, sliceType$4.nil, sliceType$2.nil);
	};
	shouldBacktrack = function(prog) {
		var $ptr, prog;
		return prog.Inst.$length <= 500;
	};
	bitState.ptr.prototype.reset = function(end, ncap) {
		var $ptr, _i, _i$1, _q, _ref, _ref$1, b, end, i, i$1, ncap, visitedSize, x, x$1;
		b = this;
		b.end = end;
		if (b.jobs.$capacity === 0) {
			b.jobs = $makeSlice(sliceType$4, 0, 256);
		} else {
			b.jobs = $subslice(b.jobs, 0, 0);
		}
		visitedSize = (_q = (((($imul(b.prog.Inst.$length, ((end + 1 >> 0)))) + 32 >> 0) - 1 >> 0)) / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (b.visited.$capacity < visitedSize) {
			b.visited = $makeSlice(sliceType$2, visitedSize, 8192);
		} else {
			b.visited = $subslice(b.visited, 0, visitedSize);
			_ref = b.visited;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				(x = b.visited, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = 0));
				_i++;
			}
		}
		if (b.cap.$capacity < ncap) {
			b.cap = $makeSlice(sliceType, ncap);
		} else {
			b.cap = $subslice(b.cap, 0, ncap);
		}
		_ref$1 = b.cap;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			(x$1 = b.cap, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1] = -1));
			_i$1++;
		}
	};
	bitState.prototype.reset = function(end, ncap) { return this.$val.reset(end, ncap); };
	bitState.ptr.prototype.shouldVisit = function(pc, pos) {
		var $ptr, _index, _q, _q$1, b, n, pc, pos, x, x$1, x$2, x$3, y, y$1;
		b = this;
		n = ((($imul((pc >> 0), ((b.end + 1 >> 0)))) + pos >> 0) >>> 0);
		if (!(((((x = b.visited, x$1 = (_q = n / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")), ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])) & (((y = (((n & 31) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
			return false;
		}
		_index = (_q$1 = n / 32, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		(x$3 = b.visited, ((_index < 0 || _index >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + _index] = (((x$2 = b.visited, ((_index < 0 || _index >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + _index])) | (((y$1 = (((n & 31) >>> 0)), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0)));
		return true;
	};
	bitState.prototype.shouldVisit = function(pc, pos) { return this.$val.shouldVisit(pc, pos); };
	bitState.ptr.prototype.push = function(pc, pos, arg) {
		var $ptr, arg, b, pc, pos, x;
		b = this;
		if ((x = b.prog.Inst, ((pc < 0 || pc >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + pc])).Op === 5) {
			return;
		}
		if ((arg === 0) && !b.shouldVisit(pc, pos)) {
			return;
		}
		b.jobs = $append(b.jobs, new job.ptr(pc, arg, pos));
	};
	bitState.prototype.push = function(pc, pos, arg) { return this.$val.push(pc, pos, arg); };
	machine.ptr.prototype.tryBacktrack = function(b, i, pc, pos) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _ref$2, _ref$3, _tuple, _tuple$1, _tuple$2, _tuple$3, arg, b, i, inst, l, longest, m, pc, pc$1, pos, pos$1, r, r$1, r$2, r$3, width, width$1, width$2, width$3, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; arg = $f.arg; b = $f.b; i = $f.i; inst = $f.inst; l = $f.l; longest = $f.longest; m = $f.m; pc = $f.pc; pc$1 = $f.pc$1; pos = $f.pos; pos$1 = $f.pos$1; r = $f.r; r$1 = $f.r$1; r$2 = $f.r$2; r$3 = $f.r$3; width = $f.width; width$1 = $f.width$1; width$2 = $f.width$2; width$3 = $f.width$3; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		longest = m.re.longest;
		m.matched = false;
		b.push(pc, pos, 0);
		/* while (true) { */ case 1:
			/* if (!(b.jobs.$length > 0)) { break; } */ if(!(b.jobs.$length > 0)) { $s = 2; continue; }
			l = b.jobs.$length - 1 >> 0;
			pc$1 = (x = b.jobs, ((l < 0 || l >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + l])).pc;
			pos$1 = (x$1 = b.jobs, ((l < 0 || l >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + l])).pos;
			arg = (x$2 = b.jobs, ((l < 0 || l >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + l])).arg;
			b.jobs = $subslice(b.jobs, 0, l);
			/* goto Skip */ $s = 3; continue;
			/* CheckAndLoop: */ case 4:
			if (!b.shouldVisit(pc$1, pos$1)) {
				/* continue; */ $s = 1; continue;
			}
			/* Skip: */ case 3:
			inst = $clone((x$3 = b.prog.Inst, ((pc$1 < 0 || pc$1 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + pc$1])), syntax.Inst);
			_ref = inst.Op;
			/* */ if (_ref === 5) { $s = 5; continue; }
			/* */ if (_ref === 0) { $s = 6; continue; }
			/* */ if (_ref === 1) { $s = 7; continue; }
			/* */ if (_ref === 7) { $s = 8; continue; }
			/* */ if (_ref === 8) { $s = 9; continue; }
			/* */ if (_ref === 10) { $s = 10; continue; }
			/* */ if (_ref === 9) { $s = 11; continue; }
			/* */ if (_ref === 2) { $s = 12; continue; }
			/* */ if (_ref === 3) { $s = 13; continue; }
			/* */ if (_ref === 6) { $s = 14; continue; }
			/* */ if (_ref === 4) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (_ref === 5) { */ case 5:
				$panic(new $String("unexpected InstFail"));
				$s = 17; continue;
			/* } else if (_ref === 0) { */ case 6:
				_ref$1 = arg;
				/* */ if (_ref$1 === 0) { $s = 18; continue; }
				/* */ if (_ref$1 === 1) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (_ref$1 === 0) { */ case 18:
					b.push(pc$1, pos$1, 1);
					pc$1 = inst.Out;
					/* goto CheckAndLoop */ $s = 4; continue;
					$s = 20; continue;
				/* } else if (_ref$1 === 1) { */ case 19:
					arg = 0;
					pc$1 = inst.Arg;
					/* goto CheckAndLoop */ $s = 4; continue;
				/* } */ case 20:
				$panic(new $String("bad arg in InstAlt"));
				$s = 17; continue;
			/* } else if (_ref === 1) { */ case 7:
				_ref$2 = (x$4 = b.prog.Inst, x$5 = inst.Out, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])).Op;
				/* */ if (_ref$2 === 7 || _ref$2 === 8 || _ref$2 === 9 || _ref$2 === 10) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (_ref$2 === 7 || _ref$2 === 8 || _ref$2 === 9 || _ref$2 === 10) { */ case 21:
					b.push(inst.Arg, pos$1, 0);
					pc$1 = inst.Arg;
					pos$1 = b.end;
					/* goto CheckAndLoop */ $s = 4; continue;
				/* } */ case 22:
				b.push(inst.Out, b.end, 0);
				pc$1 = inst.Out;
				/* goto CheckAndLoop */ $s = 4; continue;
				$s = 17; continue;
			/* } else if (_ref === 7) { */ case 8:
				_r = i.step(pos$1); /* */ $s = 23; case 23: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				r = _tuple[0];
				width = _tuple[1];
				/* */ if (!inst.MatchRune(r)) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (!inst.MatchRune(r)) { */ case 24:
					/* continue; */ $s = 1; continue;
				/* } */ case 25:
				pos$1 = pos$1 + (width) >> 0;
				pc$1 = inst.Out;
				/* goto CheckAndLoop */ $s = 4; continue;
				$s = 17; continue;
			/* } else if (_ref === 8) { */ case 9:
				_r$1 = i.step(pos$1); /* */ $s = 26; case 26: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				r$1 = _tuple$1[0];
				width$1 = _tuple$1[1];
				/* */ if (!((r$1 === (x$6 = inst.Rune, (0 >= x$6.$length ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + 0]))))) { $s = 27; continue; }
				/* */ $s = 28; continue;
				/* if (!((r$1 === (x$6 = inst.Rune, (0 >= x$6.$length ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + 0]))))) { */ case 27:
					/* continue; */ $s = 1; continue;
				/* } */ case 28:
				pos$1 = pos$1 + (width$1) >> 0;
				pc$1 = inst.Out;
				/* goto CheckAndLoop */ $s = 4; continue;
				$s = 17; continue;
			/* } else if (_ref === 10) { */ case 10:
				_r$2 = i.step(pos$1); /* */ $s = 29; case 29: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$2 = _r$2;
				r$2 = _tuple$2[0];
				width$2 = _tuple$2[1];
				/* */ if ((r$2 === 10) || (r$2 === -1)) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if ((r$2 === 10) || (r$2 === -1)) { */ case 30:
					/* continue; */ $s = 1; continue;
				/* } */ case 31:
				pos$1 = pos$1 + (width$2) >> 0;
				pc$1 = inst.Out;
				/* goto CheckAndLoop */ $s = 4; continue;
				$s = 17; continue;
			/* } else if (_ref === 9) { */ case 11:
				_r$3 = i.step(pos$1); /* */ $s = 32; case 32: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$3 = _r$3;
				r$3 = _tuple$3[0];
				width$3 = _tuple$3[1];
				/* */ if (r$3 === -1) { $s = 33; continue; }
				/* */ $s = 34; continue;
				/* if (r$3 === -1) { */ case 33:
					/* continue; */ $s = 1; continue;
				/* } */ case 34:
				pos$1 = pos$1 + (width$3) >> 0;
				pc$1 = inst.Out;
				/* goto CheckAndLoop */ $s = 4; continue;
				$s = 17; continue;
			/* } else if (_ref === 2) { */ case 12:
				_ref$3 = arg;
				/* */ if (_ref$3 === 0) { $s = 35; continue; }
				/* */ if (_ref$3 === 1) { $s = 36; continue; }
				/* */ $s = 37; continue;
				/* if (_ref$3 === 0) { */ case 35:
					if (0 <= inst.Arg && inst.Arg < (b.cap.$length >>> 0)) {
						b.push(pc$1, (x$7 = b.cap, x$8 = inst.Arg, ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + x$8])), 1);
						(x$9 = b.cap, x$10 = inst.Arg, ((x$10 < 0 || x$10 >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + x$10] = pos$1));
					}
					pc$1 = inst.Out;
					/* goto CheckAndLoop */ $s = 4; continue;
					$s = 37; continue;
				/* } else if (_ref$3 === 1) { */ case 36:
					(x$11 = b.cap, x$12 = inst.Arg, ((x$12 < 0 || x$12 >= x$11.$length) ? $throwRuntimeError("index out of range") : x$11.$array[x$11.$offset + x$12] = pos$1));
					/* continue; */ $s = 1; continue;
				/* } */ case 37:
				$panic(new $String("bad arg in InstCapture"));
				/* continue; */ $s = 1; continue;
				$s = 17; continue;
			/* } else if (_ref === 3) { */ case 13:
				_r$4 = i.context(pos$1); /* */ $s = 40; case 40: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ if (!(((((inst.Arg << 24 >>> 24) & ~_r$4) << 24 >>> 24) === 0))) { $s = 38; continue; }
				/* */ $s = 39; continue;
				/* if (!(((((inst.Arg << 24 >>> 24) & ~_r$4) << 24 >>> 24) === 0))) { */ case 38:
					/* continue; */ $s = 1; continue;
				/* } */ case 39:
				pc$1 = inst.Out;
				/* goto CheckAndLoop */ $s = 4; continue;
				$s = 17; continue;
			/* } else if (_ref === 6) { */ case 14:
				pc$1 = inst.Out;
				/* goto CheckAndLoop */ $s = 4; continue;
				$s = 17; continue;
			/* } else if (_ref === 4) { */ case 15:
				if (b.cap.$length === 0) {
					m.matched = true;
					return m.matched;
				}
				if (b.cap.$length > 1) {
					(x$13 = b.cap, (1 >= x$13.$length ? $throwRuntimeError("index out of range") : x$13.$array[x$13.$offset + 1] = pos$1));
				}
				if (!m.matched || (longest && pos$1 > 0 && pos$1 > (x$14 = m.matchcap, (1 >= x$14.$length ? $throwRuntimeError("index out of range") : x$14.$array[x$14.$offset + 1])))) {
					$copySlice(m.matchcap, b.cap);
				}
				m.matched = true;
				if (!longest) {
					return m.matched;
				}
				if (pos$1 === b.end) {
					return m.matched;
				}
				/* continue; */ $s = 1; continue;
				$s = 17; continue;
			/* } else { */ case 16:
				$panic(new $String("bad inst"));
			/* } */ case 17:
			$panic(new $String("unreachable"));
		/* } */ $s = 1; continue; case 2:
		return m.matched;
		/* */ } return; } if ($f === undefined) { $f = { $blk: machine.ptr.prototype.tryBacktrack }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.arg = arg; $f.b = b; $f.i = i; $f.inst = inst; $f.l = l; $f.longest = longest; $f.m = m; $f.pc = pc; $f.pc$1 = pc$1; $f.pos = pos; $f.pos$1 = pos$1; $f.r = r; $f.r$1 = r$1; $f.r$2 = r$2; $f.r$3 = r$3; $f.width = width; $f.width$1 = width$1; $f.width$2 = width$2; $f.width$3 = width$3; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	machine.prototype.tryBacktrack = function(b, i, pc, pos) { return this.$val.tryBacktrack(b, i, pc, pos); };
	machine.ptr.prototype.backtrack = function(i, pos, end, ncap) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _tuple, advance, b, end, i, i$1, m, ncap, pos, startCond, width, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _tuple = $f._tuple; advance = $f.advance; b = $f.b; end = $f.end; i = $f.i; i$1 = $f.i$1; m = $f.m; ncap = $f.ncap; pos = $f.pos; startCond = $f.startCond; width = $f.width; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = i.canCheckPrefix(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$panic(new $String("backtrack called for a RuneReader"));
		/* } */ case 2:
		startCond = m.re.cond;
		if (startCond === 255) {
			return false;
		}
		if (!((((startCond & 4) >>> 0) === 0)) && !((pos === 0))) {
			return false;
		}
		b = m.b;
		b.reset(end, ncap);
		m.matchcap = $subslice(m.matchcap, 0, ncap);
		_ref = m.matchcap;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$1 = _i;
			(x = m.matchcap, ((i$1 < 0 || i$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i$1] = -1));
			_i++;
		}
		/* */ if (!((((startCond & 4) >>> 0) === 0))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((((startCond & 4) >>> 0) === 0))) { */ case 4:
			if (b.cap.$length > 0) {
				(x$1 = b.cap, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0] = pos));
			}
			_r$1 = m.tryBacktrack(b, i, (m.p.Start >>> 0), pos); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 7; case 7:
			return _r$1;
		/* } */ case 5:
		width = -1;
		/* while (true) { */ case 8:
			/* if (!(pos <= end && !((width === 0)))) { break; } */ if(!(pos <= end && !((width === 0)))) { $s = 9; continue; }
			/* */ if (m.re.prefix.length > 0) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (m.re.prefix.length > 0) { */ case 10:
				_r$2 = i.index(m.re, pos); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				advance = _r$2;
				if (advance < 0) {
					return false;
				}
				pos = pos + (advance) >> 0;
			/* } */ case 11:
			if (b.cap.$length > 0) {
				(x$2 = b.cap, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0] = pos));
			}
			_r$3 = m.tryBacktrack(b, i, (m.p.Start >>> 0), pos); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (_r$3) { */ case 13:
				return true;
			/* } */ case 14:
			_r$4 = i.step(pos); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple = _r$4;
			width = _tuple[1];
			pos = pos + (width) >> 0;
		/* } */ $s = 8; continue; case 9:
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: machine.ptr.prototype.backtrack }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._tuple = _tuple; $f.advance = advance; $f.b = b; $f.end = end; $f.i = i; $f.i$1 = i$1; $f.m = m; $f.ncap = ncap; $f.pos = pos; $f.startCond = startCond; $f.width = width; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	machine.prototype.backtrack = function(i, pos, end, ncap) { return this.$val.backtrack(i, pos, end, ncap); };
	machine.ptr.prototype.newInputBytes = function(b) {
		var $ptr, b, m;
		m = this;
		m.inputBytes.str = b;
		return m.inputBytes;
	};
	machine.prototype.newInputBytes = function(b) { return this.$val.newInputBytes(b); };
	machine.ptr.prototype.newInputString = function(s) {
		var $ptr, m, s;
		m = this;
		m.inputString.str = s;
		return m.inputString;
	};
	machine.prototype.newInputString = function(s) { return this.$val.newInputString(s); };
	machine.ptr.prototype.newInputReader = function(r) {
		var $ptr, m, r;
		m = this;
		m.inputReader.r = r;
		m.inputReader.atEOT = false;
		m.inputReader.pos = 0;
		return m.inputReader;
	};
	machine.prototype.newInputReader = function(r) { return this.$val.newInputReader(r); };
	progMachine = function(p, op) {
		var $ptr, m, n, ncap, op, p;
		m = new machine.ptr(ptrType$3.nil, p, op, 0, ptrType.nil, new queue.ptr(sliceType$2.nil, sliceType$5.nil), new queue.ptr(sliceType$2.nil, sliceType$5.nil), sliceType$6.nil, false, sliceType.nil, new inputBytes.ptr(sliceType$3.nil), new inputString.ptr(""), new inputReader.ptr($ifaceNil, false, 0));
		n = m.p.Inst.$length;
		queue.copy(m.q0, new queue.ptr($makeSlice(sliceType$2, n), $makeSlice(sliceType$5, 0, n)));
		queue.copy(m.q1, new queue.ptr($makeSlice(sliceType$2, n), $makeSlice(sliceType$5, 0, n)));
		ncap = p.NumCap;
		if (ncap < 2) {
			ncap = 2;
		}
		if (op === notOnePass) {
			m.maxBitStateLen = maxBitStateLen(p);
		}
		m.matchcap = $makeSlice(sliceType, ncap);
		return m;
	};
	machine.ptr.prototype.init = function(ncap) {
		var $ptr, _i, _ref, m, ncap, t;
		m = this;
		_ref = m.pool;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			t = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			t.cap = $subslice(t.cap, 0, ncap);
			_i++;
		}
		m.matchcap = $subslice(m.matchcap, 0, ncap);
	};
	machine.prototype.init = function(ncap) { return this.$val.init(ncap); };
	machine.ptr.prototype.alloc = function(i) {
		var $ptr, i, m, n, t, x, x$1;
		m = this;
		t = ptrType$4.nil;
		n = m.pool.$length;
		if (n > 0) {
			t = (x = m.pool, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
			m.pool = $subslice(m.pool, 0, (n - 1 >> 0));
		} else {
			t = new thread.ptr(ptrType$5.nil, sliceType.nil);
			t.cap = $makeSlice(sliceType, m.matchcap.$length, m.matchcap.$capacity);
		}
		t.inst = i;
		return t;
	};
	machine.prototype.alloc = function(i) { return this.$val.alloc(i); };
	machine.ptr.prototype.match = function(i, pos) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _v, advance, flag, i, i$1, m, nextq, pos, r, r1, runq, startCond, width, width1, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _v = $f._v; advance = $f.advance; flag = $f.flag; i = $f.i; i$1 = $f.i$1; m = $f.m; nextq = $f.nextq; pos = $f.pos; r = $f.r; r1 = $f.r1; runq = $f.runq; startCond = $f.startCond; width = $f.width; width1 = $f.width1; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		startCond = m.re.cond;
		if (startCond === 255) {
			return false;
		}
		m.matched = false;
		_ref = m.matchcap;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$1 = _i;
			(x = m.matchcap, ((i$1 < 0 || i$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i$1] = -1));
			_i++;
		}
		_tmp = m.q0;
		_tmp$1 = m.q1;
		runq = _tmp;
		nextq = _tmp$1;
		_tmp$2 = -1;
		_tmp$3 = -1;
		r = _tmp$2;
		r1 = _tmp$3;
		_tmp$4 = 0;
		_tmp$5 = 0;
		width = _tmp$4;
		width1 = _tmp$5;
		_r = i.step(pos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		width = _tuple[1];
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$1 = i.step(pos + width >> 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			r1 = _tuple$1[0];
			width1 = _tuple$1[1];
		/* } */ case 3:
		flag = 0;
		/* */ if (pos === 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (pos === 0) { */ case 5:
			flag = syntax.EmptyOpContext(-1, r);
			$s = 7; continue;
		/* } else { */ case 6:
			_r$2 = i.context(pos); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			flag = _r$2;
		/* } */ case 7:
		/* while (true) { */ case 9:
			/* */ if (runq.dense.$length === 0) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (runq.dense.$length === 0) { */ case 11:
				if (!((((startCond & 4) >>> 0) === 0)) && !((pos === 0))) {
					/* break; */ $s = 10; continue;
				}
				if (m.matched) {
					/* break; */ $s = 10; continue;
				}
				if (!(m.re.prefix.length > 0 && !((r1 === m.re.prefixRune)))) { _v = false; $s = 15; continue s; }
				_r$3 = i.canCheckPrefix(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_v = _r$3; case 15:
				/* */ if (_v) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (_v) { */ case 13:
					_r$4 = i.index(m.re, pos); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					advance = _r$4;
					if (advance < 0) {
						/* break; */ $s = 10; continue;
					}
					pos = pos + (advance) >> 0;
					_r$5 = i.step(pos); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$2 = _r$5;
					r = _tuple$2[0];
					width = _tuple$2[1];
					_r$6 = i.step(pos + width >> 0); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_tuple$3 = _r$6;
					r1 = _tuple$3[0];
					width1 = _tuple$3[1];
				/* } */ case 14:
			/* } */ case 12:
			if (!m.matched) {
				if (m.matchcap.$length > 0) {
					(x$1 = m.matchcap, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0] = pos));
				}
				m.add(runq, (m.p.Start >>> 0), pos, m.matchcap, flag, ptrType$4.nil);
			}
			flag = syntax.EmptyOpContext(r, r1);
			m.step(runq, nextq, pos, pos + width >> 0, r, flag);
			if (width === 0) {
				/* break; */ $s = 10; continue;
			}
			if ((m.matchcap.$length === 0) && m.matched) {
				/* break; */ $s = 10; continue;
			}
			pos = pos + (width) >> 0;
			_tmp$6 = r1;
			_tmp$7 = width1;
			r = _tmp$6;
			width = _tmp$7;
			/* */ if (!((r === -1))) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (!((r === -1))) { */ case 20:
				_r$7 = i.step(pos + width >> 0); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tuple$4 = _r$7;
				r1 = _tuple$4[0];
				width1 = _tuple$4[1];
			/* } */ case 21:
			_tmp$8 = nextq;
			_tmp$9 = runq;
			runq = _tmp$8;
			nextq = _tmp$9;
		/* } */ $s = 9; continue; case 10:
		m.clear(nextq);
		return m.matched;
		/* */ } return; } if ($f === undefined) { $f = { $blk: machine.ptr.prototype.match }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._v = _v; $f.advance = advance; $f.flag = flag; $f.i = i; $f.i$1 = i$1; $f.m = m; $f.nextq = nextq; $f.pos = pos; $f.r = r; $f.r1 = r1; $f.runq = runq; $f.startCond = startCond; $f.width = width; $f.width1 = width1; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	machine.prototype.match = function(i, pos) { return this.$val.match(i, pos); };
	machine.ptr.prototype.clear = function(q) {
		var $ptr, _i, _ref, d, m, q;
		m = this;
		_ref = q.dense;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			d = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), entry);
			if (!(d.t === ptrType$4.nil)) {
				m.pool = $append(m.pool, d.t);
			}
			_i++;
		}
		q.dense = $subslice(q.dense, 0, 0);
	};
	machine.prototype.clear = function(q) { return this.$val.clear(q); };
	machine.ptr.prototype.step = function(runq, nextq, pos, nextPos, c, nextCond) {
		var $ptr, _i, _ref, _ref$1, add, c, d, d$1, i, j, longest, m, nextCond, nextPos, nextq, pos, runq, t, x, x$1, x$2, x$3, x$4, x$5;
		m = this;
		longest = m.re.longest;
		j = 0;
		while (true) {
			if (!(j < runq.dense.$length)) { break; }
			d = (x = runq.dense, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]));
			t = d.t;
			if (t === ptrType$4.nil) {
				j = j + (1) >> 0;
				continue;
			}
			if (longest && m.matched && t.cap.$length > 0 && (x$1 = m.matchcap, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])) < (x$2 = t.cap, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0]))) {
				m.pool = $append(m.pool, t);
				j = j + (1) >> 0;
				continue;
			}
			i = t.inst;
			add = false;
			_ref = i.Op;
			if (_ref === 4) {
				if (t.cap.$length > 0 && (!longest || !m.matched || (x$3 = m.matchcap, (1 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 1])) < pos)) {
					(x$4 = t.cap, (1 >= x$4.$length ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 1] = pos));
					$copySlice(m.matchcap, t.cap);
				}
				if (!longest) {
					_ref$1 = $subslice(runq.dense, (j + 1 >> 0));
					_i = 0;
					while (true) {
						if (!(_i < _ref$1.$length)) { break; }
						d$1 = $clone(((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]), entry);
						if (!(d$1.t === ptrType$4.nil)) {
							m.pool = $append(m.pool, d$1.t);
						}
						_i++;
					}
					runq.dense = $subslice(runq.dense, 0, 0);
				}
				m.matched = true;
			} else if (_ref === 7) {
				add = i.MatchRune(c);
			} else if (_ref === 8) {
				add = c === (x$5 = i.Rune, (0 >= x$5.$length ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + 0]));
			} else if (_ref === 9) {
				add = true;
			} else if (_ref === 10) {
				add = !((c === 10));
			} else {
				$panic(new $String("bad inst"));
			}
			if (add) {
				t = m.add(nextq, i.Out, nextPos, t.cap, nextCond, t);
			}
			if (!(t === ptrType$4.nil)) {
				m.pool = $append(m.pool, t);
			}
			j = j + (1) >> 0;
		}
		runq.dense = $subslice(runq.dense, 0, 0);
	};
	machine.prototype.step = function(runq, nextq, pos, nextPos, c, nextCond) { return this.$val.step(runq, nextq, pos, nextPos, c, nextCond); };
	machine.ptr.prototype.add = function(q, pc, pos, cap, cond, t) {
		var $ptr, _ref, cap, cond, d, i, j, j$1, m, opos, pc, pos, q, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		m = this;
		if (pc === 0) {
			return t;
		}
		j = (x = q.sparse, ((pc < 0 || pc >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + pc]));
		if (j < (q.dense.$length >>> 0) && ((x$1 = q.dense, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j])).pc === pc)) {
			return t;
		}
		j$1 = q.dense.$length;
		q.dense = $subslice(q.dense, 0, (j$1 + 1 >> 0));
		d = (x$2 = q.dense, ((j$1 < 0 || j$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + j$1]));
		d.t = ptrType$4.nil;
		d.pc = pc;
		(x$3 = q.sparse, ((pc < 0 || pc >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + pc] = (j$1 >>> 0)));
		i = (x$4 = m.p.Inst, ((pc < 0 || pc >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + pc]));
		_ref = i.Op;
		if (_ref === 5) {
		} else if (_ref === 0 || _ref === 1) {
			t = m.add(q, i.Out, pos, cap, cond, t);
			t = m.add(q, i.Arg, pos, cap, cond, t);
		} else if (_ref === 3) {
			if ((((i.Arg << 24 >>> 24) & ~cond) << 24 >>> 24) === 0) {
				t = m.add(q, i.Out, pos, cap, cond, t);
			}
		} else if (_ref === 6) {
			t = m.add(q, i.Out, pos, cap, cond, t);
		} else if (_ref === 2) {
			if ((i.Arg >> 0) < cap.$length) {
				opos = (x$5 = i.Arg, ((x$5 < 0 || x$5 >= cap.$length) ? $throwRuntimeError("index out of range") : cap.$array[cap.$offset + x$5]));
				(x$6 = i.Arg, ((x$6 < 0 || x$6 >= cap.$length) ? $throwRuntimeError("index out of range") : cap.$array[cap.$offset + x$6] = pos));
				m.add(q, i.Out, pos, cap, cond, ptrType$4.nil);
				(x$7 = i.Arg, ((x$7 < 0 || x$7 >= cap.$length) ? $throwRuntimeError("index out of range") : cap.$array[cap.$offset + x$7] = opos));
			} else {
				t = m.add(q, i.Out, pos, cap, cond, t);
			}
		} else if (_ref === 4 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10) {
			if (t === ptrType$4.nil) {
				t = m.alloc(i);
			} else {
				t.inst = i;
			}
			if (cap.$length > 0 && !((x$8 = t.cap, $indexPtr(x$8.$array, x$8.$offset + 0, ptrType$6)) === $indexPtr(cap.$array, cap.$offset + 0, ptrType$6))) {
				$copySlice(t.cap, cap);
			}
			d.t = t;
			t = ptrType$4.nil;
		} else {
			$panic(new $String("unhandled"));
		}
		return t;
	};
	machine.prototype.add = function(q, pc, pos, cap, cond, t) { return this.$val.add(q, pc, pos, cap, cond, t); };
	machine.ptr.prototype.onepass = function(i, pos) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _v, flag, i, i$1, inst, m, pc, pos, r, r1, startCond, width, width1, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _v = $f._v; flag = $f.flag; i = $f.i; i$1 = $f.i$1; inst = $f.inst; m = $f.m; pc = $f.pc; pos = $f.pos; r = $f.r; r1 = $f.r1; startCond = $f.startCond; width = $f.width; width1 = $f.width1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		inst = [inst];
		m = this;
		startCond = m.re.cond;
		if (startCond === 255) {
			return false;
		}
		m.matched = false;
		_ref = m.matchcap;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$1 = _i;
			(x = m.matchcap, ((i$1 < 0 || i$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i$1] = -1));
			_i++;
		}
		_tmp = -1;
		_tmp$1 = -1;
		r = _tmp;
		r1 = _tmp$1;
		_tmp$2 = 0;
		_tmp$3 = 0;
		width = _tmp$2;
		width1 = _tmp$3;
		_r = i.step(pos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		width = _tuple[1];
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$1 = i.step(pos + width >> 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			r1 = _tuple$1[0];
			width1 = _tuple$1[1];
		/* } */ case 3:
		flag = 0;
		/* */ if (pos === 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (pos === 0) { */ case 5:
			flag = syntax.EmptyOpContext(-1, r);
			$s = 7; continue;
		/* } else { */ case 6:
			_r$2 = i.context(pos); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			flag = _r$2;
		/* } */ case 7:
		pc = m.op.Start;
		inst[0] = $clone((x$1 = m.op.Inst, ((pc < 0 || pc >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + pc])), onePassInst);
		if (!((pos === 0) && ((((inst[0].Inst.Arg << 24 >>> 24) & ~flag) << 24 >>> 24) === 0) && m.re.prefix.length > 0)) { _v = false; $s = 11; continue s; }
		_r$3 = i.canCheckPrefix(); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3; case 11:
		/* */ if (_v) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_v) { */ case 9:
			_r$4 = i.hasPrefix(m.re); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (_r$4) { */ case 13:
				pos = pos + (m.re.prefix.length) >> 0;
				_r$5 = i.step(pos); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$2 = _r$5;
				r = _tuple$2[0];
				width = _tuple$2[1];
				_r$6 = i.step(pos + width >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$3 = _r$6;
				r1 = _tuple$3[0];
				width1 = _tuple$3[1];
				_r$7 = i.context(pos); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				flag = _r$7;
				pc = (m.re.prefixEnd >> 0);
				$s = 15; continue;
			/* } else { */ case 14:
				return m.matched;
			/* } */ case 15:
		/* } */ case 10:
		/* while (true) { */ case 20:
			onePassInst.copy(inst[0], (x$2 = m.op.Inst, ((pc < 0 || pc >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + pc])));
			pc = (inst[0].Inst.Out >> 0);
			_ref$1 = inst[0].Inst.Op;
			/* */ if (_ref$1 === 4) { $s = 22; continue; }
			/* */ if (_ref$1 === 7) { $s = 23; continue; }
			/* */ if (_ref$1 === 8) { $s = 24; continue; }
			/* */ if (_ref$1 === 9) { $s = 25; continue; }
			/* */ if (_ref$1 === 10) { $s = 26; continue; }
			/* */ if (_ref$1 === 0 || _ref$1 === 1) { $s = 27; continue; }
			/* */ if (_ref$1 === 5) { $s = 28; continue; }
			/* */ if (_ref$1 === 6) { $s = 29; continue; }
			/* */ if (_ref$1 === 3) { $s = 30; continue; }
			/* */ if (_ref$1 === 2) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (_ref$1 === 4) { */ case 22:
				m.matched = true;
				if (m.matchcap.$length > 0) {
					(x$3 = m.matchcap, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0] = 0));
					(x$4 = m.matchcap, (1 >= x$4.$length ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 1] = pos));
				}
				return m.matched;
			/* } else if (_ref$1 === 7) { */ case 23:
				if (!inst[0].Inst.MatchRune(r)) {
					return m.matched;
				}
				$s = 33; continue;
			/* } else if (_ref$1 === 8) { */ case 24:
				if (!((r === (x$5 = inst[0].Inst.Rune, (0 >= x$5.$length ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + 0]))))) {
					return m.matched;
				}
				$s = 33; continue;
			/* } else if (_ref$1 === 9) { */ case 25:
				$s = 33; continue;
			/* } else if (_ref$1 === 10) { */ case 26:
				if (r === 10) {
					return m.matched;
				}
				$s = 33; continue;
			/* } else if (_ref$1 === 0 || _ref$1 === 1) { */ case 27:
				pc = (onePassNext(inst[0], r) >> 0);
				/* continue; */ $s = 20; continue;
				$s = 33; continue;
			/* } else if (_ref$1 === 5) { */ case 28:
				return m.matched;
			/* } else if (_ref$1 === 6) { */ case 29:
				/* continue; */ $s = 20; continue;
				$s = 33; continue;
			/* } else if (_ref$1 === 3) { */ case 30:
				if (!(((((inst[0].Inst.Arg << 24 >>> 24) & ~flag) << 24 >>> 24) === 0))) {
					return m.matched;
				}
				/* continue; */ $s = 20; continue;
				$s = 33; continue;
			/* } else if (_ref$1 === 2) { */ case 31:
				if ((inst[0].Inst.Arg >> 0) < m.matchcap.$length) {
					(x$6 = m.matchcap, x$7 = inst[0].Inst.Arg, ((x$7 < 0 || x$7 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + x$7] = pos));
				}
				/* continue; */ $s = 20; continue;
				$s = 33; continue;
			/* } else { */ case 32:
				$panic(new $String("bad inst"));
			/* } */ case 33:
			if (width === 0) {
				/* break; */ $s = 21; continue;
			}
			flag = syntax.EmptyOpContext(r, r1);
			pos = pos + (width) >> 0;
			_tmp$4 = r1;
			_tmp$5 = width1;
			r = _tmp$4;
			width = _tmp$5;
			/* */ if (!((r === -1))) { $s = 34; continue; }
			/* */ $s = 35; continue;
			/* if (!((r === -1))) { */ case 34:
				_r$8 = i.step(pos + width >> 0); /* */ $s = 36; case 36: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_tuple$4 = _r$8;
				r1 = _tuple$4[0];
				width1 = _tuple$4[1];
			/* } */ case 35:
		/* } */ $s = 20; continue; case 21:
		return m.matched;
		/* */ } return; } if ($f === undefined) { $f = { $blk: machine.ptr.prototype.onepass }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._v = _v; $f.flag = flag; $f.i = i; $f.i$1 = i$1; $f.inst = inst; $f.m = m; $f.pc = pc; $f.pos = pos; $f.r = r; $f.r1 = r1; $f.startCond = startCond; $f.width = width; $f.width1 = width1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	machine.prototype.onepass = function(i, pos) { return this.$val.onepass(i, pos); };
	Regexp.ptr.prototype.doExecute = function(r, b, s, pos, ncap) {
		var $ptr, _r, _r$1, _r$2, b, cap, i, m, ncap, pos, r, re, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; b = $f.b; cap = $f.cap; i = $f.i; m = $f.m; ncap = $f.ncap; pos = $f.pos; r = $f.r; re = $f.re; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		m = re.get();
		i = $ifaceNil;
		size = 0;
		if (!($interfaceIsEqual(r, $ifaceNil))) {
			i = m.newInputReader(r);
		} else if (!(b === sliceType$3.nil)) {
			i = m.newInputBytes(b);
			size = b.$length;
		} else {
			i = m.newInputString(s);
			size = s.length;
		}
		/* */ if (!(m.op === notOnePass)) { $s = 1; continue; }
		/* */ if (size < m.maxBitStateLen && $interfaceIsEqual(r, $ifaceNil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(m.op === notOnePass)) { */ case 1:
			_r = m.onepass(i, pos); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!_r) { */ case 5:
				re.put(m);
				return sliceType.nil;
			/* } */ case 6:
			$s = 4; continue;
		/* } else if (size < m.maxBitStateLen && $interfaceIsEqual(r, $ifaceNil)) { */ case 2:
			if (m.b === ptrType.nil) {
				m.b = newBitState(m.p);
			}
			_r$1 = m.backtrack(i, pos, size, ncap); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!_r$1) { */ case 8:
				re.put(m);
				return sliceType.nil;
			/* } */ case 9:
			$s = 4; continue;
		/* } else { */ case 3:
			m.init(ncap);
			_r$2 = m.match(i, pos); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (!_r$2) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!_r$2) { */ case 11:
				re.put(m);
				return sliceType.nil;
			/* } */ case 12:
		/* } */ case 4:
		if (ncap === 0) {
			re.put(m);
			return empty;
		}
		cap = $makeSlice(sliceType, m.matchcap.$length);
		$copySlice(cap, m.matchcap);
		re.put(m);
		return cap;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.doExecute }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.b = b; $f.cap = cap; $f.i = i; $f.m = m; $f.ncap = ncap; $f.pos = pos; $f.r = r; $f.re = re; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.doExecute = function(r, b, s, pos, ncap) { return this.$val.doExecute(r, b, s, pos, ncap); };
	onePassPrefix = function(p) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, buf, complete, i, p, pc, prefix, x, x$1, x$2, x$3, x$4, x$5, x$6;
		prefix = "";
		complete = false;
		pc = 0;
		i = (x = p.Inst, x$1 = p.Start, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		if (!((i.Op === 3)) || (((((i.Arg << 24 >>> 24)) & 4) >>> 0) === 0)) {
			_tmp = "";
			_tmp$1 = i.Op === 4;
			_tmp$2 = (p.Start >>> 0);
			prefix = _tmp;
			complete = _tmp$1;
			pc = _tmp$2;
			return [prefix, complete, pc];
		}
		pc = i.Out;
		i = (x$2 = p.Inst, ((pc < 0 || pc >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + pc]));
		while (true) {
			if (!(i.Op === 6)) { break; }
			pc = i.Out;
			i = (x$3 = p.Inst, ((pc < 0 || pc >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + pc]));
		}
		if (!((iop(i) === 7)) || !((i.Rune.$length === 1))) {
			_tmp$3 = "";
			_tmp$4 = i.Op === 4;
			_tmp$5 = (p.Start >>> 0);
			prefix = _tmp$3;
			complete = _tmp$4;
			pc = _tmp$5;
			return [prefix, complete, pc];
		}
		buf = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		while (true) {
			if (!((iop(i) === 7) && (i.Rune.$length === 1) && ((((i.Arg << 16 >>> 16) & 1) >>> 0) === 0))) { break; }
			buf.WriteRune((x$4 = i.Rune, (0 >= x$4.$length ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 0])));
			_tmp$6 = i.Out;
			_tmp$7 = (x$5 = p.Inst, x$6 = i.Out, ((x$6 < 0 || x$6 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + x$6]));
			pc = _tmp$6;
			i = _tmp$7;
		}
		_tmp$8 = buf.String();
		_tmp$9 = (i.Op === 3) && !((((((i.Arg << 24 >>> 24)) & 4) >>> 0) === 0));
		_tmp$10 = pc;
		prefix = _tmp$8;
		complete = _tmp$9;
		pc = _tmp$10;
		return [prefix, complete, pc];
	};
	onePassNext = function(i, r) {
		var $ptr, i, next, r, x;
		next = i.Inst.MatchRunePos(r);
		if (next >= 0) {
			return (x = i.Next, ((next < 0 || next >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + next]));
		}
		if (i.Inst.Op === 1) {
			return i.Inst.Out;
		}
		return 0;
	};
	iop = function(i) {
		var $ptr, _ref, i, op;
		op = i.Op;
		_ref = op;
		if (_ref === 8 || _ref === 9 || _ref === 10) {
			op = 7;
		}
		return op;
	};
	queueOnePass.ptr.prototype.empty = function() {
		var $ptr, q;
		q = this;
		return q.nextIndex >= q.size;
	};
	queueOnePass.prototype.empty = function() { return this.$val.empty(); };
	queueOnePass.ptr.prototype.next = function() {
		var $ptr, n, q, x, x$1;
		n = 0;
		q = this;
		n = (x = q.dense, x$1 = q.nextIndex, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		q.nextIndex = q.nextIndex + (1) >>> 0;
		return n;
	};
	queueOnePass.prototype.next = function() { return this.$val.next(); };
	queueOnePass.ptr.prototype.clear = function() {
		var $ptr, q;
		q = this;
		q.size = 0;
		q.nextIndex = 0;
	};
	queueOnePass.prototype.clear = function() { return this.$val.clear(); };
	queueOnePass.ptr.prototype.reset = function() {
		var $ptr, q;
		q = this;
		q.nextIndex = 0;
	};
	queueOnePass.prototype.reset = function() { return this.$val.reset(); };
	queueOnePass.ptr.prototype.contains = function(u) {
		var $ptr, q, u, x, x$1, x$2, x$3;
		q = this;
		if (u >= (q.sparse.$length >>> 0)) {
			return false;
		}
		return (x = q.sparse, ((u < 0 || u >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + u])) < q.size && ((x$1 = q.dense, x$2 = (x$3 = q.sparse, ((u < 0 || u >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + u])), ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2])) === u);
	};
	queueOnePass.prototype.contains = function(u) { return this.$val.contains(u); };
	queueOnePass.ptr.prototype.insert = function(u) {
		var $ptr, q, u;
		q = this;
		if (!q.contains(u)) {
			q.insertNew(u);
		}
	};
	queueOnePass.prototype.insert = function(u) { return this.$val.insert(u); };
	queueOnePass.ptr.prototype.insertNew = function(u) {
		var $ptr, q, u, x, x$1, x$2;
		q = this;
		if (u >= (q.sparse.$length >>> 0)) {
			return;
		}
		(x = q.sparse, ((u < 0 || u >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + u] = q.size));
		(x$1 = q.dense, x$2 = q.size, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2] = u));
		q.size = q.size + (1) >>> 0;
	};
	queueOnePass.prototype.insertNew = function(u) { return this.$val.insertNew(u); };
	newQueue = function(size) {
		var $ptr, q, size;
		q = ptrType$7.nil;
		q = new queueOnePass.ptr($makeSlice(sliceType$2, size), $makeSlice(sliceType$2, size), 0, 0);
		return q;
	};
	mergeRuneSets = function(leftRunes, rightRunes, leftPC, rightPC) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, extend, ix, leftLen, leftPC, leftRunes, lx, merged, next, ok, rightLen, rightPC, rightRunes, rx, x, x$1, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; extend = $f.extend; ix = $f.ix; leftLen = $f.leftLen; leftPC = $f.leftPC; leftRunes = $f.leftRunes; lx = $f.lx; merged = $f.merged; next = $f.next; ok = $f.ok; rightLen = $f.rightLen; rightPC = $f.rightPC; rightRunes = $f.rightRunes; rx = $f.rx; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		ix = [ix];
		lx = [lx];
		merged = [merged];
		next = [next];
		ok = [ok];
		rx = [rx];
		leftLen = leftRunes.$get().$length;
		rightLen = rightRunes.$get().$length;
		if (!(((leftLen & 1) === 0)) || !(((rightLen & 1) === 0))) {
			$panic(new $String("mergeRuneSets odd length []rune"));
		}
		_tmp = 0;
		_tmp$1 = 0;
		lx[0] = _tmp;
		rx[0] = _tmp$1;
		merged[0] = $makeSlice(sliceType$1, 0);
		next[0] = $makeSlice(sliceType$2, 0);
		ok[0] = true;
		$deferred.push([(function(ix, lx, merged, next, ok, rx) { return function() {
			var $ptr;
			if (!ok[0]) {
				merged[0] = sliceType$1.nil;
				next[0] = sliceType$2.nil;
			}
		}; })(ix, lx, merged, next, ok, rx), []]);
		ix[0] = -1;
		extend = (function(ix, lx, merged, next, ok, rx) { return function(newLow, newArray, pc) {
			var $ptr, newArray, newLow, pc, x, x$1, x$2, x$3, x$4, x$5;
			if (ix[0] > 0 && (x = newArray.$get(), x$1 = newLow.$get(), ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])) <= ((ix[0] < 0 || ix[0] >= merged[0].$length) ? $throwRuntimeError("index out of range") : merged[0].$array[merged[0].$offset + ix[0]])) {
				return false;
			}
			merged[0] = $append(merged[0], (x$2 = newArray.$get(), x$3 = newLow.$get(), ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3])), (x$4 = newArray.$get(), x$5 = newLow.$get() + 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])));
			newLow.$set(newLow.$get() + (2) >> 0);
			ix[0] = ix[0] + (2) >> 0;
			next[0] = $append(next[0], pc);
			return true;
		}; })(ix, lx, merged, next, ok, rx);
		/* while (true) { */ case 1:
			/* if (!(lx[0] < leftLen || rx[0] < rightLen)) { break; } */ if(!(lx[0] < leftLen || rx[0] < rightLen)) { $s = 2; continue; }
			/* */ if (rx[0] >= rightLen) { $s = 3; continue; }
			/* */ if (lx[0] >= leftLen) { $s = 4; continue; }
			/* */ if ((x = rightRunes.$get(), ((rx[0] < 0 || rx[0] >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + rx[0]])) < (x$1 = leftRunes.$get(), ((lx[0] < 0 || lx[0] >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + lx[0]]))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (rx[0] >= rightLen) { */ case 3:
				_r = extend((lx.$ptr || (lx.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, lx))), leftRunes, leftPC); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				ok[0] = _r;
				$s = 7; continue;
			/* } else if (lx[0] >= leftLen) { */ case 4:
				_r$1 = extend((rx.$ptr || (rx.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, rx))), rightRunes, rightPC); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				ok[0] = _r$1;
				$s = 7; continue;
			/* } else if ((x = rightRunes.$get(), ((rx[0] < 0 || rx[0] >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + rx[0]])) < (x$1 = leftRunes.$get(), ((lx[0] < 0 || lx[0] >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + lx[0]]))) { */ case 5:
				_r$2 = extend((rx.$ptr || (rx.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, rx))), rightRunes, rightPC); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				ok[0] = _r$2;
				$s = 7; continue;
			/* } else { */ case 6:
				_r$3 = extend((lx.$ptr || (lx.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, lx))), leftRunes, leftPC); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				ok[0] = _r$3;
			/* } */ case 7:
			if (!ok[0]) {
				return [noRune, noNext];
			}
		/* } */ $s = 1; continue; case 2:
		return [merged[0], next[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [sliceType$1.nil, sliceType$2.nil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mergeRuneSets }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.extend = extend; $f.ix = ix; $f.leftLen = leftLen; $f.leftPC = leftPC; $f.leftRunes = leftRunes; $f.lx = lx; $f.merged = merged; $f.next = next; $f.ok = ok; $f.rightLen = rightLen; $f.rightPC = rightPC; $f.rightRunes = rightRunes; $f.rx = rx; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	cleanupOnePass = function(prog, original) {
		var $ptr, _i, _ref, _ref$1, instOriginal, ix, original, prog, x, x$1, x$2;
		_ref = original.Inst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			ix = _i;
			instOriginal = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), syntax.Inst);
			_ref$1 = instOriginal.Op;
			if (_ref$1 === 0 || _ref$1 === 1 || _ref$1 === 7) {
			} else if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 6 || _ref$1 === 4 || _ref$1 === 5) {
				(x = prog.Inst, ((ix < 0 || ix >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + ix])).Next = sliceType$2.nil;
			} else if (_ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10) {
				(x$1 = prog.Inst, ((ix < 0 || ix >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + ix])).Next = sliceType$2.nil;
				onePassInst.copy((x$2 = prog.Inst, ((ix < 0 || ix >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + ix])), new onePassInst.ptr($clone(instOriginal, syntax.Inst), sliceType$2.nil));
			}
			_i++;
		}
	};
	onePassCopy = function(prog) {
		var $ptr, _i, _i$1, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$2, _tmp$3, inst, instAlt, instOther, p, p_A_Alt, p_A_Other, p_B_Alt, p_B_Other, patch, pc, prog, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		p = new onePassProg.ptr(sliceType$7.nil, prog.Start, prog.NumCap);
		_ref = prog.Inst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			inst = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), syntax.Inst);
			p.Inst = $append(p.Inst, new onePassInst.ptr($clone(inst, syntax.Inst), sliceType$2.nil));
			_i++;
		}
		_ref$1 = p.Inst;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			pc = _i$1;
			_ref$2 = (x = p.Inst, ((pc < 0 || pc >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + pc])).Inst.Op;
			if (_ref$2 === 0 || _ref$2 === 1) {
				p_A_Other = (x$1 = (x$2 = p.Inst, ((pc < 0 || pc >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + pc])), (x$1.$ptr_Out || (x$1.$ptr_Out = new ptrType$8(function() { return this.$target.Inst.Out; }, function($v) { this.$target.Inst.Out = $v; }, x$1))));
				p_A_Alt = (x$3 = (x$4 = p.Inst, ((pc < 0 || pc >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + pc])), (x$3.$ptr_Arg || (x$3.$ptr_Arg = new ptrType$8(function() { return this.$target.Inst.Arg; }, function($v) { this.$target.Inst.Arg = $v; }, x$3))));
				instAlt = $clone((x$5 = p.Inst, x$6 = p_A_Alt.$get(), ((x$6 < 0 || x$6 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + x$6])), onePassInst);
				if (!((instAlt.Inst.Op === 0) || (instAlt.Inst.Op === 1))) {
					_tmp = p_A_Other;
					_tmp$1 = p_A_Alt;
					p_A_Alt = _tmp;
					p_A_Other = _tmp$1;
					onePassInst.copy(instAlt, (x$7 = p.Inst, x$8 = p_A_Alt.$get(), ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + x$8])));
					if (!((instAlt.Inst.Op === 0) || (instAlt.Inst.Op === 1))) {
						_i$1++;
						continue;
					}
				}
				instOther = $clone((x$9 = p.Inst, x$10 = p_A_Other.$get(), ((x$10 < 0 || x$10 >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + x$10])), onePassInst);
				if ((instOther.Inst.Op === 0) || (instOther.Inst.Op === 1)) {
					_i$1++;
					continue;
				}
				p_B_Alt = (x$11 = (x$12 = p.Inst, x$13 = p_A_Alt.$get(), ((x$13 < 0 || x$13 >= x$12.$length) ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + x$13])), (x$11.$ptr_Out || (x$11.$ptr_Out = new ptrType$8(function() { return this.$target.Inst.Out; }, function($v) { this.$target.Inst.Out = $v; }, x$11))));
				p_B_Other = (x$14 = (x$15 = p.Inst, x$16 = p_A_Alt.$get(), ((x$16 < 0 || x$16 >= x$15.$length) ? $throwRuntimeError("index out of range") : x$15.$array[x$15.$offset + x$16])), (x$14.$ptr_Arg || (x$14.$ptr_Arg = new ptrType$8(function() { return this.$target.Inst.Arg; }, function($v) { this.$target.Inst.Arg = $v; }, x$14))));
				patch = false;
				if (instAlt.Inst.Out === (pc >>> 0)) {
					patch = true;
				} else if (instAlt.Inst.Arg === (pc >>> 0)) {
					patch = true;
					_tmp$2 = p_B_Other;
					_tmp$3 = p_B_Alt;
					p_B_Alt = _tmp$2;
					p_B_Other = _tmp$3;
				}
				if (patch) {
					p_B_Alt.$set(p_A_Other.$get());
				}
				if (p_A_Other.$get() === p_B_Alt.$get()) {
					p_A_Alt.$set(p_B_Other.$get());
				}
			} else {
				_i$1++;
				continue;
			}
			_i$1++;
		}
		return p;
	};
	runeSlice.prototype.Len = function() {
		var $ptr, p;
		p = this;
		return p.$length;
	};
	$ptrType(runeSlice).prototype.Len = function() { return this.$get().Len(); };
	runeSlice.prototype.Less = function(i, j) {
		var $ptr, i, j, p;
		p = this;
		return ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]);
	};
	$ptrType(runeSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	runeSlice.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, p;
		p = this;
		_tmp = ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]);
		_tmp$1 = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]);
		((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i] = _tmp);
		((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j] = _tmp$1);
	};
	$ptrType(runeSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	runeSlice.prototype.Sort = function() {
		var $ptr, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = sort.Sort(p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: runeSlice.prototype.Sort }; } $f.$ptr = $ptr; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(runeSlice).prototype.Sort = function() { return this.$get().Sort(); };
	makeOnePass = function(p) {
		var $ptr, _i, _r, _ref, _ref$1, build, check, i, inst, instQueue, m, onePassRunes, p, pc, visitQueue, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; build = $f.build; check = $f.check; i = $f.i; inst = $f.inst; instQueue = $f.instQueue; m = $f.m; onePassRunes = $f.onePassRunes; p = $f.p; pc = $f.pc; visitQueue = $f.visitQueue; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		build = [build];
		check = [check];
		onePassRunes = [onePassRunes];
		p = [p];
		visitQueue = [visitQueue];
		if (p[0].Inst.$length >= 1000) {
			return notOnePass;
		}
		instQueue = newQueue(p[0].Inst.$length);
		visitQueue[0] = newQueue(p[0].Inst.$length);
		build[0] = $throwNilPointerError;
		check[0] = $throwNilPointerError;
		onePassRunes[0] = $makeSlice(sliceType$8, p[0].Inst.$length);
		build[0] = (function(build, check, onePassRunes, p, visitQueue) { return function $b(pc, q) {
			var $ptr, _ref, inst, pc, q, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; inst = $f.inst; pc = $f.pc; q = $f.q; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			if (q.contains(pc)) {
				return;
			}
			inst = $clone((x = p[0].Inst, ((pc < 0 || pc >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + pc])), onePassInst);
			_ref = inst.Inst.Op;
			/* */ if (_ref === 0 || _ref === 1) { $s = 1; continue; }
			/* */ if (_ref === 4 || _ref === 5) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (_ref === 0 || _ref === 1) { */ case 1:
				q.insert(inst.Inst.Out);
				$r = build[0](inst.Inst.Out, q); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				q.insert(inst.Inst.Arg);
				$s = 4; continue;
			/* } else if (_ref === 4 || _ref === 5) { */ case 2:
				$s = 4; continue;
			/* } else { */ case 3:
				q.insert(inst.Inst.Out);
			/* } */ case 4:
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._ref = _ref; $f.inst = inst; $f.pc = pc; $f.q = q; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		}; })(build, check, onePassRunes, p, visitQueue);
		check[0] = (function(build, check, onePassRunes, p, visitQueue) { return function $b(pc, m) {
			var $ptr, _entry, _entry$1, _entry$2, _entry$3, _key, _key$1, _key$2, _key$3, _key$4, _key$5, _key$6, _key$7, _q, _q$1, _q$2, _q$3, _q$4, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _v, i, i$1, i$2, i$3, i$4, inst, m, matchArg, matchOut, ok, pc, r0, r0$1, r1, r1$1, runes, runes$1, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _key$5 = $f._key$5; _key$6 = $f._key$6; _key$7 = $f._key$7; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _q$4 = $f._q$4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _v = $f._v; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; inst = $f.inst; m = $f.m; matchArg = $f.matchArg; matchOut = $f.matchOut; ok = $f.ok; pc = $f.pc; r0 = $f.r0; r0$1 = $f.r0$1; r1 = $f.r1; r1$1 = $f.r1$1; runes = $f.runes; runes$1 = $f.runes$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			ok = false;
			ok = true;
			inst = (x = p[0].Inst, ((pc < 0 || pc >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + pc]));
			if (visitQueue[0].contains(pc)) {
				return ok;
			}
			visitQueue[0].insert(pc);
			_ref = inst.Inst.Op;
			/* */ if (_ref === 0 || _ref === 1) { $s = 1; continue; }
			/* */ if (_ref === 2 || _ref === 6) { $s = 2; continue; }
			/* */ if (_ref === 3) { $s = 3; continue; }
			/* */ if (_ref === 4 || _ref === 5) { $s = 4; continue; }
			/* */ if (_ref === 7) { $s = 5; continue; }
			/* */ if (_ref === 8) { $s = 6; continue; }
			/* */ if (_ref === 9) { $s = 7; continue; }
			/* */ if (_ref === 10) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* switch (0) { default: if (_ref === 0 || _ref === 1) { */ case 1:
				_r = check[0](inst.Inst.Out, m); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if (!(_r)) { _v = false; $s = 10; continue s; }
				_r$1 = check[0](inst.Inst.Arg, m); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1; case 10:
				ok = _v;
				matchOut = (_entry = m[$Uint32.keyFor(inst.Inst.Out)], _entry !== undefined ? _entry.v : false);
				matchArg = (_entry$1 = m[$Uint32.keyFor(inst.Inst.Arg)], _entry$1 !== undefined ? _entry$1.v : false);
				if (matchOut && matchArg) {
					ok = false;
					/* break; */ $s = 9; continue;
				}
				if (matchArg) {
					_tmp = inst.Inst.Arg;
					_tmp$1 = inst.Inst.Out;
					inst.Inst.Out = _tmp;
					inst.Inst.Arg = _tmp$1;
					_tmp$2 = matchArg;
					_tmp$3 = matchOut;
					matchOut = _tmp$2;
					matchArg = _tmp$3;
				}
				if (matchOut) {
					_key = pc; (m || $throwRuntimeError("assignment to entry in nil map"))[$Uint32.keyFor(_key)] = { k: _key, v: true };
					inst.Inst.Op = 1;
				}
				_r$2 = mergeRuneSets($indexPtr(onePassRunes[0].$array, onePassRunes[0].$offset + inst.Inst.Out, ptrType$9), $indexPtr(onePassRunes[0].$array, onePassRunes[0].$offset + inst.Inst.Arg, ptrType$9), inst.Inst.Out, inst.Inst.Arg); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				((pc < 0 || pc >= onePassRunes[0].$length) ? $throwRuntimeError("index out of range") : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = _tuple[0]);
				inst.Next = _tuple[1];
				if (inst.Next.$length > 0 && ((x$1 = inst.Next, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])) === 4294967295)) {
					ok = false;
					/* break; */ $s = 9; continue;
				}
				$s = 9; continue;
			/* } else if (_ref === 2 || _ref === 6) { */ case 2:
				_r$3 = check[0](inst.Inst.Out, m); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				ok = _r$3;
				_key$1 = pc; (m || $throwRuntimeError("assignment to entry in nil map"))[$Uint32.keyFor(_key$1)] = { k: _key$1, v: (_entry$2 = m[$Uint32.keyFor(inst.Inst.Out)], _entry$2 !== undefined ? _entry$2.v : false) };
				((pc < 0 || pc >= onePassRunes[0].$length) ? $throwRuntimeError("index out of range") : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = $appendSlice(new sliceType$1([]), (x$2 = inst.Inst.Out, ((x$2 < 0 || x$2 >= onePassRunes[0].$length) ? $throwRuntimeError("index out of range") : onePassRunes[0].$array[onePassRunes[0].$offset + x$2]))));
				inst.Next = new sliceType$2([]);
				i = (_q = ((pc < 0 || pc >= onePassRunes[0].$length) ? $throwRuntimeError("index out of range") : onePassRunes[0].$array[onePassRunes[0].$offset + pc]).$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				while (true) {
					if (!(i >= 0)) { break; }
					inst.Next = $append(inst.Next, inst.Inst.Out);
					i = i - (1) >> 0;
				}
				$s = 9; continue;
			/* } else if (_ref === 3) { */ case 3:
				_r$4 = check[0](inst.Inst.Out, m); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				ok = _r$4;
				_key$2 = pc; (m || $throwRuntimeError("assignment to entry in nil map"))[$Uint32.keyFor(_key$2)] = { k: _key$2, v: (_entry$3 = m[$Uint32.keyFor(inst.Inst.Out)], _entry$3 !== undefined ? _entry$3.v : false) };
				((pc < 0 || pc >= onePassRunes[0].$length) ? $throwRuntimeError("index out of range") : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = $appendSlice(new sliceType$1([]), (x$3 = inst.Inst.Out, ((x$3 < 0 || x$3 >= onePassRunes[0].$length) ? $throwRuntimeError("index out of range") : onePassRunes[0].$array[onePassRunes[0].$offset + x$3]))));
				inst.Next = new sliceType$2([]);
				i$1 = (_q$1 = ((pc < 0 || pc >= onePassRunes[0].$length) ? $throwRuntimeError("index out of range") : onePassRunes[0].$array[onePassRunes[0].$offset + pc]).$length / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
				while (true) {
					if (!(i$1 >= 0)) { break; }
					inst.Next = $append(inst.Next, inst.Inst.Out);
					i$1 = i$1 - (1) >> 0;
				}
				$s = 9; continue;
			/* } else if (_ref === 4 || _ref === 5) { */ case 4:
				_key$3 = pc; (m || $throwRuntimeError("assignment to entry in nil map"))[$Uint32.keyFor(_key$3)] = { k: _key$3, v: inst.Inst.Op === 4 };
				/* break; */ $s = 9; continue;
				$s = 9; continue;
			/* } else if (_ref === 7) { */ case 5:
				_r$5 = check[0](inst.Inst.Out, m); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				ok = _r$5;
				_key$4 = pc; (m || $throwRuntimeError("assignment to entry in nil map"))[$Uint32.keyFor(_key$4)] = { k: _key$4, v: false };
				if (inst.Next.$length > 0) {
					/* break; */ $s = 9; continue;
				}
				if (inst.Inst.Rune.$length === 0) {
					((pc < 0 || pc >= onePassRunes[0].$length) ? $throwRuntimeError("index out of range") : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = new sliceType$1([]));
					inst.Next = new sliceType$2([inst.Inst.Out]);
					/* break; */ $s = 9; continue;
				}
				runes = $makeSlice(sliceType$1, 0);
				/* */ if ((inst.Inst.Rune.$length === 1) && !(((((inst.Inst.Arg << 16 >>> 16) & 1) >>> 0) === 0))) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if ((inst.Inst.Rune.$length === 1) && !(((((inst.Inst.Arg << 16 >>> 16) & 1) >>> 0) === 0))) { */ case 17:
					r0 = (x$4 = inst.Inst.Rune, (0 >= x$4.$length ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 0]));
					runes = $append(runes, r0, r0);
					r1 = unicode.SimpleFold(r0);
					while (true) {
						if (!(!((r1 === r0)))) { break; }
						runes = $append(runes, r1, r1);
						r1 = unicode.SimpleFold(r1);
					}
					$r = sort.Sort($subslice(new runeSlice(runes.$array), runes.$offset, runes.$offset + runes.$length)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 19; continue;
				/* } else { */ case 18:
					runes = $appendSlice(runes, inst.Inst.Rune);
				/* } */ case 19:
				((pc < 0 || pc >= onePassRunes[0].$length) ? $throwRuntimeError("index out of range") : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = runes);
				inst.Next = new sliceType$2([]);
				i$2 = (_q$2 = ((pc < 0 || pc >= onePassRunes[0].$length) ? $throwRuntimeError("index out of range") : onePassRunes[0].$array[onePassRunes[0].$offset + pc]).$length / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
				while (true) {
					if (!(i$2 >= 0)) { break; }
					inst.Next = $append(inst.Next, inst.Inst.Out);
					i$2 = i$2 - (1) >> 0;
				}
				inst.Inst.Op = 7;
				$s = 9; continue;
			/* } else if (_ref === 8) { */ case 6:
				_r$6 = check[0](inst.Inst.Out, m); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				ok = _r$6;
				_key$5 = pc; (m || $throwRuntimeError("assignment to entry in nil map"))[$Uint32.keyFor(_key$5)] = { k: _key$5, v: false };
				if (inst.Next.$length > 0) {
					/* break; */ $s = 9; continue;
				}
				runes$1 = new sliceType$1([]);
				/* */ if (!(((((inst.Inst.Arg << 16 >>> 16) & 1) >>> 0) === 0))) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (!(((((inst.Inst.Arg << 16 >>> 16) & 1) >>> 0) === 0))) { */ case 22:
					r0$1 = (x$5 = inst.Inst.Rune, (0 >= x$5.$length ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + 0]));
					runes$1 = $append(runes$1, r0$1, r0$1);
					r1$1 = unicode.SimpleFold(r0$1);
					while (true) {
						if (!(!((r1$1 === r0$1)))) { break; }
						runes$1 = $append(runes$1, r1$1, r1$1);
						r1$1 = unicode.SimpleFold(r1$1);
					}
					$r = sort.Sort($subslice(new runeSlice(runes$1.$array), runes$1.$offset, runes$1.$offset + runes$1.$length)); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 24; continue;
				/* } else { */ case 23:
					runes$1 = $append(runes$1, (x$6 = inst.Inst.Rune, (0 >= x$6.$length ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + 0])), (x$7 = inst.Inst.Rune, (0 >= x$7.$length ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + 0])));
				/* } */ case 24:
				((pc < 0 || pc >= onePassRunes[0].$length) ? $throwRuntimeError("index out of range") : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = runes$1);
				inst.Next = new sliceType$2([]);
				i$3 = (_q$3 = ((pc < 0 || pc >= onePassRunes[0].$length) ? $throwRuntimeError("index out of range") : onePassRunes[0].$array[onePassRunes[0].$offset + pc]).$length / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
				while (true) {
					if (!(i$3 >= 0)) { break; }
					inst.Next = $append(inst.Next, inst.Inst.Out);
					i$3 = i$3 - (1) >> 0;
				}
				inst.Inst.Op = 7;
				$s = 9; continue;
			/* } else if (_ref === 9) { */ case 7:
				_r$7 = check[0](inst.Inst.Out, m); /* */ $s = 26; case 26: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				ok = _r$7;
				_key$6 = pc; (m || $throwRuntimeError("assignment to entry in nil map"))[$Uint32.keyFor(_key$6)] = { k: _key$6, v: false };
				if (inst.Next.$length > 0) {
					/* break; */ $s = 9; continue;
				}
				((pc < 0 || pc >= onePassRunes[0].$length) ? $throwRuntimeError("index out of range") : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = $appendSlice(new sliceType$1([]), anyRune));
				inst.Next = new sliceType$2([inst.Inst.Out]);
				$s = 9; continue;
			/* } else if (_ref === 10) { */ case 8:
				_r$8 = check[0](inst.Inst.Out, m); /* */ $s = 27; case 27: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				ok = _r$8;
				_key$7 = pc; (m || $throwRuntimeError("assignment to entry in nil map"))[$Uint32.keyFor(_key$7)] = { k: _key$7, v: false };
				if (inst.Next.$length > 0) {
					/* break; */ $s = 9; continue;
				}
				((pc < 0 || pc >= onePassRunes[0].$length) ? $throwRuntimeError("index out of range") : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = $appendSlice(new sliceType$1([]), anyRuneNotNL));
				inst.Next = new sliceType$2([]);
				i$4 = (_q$4 = ((pc < 0 || pc >= onePassRunes[0].$length) ? $throwRuntimeError("index out of range") : onePassRunes[0].$array[onePassRunes[0].$offset + pc]).$length / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero"));
				while (true) {
					if (!(i$4 >= 0)) { break; }
					inst.Next = $append(inst.Next, inst.Inst.Out);
					i$4 = i$4 - (1) >> 0;
				}
			/* } } */ case 9:
			return ok;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._key$5 = _key$5; $f._key$6 = _key$6; $f._key$7 = _key$7; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._q$4 = _q$4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._v = _v; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.inst = inst; $f.m = m; $f.matchArg = matchArg; $f.matchOut = matchOut; $f.ok = ok; $f.pc = pc; $f.r0 = r0; $f.r0$1 = r0$1; $f.r1 = r1; $f.r1$1 = r1$1; $f.runes = runes; $f.runes$1 = runes$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
		}; })(build, check, onePassRunes, p, visitQueue);
		instQueue.clear();
		instQueue.insert((p[0].Start >>> 0));
		m = (x = p[0].Inst.$length, ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
		/* while (true) { */ case 1:
			/* if (!(!instQueue.empty())) { break; } */ if(!(!instQueue.empty())) { $s = 2; continue; }
			pc = instQueue.next();
			inst = $clone((x$1 = p[0].Inst, ((pc < 0 || pc >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + pc])), onePassInst);
			visitQueue[0].clear();
			_r = check[0](pc, m); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				p[0] = notOnePass;
				/* break; */ $s = 2; continue;
			/* } */ case 4:
			_ref = inst.Inst.Op;
			if (_ref === 0 || _ref === 1) {
				instQueue.insert(inst.Inst.Out);
				instQueue.insert(inst.Inst.Arg);
			} else if (_ref === 2 || _ref === 3 || _ref === 6) {
				instQueue.insert(inst.Inst.Out);
			} else if (_ref === 4) {
			} else if (_ref === 5) {
			} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10) {
			} else {
			}
		/* } */ $s = 1; continue; case 2:
		if (!(p[0] === notOnePass)) {
			_ref$1 = p[0].Inst;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				i = _i;
				(x$2 = p[0].Inst, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i])).Inst.Rune = ((i < 0 || i >= onePassRunes[0].$length) ? $throwRuntimeError("index out of range") : onePassRunes[0].$array[onePassRunes[0].$offset + i]);
				_i++;
			}
		}
		return p[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeOnePass }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.build = build; $f.check = check; $f.i = i; $f.inst = inst; $f.instQueue = instQueue; $f.m = m; $f.onePassRunes = onePassRunes; $f.p = p; $f.pc = pc; $f.visitQueue = visitQueue; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	compileOnePass = function(prog) {
		var $ptr, _i, _r, _ref, _ref$1, inst, opOut, p, prog, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; inst = $f.inst; opOut = $f.opOut; p = $f.p; prog = $f.prog; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = ptrType$1.nil;
		if (prog.Start === 0) {
			p = notOnePass;
			return p;
		}
		if (!(((x = prog.Inst, x$1 = prog.Start, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).Op === 3)) || !((((((x$2 = prog.Inst, x$3 = prog.Start, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3])).Arg << 24 >>> 24) & 4) >>> 0) === 4))) {
			p = notOnePass;
			return p;
		}
		_ref = prog.Inst;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			inst = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), syntax.Inst);
			opOut = (x$4 = prog.Inst, x$5 = inst.Out, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])).Op;
			_ref$1 = inst.Op;
			if (_ref$1 === 0 || _ref$1 === 1) {
				if ((opOut === 4) || ((x$6 = prog.Inst, x$7 = inst.Arg, ((x$7 < 0 || x$7 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + x$7])).Op === 4)) {
					p = notOnePass;
					return p;
				}
			} else if (_ref$1 === 3) {
				if (opOut === 4) {
					if ((((inst.Arg << 24 >>> 24) & 8) >>> 0) === 8) {
						_i++;
						/* continue; */ $s = 1; continue;
					}
					p = notOnePass;
					return p;
				}
			} else {
				if (opOut === 4) {
					p = notOnePass;
					return p;
				}
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		p = onePassCopy(prog);
		_r = makeOnePass(p); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		if (!(p === notOnePass)) {
			cleanupOnePass(p, prog);
		}
		p = p;
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: compileOnePass }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.inst = inst; $f.opOut = opOut; $f.p = p; $f.prog = prog; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.ptr.prototype.String = function() {
		var $ptr, re;
		re = this;
		return re.expr;
	};
	Regexp.prototype.String = function() { return this.$val.String(); };
	Compile = function(expr) {
		var $ptr, _r, expr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; expr = $f.expr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = compile(expr, 212, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Compile }; } $f.$ptr = $ptr; $f._r = _r; $f.expr = expr; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Compile = Compile;
	Regexp.ptr.prototype.Longest = function() {
		var $ptr, re;
		re = this;
		re.longest = true;
	};
	Regexp.prototype.Longest = function() { return this.$val.Longest(); };
	compile = function(expr, mode, longest) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, capNames, err, expr, longest, maxCap, mode, prog, re, regexp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; capNames = $f.capNames; err = $f.err; expr = $f.expr; longest = $f.longest; maxCap = $f.maxCap; mode = $f.mode; prog = $f.prog; re = $f.re; regexp = $f.regexp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = syntax.Parse(expr, mode); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		re = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$3.nil, err];
		}
		maxCap = re.MaxCap();
		capNames = re.CapNames();
		re = re.Simplify();
		_tuple$1 = syntax.Compile(re);
		prog = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$3.nil, err];
		}
		_r$1 = compileOnePass(prog); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		regexp = new Regexp.ptr(expr, prog, _r$1, "", sliceType$3.nil, false, 0, 0, prog.StartCond(), maxCap, capNames, longest, new nosync.Mutex.ptr(false), sliceType$10.nil);
		if (regexp.onepass === notOnePass) {
			_tuple$2 = prog.Prefix();
			regexp.prefix = _tuple$2[0];
			regexp.prefixComplete = _tuple$2[1];
		} else {
			_tuple$3 = onePassPrefix(prog);
			regexp.prefix = _tuple$3[0];
			regexp.prefixComplete = _tuple$3[1];
			regexp.prefixEnd = _tuple$3[2];
		}
		if (!(regexp.prefix === "")) {
			regexp.prefixBytes = new sliceType$3($stringToBytes(regexp.prefix));
			_tuple$4 = utf8.DecodeRuneInString(regexp.prefix);
			regexp.prefixRune = _tuple$4[0];
		}
		return [regexp, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: compile }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.capNames = capNames; $f.err = err; $f.expr = expr; $f.longest = longest; $f.maxCap = maxCap; $f.mode = mode; $f.prog = prog; $f.re = re; $f.regexp = regexp; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.ptr.prototype.get = function() {
		var $ptr, n, re, x, x$1, z, z$1;
		re = this;
		re.mu.Lock();
		n = re.machine.$length;
		if (n > 0) {
			z = (x = re.machine, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
			re.machine = $subslice(re.machine, 0, (n - 1 >> 0));
			re.mu.Unlock();
			return z;
		}
		re.mu.Unlock();
		z$1 = progMachine(re.prog, re.onepass);
		z$1.re = re;
		return z$1;
	};
	Regexp.prototype.get = function() { return this.$val.get(); };
	Regexp.ptr.prototype.put = function(z) {
		var $ptr, re, z;
		re = this;
		re.mu.Lock();
		re.machine = $append(re.machine, z);
		re.mu.Unlock();
	};
	Regexp.prototype.put = function(z) { return this.$val.put(z); };
	MustCompile = function(str) {
		var $ptr, _r, _r$1, _tuple, error, regexp, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; error = $f.error; regexp = $f.regexp; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Compile(str); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		regexp = _tuple[0];
		error = _tuple[1];
		/* */ if (!($interfaceIsEqual(error, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(error, $ifaceNil))) { */ case 2:
			_r$1 = error.Error(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String("regexp: Compile(" + quote(str) + "): " + _r$1));
		/* } */ case 3:
		return regexp;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MustCompile }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.error = error; $f.regexp = regexp; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MustCompile = MustCompile;
	quote = function(s) {
		var $ptr, s;
		if (strconv.CanBackquote(s)) {
			return "`" + s + "`";
		}
		return strconv.Quote(s);
	};
	Regexp.ptr.prototype.NumSubexp = function() {
		var $ptr, re;
		re = this;
		return re.numSubexp;
	};
	Regexp.prototype.NumSubexp = function() { return this.$val.NumSubexp(); };
	Regexp.ptr.prototype.SubexpNames = function() {
		var $ptr, re;
		re = this;
		return re.subexpNames;
	};
	Regexp.prototype.SubexpNames = function() { return this.$val.SubexpNames(); };
	inputString.ptr.prototype.step = function(pos) {
		var $ptr, c, i, pos;
		i = this;
		if (pos < i.str.length) {
			c = i.str.charCodeAt(pos);
			if (c < 128) {
				return [(c >> 0), 1];
			}
			return utf8.DecodeRuneInString(i.str.substring(pos));
		}
		return [-1, 0];
	};
	inputString.prototype.step = function(pos) { return this.$val.step(pos); };
	inputString.ptr.prototype.canCheckPrefix = function() {
		var $ptr, i;
		i = this;
		return true;
	};
	inputString.prototype.canCheckPrefix = function() { return this.$val.canCheckPrefix(); };
	inputString.ptr.prototype.hasPrefix = function(re) {
		var $ptr, i, re;
		i = this;
		return strings.HasPrefix(i.str, re.prefix);
	};
	inputString.prototype.hasPrefix = function(re) { return this.$val.hasPrefix(re); };
	inputString.ptr.prototype.index = function(re, pos) {
		var $ptr, i, pos, re;
		i = this;
		return strings.Index(i.str.substring(pos), re.prefix);
	};
	inputString.prototype.index = function(re, pos) { return this.$val.index(re, pos); };
	inputString.ptr.prototype.context = function(pos) {
		var $ptr, _tmp, _tmp$1, _tuple, _tuple$1, i, pos, r1, r2;
		i = this;
		_tmp = -1;
		_tmp$1 = -1;
		r1 = _tmp;
		r2 = _tmp$1;
		if (pos > 0 && pos <= i.str.length) {
			_tuple = utf8.DecodeLastRuneInString(i.str.substring(0, pos));
			r1 = _tuple[0];
		}
		if (pos < i.str.length) {
			_tuple$1 = utf8.DecodeRuneInString(i.str.substring(pos));
			r2 = _tuple$1[0];
		}
		return syntax.EmptyOpContext(r1, r2);
	};
	inputString.prototype.context = function(pos) { return this.$val.context(pos); };
	inputBytes.ptr.prototype.step = function(pos) {
		var $ptr, c, i, pos, x;
		i = this;
		if (pos < i.str.$length) {
			c = (x = i.str, ((pos < 0 || pos >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + pos]));
			if (c < 128) {
				return [(c >> 0), 1];
			}
			return utf8.DecodeRune($subslice(i.str, pos));
		}
		return [-1, 0];
	};
	inputBytes.prototype.step = function(pos) { return this.$val.step(pos); };
	inputBytes.ptr.prototype.canCheckPrefix = function() {
		var $ptr, i;
		i = this;
		return true;
	};
	inputBytes.prototype.canCheckPrefix = function() { return this.$val.canCheckPrefix(); };
	inputBytes.ptr.prototype.hasPrefix = function(re) {
		var $ptr, i, re;
		i = this;
		return bytes.HasPrefix(i.str, re.prefixBytes);
	};
	inputBytes.prototype.hasPrefix = function(re) { return this.$val.hasPrefix(re); };
	inputBytes.ptr.prototype.index = function(re, pos) {
		var $ptr, i, pos, re;
		i = this;
		return bytes.Index($subslice(i.str, pos), re.prefixBytes);
	};
	inputBytes.prototype.index = function(re, pos) { return this.$val.index(re, pos); };
	inputBytes.ptr.prototype.context = function(pos) {
		var $ptr, _tmp, _tmp$1, _tuple, _tuple$1, i, pos, r1, r2;
		i = this;
		_tmp = -1;
		_tmp$1 = -1;
		r1 = _tmp;
		r2 = _tmp$1;
		if (pos > 0 && pos <= i.str.$length) {
			_tuple = utf8.DecodeLastRune($subslice(i.str, 0, pos));
			r1 = _tuple[0];
		}
		if (pos < i.str.$length) {
			_tuple$1 = utf8.DecodeRune($subslice(i.str, pos));
			r2 = _tuple$1[0];
		}
		return syntax.EmptyOpContext(r1, r2);
	};
	inputBytes.prototype.context = function(pos) { return this.$val.context(pos); };
	inputReader.ptr.prototype.step = function(pos) {
		var $ptr, _r, _tuple, err, i, pos, r, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; i = $f.i; pos = $f.pos; r = $f.r; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		if (!i.atEOT && !((pos === i.pos))) {
			return [-1, 0];
		}
		_r = i.r.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		w = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			i.atEOT = true;
			return [-1, 0];
		}
		i.pos = i.pos + (w) >> 0;
		return [r, w];
		/* */ } return; } if ($f === undefined) { $f = { $blk: inputReader.ptr.prototype.step }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.i = i; $f.pos = pos; $f.r = r; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	inputReader.prototype.step = function(pos) { return this.$val.step(pos); };
	inputReader.ptr.prototype.canCheckPrefix = function() {
		var $ptr, i;
		i = this;
		return false;
	};
	inputReader.prototype.canCheckPrefix = function() { return this.$val.canCheckPrefix(); };
	inputReader.ptr.prototype.hasPrefix = function(re) {
		var $ptr, i, re;
		i = this;
		return false;
	};
	inputReader.prototype.hasPrefix = function(re) { return this.$val.hasPrefix(re); };
	inputReader.ptr.prototype.index = function(re, pos) {
		var $ptr, i, pos, re;
		i = this;
		return -1;
	};
	inputReader.prototype.index = function(re, pos) { return this.$val.index(re, pos); };
	inputReader.ptr.prototype.context = function(pos) {
		var $ptr, i, pos;
		i = this;
		return 0;
	};
	inputReader.prototype.context = function(pos) { return this.$val.context(pos); };
	Regexp.ptr.prototype.LiteralPrefix = function() {
		var $ptr, _tmp, _tmp$1, complete, prefix, re;
		prefix = "";
		complete = false;
		re = this;
		_tmp = re.prefix;
		_tmp$1 = re.prefixComplete;
		prefix = _tmp;
		complete = _tmp$1;
		return [prefix, complete];
	};
	Regexp.prototype.LiteralPrefix = function() { return this.$val.LiteralPrefix(); };
	Regexp.ptr.prototype.MatchReader = function(r) {
		var $ptr, _r, r, re, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; re = $f.re; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doExecute(r, sliceType$3.nil, "", 0, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return !(_r === sliceType.nil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.MatchReader }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.re = re; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.MatchReader = function(r) { return this.$val.MatchReader(r); };
	Regexp.ptr.prototype.MatchString = function(s) {
		var $ptr, _r, re, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; re = $f.re; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doExecute($ifaceNil, sliceType$3.nil, s, 0, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return !(_r === sliceType.nil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.MatchString }; } $f.$ptr = $ptr; $f._r = _r; $f.re = re; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.MatchString = function(s) { return this.$val.MatchString(s); };
	Regexp.ptr.prototype.Match = function(b) {
		var $ptr, _r, b, re, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; re = $f.re; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doExecute($ifaceNil, b, "", 0, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return !(_r === sliceType.nil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.Match }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.re = re; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.Match = function(b) { return this.$val.Match(b); };
	Regexp.ptr.prototype.ReplaceAllString = function(src, repl) {
		var $ptr, _r, b, n, re, repl, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; n = $f.n; re = $f.re; repl = $f.repl; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = [re];
		repl = [repl];
		src = [src];
		re[0] = this;
		n = 2;
		if (strings.Index(repl[0], "$") >= 0) {
			n = $imul(2, ((re[0].numSubexp + 1 >> 0)));
		}
		_r = re[0].replaceAll(sliceType$3.nil, src[0], n, (function(re, repl, src) { return function(dst, match) {
			var $ptr, dst, match;
			return re[0].expand(dst, repl[0], sliceType$3.nil, src[0], match);
		}; })(re, repl, src)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		return $bytesToString(b);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.ReplaceAllString }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.n = n; $f.re = re; $f.repl = repl; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.ReplaceAllString = function(src, repl) { return this.$val.ReplaceAllString(src, repl); };
	Regexp.ptr.prototype.ReplaceAllLiteralString = function(src, repl) {
		var $ptr, _r, re, repl, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; re = $f.re; repl = $f.repl; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		repl = [repl];
		re = this;
		_r = re.replaceAll(sliceType$3.nil, src, 2, (function(repl) { return function(dst, match) {
			var $ptr, dst, match;
			return $appendSlice(dst, repl[0]);
		}; })(repl)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return $bytesToString(_r);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.ReplaceAllLiteralString }; } $f.$ptr = $ptr; $f._r = _r; $f.re = re; $f.repl = repl; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.ReplaceAllLiteralString = function(src, repl) { return this.$val.ReplaceAllLiteralString(src, repl); };
	Regexp.ptr.prototype.ReplaceAllStringFunc = function(src, repl) {
		var $ptr, _r, b, re, repl, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; re = $f.re; repl = $f.repl; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		repl = [repl];
		src = [src];
		re = this;
		_r = re.replaceAll(sliceType$3.nil, src[0], 2, (function(repl, src) { return function $b(dst, match) {
			var $ptr, _arg, _arg$1, _r, dst, match, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; dst = $f.dst; match = $f.match; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_arg = dst;
			_r = repl[0](src[0].substring((0 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 0]), (1 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 1]))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$1 = _r;
			/* */ $s = 2; case 2:
			return $appendSlice(_arg, _arg$1);
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f.dst = dst; $f.match = match; $f.$s = $s; $f.$r = $r; return $f;
		}; })(repl, src)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		return $bytesToString(b);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.ReplaceAllStringFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.re = re; $f.repl = repl; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.ReplaceAllStringFunc = function(src, repl) { return this.$val.ReplaceAllStringFunc(src, repl); };
	Regexp.ptr.prototype.replaceAll = function(bsrc, src, nmatch, repl) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, a, bsrc, buf, endPos, lastMatchEnd, nmatch, re, repl, searchPos, src, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; bsrc = $f.bsrc; buf = $f.buf; endPos = $f.endPos; lastMatchEnd = $f.lastMatchEnd; nmatch = $f.nmatch; re = $f.re; repl = $f.repl; searchPos = $f.searchPos; src = $f.src; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		lastMatchEnd = 0;
		searchPos = 0;
		buf = sliceType$3.nil;
		endPos = 0;
		if (!(bsrc === sliceType$3.nil)) {
			endPos = bsrc.$length;
		} else {
			endPos = src.length;
		}
		/* while (true) { */ case 1:
			/* if (!(searchPos <= endPos)) { break; } */ if(!(searchPos <= endPos)) { $s = 2; continue; }
			_r = re.doExecute($ifaceNil, bsrc, src, searchPos, nmatch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			a = _r;
			if (a.$length === 0) {
				/* break; */ $s = 2; continue;
			}
			if (!(bsrc === sliceType$3.nil)) {
				buf = $appendSlice(buf, $subslice(bsrc, lastMatchEnd, (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0])));
			} else {
				buf = $appendSlice(buf, src.substring(lastMatchEnd, (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0])));
			}
			/* */ if ((1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]) > lastMatchEnd || ((0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]) === 0)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]) > lastMatchEnd || ((0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]) === 0)) { */ case 4:
				_r$1 = repl(buf, a); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				buf = _r$1;
			/* } */ case 5:
			lastMatchEnd = (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]);
			width = 0;
			if (!(bsrc === sliceType$3.nil)) {
				_tuple = utf8.DecodeRune($subslice(bsrc, searchPos));
				width = _tuple[1];
			} else {
				_tuple$1 = utf8.DecodeRuneInString(src.substring(searchPos));
				width = _tuple$1[1];
			}
			if ((searchPos + width >> 0) > (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1])) {
				searchPos = searchPos + (width) >> 0;
			} else if ((searchPos + 1 >> 0) > (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1])) {
				searchPos = searchPos + (1) >> 0;
			} else {
				searchPos = (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]);
			}
		/* } */ $s = 1; continue; case 2:
		if (!(bsrc === sliceType$3.nil)) {
			buf = $appendSlice(buf, $subslice(bsrc, lastMatchEnd));
		} else {
			buf = $appendSlice(buf, src.substring(lastMatchEnd));
		}
		return buf;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.replaceAll }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.bsrc = bsrc; $f.buf = buf; $f.endPos = endPos; $f.lastMatchEnd = lastMatchEnd; $f.nmatch = nmatch; $f.re = re; $f.repl = repl; $f.searchPos = searchPos; $f.src = src; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.replaceAll = function(bsrc, src, nmatch, repl) { return this.$val.replaceAll(bsrc, src, nmatch, repl); };
	Regexp.ptr.prototype.ReplaceAll = function(src, repl) {
		var $ptr, _r, b, n, re, repl, src, srepl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; n = $f.n; re = $f.re; repl = $f.repl; src = $f.src; srepl = $f.srepl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = [re];
		repl = [repl];
		src = [src];
		srepl = [srepl];
		re[0] = this;
		n = 2;
		if (bytes.IndexByte(repl[0], 36) >= 0) {
			n = $imul(2, ((re[0].numSubexp + 1 >> 0)));
		}
		srepl[0] = "";
		_r = re[0].replaceAll(src[0], "", n, (function(re, repl, src, srepl) { return function(dst, match) {
			var $ptr, dst, match;
			if (!((srepl[0].length === repl[0].$length))) {
				srepl[0] = $bytesToString(repl[0]);
			}
			return re[0].expand(dst, srepl[0], src[0], "", match);
		}; })(re, repl, src, srepl)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.ReplaceAll }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.n = n; $f.re = re; $f.repl = repl; $f.src = src; $f.srepl = srepl; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.ReplaceAll = function(src, repl) { return this.$val.ReplaceAll(src, repl); };
	Regexp.ptr.prototype.ReplaceAllLiteral = function(src, repl) {
		var $ptr, _r, re, repl, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; re = $f.re; repl = $f.repl; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		repl = [repl];
		re = this;
		_r = re.replaceAll(src, "", 2, (function(repl) { return function(dst, match) {
			var $ptr, dst, match;
			return $appendSlice(dst, repl[0]);
		}; })(repl)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.ReplaceAllLiteral }; } $f.$ptr = $ptr; $f._r = _r; $f.re = re; $f.repl = repl; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.ReplaceAllLiteral = function(src, repl) { return this.$val.ReplaceAllLiteral(src, repl); };
	Regexp.ptr.prototype.ReplaceAllFunc = function(src, repl) {
		var $ptr, _r, re, repl, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; re = $f.re; repl = $f.repl; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		repl = [repl];
		src = [src];
		re = this;
		_r = re.replaceAll(src[0], "", 2, (function(repl, src) { return function $b(dst, match) {
			var $ptr, _arg, _arg$1, _r, dst, match, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; dst = $f.dst; match = $f.match; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_arg = dst;
			_r = repl[0]($subslice(src[0], (0 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 0]), (1 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 1]))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$1 = _r;
			/* */ $s = 2; case 2:
			return $appendSlice(_arg, _arg$1);
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f.dst = dst; $f.match = match; $f.$s = $s; $f.$r = $r; return $f;
		}; })(repl, src)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.ReplaceAllFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.re = re; $f.repl = repl; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.ReplaceAllFunc = function(src, repl) { return this.$val.ReplaceAllFunc(src, repl); };
	special = function(b) {
		var $ptr, b;
		return bytes.IndexByte(specialBytes, b) >= 0;
	};
	QuoteMeta = function(s) {
		var $ptr, b, i, j, s;
		b = $makeSlice(sliceType$3, ($imul(2, s.length)));
		j = 0;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (special(s.charCodeAt(i))) {
				((j < 0 || j >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + j] = 92);
				j = j + (1) >> 0;
			}
			((j < 0 || j >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + j] = s.charCodeAt(i));
			j = j + (1) >> 0;
			i = i + (1) >> 0;
		}
		return $bytesToString($subslice(b, 0, j));
	};
	$pkg.QuoteMeta = QuoteMeta;
	Regexp.ptr.prototype.pad = function(a) {
		var $ptr, a, n, re;
		re = this;
		if (a === sliceType.nil) {
			return sliceType.nil;
		}
		n = $imul(((1 + re.numSubexp >> 0)), 2);
		while (true) {
			if (!(a.$length < n)) { break; }
			a = $append(a, -1);
		}
		return a;
	};
	Regexp.prototype.pad = function(a) { return this.$val.pad(a); };
	Regexp.ptr.prototype.allMatches = function(s, b, n, deliver) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, accept, b, deliver, end, i, matches, n, pos, prevMatchEnd, re, s, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; accept = $f.accept; b = $f.b; deliver = $f.deliver; end = $f.end; i = $f.i; matches = $f.matches; n = $f.n; pos = $f.pos; prevMatchEnd = $f.prevMatchEnd; re = $f.re; s = $f.s; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		end = 0;
		if (b === sliceType$3.nil) {
			end = s.length;
		} else {
			end = b.$length;
		}
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = -1;
		pos = _tmp;
		i = _tmp$1;
		prevMatchEnd = _tmp$2;
		/* while (true) { */ case 1:
			/* if (!(i < n && pos <= end)) { break; } */ if(!(i < n && pos <= end)) { $s = 2; continue; }
			_r = re.doExecute($ifaceNil, b, s, pos, re.prog.NumCap); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			matches = _r;
			if (matches.$length === 0) {
				/* break; */ $s = 2; continue;
			}
			accept = true;
			if ((1 >= matches.$length ? $throwRuntimeError("index out of range") : matches.$array[matches.$offset + 1]) === pos) {
				if ((0 >= matches.$length ? $throwRuntimeError("index out of range") : matches.$array[matches.$offset + 0]) === prevMatchEnd) {
					accept = false;
				}
				width = 0;
				if (b === sliceType$3.nil) {
					_tuple = utf8.DecodeRuneInString(s.substring(pos, end));
					width = _tuple[1];
				} else {
					_tuple$1 = utf8.DecodeRune($subslice(b, pos, end));
					width = _tuple$1[1];
				}
				if (width > 0) {
					pos = pos + (width) >> 0;
				} else {
					pos = end + 1 >> 0;
				}
			} else {
				pos = (1 >= matches.$length ? $throwRuntimeError("index out of range") : matches.$array[matches.$offset + 1]);
			}
			prevMatchEnd = (1 >= matches.$length ? $throwRuntimeError("index out of range") : matches.$array[matches.$offset + 1]);
			/* */ if (accept) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (accept) { */ case 4:
				$r = deliver(re.pad(matches)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i = i + (1) >> 0;
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.allMatches }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.accept = accept; $f.b = b; $f.deliver = deliver; $f.end = end; $f.i = i; $f.matches = matches; $f.n = n; $f.pos = pos; $f.prevMatchEnd = prevMatchEnd; $f.re = re; $f.s = s; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.allMatches = function(s, b, n, deliver) { return this.$val.allMatches(s, b, n, deliver); };
	Regexp.ptr.prototype.Find = function(b) {
		var $ptr, _r, a, b, re, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; b = $f.b; re = $f.re; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doExecute($ifaceNil, b, "", 0, 2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType.nil) {
			return sliceType$3.nil;
		}
		return $subslice(b, (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.Find }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.b = b; $f.re = re; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.Find = function(b) { return this.$val.Find(b); };
	Regexp.ptr.prototype.FindIndex = function(b) {
		var $ptr, _r, a, b, loc, re, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; b = $f.b; loc = $f.loc; re = $f.re; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		loc = sliceType.nil;
		re = this;
		_r = re.doExecute($ifaceNil, b, "", 0, 2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType.nil) {
			loc = sliceType.nil;
			return loc;
		}
		loc = $subslice(a, 0, 2);
		return loc;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.b = b; $f.loc = loc; $f.re = re; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindIndex = function(b) { return this.$val.FindIndex(b); };
	Regexp.ptr.prototype.FindString = function(s) {
		var $ptr, _r, a, re, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; re = $f.re; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doExecute($ifaceNil, sliceType$3.nil, s, 0, 2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType.nil) {
			return "";
		}
		return s.substring((0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindString }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.re = re; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindString = function(s) { return this.$val.FindString(s); };
	Regexp.ptr.prototype.FindStringIndex = function(s) {
		var $ptr, _r, a, loc, re, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; loc = $f.loc; re = $f.re; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		loc = sliceType.nil;
		re = this;
		_r = re.doExecute($ifaceNil, sliceType$3.nil, s, 0, 2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType.nil) {
			loc = sliceType.nil;
			return loc;
		}
		loc = $subslice(a, 0, 2);
		return loc;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindStringIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.loc = loc; $f.re = re; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindStringIndex = function(s) { return this.$val.FindStringIndex(s); };
	Regexp.ptr.prototype.FindReaderIndex = function(r) {
		var $ptr, _r, a, loc, r, re, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; loc = $f.loc; r = $f.r; re = $f.re; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		loc = sliceType.nil;
		re = this;
		_r = re.doExecute(r, sliceType$3.nil, "", 0, 2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType.nil) {
			loc = sliceType.nil;
			return loc;
		}
		loc = $subslice(a, 0, 2);
		return loc;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindReaderIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.loc = loc; $f.r = r; $f.re = re; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindReaderIndex = function(r) { return this.$val.FindReaderIndex(r); };
	Regexp.ptr.prototype.FindSubmatch = function(b) {
		var $ptr, _i, _r, _ref, a, b, i, re, ret, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; a = $f.a; b = $f.b; i = $f.i; re = $f.re; ret = $f.ret; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doExecute($ifaceNil, b, "", 0, re.prog.NumCap); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType.nil) {
			return sliceType$11.nil;
		}
		ret = $makeSlice(sliceType$11, (1 + re.numSubexp >> 0));
		_ref = ret;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			if (($imul(2, i)) < a.$length && (x = $imul(2, i), ((x < 0 || x >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + x])) >= 0) {
				((i < 0 || i >= ret.$length) ? $throwRuntimeError("index out of range") : ret.$array[ret.$offset + i] = $subslice(b, (x$1 = $imul(2, i), ((x$1 < 0 || x$1 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + x$1])), (x$2 = ($imul(2, i)) + 1 >> 0, ((x$2 < 0 || x$2 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + x$2]))));
			}
			_i++;
		}
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindSubmatch }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.a = a; $f.b = b; $f.i = i; $f.re = re; $f.ret = ret; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindSubmatch = function(b) { return this.$val.FindSubmatch(b); };
	Regexp.ptr.prototype.Expand = function(dst, template, src, match) {
		var $ptr, dst, match, re, src, template;
		re = this;
		return re.expand(dst, $bytesToString(template), src, "", match);
	};
	Regexp.prototype.Expand = function(dst, template, src, match) { return this.$val.Expand(dst, template, src, match); };
	Regexp.ptr.prototype.ExpandString = function(dst, template, src, match) {
		var $ptr, dst, match, re, src, template;
		re = this;
		return re.expand(dst, template, sliceType$3.nil, src, match);
	};
	Regexp.prototype.ExpandString = function(dst, template, src, match) { return this.$val.ExpandString(dst, template, src, match); };
	Regexp.ptr.prototype.expand = function(dst, template, bsrc, src, match) {
		var $ptr, _i, _ref, _tuple, bsrc, dst, i, i$1, match, name, namei, num, ok, re, rest, src, template, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		re = this;
		while (true) {
			if (!(template.length > 0)) { break; }
			i = strings.Index(template, "$");
			if (i < 0) {
				break;
			}
			dst = $appendSlice(dst, template.substring(0, i));
			template = template.substring(i);
			if (template.length > 1 && (template.charCodeAt(1) === 36)) {
				dst = $append(dst, 36);
				template = template.substring(2);
				continue;
			}
			_tuple = extract(template);
			name = _tuple[0];
			num = _tuple[1];
			rest = _tuple[2];
			ok = _tuple[3];
			if (!ok) {
				dst = $append(dst, 36);
				template = template.substring(1);
				continue;
			}
			template = rest;
			if (num >= 0) {
				if ((($imul(2, num)) + 1 >> 0) < match.$length && (x = $imul(2, num), ((x < 0 || x >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + x])) >= 0) {
					if (!(bsrc === sliceType$3.nil)) {
						dst = $appendSlice(dst, $subslice(bsrc, (x$1 = $imul(2, num), ((x$1 < 0 || x$1 >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + x$1])), (x$2 = ($imul(2, num)) + 1 >> 0, ((x$2 < 0 || x$2 >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + x$2]))));
					} else {
						dst = $appendSlice(dst, src.substring((x$3 = $imul(2, num), ((x$3 < 0 || x$3 >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + x$3])), (x$4 = ($imul(2, num)) + 1 >> 0, ((x$4 < 0 || x$4 >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + x$4]))));
					}
				}
			} else {
				_ref = re.subexpNames;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i$1 = _i;
					namei = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					if (name === namei && (($imul(2, i$1)) + 1 >> 0) < match.$length && (x$5 = $imul(2, i$1), ((x$5 < 0 || x$5 >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + x$5])) >= 0) {
						if (!(bsrc === sliceType$3.nil)) {
							dst = $appendSlice(dst, $subslice(bsrc, (x$6 = $imul(2, i$1), ((x$6 < 0 || x$6 >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + x$6])), (x$7 = ($imul(2, i$1)) + 1 >> 0, ((x$7 < 0 || x$7 >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + x$7]))));
						} else {
							dst = $appendSlice(dst, src.substring((x$8 = $imul(2, i$1), ((x$8 < 0 || x$8 >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + x$8])), (x$9 = ($imul(2, i$1)) + 1 >> 0, ((x$9 < 0 || x$9 >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + x$9]))));
						}
						break;
					}
					_i++;
				}
			}
		}
		dst = $appendSlice(dst, template);
		return dst;
	};
	Regexp.prototype.expand = function(dst, template, bsrc, src, match) { return this.$val.expand(dst, template, bsrc, src, match); };
	extract = function(str) {
		var $ptr, _tuple, brace, i, i$1, name, num, ok, rest, rune, size, str;
		name = "";
		num = 0;
		rest = "";
		ok = false;
		if (str.length < 2 || !((str.charCodeAt(0) === 36))) {
			return [name, num, rest, ok];
		}
		brace = false;
		if (str.charCodeAt(1) === 123) {
			brace = true;
			str = str.substring(2);
		} else {
			str = str.substring(1);
		}
		i = 0;
		while (true) {
			if (!(i < str.length)) { break; }
			_tuple = utf8.DecodeRuneInString(str.substring(i));
			rune = _tuple[0];
			size = _tuple[1];
			if (!unicode.IsLetter(rune) && !unicode.IsDigit(rune) && !((rune === 95))) {
				break;
			}
			i = i + (size) >> 0;
		}
		if (i === 0) {
			return [name, num, rest, ok];
		}
		name = str.substring(0, i);
		if (brace) {
			if (i >= str.length || !((str.charCodeAt(i) === 125))) {
				return [name, num, rest, ok];
			}
			i = i + (1) >> 0;
		}
		num = 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < name.length)) { break; }
			if (name.charCodeAt(i$1) < 48 || 57 < name.charCodeAt(i$1) || num >= 100000000) {
				num = -1;
				break;
			}
			num = (($imul(num, 10)) + (name.charCodeAt(i$1) >> 0) >> 0) - 48 >> 0;
			i$1 = i$1 + (1) >> 0;
		}
		if ((name.charCodeAt(0) === 48) && name.length > 1) {
			num = -1;
		}
		rest = str.substring(i);
		ok = true;
		return [name, num, rest, ok];
	};
	Regexp.ptr.prototype.FindSubmatchIndex = function(b) {
		var $ptr, _r, _r$1, b, re, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; b = $f.b; re = $f.re; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doExecute($ifaceNil, b, "", 0, re.prog.NumCap); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = re.pad(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindSubmatchIndex }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.re = re; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindSubmatchIndex = function(b) { return this.$val.FindSubmatchIndex(b); };
	Regexp.ptr.prototype.FindStringSubmatch = function(s) {
		var $ptr, _i, _r, _ref, a, i, re, ret, s, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; a = $f.a; i = $f.i; re = $f.re; ret = $f.ret; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doExecute($ifaceNil, sliceType$3.nil, s, 0, re.prog.NumCap); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType.nil) {
			return sliceType$9.nil;
		}
		ret = $makeSlice(sliceType$9, (1 + re.numSubexp >> 0));
		_ref = ret;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			if (($imul(2, i)) < a.$length && (x = $imul(2, i), ((x < 0 || x >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + x])) >= 0) {
				((i < 0 || i >= ret.$length) ? $throwRuntimeError("index out of range") : ret.$array[ret.$offset + i] = s.substring((x$1 = $imul(2, i), ((x$1 < 0 || x$1 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + x$1])), (x$2 = ($imul(2, i)) + 1 >> 0, ((x$2 < 0 || x$2 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + x$2]))));
			}
			_i++;
		}
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindStringSubmatch }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.a = a; $f.i = i; $f.re = re; $f.ret = ret; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindStringSubmatch = function(s) { return this.$val.FindStringSubmatch(s); };
	Regexp.ptr.prototype.FindStringSubmatchIndex = function(s) {
		var $ptr, _r, _r$1, re, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; re = $f.re; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doExecute($ifaceNil, sliceType$3.nil, s, 0, re.prog.NumCap); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = re.pad(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindStringSubmatchIndex }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.re = re; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindStringSubmatchIndex = function(s) { return this.$val.FindStringSubmatchIndex(s); };
	Regexp.ptr.prototype.FindReaderSubmatchIndex = function(r) {
		var $ptr, _r, _r$1, r, re, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; r = $f.r; re = $f.re; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doExecute(r, sliceType$3.nil, "", 0, re.prog.NumCap); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = re.pad(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindReaderSubmatchIndex }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.r = r; $f.re = re; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindReaderSubmatchIndex = function(r) { return this.$val.FindReaderSubmatchIndex(r); };
	Regexp.ptr.prototype.FindAll = function(b, n) {
		var $ptr, b, n, re, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; n = $f.n; re = $f.re; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		result = [result];
		re = this;
		if (n < 0) {
			n = b[0].$length + 1 >> 0;
		}
		result[0] = $makeSlice(sliceType$11, 0, 10);
		$r = re.allMatches("", b[0], n, (function(b, result) { return function(match) {
			var $ptr, match;
			result[0] = $append(result[0], $subslice(b[0], (0 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 0]), (1 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 1])));
		}; })(b, result)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (result[0].$length === 0) {
			return sliceType$11.nil;
		}
		return result[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindAll }; } $f.$ptr = $ptr; $f.b = b; $f.n = n; $f.re = re; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindAll = function(b, n) { return this.$val.FindAll(b, n); };
	Regexp.ptr.prototype.FindAllIndex = function(b, n) {
		var $ptr, b, n, re, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; n = $f.n; re = $f.re; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		re = this;
		if (n < 0) {
			n = b.$length + 1 >> 0;
		}
		result[0] = $makeSlice(sliceType$12, 0, 10);
		$r = re.allMatches("", b, n, (function(result) { return function(match) {
			var $ptr, match;
			result[0] = $append(result[0], $subslice(match, 0, 2));
		}; })(result)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (result[0].$length === 0) {
			return sliceType$12.nil;
		}
		return result[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindAllIndex }; } $f.$ptr = $ptr; $f.b = b; $f.n = n; $f.re = re; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindAllIndex = function(b, n) { return this.$val.FindAllIndex(b, n); };
	Regexp.ptr.prototype.FindAllString = function(s, n) {
		var $ptr, n, re, result, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; n = $f.n; re = $f.re; result = $f.result; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		s = [s];
		re = this;
		if (n < 0) {
			n = s[0].length + 1 >> 0;
		}
		result[0] = $makeSlice(sliceType$9, 0, 10);
		$r = re.allMatches(s[0], sliceType$3.nil, n, (function(result, s) { return function(match) {
			var $ptr, match;
			result[0] = $append(result[0], s[0].substring((0 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 0]), (1 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 1])));
		}; })(result, s)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (result[0].$length === 0) {
			return sliceType$9.nil;
		}
		return result[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindAllString }; } $f.$ptr = $ptr; $f.n = n; $f.re = re; $f.result = result; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindAllString = function(s, n) { return this.$val.FindAllString(s, n); };
	Regexp.ptr.prototype.FindAllStringIndex = function(s, n) {
		var $ptr, n, re, result, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; n = $f.n; re = $f.re; result = $f.result; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		re = this;
		if (n < 0) {
			n = s.length + 1 >> 0;
		}
		result[0] = $makeSlice(sliceType$12, 0, 10);
		$r = re.allMatches(s, sliceType$3.nil, n, (function(result) { return function(match) {
			var $ptr, match;
			result[0] = $append(result[0], $subslice(match, 0, 2));
		}; })(result)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (result[0].$length === 0) {
			return sliceType$12.nil;
		}
		return result[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindAllStringIndex }; } $f.$ptr = $ptr; $f.n = n; $f.re = re; $f.result = result; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindAllStringIndex = function(s, n) { return this.$val.FindAllStringIndex(s, n); };
	Regexp.ptr.prototype.FindAllSubmatch = function(b, n) {
		var $ptr, b, n, re, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; n = $f.n; re = $f.re; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		result = [result];
		re = this;
		if (n < 0) {
			n = b[0].$length + 1 >> 0;
		}
		result[0] = $makeSlice(sliceType$13, 0, 10);
		$r = re.allMatches("", b[0], n, (function(b, result) { return function(match) {
			var $ptr, _i, _q, _ref, j, match, slice, x, x$1, x$2;
			slice = $makeSlice(sliceType$11, (_q = match.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
			_ref = slice;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				j = _i;
				if ((x = $imul(2, j), ((x < 0 || x >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + x])) >= 0) {
					((j < 0 || j >= slice.$length) ? $throwRuntimeError("index out of range") : slice.$array[slice.$offset + j] = $subslice(b[0], (x$1 = $imul(2, j), ((x$1 < 0 || x$1 >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + x$1])), (x$2 = ($imul(2, j)) + 1 >> 0, ((x$2 < 0 || x$2 >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + x$2]))));
				}
				_i++;
			}
			result[0] = $append(result[0], slice);
		}; })(b, result)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (result[0].$length === 0) {
			return sliceType$13.nil;
		}
		return result[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindAllSubmatch }; } $f.$ptr = $ptr; $f.b = b; $f.n = n; $f.re = re; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindAllSubmatch = function(b, n) { return this.$val.FindAllSubmatch(b, n); };
	Regexp.ptr.prototype.FindAllSubmatchIndex = function(b, n) {
		var $ptr, b, n, re, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; n = $f.n; re = $f.re; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		re = this;
		if (n < 0) {
			n = b.$length + 1 >> 0;
		}
		result[0] = $makeSlice(sliceType$12, 0, 10);
		$r = re.allMatches("", b, n, (function(result) { return function(match) {
			var $ptr, match;
			result[0] = $append(result[0], match);
		}; })(result)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (result[0].$length === 0) {
			return sliceType$12.nil;
		}
		return result[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindAllSubmatchIndex }; } $f.$ptr = $ptr; $f.b = b; $f.n = n; $f.re = re; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindAllSubmatchIndex = function(b, n) { return this.$val.FindAllSubmatchIndex(b, n); };
	Regexp.ptr.prototype.FindAllStringSubmatch = function(s, n) {
		var $ptr, n, re, result, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; n = $f.n; re = $f.re; result = $f.result; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		s = [s];
		re = this;
		if (n < 0) {
			n = s[0].length + 1 >> 0;
		}
		result[0] = $makeSlice(sliceType$14, 0, 10);
		$r = re.allMatches(s[0], sliceType$3.nil, n, (function(result, s) { return function(match) {
			var $ptr, _i, _q, _ref, j, match, slice, x, x$1, x$2;
			slice = $makeSlice(sliceType$9, (_q = match.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
			_ref = slice;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				j = _i;
				if ((x = $imul(2, j), ((x < 0 || x >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + x])) >= 0) {
					((j < 0 || j >= slice.$length) ? $throwRuntimeError("index out of range") : slice.$array[slice.$offset + j] = s[0].substring((x$1 = $imul(2, j), ((x$1 < 0 || x$1 >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + x$1])), (x$2 = ($imul(2, j)) + 1 >> 0, ((x$2 < 0 || x$2 >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + x$2]))));
				}
				_i++;
			}
			result[0] = $append(result[0], slice);
		}; })(result, s)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (result[0].$length === 0) {
			return sliceType$14.nil;
		}
		return result[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindAllStringSubmatch }; } $f.$ptr = $ptr; $f.n = n; $f.re = re; $f.result = result; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindAllStringSubmatch = function(s, n) { return this.$val.FindAllStringSubmatch(s, n); };
	Regexp.ptr.prototype.FindAllStringSubmatchIndex = function(s, n) {
		var $ptr, n, re, result, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; n = $f.n; re = $f.re; result = $f.result; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		re = this;
		if (n < 0) {
			n = s.length + 1 >> 0;
		}
		result[0] = $makeSlice(sliceType$12, 0, 10);
		$r = re.allMatches(s, sliceType$3.nil, n, (function(result) { return function(match) {
			var $ptr, match;
			result[0] = $append(result[0], match);
		}; })(result)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (result[0].$length === 0) {
			return sliceType$12.nil;
		}
		return result[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindAllStringSubmatchIndex }; } $f.$ptr = $ptr; $f.n = n; $f.re = re; $f.result = result; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindAllStringSubmatchIndex = function(s, n) { return this.$val.FindAllStringSubmatchIndex(s, n); };
	Regexp.ptr.prototype.Split = function(s, n) {
		var $ptr, _i, _r, _ref, beg, end, match, matches, n, re, s, strings$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; beg = $f.beg; end = $f.end; match = $f.match; matches = $f.matches; n = $f.n; re = $f.re; s = $f.s; strings$1 = $f.strings$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		if (n === 0) {
			return sliceType$9.nil;
		}
		if (re.expr.length > 0 && (s.length === 0)) {
			return new sliceType$9([""]);
		}
		_r = re.FindAllStringIndex(s, n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		matches = _r;
		strings$1 = $makeSlice(sliceType$9, 0, matches.$length);
		beg = 0;
		end = 0;
		_ref = matches;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			match = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (n > 0 && strings$1.$length >= (n - 1 >> 0)) {
				break;
			}
			end = (0 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 0]);
			if (!(((1 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 1]) === 0))) {
				strings$1 = $append(strings$1, s.substring(beg, end));
			}
			beg = (1 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 1]);
			_i++;
		}
		if (!((end === s.length))) {
			strings$1 = $append(strings$1, s.substring(beg));
		}
		return strings$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.Split }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.beg = beg; $f.end = end; $f.match = match; $f.matches = matches; $f.n = n; $f.re = re; $f.s = s; $f.strings$1 = strings$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.Split = function(s, n) { return this.$val.Split(s, n); };
	ptrType.methods = [{prop: "reset", name: "reset", pkg: "regexp", typ: $funcType([$Int, $Int], [], false)}, {prop: "shouldVisit", name: "shouldVisit", pkg: "regexp", typ: $funcType([$Uint32, $Int], [$Bool], false)}, {prop: "push", name: "push", pkg: "regexp", typ: $funcType([$Uint32, $Int, $Int], [], false)}];
	ptrType$10.methods = [{prop: "tryBacktrack", name: "tryBacktrack", pkg: "regexp", typ: $funcType([ptrType, input, $Uint32, $Int], [$Bool], false)}, {prop: "backtrack", name: "backtrack", pkg: "regexp", typ: $funcType([input, $Int, $Int, $Int], [$Bool], false)}, {prop: "newInputBytes", name: "newInputBytes", pkg: "regexp", typ: $funcType([sliceType$3], [input], false)}, {prop: "newInputString", name: "newInputString", pkg: "regexp", typ: $funcType([$String], [input], false)}, {prop: "newInputReader", name: "newInputReader", pkg: "regexp", typ: $funcType([io.RuneReader], [input], false)}, {prop: "init", name: "init", pkg: "regexp", typ: $funcType([$Int], [], false)}, {prop: "alloc", name: "alloc", pkg: "regexp", typ: $funcType([ptrType$5], [ptrType$4], false)}, {prop: "free", name: "free", pkg: "regexp", typ: $funcType([ptrType$4], [], false)}, {prop: "match", name: "match", pkg: "regexp", typ: $funcType([input, $Int], [$Bool], false)}, {prop: "clear", name: "clear", pkg: "regexp", typ: $funcType([ptrType$11], [], false)}, {prop: "step", name: "step", pkg: "regexp", typ: $funcType([ptrType$11, ptrType$11, $Int, $Int, $Int32, syntax.EmptyOp], [], false)}, {prop: "add", name: "add", pkg: "regexp", typ: $funcType([ptrType$11, $Uint32, $Int, sliceType, syntax.EmptyOp, ptrType$4], [ptrType$4], false)}, {prop: "onepass", name: "onepass", pkg: "regexp", typ: $funcType([input, $Int], [$Bool], false)}];
	ptrType$7.methods = [{prop: "empty", name: "empty", pkg: "regexp", typ: $funcType([], [$Bool], false)}, {prop: "next", name: "next", pkg: "regexp", typ: $funcType([], [$Uint32], false)}, {prop: "clear", name: "clear", pkg: "regexp", typ: $funcType([], [], false)}, {prop: "reset", name: "reset", pkg: "regexp", typ: $funcType([], [], false)}, {prop: "contains", name: "contains", pkg: "regexp", typ: $funcType([$Uint32], [$Bool], false)}, {prop: "insert", name: "insert", pkg: "regexp", typ: $funcType([$Uint32], [], false)}, {prop: "insertNew", name: "insertNew", pkg: "regexp", typ: $funcType([$Uint32], [], false)}];
	runeSlice.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Sort", name: "Sort", pkg: "", typ: $funcType([], [], false)}];
	ptrType$3.methods = [{prop: "doExecute", name: "doExecute", pkg: "regexp", typ: $funcType([io.RuneReader, sliceType$3, $String, $Int, $Int], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Longest", name: "Longest", pkg: "", typ: $funcType([], [], false)}, {prop: "get", name: "get", pkg: "regexp", typ: $funcType([], [ptrType$10], false)}, {prop: "put", name: "put", pkg: "regexp", typ: $funcType([ptrType$10], [], false)}, {prop: "NumSubexp", name: "NumSubexp", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SubexpNames", name: "SubexpNames", pkg: "", typ: $funcType([], [sliceType$9], false)}, {prop: "LiteralPrefix", name: "LiteralPrefix", pkg: "", typ: $funcType([], [$String, $Bool], false)}, {prop: "MatchReader", name: "MatchReader", pkg: "", typ: $funcType([io.RuneReader], [$Bool], false)}, {prop: "MatchString", name: "MatchString", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "Match", name: "Match", pkg: "", typ: $funcType([sliceType$3], [$Bool], false)}, {prop: "ReplaceAllString", name: "ReplaceAllString", pkg: "", typ: $funcType([$String, $String], [$String], false)}, {prop: "ReplaceAllLiteralString", name: "ReplaceAllLiteralString", pkg: "", typ: $funcType([$String, $String], [$String], false)}, {prop: "ReplaceAllStringFunc", name: "ReplaceAllStringFunc", pkg: "", typ: $funcType([$String, funcType], [$String], false)}, {prop: "replaceAll", name: "replaceAll", pkg: "regexp", typ: $funcType([sliceType$3, $String, $Int, funcType$1], [sliceType$3], false)}, {prop: "ReplaceAll", name: "ReplaceAll", pkg: "", typ: $funcType([sliceType$3, sliceType$3], [sliceType$3], false)}, {prop: "ReplaceAllLiteral", name: "ReplaceAllLiteral", pkg: "", typ: $funcType([sliceType$3, sliceType$3], [sliceType$3], false)}, {prop: "ReplaceAllFunc", name: "ReplaceAllFunc", pkg: "", typ: $funcType([sliceType$3, funcType$2], [sliceType$3], false)}, {prop: "pad", name: "pad", pkg: "regexp", typ: $funcType([sliceType], [sliceType], false)}, {prop: "allMatches", name: "allMatches", pkg: "regexp", typ: $funcType([$String, sliceType$3, $Int, funcType$3], [], false)}, {prop: "Find", name: "Find", pkg: "", typ: $funcType([sliceType$3], [sliceType$3], false)}, {prop: "FindIndex", name: "FindIndex", pkg: "", typ: $funcType([sliceType$3], [sliceType], false)}, {prop: "FindString", name: "FindString", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "FindStringIndex", name: "FindStringIndex", pkg: "", typ: $funcType([$String], [sliceType], false)}, {prop: "FindReaderIndex", name: "FindReaderIndex", pkg: "", typ: $funcType([io.RuneReader], [sliceType], false)}, {prop: "FindSubmatch", name: "FindSubmatch", pkg: "", typ: $funcType([sliceType$3], [sliceType$11], false)}, {prop: "Expand", name: "Expand", pkg: "", typ: $funcType([sliceType$3, sliceType$3, sliceType$3, sliceType], [sliceType$3], false)}, {prop: "ExpandString", name: "ExpandString", pkg: "", typ: $funcType([sliceType$3, $String, $String, sliceType], [sliceType$3], false)}, {prop: "expand", name: "expand", pkg: "regexp", typ: $funcType([sliceType$3, $String, sliceType$3, $String, sliceType], [sliceType$3], false)}, {prop: "FindSubmatchIndex", name: "FindSubmatchIndex", pkg: "", typ: $funcType([sliceType$3], [sliceType], false)}, {prop: "FindStringSubmatch", name: "FindStringSubmatch", pkg: "", typ: $funcType([$String], [sliceType$9], false)}, {prop: "FindStringSubmatchIndex", name: "FindStringSubmatchIndex", pkg: "", typ: $funcType([$String], [sliceType], false)}, {prop: "FindReaderSubmatchIndex", name: "FindReaderSubmatchIndex", pkg: "", typ: $funcType([io.RuneReader], [sliceType], false)}, {prop: "FindAll", name: "FindAll", pkg: "", typ: $funcType([sliceType$3, $Int], [sliceType$11], false)}, {prop: "FindAllIndex", name: "FindAllIndex", pkg: "", typ: $funcType([sliceType$3, $Int], [sliceType$12], false)}, {prop: "FindAllString", name: "FindAllString", pkg: "", typ: $funcType([$String, $Int], [sliceType$9], false)}, {prop: "FindAllStringIndex", name: "FindAllStringIndex", pkg: "", typ: $funcType([$String, $Int], [sliceType$12], false)}, {prop: "FindAllSubmatch", name: "FindAllSubmatch", pkg: "", typ: $funcType([sliceType$3, $Int], [sliceType$13], false)}, {prop: "FindAllSubmatchIndex", name: "FindAllSubmatchIndex", pkg: "", typ: $funcType([sliceType$3, $Int], [sliceType$12], false)}, {prop: "FindAllStringSubmatch", name: "FindAllStringSubmatch", pkg: "", typ: $funcType([$String, $Int], [sliceType$14], false)}, {prop: "FindAllStringSubmatchIndex", name: "FindAllStringSubmatchIndex", pkg: "", typ: $funcType([$String, $Int], [sliceType$12], false)}, {prop: "Split", name: "Split", pkg: "", typ: $funcType([$String, $Int], [sliceType$9], false)}];
	ptrType$12.methods = [{prop: "step", name: "step", pkg: "regexp", typ: $funcType([$Int], [$Int32, $Int], false)}, {prop: "canCheckPrefix", name: "canCheckPrefix", pkg: "regexp", typ: $funcType([], [$Bool], false)}, {prop: "hasPrefix", name: "hasPrefix", pkg: "regexp", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "index", name: "index", pkg: "regexp", typ: $funcType([ptrType$3, $Int], [$Int], false)}, {prop: "context", name: "context", pkg: "regexp", typ: $funcType([$Int], [syntax.EmptyOp], false)}];
	ptrType$13.methods = [{prop: "step", name: "step", pkg: "regexp", typ: $funcType([$Int], [$Int32, $Int], false)}, {prop: "canCheckPrefix", name: "canCheckPrefix", pkg: "regexp", typ: $funcType([], [$Bool], false)}, {prop: "hasPrefix", name: "hasPrefix", pkg: "regexp", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "index", name: "index", pkg: "regexp", typ: $funcType([ptrType$3, $Int], [$Int], false)}, {prop: "context", name: "context", pkg: "regexp", typ: $funcType([$Int], [syntax.EmptyOp], false)}];
	ptrType$14.methods = [{prop: "step", name: "step", pkg: "regexp", typ: $funcType([$Int], [$Int32, $Int], false)}, {prop: "canCheckPrefix", name: "canCheckPrefix", pkg: "regexp", typ: $funcType([], [$Bool], false)}, {prop: "hasPrefix", name: "hasPrefix", pkg: "regexp", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "index", name: "index", pkg: "regexp", typ: $funcType([ptrType$3, $Int], [$Int], false)}, {prop: "context", name: "context", pkg: "regexp", typ: $funcType([$Int], [syntax.EmptyOp], false)}];
	job.init([{prop: "pc", name: "pc", pkg: "regexp", typ: $Uint32, tag: ""}, {prop: "arg", name: "arg", pkg: "regexp", typ: $Int, tag: ""}, {prop: "pos", name: "pos", pkg: "regexp", typ: $Int, tag: ""}]);
	bitState.init([{prop: "prog", name: "prog", pkg: "regexp", typ: ptrType$2, tag: ""}, {prop: "end", name: "end", pkg: "regexp", typ: $Int, tag: ""}, {prop: "cap", name: "cap", pkg: "regexp", typ: sliceType, tag: ""}, {prop: "input", name: "input", pkg: "regexp", typ: input, tag: ""}, {prop: "jobs", name: "jobs", pkg: "regexp", typ: sliceType$4, tag: ""}, {prop: "visited", name: "visited", pkg: "regexp", typ: sliceType$2, tag: ""}]);
	queue.init([{prop: "sparse", name: "sparse", pkg: "regexp", typ: sliceType$2, tag: ""}, {prop: "dense", name: "dense", pkg: "regexp", typ: sliceType$5, tag: ""}]);
	entry.init([{prop: "pc", name: "pc", pkg: "regexp", typ: $Uint32, tag: ""}, {prop: "t", name: "t", pkg: "regexp", typ: ptrType$4, tag: ""}]);
	thread.init([{prop: "inst", name: "inst", pkg: "regexp", typ: ptrType$5, tag: ""}, {prop: "cap", name: "cap", pkg: "regexp", typ: sliceType, tag: ""}]);
	machine.init([{prop: "re", name: "re", pkg: "regexp", typ: ptrType$3, tag: ""}, {prop: "p", name: "p", pkg: "regexp", typ: ptrType$2, tag: ""}, {prop: "op", name: "op", pkg: "regexp", typ: ptrType$1, tag: ""}, {prop: "maxBitStateLen", name: "maxBitStateLen", pkg: "regexp", typ: $Int, tag: ""}, {prop: "b", name: "b", pkg: "regexp", typ: ptrType, tag: ""}, {prop: "q0", name: "q0", pkg: "regexp", typ: queue, tag: ""}, {prop: "q1", name: "q1", pkg: "regexp", typ: queue, tag: ""}, {prop: "pool", name: "pool", pkg: "regexp", typ: sliceType$6, tag: ""}, {prop: "matched", name: "matched", pkg: "regexp", typ: $Bool, tag: ""}, {prop: "matchcap", name: "matchcap", pkg: "regexp", typ: sliceType, tag: ""}, {prop: "inputBytes", name: "inputBytes", pkg: "regexp", typ: inputBytes, tag: ""}, {prop: "inputString", name: "inputString", pkg: "regexp", typ: inputString, tag: ""}, {prop: "inputReader", name: "inputReader", pkg: "regexp", typ: inputReader, tag: ""}]);
	onePassProg.init([{prop: "Inst", name: "Inst", pkg: "", typ: sliceType$7, tag: ""}, {prop: "Start", name: "Start", pkg: "", typ: $Int, tag: ""}, {prop: "NumCap", name: "NumCap", pkg: "", typ: $Int, tag: ""}]);
	onePassInst.init([{prop: "Inst", name: "", pkg: "", typ: syntax.Inst, tag: ""}, {prop: "Next", name: "Next", pkg: "", typ: sliceType$2, tag: ""}]);
	queueOnePass.init([{prop: "sparse", name: "sparse", pkg: "regexp", typ: sliceType$2, tag: ""}, {prop: "dense", name: "dense", pkg: "regexp", typ: sliceType$2, tag: ""}, {prop: "size", name: "size", pkg: "regexp", typ: $Uint32, tag: ""}, {prop: "nextIndex", name: "nextIndex", pkg: "regexp", typ: $Uint32, tag: ""}]);
	runeSlice.init($Int32);
	Regexp.init([{prop: "expr", name: "expr", pkg: "regexp", typ: $String, tag: ""}, {prop: "prog", name: "prog", pkg: "regexp", typ: ptrType$2, tag: ""}, {prop: "onepass", name: "onepass", pkg: "regexp", typ: ptrType$1, tag: ""}, {prop: "prefix", name: "prefix", pkg: "regexp", typ: $String, tag: ""}, {prop: "prefixBytes", name: "prefixBytes", pkg: "regexp", typ: sliceType$3, tag: ""}, {prop: "prefixComplete", name: "prefixComplete", pkg: "regexp", typ: $Bool, tag: ""}, {prop: "prefixRune", name: "prefixRune", pkg: "regexp", typ: $Int32, tag: ""}, {prop: "prefixEnd", name: "prefixEnd", pkg: "regexp", typ: $Uint32, tag: ""}, {prop: "cond", name: "cond", pkg: "regexp", typ: syntax.EmptyOp, tag: ""}, {prop: "numSubexp", name: "numSubexp", pkg: "regexp", typ: $Int, tag: ""}, {prop: "subexpNames", name: "subexpNames", pkg: "regexp", typ: sliceType$9, tag: ""}, {prop: "longest", name: "longest", pkg: "regexp", typ: $Bool, tag: ""}, {prop: "mu", name: "mu", pkg: "regexp", typ: nosync.Mutex, tag: ""}, {prop: "machine", name: "machine", pkg: "regexp", typ: sliceType$10, tag: ""}]);
	input.init([{prop: "canCheckPrefix", name: "canCheckPrefix", pkg: "regexp", typ: $funcType([], [$Bool], false)}, {prop: "context", name: "context", pkg: "regexp", typ: $funcType([$Int], [syntax.EmptyOp], false)}, {prop: "hasPrefix", name: "hasPrefix", pkg: "regexp", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "index", name: "index", pkg: "regexp", typ: $funcType([ptrType$3, $Int], [$Int], false)}, {prop: "step", name: "step", pkg: "regexp", typ: $funcType([$Int], [$Int32, $Int], false)}]);
	inputString.init([{prop: "str", name: "str", pkg: "regexp", typ: $String, tag: ""}]);
	inputBytes.init([{prop: "str", name: "str", pkg: "regexp", typ: sliceType$3, tag: ""}]);
	inputReader.init([{prop: "r", name: "r", pkg: "regexp", typ: io.RuneReader, tag: ""}, {prop: "atEOT", name: "atEOT", pkg: "regexp", typ: $Bool, tag: ""}, {prop: "pos", name: "pos", pkg: "regexp", typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syntax.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		notBacktrack = ptrType.nil;
		empty = $makeSlice(sliceType, 0);
		noRune = new sliceType$1([]);
		noNext = new sliceType$2([4294967295]);
		anyRuneNotNL = new sliceType$1([0, 9, 11, 1114111]);
		anyRune = new sliceType$1([0, 1114111]);
		notOnePass = ptrType$1.nil;
		specialBytes = new sliceType$3($stringToBytes("\\.+*?()|[]{}^$"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/robertkrimen/otto/dbg"] = (function() {
	var $pkg = {}, $init, bytes, fmt, io, log, os, regexp, runtime, strings, unicode, _frmt, Dbgr, DbgFunction, _emit, _emitWriter, _emitLogger, _emitLog, ptrType, funcType, sliceType, sliceType$1, arrayType, arrayType$1, sliceType$2, ptrType$1, ctlTest, ctlScan, _r, _r$1, operandCount, parseFormat, NewDbgr, New, standardEmit, ln;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	log = $packages["log"];
	os = $packages["os"];
	regexp = $packages["regexp"];
	runtime = $packages["runtime"];
	strings = $packages["strings"];
	unicode = $packages["unicode"];
	_frmt = $pkg._frmt = $newType(0, $kindStruct, "dbg._frmt", "_frmt", "github.com/robertkrimen/otto/dbg", function(ctl_, format_, operandCount_, panic_, fatal_, check_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ctl = "";
			this.format = "";
			this.operandCount = 0;
			this.panic = false;
			this.fatal = false;
			this.check = false;
			return;
		}
		this.ctl = ctl_;
		this.format = format_;
		this.operandCount = operandCount_;
		this.panic = panic_;
		this.fatal = fatal_;
		this.check = check_;
	});
	Dbgr = $pkg.Dbgr = $newType(0, $kindStruct, "dbg.Dbgr", "Dbgr", "github.com/robertkrimen/otto/dbg", function(emit_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.emit = $ifaceNil;
			return;
		}
		this.emit = emit_;
	});
	DbgFunction = $pkg.DbgFunction = $newType(4, $kindFunc, "dbg.DbgFunction", "DbgFunction", "github.com/robertkrimen/otto/dbg", null);
	_emit = $pkg._emit = $newType(8, $kindInterface, "dbg._emit", "_emit", "github.com/robertkrimen/otto/dbg", null);
	_emitWriter = $pkg._emitWriter = $newType(0, $kindStruct, "dbg._emitWriter", "_emitWriter", "github.com/robertkrimen/otto/dbg", function(writer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.writer = $ifaceNil;
			return;
		}
		this.writer = writer_;
	});
	_emitLogger = $pkg._emitLogger = $newType(0, $kindStruct, "dbg._emitLogger", "_emitLogger", "github.com/robertkrimen/otto/dbg", function(logger_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.logger = ptrType$1.nil;
			return;
		}
		this.logger = logger_;
	});
	_emitLog = $pkg._emitLog = $newType(0, $kindStruct, "dbg._emitLog", "_emitLog", "github.com/robertkrimen/otto/dbg", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	ptrType = $ptrType(Dbgr);
	funcType = $funcType([ptrType], [], false);
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	sliceType$2 = $sliceType($String);
	ptrType$1 = $ptrType(log.Logger);
	operandCount = function(format) {
		var $ptr, at, count, end, format;
		count = 0;
		end = format.length;
		at = 0;
		while (true) {
			if (!(at < end)) { break; }
			while (true) {
				if (!(at < end && !((format.charCodeAt(at) === 37)))) { break; }
				at = at + (1) >> 0;
			}
			at = at + (1) >> 0;
			if (at < end) {
				if (!((format.charCodeAt(at) === 37)) && !((format.charCodeAt(at) === 64))) {
					count = count + (1) >> 0;
				}
				at = at + (1) >> 0;
			}
		}
		return count;
	};
	parseFormat = function(format) {
		var $ptr, _i, _i$1, _r$2, _r$3, _r$4, _ref, _ref$1, _ref$2, format, frmt, index, tmp, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; format = $f.format; frmt = $f.frmt; index = $f.index; tmp = $f.tmp; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		frmt = new _frmt.ptr("", "", 0, false, false, false);
		_r$2 = ctlTest.MatchString(format); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$2) { */ case 1:
			_r$3 = strings.TrimLeftFunc(format, unicode.IsSpace); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			format = _r$3;
			index = strings.Index(format, "//");
			if (!((index === -1))) {
				frmt.ctl = format.substring(0, index);
				format = format.substring((index + 2 >> 0));
			} else {
				frmt.ctl = format;
				format = "";
			}
			_r$4 = ctlScan.FindAllStringSubmatch(frmt.ctl, -1); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_ref = _r$4;
			_i = 0;
			/* while (true) { */ case 6:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
				tmp = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_ref$1 = $subslice(tmp, 1);
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					value = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
					_ref$2 = value;
					if (_ref$2 === "panic") {
						frmt.panic = true;
					} else if (_ref$2 === "fatal") {
						frmt.fatal = true;
					} else if (_ref$2 === "check") {
						frmt.check = true;
					}
					_i$1++;
				}
				_i++;
			/* } */ $s = 6; continue; case 7:
		/* } */ case 2:
		frmt.format = format;
		frmt.operandCount = operandCount(format);
		return frmt;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseFormat }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.format = format; $f.frmt = frmt; $f.index = index; $f.tmp = tmp; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	NewDbgr = function() {
		var $ptr, self;
		self = new Dbgr.ptr($ifaceNil);
		return self;
	};
	$pkg.NewDbgr = NewDbgr;
	New = function(options) {
		var $ptr, _tuple, _tuple$1, dbg, dbgf, dbgr, fn, ok, options, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dbg = $f.dbg; dbgf = $f.dbgf; dbgr = $f.dbgr; fn = $f.fn; ok = $f.ok; options = $f.options; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dbg = $throwNilPointerError;
		dbgf = $throwNilPointerError;
		dbgr = NewDbgr();
		/* */ if (options.$length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (options.$length > 0) { */ case 1:
			_tuple = $assertType((0 >= options.$length ? $throwRuntimeError("index out of range") : options.$array[options.$offset + 0]), funcType, true);
			fn = _tuple[0];
			ok = _tuple[1];
			/* */ if (ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ok) { */ case 3:
				$r = fn(dbgr); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ case 2:
		_tuple$1 = dbgr.DbgDbgf();
		dbg = _tuple$1[0];
		dbgf = _tuple$1[1];
		return [dbg, dbgf];
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dbg = dbg; $f.dbgf = dbgf; $f.dbgr = dbgr; $f.fn = fn; $f.ok = ok; $f.options = options; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	Dbgr.ptr.prototype.Dbg = function(values) {
		var $ptr, self, values, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; self = $f.self; values = $f.values; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, Dbgr);
		$r = self.getEmit().emit(new _frmt.ptr("", "", 0, false, false, false), "", values); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Dbgr.ptr.prototype.Dbg }; } $f.$ptr = $ptr; $f.self = self; $f.values = values; $f.$s = $s; $f.$r = $r; return $f;
	};
	Dbgr.prototype.Dbg = function(values) { return this.$val.Dbg(values); };
	Dbgr.ptr.prototype.Dbgf = function(values) {
		var $ptr, self, values, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; self = $f.self; values = $f.values; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, Dbgr);
		$r = self.dbgf(values); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Dbgr.ptr.prototype.Dbgf }; } $f.$ptr = $ptr; $f.self = self; $f.values = values; $f.$s = $s; $f.$r = $r; return $f;
	};
	Dbgr.prototype.Dbgf = function(values) { return this.$val.Dbgf(values); };
	Dbgr.ptr.prototype.DbgDbgf = function() {
		var $ptr, _tmp, _tmp$1, dbg, dbgf, self;
		dbg = $throwNilPointerError;
		dbgf = $throwNilPointerError;
		self = $clone(this, Dbgr);
		dbg = (function $b(vl) {
			var $ptr, vl, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; vl = $f.vl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = self.Dbg(vl); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.vl = vl; $f.$s = $s; $f.$r = $r; return $f;
		});
		dbgf = (function $b(vl) {
			var $ptr, vl, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; vl = $f.vl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = self.dbgf(vl); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.vl = vl; $f.$s = $s; $f.$r = $r; return $f;
		});
		_tmp = dbg;
		_tmp$1 = dbgf;
		dbg = _tmp;
		dbgf = _tmp$1;
		return [dbg, dbgf];
	};
	Dbgr.prototype.DbgDbgf = function() { return this.$val.DbgDbgf(); };
	Dbgr.ptr.prototype.dbgf = function(values) {
		var $ptr, _i, _i$1, _r$2, _r$3, _r$4, _r$5, _ref, _ref$1, _tuple, at, buffer_f, depth, end, format, frmt, last, name, pc, self, tmp, tmp$1, tmp$2, value, value$1, values, values_dbg, values_f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; at = $f.at; buffer_f = $f.buffer_f; depth = $f.depth; end = $f.end; format = $f.format; frmt = $f.frmt; last = $f.last; name = $f.name; pc = $f.pc; self = $f.self; tmp = $f.tmp; tmp$1 = $f.tmp$1; tmp$2 = $f.tmp$2; value = $f.value; value$1 = $f.value$1; values = $f.values; values_dbg = $f.values_dbg; values_f = $f.values_f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, Dbgr);
		frmt = new _frmt.ptr("", "", 0, false, false, false);
		/* */ if (values.$length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (values.$length > 0) { */ case 1:
			_r$2 = fmt.Sprint(new sliceType([(0 >= values.$length ? $throwRuntimeError("index out of range") : values.$array[values.$offset + 0])])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			tmp = _r$2;
			_r$3 = parseFormat(tmp); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_frmt.copy(frmt, _r$3);
			values = $subslice(values, 1);
		/* } */ case 2:
		buffer_f = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		format = frmt.format;
		end = format.length;
		at = 0;
		while (true) {
			if (!(at < end)) { break; }
			last = at;
			while (true) {
				if (!(at < end && !((format.charCodeAt(at) === 37)))) { break; }
				at = at + (1) >> 0;
			}
			if (at > last) {
				buffer_f.WriteString(format.substring(last, at));
			}
			if (at >= end) {
				break;
			}
			at = at + (1) >> 0;
			if (format.charCodeAt(at) === 64) {
				depth = 2;
				_tuple = runtime.Caller(depth);
				pc = _tuple[0];
				name = runtime.FuncForPC(pc).Name();
				buffer_f.WriteString(name);
			} else {
				buffer_f.WriteString(format.substring((at - 1 >> 0), (at + 1 >> 0)));
			}
			at = at + (1) >> 0;
		}
		values_f = $subslice(values, 0, frmt.operandCount);
		values_dbg = $subslice(values, frmt.operandCount);
		/* */ if (values_dbg.$length > 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (values_dbg.$length > 0) { */ case 5:
			tmp$1 = format;
			if (tmp$1.length > 0) {
				if (unicode.IsSpace((tmp$1.charCodeAt((tmp$1.length - 1 >> 0)) >> 0))) {
					buffer_f.WriteString("%v");
				} else {
					buffer_f.WriteString(" %v");
				}
			} else if (frmt.check) {
			} else {
				buffer_f.WriteString("%v");
			}
			/* */ if (!frmt.check) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!frmt.check) { */ case 7:
				tmp$2 = new sliceType$2([]);
				_ref = values_dbg;
				_i = 0;
				/* while (true) { */ case 9:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 10; continue; }
					value = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					_r$4 = fmt.Sprintf("%v", new sliceType([value])); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					tmp$2 = $append(tmp$2, _r$4);
					_i++;
				/* } */ $s = 9; continue; case 10:
				values_f = $appendSlice(new sliceType([]), values_f);
				values_f = $append(values_f, new $String(strings.Join(tmp$2, " ")));
			/* } */ case 8:
		/* } */ case 6:
		format = buffer_f.String();
		/* */ if (frmt.check) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (frmt.check) { */ case 12:
			_ref$1 = values_dbg;
			_i$1 = 0;
			/* while (true) { */ case 15:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 16; continue; }
				value$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				/* */ if (!($interfaceIsEqual(value$1, $ifaceNil))) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (!($interfaceIsEqual(value$1, $ifaceNil))) { */ case 17:
					/* */ if (format === "") { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (format === "") { */ case 19:
						$panic(value$1);
						$s = 21; continue;
					/* } else { */ case 20:
						_r$5 = fmt.Sprintf(format, $append(values_f, value$1)); /* */ $s = 22; case 22: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						$panic(new $String(_r$5));
					/* } */ case 21:
				/* } */ case 18:
				_i$1++;
			/* } */ $s = 15; continue; case 16:
			$s = 14; continue;
		/* } else { */ case 13:
			$r = self.getEmit().emit(frmt, format, values_f); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 14:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Dbgr.ptr.prototype.dbgf }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.at = at; $f.buffer_f = buffer_f; $f.depth = depth; $f.end = end; $f.format = format; $f.frmt = frmt; $f.last = last; $f.name = name; $f.pc = pc; $f.self = self; $f.tmp = tmp; $f.tmp$1 = tmp$1; $f.tmp$2 = tmp$2; $f.value = value; $f.value$1 = value$1; $f.values = values; $f.values_dbg = values_dbg; $f.values_f = values_f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Dbgr.prototype.dbgf = function(values) { return this.$val.dbgf(values); };
	Dbgr.ptr.prototype.getEmit = function() {
		var $ptr, self;
		self = this;
		if ($interfaceIsEqual(self.emit, $ifaceNil)) {
			self.emit = standardEmit();
		}
		return self.emit;
	};
	Dbgr.prototype.getEmit = function() { return this.$val.getEmit(); };
	Dbgr.ptr.prototype.SetOutput = function(output) {
		var $ptr, _ref, output, output$1, output$2, output$3, self, x, x$1, x$2;
		self = this;
		if ($interfaceIsEqual(output, $ifaceNil)) {
			self.emit = standardEmit();
			return;
		}
		_ref = output;
		if ($assertType(_ref, ptrType$1, true)[1]) {
			output$1 = _ref.$val;
			self.emit = (x = new _emitLogger.ptr(output$1), new x.constructor.elem(x));
			return;
		} else if ($assertType(_ref, io.Writer, true)[1]) {
			output$2 = _ref;
			self.emit = (x$1 = new _emitWriter.ptr(output$2), new x$1.constructor.elem(x$1));
			return;
		} else if ($assertType(_ref, $String, true)[1]) {
			output$3 = _ref.$val;
			if (output$3 === "log") {
				self.emit = (x$2 = new _emitLog.ptr(), new x$2.constructor.elem(x$2));
				return;
			}
		}
		$panic(output);
	};
	Dbgr.prototype.SetOutput = function(output) { return this.$val.SetOutput(output); };
	standardEmit = function() {
		var $ptr, x;
		return (x = new _emitWriter.ptr(os.Stderr), new x.constructor.elem(x));
	};
	ln = function(tmp) {
		var $ptr, length, tmp;
		length = tmp.length;
		if (length > 0 && !((tmp.charCodeAt((length - 1 >> 0)) === 10))) {
			return tmp + "\n";
		}
		return tmp;
	};
	_emitWriter.ptr.prototype.emit = function(frmt, format, values) {
		var $ptr, _r$2, _r$3, _r$4, format, frmt, self, values, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; format = $f.format; frmt = $f.frmt; self = $f.self; values = $f.values; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		frmt = $clone(frmt, _frmt);
		self = $clone(this, _emitWriter);
		/* */ if (format === "") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (format === "") { */ case 1:
			_r$2 = fmt.Fprintln(self.writer, values); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			$s = 3; continue;
		/* } else { */ case 2:
			/* */ if (frmt.panic) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (frmt.panic) { */ case 5:
				_r$3 = fmt.Sprintf(format, values); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$panic(new $String(_r$3));
			/* } */ case 6:
			_r$4 = fmt.Fprintf(self.writer, ln(format), values); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			if (frmt.fatal) {
				os.Exit(1);
			}
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _emitWriter.ptr.prototype.emit }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.format = format; $f.frmt = frmt; $f.self = self; $f.values = values; $f.$s = $s; $f.$r = $r; return $f;
	};
	_emitWriter.prototype.emit = function(frmt, format, values) { return this.$val.emit(frmt, format, values); };
	_emitLogger.ptr.prototype.emit = function(frmt, format, values) {
		var $ptr, format, frmt, self, values, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; format = $f.format; frmt = $f.frmt; self = $f.self; values = $f.values; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		frmt = $clone(frmt, _frmt);
		self = $clone(this, _emitLogger);
		/* */ if (format === "") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (format === "") { */ case 1:
			$r = self.logger.Println(values); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			/* */ if (frmt.panic) { $s = 5; continue; }
			/* */ if (frmt.fatal) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (frmt.panic) { */ case 5:
				$r = self.logger.Panicf(format, values); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 8; continue;
			/* } else if (frmt.fatal) { */ case 6:
				$r = self.logger.Fatalf(format, values); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 8; continue;
			/* } else { */ case 7:
				$r = self.logger.Printf(format, values); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _emitLogger.ptr.prototype.emit }; } $f.$ptr = $ptr; $f.format = format; $f.frmt = frmt; $f.self = self; $f.values = values; $f.$s = $s; $f.$r = $r; return $f;
	};
	_emitLogger.prototype.emit = function(frmt, format, values) { return this.$val.emit(frmt, format, values); };
	_emitLog.ptr.prototype.emit = function(frmt, format, values) {
		var $ptr, format, frmt, self, values, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; format = $f.format; frmt = $f.frmt; self = $f.self; values = $f.values; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		frmt = $clone(frmt, _frmt);
		self = $clone(this, _emitLog);
		/* */ if (format === "") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (format === "") { */ case 1:
			$r = log.Println(values); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			/* */ if (frmt.panic) { $s = 5; continue; }
			/* */ if (frmt.fatal) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (frmt.panic) { */ case 5:
				$r = log.Panicf(format, values); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 8; continue;
			/* } else if (frmt.fatal) { */ case 6:
				$r = log.Fatalf(format, values); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 8; continue;
			/* } else { */ case 7:
				$r = log.Printf(format, values); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _emitLog.ptr.prototype.emit }; } $f.$ptr = $ptr; $f.format = format; $f.frmt = frmt; $f.self = self; $f.values = values; $f.$s = $s; $f.$r = $r; return $f;
	};
	_emitLog.prototype.emit = function(frmt, format, values) { return this.$val.emit(frmt, format, values); };
	Dbgr.methods = [{prop: "Dbg", name: "Dbg", pkg: "", typ: $funcType([sliceType], [], true)}, {prop: "Dbgf", name: "Dbgf", pkg: "", typ: $funcType([sliceType], [], true)}, {prop: "DbgDbgf", name: "DbgDbgf", pkg: "", typ: $funcType([], [DbgFunction, DbgFunction], false)}, {prop: "dbgf", name: "dbgf", pkg: "github.com/robertkrimen/otto/dbg", typ: $funcType([sliceType], [], true)}];
	ptrType.methods = [{prop: "getEmit", name: "getEmit", pkg: "github.com/robertkrimen/otto/dbg", typ: $funcType([], [_emit], false)}, {prop: "SetOutput", name: "SetOutput", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	_emitWriter.methods = [{prop: "emit", name: "emit", pkg: "github.com/robertkrimen/otto/dbg", typ: $funcType([_frmt, $String, sliceType], [], true)}];
	_emitLogger.methods = [{prop: "emit", name: "emit", pkg: "github.com/robertkrimen/otto/dbg", typ: $funcType([_frmt, $String, sliceType], [], true)}];
	_emitLog.methods = [{prop: "emit", name: "emit", pkg: "github.com/robertkrimen/otto/dbg", typ: $funcType([_frmt, $String, sliceType], [], true)}];
	_frmt.init([{prop: "ctl", name: "ctl", pkg: "github.com/robertkrimen/otto/dbg", typ: $String, tag: ""}, {prop: "format", name: "format", pkg: "github.com/robertkrimen/otto/dbg", typ: $String, tag: ""}, {prop: "operandCount", name: "operandCount", pkg: "github.com/robertkrimen/otto/dbg", typ: $Int, tag: ""}, {prop: "panic", name: "panic", pkg: "github.com/robertkrimen/otto/dbg", typ: $Bool, tag: ""}, {prop: "fatal", name: "fatal", pkg: "github.com/robertkrimen/otto/dbg", typ: $Bool, tag: ""}, {prop: "check", name: "check", pkg: "github.com/robertkrimen/otto/dbg", typ: $Bool, tag: ""}]);
	Dbgr.init([{prop: "emit", name: "emit", pkg: "github.com/robertkrimen/otto/dbg", typ: _emit, tag: ""}]);
	DbgFunction.init([sliceType], [], true);
	_emit.init([{prop: "emit", name: "emit", pkg: "github.com/robertkrimen/otto/dbg", typ: $funcType([_frmt, $String, sliceType], [], true)}]);
	_emitWriter.init([{prop: "writer", name: "writer", pkg: "github.com/robertkrimen/otto/dbg", typ: io.Writer, tag: ""}]);
	_emitLogger.init([{prop: "logger", name: "logger", pkg: "github.com/robertkrimen/otto/dbg", typ: ptrType$1, tag: ""}]);
	_emitLog.init([]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = log.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = regexp.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = regexp.MustCompile("^\\s*%/"); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ctlTest = _r;
		_r$1 = regexp.MustCompile("%?/(panic|fatal|check)(?:\\s|$)"); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ctlScan = _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["path/filepath"] = (function() {
	var $pkg = {}, $init, bytes, errors, os, runtime, sort, strings, utf8;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	utf8 = $packages["unicode/utf8"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		$pkg.SkipDir = errors.New("skip this directory");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io/ioutil"] = (function() {
	var $pkg = {}, $init, bytes, io, os, filepath, sort, strconv, sync, time, sliceType, sliceType$1, ptrType, blackHolePool, readAll, ReadFile;
	bytes = $packages["bytes"];
	io = $packages["io"];
	os = $packages["os"];
	filepath = $packages["path/filepath"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	time = $packages["time"];
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Uint8);
	ptrType = $ptrType(sliceType$1);
	readAll = function(r, capacity) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, b, buf, capacity, err, r, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; buf = $f.buf; capacity = $f.capacity; err = $f.err; r = $f.r; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		b = sliceType$1.nil;
		err[0] = $ifaceNil;
		buf = bytes.NewBuffer($makeSlice(sliceType$1, 0, $flatten64(capacity)));
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, e, ok, panicErr;
			e = $recover();
			if ($interfaceIsEqual(e, $ifaceNil)) {
				return;
			}
			_tuple = $assertType(e, $error, true);
			panicErr = _tuple[0];
			ok = _tuple[1];
			if (ok && $interfaceIsEqual(panicErr, bytes.ErrTooLarge)) {
				err[0] = panicErr;
			} else {
				$panic(e);
			}
		}; })(err), []]);
		_r = buf.ReadFrom(r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err[0] = _tuple[1];
		_tmp = buf.Bytes();
		_tmp$1 = err[0];
		b = _tmp;
		err[0] = _tmp$1;
		return [b, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [b, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: readAll }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.capacity = capacity; $f.err = err; $f.r = r; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ReadFile = function(filename) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, err, err$1, f, fi, filename, n, size, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; err$1 = $f.err$1; f = $f.f; fi = $f.fi; filename = $f.filename; n = $f.n; size = $f.size; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		_tuple = os.Open(filename);
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [sliceType$1.nil, err];
		}
		$deferred.push([$methodVal(f, "Close"), []]);
		n = new $Int64(0, 0);
		_tuple$1 = f.Stat();
		fi = _tuple$1[0];
		err$1 = _tuple$1[1];
		/* */ if ($interfaceIsEqual(err$1, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(err$1, $ifaceNil)) { */ case 1:
			_r = fi.Size(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			size = _r;
			/* */ if ((size.$high < 0 || (size.$high === 0 && size.$low < 1000000000))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((size.$high < 0 || (size.$high === 0 && size.$low < 1000000000))) { */ case 4:
				n = size;
			/* } */ case 5:
		/* } */ case 2:
		_r$1 = readAll(f, new $Int64(n.$high + 0, n.$low + 512)); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 7; case 7:
		return _r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [sliceType$1.nil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ReadFile }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.fi = fi; $f.filename = filename; $f.n = n; $f.size = size; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.ReadFile = ReadFile;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		blackHolePool = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			var $ptr, b, b$24ptr;
			b = $makeSlice(sliceType$1, 8192);
			return (b$24ptr || (b$24ptr = new ptrType(function() { return b; }, function($v) { b = $subslice(new sliceType$1($v.$array), $v.$offset, $v.$offset + $v.$length); })));
		}));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/robertkrimen/otto/parser"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, ast, dbg, file, token, io, ioutil, regexp, sort, strconv, strings, unicode, utf8, Error, ErrorList, _chr, Mode, _parser, _RegExp_parser, _scope, sliceType, ptrType, ptrType$1, sliceType$1, ptrType$2, sliceType$2, ptrType$3, ptrType$4, sliceType$3, sliceType$4, ptrType$5, ptrType$6, ptrType$7, sliceType$5, ptrType$8, structType, ptrType$9, ptrType$10, arrayType, arrayType$1, ptrType$11, ptrType$12, ptrType$13, ptrType$14, sliceType$6, sliceType$7, sliceType$8, ptrType$15, sliceType$9, ptrType$16, sliceType$10, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, dbg$1, dbgf, matchIdentifier, _tuple, _r, _r$1, isDecimalDigit, digitValue, isDigit, isIdentifierStart, isIdentifierPart, isLineTerminator, hex2decimal, parseNumberLiteral, parseStringLiteral, _newParser, ReadSource, ParseFile, ParseFunction, lineCount, TransformRegExp;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	ast = $packages["github.com/robertkrimen/otto/ast"];
	dbg = $packages["github.com/robertkrimen/otto/dbg"];
	file = $packages["github.com/robertkrimen/otto/file"];
	token = $packages["github.com/robertkrimen/otto/token"];
	io = $packages["io"];
	ioutil = $packages["io/ioutil"];
	regexp = $packages["regexp"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Error = $pkg.Error = $newType(0, $kindStruct, "parser.Error", "Error", "github.com/robertkrimen/otto/parser", function(Position_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Position = new file.Position.ptr("", 0, 0, 0);
			this.Message = "";
			return;
		}
		this.Position = Position_;
		this.Message = Message_;
	});
	ErrorList = $pkg.ErrorList = $newType(12, $kindSlice, "parser.ErrorList", "ErrorList", "github.com/robertkrimen/otto/parser", null);
	_chr = $pkg._chr = $newType(0, $kindStruct, "parser._chr", "_chr", "github.com/robertkrimen/otto/parser", function(value_, width_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.value = 0;
			this.width = 0;
			return;
		}
		this.value = value_;
		this.width = width_;
	});
	Mode = $pkg.Mode = $newType(4, $kindUint, "parser.Mode", "Mode", "github.com/robertkrimen/otto/parser", null);
	_parser = $pkg._parser = $newType(0, $kindStruct, "parser._parser", "_parser", "github.com/robertkrimen/otto/parser", function(str_, length_, base_, chr_, chrOffset_, offset_, idx_, token_, literal_, scope_, insertSemicolon_, implicitSemicolon_, errors_, recover_, mode_, file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.str = "";
			this.length = 0;
			this.base = 0;
			this.chr = 0;
			this.chrOffset = 0;
			this.offset = 0;
			this.idx = 0;
			this.token = 0;
			this.literal = "";
			this.scope = ptrType$8.nil;
			this.insertSemicolon = false;
			this.implicitSemicolon = false;
			this.errors = ErrorList.nil;
			this.recover = new structType.ptr(0, 0);
			this.mode = 0;
			this.file = ptrType$9.nil;
			return;
		}
		this.str = str_;
		this.length = length_;
		this.base = base_;
		this.chr = chr_;
		this.chrOffset = chrOffset_;
		this.offset = offset_;
		this.idx = idx_;
		this.token = token_;
		this.literal = literal_;
		this.scope = scope_;
		this.insertSemicolon = insertSemicolon_;
		this.implicitSemicolon = implicitSemicolon_;
		this.errors = errors_;
		this.recover = recover_;
		this.mode = mode_;
		this.file = file_;
	});
	_RegExp_parser = $pkg._RegExp_parser = $newType(0, $kindStruct, "parser._RegExp_parser", "_RegExp_parser", "github.com/robertkrimen/otto/parser", function(str_, length_, chr_, chrOffset_, offset_, errors_, invalid_, goRegexp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.str = "";
			this.length = 0;
			this.chr = 0;
			this.chrOffset = 0;
			this.offset = 0;
			this.errors = sliceType$6.nil;
			this.invalid = false;
			this.goRegexp = ptrType$10.nil;
			return;
		}
		this.str = str_;
		this.length = length_;
		this.chr = chr_;
		this.chrOffset = chrOffset_;
		this.offset = offset_;
		this.errors = errors_;
		this.invalid = invalid_;
		this.goRegexp = goRegexp_;
	});
	_scope = $pkg._scope = $newType(0, $kindStruct, "parser._scope", "_scope", "github.com/robertkrimen/otto/parser", function(outer_, allowIn_, inIteration_, inSwitch_, inFunction_, declarationList_, labels_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.outer = ptrType$8.nil;
			this.allowIn = false;
			this.inIteration = false;
			this.inSwitch = false;
			this.inFunction = false;
			this.declarationList = sliceType$3.nil;
			this.labels = sliceType$7.nil;
			return;
		}
		this.outer = outer_;
		this.allowIn = allowIn_;
		this.inIteration = inIteration_;
		this.inSwitch = inSwitch_;
		this.inFunction = inFunction_;
		this.declarationList = declarationList_;
		this.labels = labels_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(ErrorList);
	ptrType$1 = $ptrType(ast.VariableExpression);
	sliceType$1 = $sliceType(ptrType$1);
	ptrType$2 = $ptrType(sliceType$1);
	sliceType$2 = $sliceType(ast.Expression);
	ptrType$3 = $ptrType(ast.Identifier);
	ptrType$4 = $ptrType(ast.ParameterList);
	sliceType$3 = $sliceType(ast.Declaration);
	sliceType$4 = $sliceType(ast.Property);
	ptrType$5 = $ptrType(ast.DotExpression);
	ptrType$6 = $ptrType(ast.BracketExpression);
	ptrType$7 = $ptrType(strconv.NumError);
	sliceType$5 = $sliceType($Uint8);
	ptrType$8 = $ptrType(_scope);
	structType = $structType([{prop: "idx", name: "idx", pkg: "github.com/robertkrimen/otto/parser", typ: file.Idx, tag: ""}, {prop: "count", name: "count", pkg: "github.com/robertkrimen/otto/parser", typ: $Int, tag: ""}]);
	ptrType$9 = $ptrType(file.File);
	ptrType$10 = $ptrType(bytes.Buffer);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$11 = $ptrType(ast.Program);
	ptrType$12 = $ptrType(file.FileSet);
	ptrType$13 = $ptrType(ast.FunctionLiteral);
	ptrType$14 = $ptrType(ast.ExpressionStatement);
	sliceType$6 = $sliceType($error);
	sliceType$7 = $sliceType($String);
	sliceType$8 = $sliceType(ast.Statement);
	ptrType$15 = $ptrType(ast.CatchStatement);
	sliceType$9 = $sliceType(ptrType$3);
	ptrType$16 = $ptrType(ast.CaseStatement);
	sliceType$10 = $sliceType(ptrType$16);
	ptrType$17 = $ptrType(Error);
	ptrType$18 = $ptrType(ast.RegExpLiteral);
	ptrType$19 = $ptrType(ast.BlockStatement);
	ptrType$20 = $ptrType(ast.ForInStatement);
	ptrType$21 = $ptrType(ast.ForStatement);
	ptrType$22 = $ptrType(ast.VariableStatement);
	ptrType$23 = $ptrType(_parser);
	ptrType$24 = $ptrType(_RegExp_parser);
	Error.ptr.prototype.Error = function() {
		var $ptr, _r$2, filename, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; filename = $f.filename; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, Error);
		filename = self.Position.Filename;
		if (filename === "") {
			filename = "(anonymous)";
		}
		_r$2 = fmt.Sprintf("%s: Line %d:%d %s", new sliceType([new $String(filename), new $Int(self.Position.Line), new $Int(self.Position.Column), new $String(self.Message)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Error.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.filename = filename; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	_parser.ptr.prototype.error = function(place, msg, msgValues) {
		var $ptr, _r$2, _r$3, _ref, idx, msg, msgValues, place, place$1, place$2, place$3, position, self, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; idx = $f.idx; msg = $f.msg; msgValues = $f.msgValues; place = $f.place; place$1 = $f.place$1; place$2 = $f.place$2; place$3 = $f.place$3; position = $f.position; self = $f.self; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		idx = 0;
		_ref = place;
		/* */ if ($assertType(_ref, $Int, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, file.Idx, true)[1]) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($assertType(_ref, $Int, true)[1]) { */ case 1:
			place$1 = _ref.$val;
			idx = self.idxOf(place$1);
			$s = 4; continue;
		/* } else if ($assertType(_ref, file.Idx, true)[1]) { */ case 2:
			place$2 = _ref.$val;
			if (place$2 === 0) {
				idx = self.idxOf(self.chrOffset);
			} else {
				idx = place$2;
			}
			$s = 4; continue;
		/* } else { */ case 3:
			place$3 = _ref;
			_r$2 = fmt.Errorf("error(%T, ...)", new sliceType([place$3])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$panic(_r$2);
		/* } */ case 4:
		position = $clone(self.position(idx), file.Position);
		_r$3 = fmt.Sprintf(msg, msgValues); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		msg = _r$3;
		(self.$ptr_errors || (self.$ptr_errors = new ptrType(function() { return this.$target.errors; }, function($v) { this.$target.errors = $v; }, self))).Add(position, msg);
		return (x = self.errors, x$1 = self.errors.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.error }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.idx = idx; $f.msg = msg; $f.msgValues = msgValues; $f.place = place; $f.place$1 = place$1; $f.place$2 = place$2; $f.place$3 = place$3; $f.position = position; $f.self = self; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.error = function(place, msg, msgValues) { return this.$val.error(place, msg, msgValues); };
	_parser.ptr.prototype.errorUnexpected = function(idx, chr) {
		var $ptr, _r$2, _r$3, chr, idx, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; chr = $f.chr; idx = $f.idx; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (chr === -1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (chr === -1) { */ case 1:
			_r$2 = self.error(new file.Idx(idx), "Unexpected end of input", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r$2;
		/* } */ case 2:
		_r$3 = self.error(new file.Idx(idx), "Unexpected token %v", new sliceType([new token.Token(1)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.errorUnexpected }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.chr = chr; $f.idx = idx; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.errorUnexpected = function(idx, chr) { return this.$val.errorUnexpected(idx, chr); };
	_parser.ptr.prototype.errorUnexpectedToken = function(tkn) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _ref$1, self, tkn, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; self = $f.self; tkn = $f.tkn; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_ref = tkn;
		/* */ if (_ref === 2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_ref === 2) { */ case 1:
			_r$2 = self.error(new file.Idx(0), "Unexpected end of input", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r$2;
		/* } */ case 2:
		value = new token.Token(tkn).String();
		_ref$1 = tkn;
		/* */ if (_ref$1 === 6 || _ref$1 === 7) { $s = 5; continue; }
		/* */ if (_ref$1 === 9) { $s = 6; continue; }
		/* */ if (_ref$1 === 4) { $s = 7; continue; }
		/* */ if (_ref$1 === 8) { $s = 8; continue; }
		/* */ if (_ref$1 === 5) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_ref$1 === 6 || _ref$1 === 7) { */ case 5:
			value = self.literal;
			$s = 10; continue;
		/* } else if (_ref$1 === 9) { */ case 6:
			_r$3 = self.error(new file.Idx(self.idx), "Unexpected identifier", new sliceType([])); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ $s = 12; case 12:
			return _r$3;
		/* } else if (_ref$1 === 4) { */ case 7:
			_r$4 = self.error(new file.Idx(self.idx), "Unexpected reserved word", new sliceType([])); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ $s = 14; case 14:
			return _r$4;
		/* } else if (_ref$1 === 8) { */ case 8:
			_r$5 = self.error(new file.Idx(self.idx), "Unexpected number", new sliceType([])); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ $s = 16; case 16:
			return _r$5;
		/* } else if (_ref$1 === 5) { */ case 9:
			_r$6 = self.error(new file.Idx(self.idx), "Unexpected string", new sliceType([])); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			/* */ $s = 18; case 18:
			return _r$6;
		/* } */ case 10:
		_r$7 = self.error(new file.Idx(self.idx), "Unexpected token %v", new sliceType([new $String(value)])); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		/* */ $s = 20; case 20:
		return _r$7;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.errorUnexpectedToken }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f.self = self; $f.tkn = tkn; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.errorUnexpectedToken = function(tkn) { return this.$val.errorUnexpectedToken(tkn); };
	$ptrType(ErrorList).prototype.Add = function(position, msg) {
		var $ptr, msg, position, self;
		position = $clone(position, file.Position);
		self = this;
		self.$set($append(self.$get(), new Error.ptr($clone(position, file.Position), msg)));
	};
	$ptrType(ErrorList).prototype.Reset = function() {
		var $ptr, self;
		self = this;
		self.$set($subslice((self.$get()), 0, 0));
	};
	ErrorList.prototype.Len = function() {
		var $ptr, self;
		self = this;
		return self.$length;
	};
	$ptrType(ErrorList).prototype.Len = function() { return this.$get().Len(); };
	ErrorList.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, self;
		self = this;
		_tmp = ((j < 0 || j >= self.$length) ? $throwRuntimeError("index out of range") : self.$array[self.$offset + j]);
		_tmp$1 = ((i < 0 || i >= self.$length) ? $throwRuntimeError("index out of range") : self.$array[self.$offset + i]);
		((i < 0 || i >= self.$length) ? $throwRuntimeError("index out of range") : self.$array[self.$offset + i] = _tmp);
		((j < 0 || j >= self.$length) ? $throwRuntimeError("index out of range") : self.$array[self.$offset + j] = _tmp$1);
	};
	$ptrType(ErrorList).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	ErrorList.prototype.Less = function(i, j) {
		var $ptr, i, j, self, x, y;
		self = this;
		x = ((i < 0 || i >= self.$length) ? $throwRuntimeError("index out of range") : self.$array[self.$offset + i]).Position;
		y = ((j < 0 || j >= self.$length) ? $throwRuntimeError("index out of range") : self.$array[self.$offset + j]).Position;
		if (x.Filename < y.Filename) {
			return true;
		}
		if (x.Filename === y.Filename) {
			if (x.Line < y.Line) {
				return true;
			}
			if (x.Line === y.Line) {
				return x.Column < y.Column;
			}
		}
		return false;
	};
	$ptrType(ErrorList).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	ErrorList.prototype.Sort = function() {
		var $ptr, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		$r = sort.Sort(self); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ErrorList.prototype.Sort }; } $f.$ptr = $ptr; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(ErrorList).prototype.Sort = function() { return this.$get().Sort(); };
	ErrorList.prototype.Error = function() {
		var $ptr, _arg, _arg$1, _r$2, _r$3, _r$4, _ref, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_ref = self.$length;
		/* */ if (_ref === 0) { $s = 1; continue; }
		/* */ if (_ref === 1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_ref === 0) { */ case 1:
			return "no errors";
		/* } else if (_ref === 1) { */ case 2:
			_r$2 = (0 >= self.$length ? $throwRuntimeError("index out of range") : self.$array[self.$offset + 0]).Error(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$2;
		/* } */ case 3:
		_r$3 = (0 >= self.$length ? $throwRuntimeError("index out of range") : self.$array[self.$offset + 0]).Error(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg = new $String(_r$3);
		_arg$1 = new $Int((self.$length - 1 >> 0));
		_r$4 = fmt.Sprintf("%s (and %d more errors)", new sliceType([_arg, _arg$1])); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 8; case 8:
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ErrorList.prototype.Error }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(ErrorList).prototype.Error = function() { return this.$get().Error(); };
	ErrorList.prototype.Err = function() {
		var $ptr, self;
		self = this;
		if (self.$length === 0) {
			return $ifaceNil;
		}
		return self;
	};
	$ptrType(ErrorList).prototype.Err = function() { return this.$get().Err(); };
	_parser.ptr.prototype.parseIdentifier = function() {
		var $ptr, idx, literal, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; idx = $f.idx; literal = $f.literal; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		literal = self.literal;
		idx = self.idx;
		$r = self.next(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return new ast.Identifier.ptr(literal, idx);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseIdentifier }; } $f.$ptr = $ptr; $f.idx = idx; $f.literal = literal; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseIdentifier = function() { return this.$val.parseIdentifier(); };
	_parser.ptr.prototype.parsePrimaryExpression = function() {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple$1, _tuple$2, _tuple$3, err, err$1, expression, idx, literal, self, strict, tkn, value, value$1, value$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; err = $f.err; err$1 = $f.err$1; expression = $f.expression; idx = $f.idx; literal = $f.literal; self = $f.self; strict = $f.strict; tkn = $f.tkn; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		literal = self.literal;
		idx = self.idx;
		_ref = self.token;
		/* */ if (_ref === 9) { $s = 1; continue; }
		/* */ if (_ref === 7) { $s = 2; continue; }
		/* */ if (_ref === 6) { $s = 3; continue; }
		/* */ if (_ref === 5) { $s = 4; continue; }
		/* */ if (_ref === 8) { $s = 5; continue; }
		/* */ if (_ref === 13 || _ref === 25) { $s = 6; continue; }
		/* */ if (_ref === 51) { $s = 7; continue; }
		/* */ if (_ref === 50) { $s = 8; continue; }
		/* */ if (_ref === 49) { $s = 9; continue; }
		/* */ if (_ref === 68) { $s = 10; continue; }
		/* */ if (_ref === 83) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (_ref === 9) { */ case 1:
			$r = self.next(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (literal.length > 1) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (literal.length > 1) { */ case 14:
				_tuple$1 = token.IsKeyword(literal);
				tkn = _tuple$1[0];
				strict = _tuple$1[1];
				/* */ if (tkn === 4) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (tkn === 4) { */ case 16:
					/* */ if (!strict) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (!strict) { */ case 18:
						_r$2 = self.error(new file.Idx(idx), "Unexpected reserved word", new sliceType([])); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_r$2;
					/* } */ case 19:
				/* } */ case 17:
			/* } */ case 15:
			return new ast.Identifier.ptr(literal, idx);
		/* } else if (_ref === 7) { */ case 2:
			$r = self.next(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return new ast.NullLiteral.ptr(idx, literal);
		/* } else if (_ref === 6) { */ case 3:
			$r = self.next(); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			value = false;
			_ref$1 = literal;
			/* */ if (_ref$1 === "true") { $s = 23; continue; }
			/* */ if (_ref$1 === "false") { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (_ref$1 === "true") { */ case 23:
				value = true;
				$s = 26; continue;
			/* } else if (_ref$1 === "false") { */ case 24:
				value = false;
				$s = 26; continue;
			/* } else { */ case 25:
				_r$3 = self.error(new file.Idx(idx), "Illegal boolean literal", new sliceType([])); /* */ $s = 27; case 27: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
			/* } */ case 26:
			return new ast.BooleanLiteral.ptr(idx, literal, value);
		/* } else if (_ref === 5) { */ case 4:
			$r = self.next(); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$4 = parseStringLiteral(literal.substring(1, (literal.length - 1 >> 0))); /* */ $s = 29; case 29: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$2 = _r$4;
			value$1 = _tuple$2[0];
			err = _tuple$2[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 30:
				_arg = new file.Idx(idx);
				_r$5 = err.Error(); /* */ $s = 32; case 32: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_arg$1 = _r$5;
				_r$6 = self.error(_arg, _arg$1, new sliceType([])); /* */ $s = 33; case 33: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
			/* } */ case 31:
			return new ast.StringLiteral.ptr(idx, literal, value$1);
		/* } else if (_ref === 8) { */ case 5:
			$r = self.next(); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$3 = parseNumberLiteral(literal);
			value$2 = _tuple$3[0];
			err$1 = _tuple$3[1];
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 35:
				_arg$2 = new file.Idx(idx);
				_r$7 = err$1.Error(); /* */ $s = 37; case 37: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_arg$3 = _r$7;
				_r$8 = self.error(_arg$2, _arg$3, new sliceType([])); /* */ $s = 38; case 38: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
				value$2 = new $Int(0);
			/* } */ case 36:
			return new ast.NumberLiteral.ptr(idx, literal, value$2);
		/* } else if (_ref === 13 || _ref === 25) { */ case 6:
			_r$9 = self.parseRegExpLiteral(); /* */ $s = 39; case 39: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			/* */ $s = 40; case 40:
			return _r$9;
		/* } else if (_ref === 51) { */ case 7:
			_r$10 = self.parseObjectLiteral(); /* */ $s = 41; case 41: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			/* */ $s = 42; case 42:
			return _r$10;
		/* } else if (_ref === 50) { */ case 8:
			_r$11 = self.parseArrayLiteral(); /* */ $s = 43; case 43: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			/* */ $s = 44; case 44:
			return _r$11;
		/* } else if (_ref === 49) { */ case 9:
			_r$12 = self.expect(49); /* */ $s = 45; case 45: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_r$12;
			_r$13 = self.parseExpression(); /* */ $s = 46; case 46: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			expression = _r$13;
			_r$14 = self.expect(54); /* */ $s = 47; case 47: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$14;
			return expression;
		/* } else if (_ref === 68) { */ case 10:
			$r = self.next(); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return new ast.ThisExpression.ptr(idx);
		/* } else if (_ref === 83) { */ case 11:
			_r$15 = self.parseFunction(false); /* */ $s = 49; case 49: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 50; case 50:
			return _r$15;
		/* } */ case 12:
		_r$16 = self.errorUnexpectedToken(self.token); /* */ $s = 51; case 51: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$16;
		$r = self.nextStatement(); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return new ast.BadExpression.ptr(idx, self.idx);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parsePrimaryExpression }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.err = err; $f.err$1 = err$1; $f.expression = expression; $f.idx = idx; $f.literal = literal; $f.self = self; $f.strict = strict; $f.tkn = tkn; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parsePrimaryExpression = function() { return this.$val.parsePrimaryExpression(); };
	_parser.ptr.prototype.parseRegExpLiteral = function() {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple$1, _tuple$2, _tuple$3, endOffset, err, err$1, flags, idx, literal, offset, pattern, pattern$1, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; endOffset = $f.endOffset; err = $f.err; err$1 = $f.err$1; flags = $f.flags; idx = $f.idx; literal = $f.literal; offset = $f.offset; pattern = $f.pattern; pattern$1 = $f.pattern$1; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		offset = self.chrOffset - 1 >> 0;
		if (self.token === 25) {
			offset = offset - (1) >> 0;
		}
		idx = self.idxOf(offset);
		_r$2 = self.scanString(offset); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		pattern = _tuple$1[0];
		err = _tuple$1[1];
		endOffset = self.chrOffset;
		$r = self.next(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if ($interfaceIsEqual(err, $ifaceNil)) {
			pattern = pattern.substring(1, (pattern.length - 1 >> 0));
		}
		flags = "";
		/* */ if (self.token === 9) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (self.token === 9) { */ case 3:
			flags = self.literal;
			$r = self.next(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			endOffset = self.chrOffset - 1 >> 0;
		/* } */ case 4:
		value = "";
		_r$3 = TransformRegExp(pattern); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$2 = _r$3;
		pattern$1 = _tuple$2[0];
		err$1 = _tuple$2[1];
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 7:
			/* */ if (pattern$1 === "" || (((self.mode & 1) >>> 0) === 0)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (pattern$1 === "" || (((self.mode & 1) >>> 0) === 0)) { */ case 10:
				_arg = new file.Idx(idx);
				_r$4 = err$1.Error(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_arg$1 = new $String(_r$4);
				_r$5 = self.error(_arg, "Invalid regular expression: %s", new sliceType([_arg$1])); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
			/* } */ case 11:
			$s = 9; continue;
		/* } else { */ case 8:
			_r$6 = regexp.Compile(pattern$1); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple$3 = _r$6;
			err$1 = _tuple$3[1];
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 15:
				_arg$2 = new file.Idx(idx);
				_r$7 = err$1.Error(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_arg$3 = new $String(_r$7.substring(22));
				_r$8 = self.error(_arg$2, "Invalid regular expression: %s", new sliceType([_arg$3])); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
				$s = 17; continue;
			/* } else { */ case 16:
				value = pattern$1;
			/* } */ case 17:
		/* } */ case 9:
		literal = self.str.substring(offset, endOffset);
		return new ast.RegExpLiteral.ptr(idx, literal, pattern, flags, value);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseRegExpLiteral }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.endOffset = endOffset; $f.err = err; $f.err$1 = err$1; $f.flags = flags; $f.idx = idx; $f.literal = literal; $f.offset = offset; $f.pattern = pattern; $f.pattern$1 = pattern$1; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseRegExpLiteral = function() { return this.$val.parseRegExpLiteral(); };
	_parser.ptr.prototype.parseVariableDeclaration = function(declarationList) {
		var $ptr, _r$2, _r$3, declarationList, idx, idx$1, literal, node, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; declarationList = $f.declarationList; idx = $f.idx; idx$1 = $f.idx$1; literal = $f.literal; node = $f.node; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (!((self.token === 9))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((self.token === 9))) { */ case 1:
			_r$2 = self.expect(9); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			idx = _r$2;
			$r = self.nextStatement(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return new ast.BadExpression.ptr(idx, self.idx);
		/* } */ case 2:
		literal = self.literal;
		idx$1 = self.idx;
		$r = self.next(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		node = new ast.VariableExpression.ptr(literal, idx$1, $ifaceNil);
		if (!(declarationList === ptrType$2.nil)) {
			declarationList.$set($append(declarationList.$get(), node));
		}
		/* */ if (self.token === 42) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (self.token === 42) { */ case 6:
			$r = self.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = self.parseAssignmentExpression(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			node.Initializer = _r$3;
		/* } */ case 7:
		return node;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseVariableDeclaration }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.declarationList = declarationList; $f.idx = idx; $f.idx$1 = idx$1; $f.literal = literal; $f.node = node; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseVariableDeclaration = function(declarationList) { return this.$val.parseVariableDeclaration(declarationList); };
	_parser.ptr.prototype.parseVariableDeclarationList = function(var_) {
		var $ptr, _r$2, declarationList, list, self, var_, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; declarationList = $f.declarationList; list = $f.list; self = $f.self; var_ = $f.var_; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		declarationList = [declarationList];
		self = this;
		declarationList[0] = sliceType$1.nil;
		list = sliceType$2.nil;
		/* while (true) { */ case 1:
			_r$2 = self.parseVariableDeclaration((declarationList.$ptr || (declarationList.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, declarationList)))); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			list = $append(list, _r$2);
			if (!((self.token === 52))) {
				/* break; */ $s = 2; continue;
			}
			$r = self.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		self.scope.declare(new ast.VariableDeclaration.ptr(var_, declarationList[0]));
		return list;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseVariableDeclarationList }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.declarationList = declarationList; $f.list = list; $f.self = self; $f.var_ = var_; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseVariableDeclarationList = function(var_) { return this.$val.parseVariableDeclarationList(var_); };
	_parser.ptr.prototype.parseObjectPropertyKey = function() {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _tmp, _tmp$1, _tmp$2, _tuple$1, _tuple$2, err, err$1, idx, literal, self, tkn, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; err$1 = $f.err$1; idx = $f.idx; literal = $f.literal; self = $f.self; tkn = $f.tkn; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_tmp = self.idx;
		_tmp$1 = self.token;
		_tmp$2 = self.literal;
		idx = _tmp;
		tkn = _tmp$1;
		literal = _tmp$2;
		value = "";
		$r = self.next(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = tkn;
		/* */ if (_ref === 9) { $s = 2; continue; }
		/* */ if (_ref === 8) { $s = 3; continue; }
		/* */ if (_ref === 5) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_ref === 9) { */ case 2:
			value = literal;
			$s = 6; continue;
		/* } else if (_ref === 8) { */ case 3:
			err = $ifaceNil;
			_tuple$1 = parseNumberLiteral(literal);
			err = _tuple$1[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 7:
				_arg = new file.Idx(idx);
				_r$2 = err.Error(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_arg$1 = _r$2;
				_r$3 = self.error(_arg, _arg$1, new sliceType([])); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				$s = 9; continue;
			/* } else { */ case 8:
				value = literal;
			/* } */ case 9:
			$s = 6; continue;
		/* } else if (_ref === 5) { */ case 4:
			err$1 = $ifaceNil;
			_r$4 = parseStringLiteral(literal.substring(1, (literal.length - 1 >> 0))); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$2 = _r$4;
			value = _tuple$2[0];
			err$1 = _tuple$2[1];
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 13:
				_arg$2 = new file.Idx(idx);
				_r$5 = err$1.Error(); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_arg$3 = _r$5;
				_r$6 = self.error(_arg$2, _arg$3, new sliceType([])); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
			/* } */ case 14:
			$s = 6; continue;
		/* } else { */ case 5:
			_r$7 = matchIdentifier.MatchString(literal); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (_r$7) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (_r$7) { */ case 17:
				value = literal;
			/* } */ case 18:
		/* } */ case 6:
		return [literal, value];
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseObjectPropertyKey }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.err$1 = err$1; $f.idx = idx; $f.literal = literal; $f.self = self; $f.tkn = tkn; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseObjectPropertyKey = function() { return this.$val.parseObjectPropertyKey(); };
	_parser.ptr.prototype.parseObjectProperty = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple$1, _tuple$2, _tuple$3, idx, idx$1, literal, node, node$1, parameterList, parameterList$1, self, value, value$1, value$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; idx = $f.idx; idx$1 = $f.idx$1; literal = $f.literal; node = $f.node; node$1 = $f.node$1; parameterList = $f.parameterList; parameterList$1 = $f.parameterList$1; self = $f.self; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.parseObjectPropertyKey(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		literal = _tuple$1[0];
		value = _tuple$1[1];
		/* */ if (literal === "get" && !((self.token === 58))) { $s = 2; continue; }
		/* */ if (literal === "set" && !((self.token === 58))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (literal === "get" && !((self.token === 58))) { */ case 2:
			idx = self.idx;
			_r$3 = self.parseObjectPropertyKey(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$2 = _r$3;
			value$1 = _tuple$2[1];
			_r$4 = self.parseFunctionParameterList(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			parameterList = _r$4;
			node = new ast.FunctionLiteral.ptr(idx, ptrType$3.nil, parameterList, $ifaceNil, "", sliceType$3.nil);
			$r = self.parseFunctionBlock(node); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return new ast.Property.ptr(value$1, "get", node);
		/* } else if (literal === "set" && !((self.token === 58))) { */ case 3:
			idx$1 = self.idx;
			_r$5 = self.parseObjectPropertyKey(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$3 = _r$5;
			value$2 = _tuple$3[1];
			_r$6 = self.parseFunctionParameterList(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			parameterList$1 = _r$6;
			node$1 = new ast.FunctionLiteral.ptr(idx$1, ptrType$3.nil, parameterList$1, $ifaceNil, "", sliceType$3.nil);
			$r = self.parseFunctionBlock(node$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return new ast.Property.ptr(value$2, "set", node$1);
		/* } */ case 4:
		_r$7 = self.expect(58); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		_r$8 = self.parseAssignmentExpression(); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		/* */ $s = 13; case 13:
		return new ast.Property.ptr(value, "value", _r$8);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseObjectProperty }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.idx = idx; $f.idx$1 = idx$1; $f.literal = literal; $f.node = node; $f.node$1 = node$1; $f.parameterList = parameterList; $f.parameterList$1 = parameterList$1; $f.self = self; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseObjectProperty = function() { return this.$val.parseObjectProperty(); };
	_parser.ptr.prototype.parseObjectLiteral = function() {
		var $ptr, _r$2, _r$3, _r$4, idx0, idx1, property, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; idx0 = $f.idx0; idx1 = $f.idx1; property = $f.property; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		value = sliceType$4.nil;
		_r$2 = self.expect(51); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		idx0 = _r$2;
		/* while (true) { */ case 2:
			/* if (!(!((self.token === 56)) && !((self.token === 2)))) { break; } */ if(!(!((self.token === 56)) && !((self.token === 2)))) { $s = 3; continue; }
			_r$3 = self.parseObjectProperty(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			property = $clone(_r$3, ast.Property);
			value = $append(value, property);
			/* */ if (self.token === 52) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (self.token === 52) { */ case 5:
				$r = self.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* continue; */ $s = 2; continue;
			/* } */ case 6:
		/* } */ $s = 2; continue; case 3:
		_r$4 = self.expect(56); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		idx1 = _r$4;
		return new ast.ObjectLiteral.ptr(idx0, idx1, value);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseObjectLiteral }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.idx0 = idx0; $f.idx1 = idx1; $f.property = property; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseObjectLiteral = function() { return this.$val.parseObjectLiteral(); };
	_parser.ptr.prototype.parseArrayLiteral = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, idx0, idx1, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; idx0 = $f.idx0; idx1 = $f.idx1; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.expect(50); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		idx0 = _r$2;
		value = sliceType$2.nil;
		/* while (true) { */ case 2:
			/* if (!(!((self.token === 55)) && !((self.token === 2)))) { break; } */ if(!(!((self.token === 55)) && !((self.token === 2)))) { $s = 3; continue; }
			/* */ if (self.token === 52) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (self.token === 52) { */ case 4:
				$r = self.next(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				value = $append(value, $ifaceNil);
				/* continue; */ $s = 2; continue;
			/* } */ case 5:
			_r$3 = self.parseAssignmentExpression(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			value = $append(value, _r$3);
			/* */ if (!((self.token === 55))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!((self.token === 55))) { */ case 8:
				_r$4 = self.expect(52); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
			/* } */ case 9:
		/* } */ $s = 2; continue; case 3:
		_r$5 = self.expect(55); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		idx1 = _r$5;
		return new ast.ArrayLiteral.ptr(idx0, idx1, value);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseArrayLiteral }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.idx0 = idx0; $f.idx1 = idx1; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseArrayLiteral = function() { return this.$val.parseArrayLiteral(); };
	_parser.ptr.prototype.parseArgumentList = function() {
		var $ptr, _r$2, _r$3, _r$4, argumentList, idx0, idx1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; argumentList = $f.argumentList; idx0 = $f.idx0; idx1 = $f.idx1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		argumentList = sliceType$2.nil;
		idx0 = 0;
		idx1 = 0;
		self = this;
		_r$2 = self.expect(49); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		idx0 = _r$2;
		/* */ if (!((self.token === 54))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((self.token === 54))) { */ case 2:
			/* while (true) { */ case 4:
				_r$3 = self.parseAssignmentExpression(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				argumentList = $append(argumentList, _r$3);
				if (!((self.token === 52))) {
					/* break; */ $s = 5; continue;
				}
				$r = self.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ $s = 4; continue; case 5:
		/* } */ case 3:
		_r$4 = self.expect(54); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		idx1 = _r$4;
		return [argumentList, idx0, idx1];
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseArgumentList }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.argumentList = argumentList; $f.idx0 = idx0; $f.idx1 = idx1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseArgumentList = function() { return this.$val.parseArgumentList(); };
	_parser.ptr.prototype.parseCallExpression = function(left) {
		var $ptr, _r$2, _tuple$1, argumentList, idx0, idx1, left, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; argumentList = $f.argumentList; idx0 = $f.idx0; idx1 = $f.idx1; left = $f.left; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.parseArgumentList(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		argumentList = _tuple$1[0];
		idx0 = _tuple$1[1];
		idx1 = _tuple$1[2];
		return new ast.CallExpression.ptr(left, idx0, argumentList, idx1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseCallExpression }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.argumentList = argumentList; $f.idx0 = idx0; $f.idx1 = idx1; $f.left = left; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseCallExpression = function(left) { return this.$val.parseCallExpression(left); };
	_parser.ptr.prototype.parseDotMember = function(left) {
		var $ptr, _r$2, _r$3, _r$4, idx, left, literal, period, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; idx = $f.idx; left = $f.left; literal = $f.literal; period = $f.period; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.expect(53); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		period = _r$2;
		literal = self.literal;
		idx = self.idx;
		_r$3 = matchIdentifier.MatchString(literal); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!_r$3) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!_r$3) { */ case 2:
			_r$4 = self.expect(9); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			$r = self.nextStatement(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return new ast.BadExpression.ptr(period, self.idx);
		/* } */ case 3:
		$r = self.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return new ast.DotExpression.ptr(left, new ast.Identifier.ptr(literal, idx));
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseDotMember }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.idx = idx; $f.left = left; $f.literal = literal; $f.period = period; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseDotMember = function(left) { return this.$val.parseDotMember(left); };
	_parser.ptr.prototype.parseBracketMember = function(left) {
		var $ptr, _r$2, _r$3, _r$4, idx0, idx1, left, member, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; idx0 = $f.idx0; idx1 = $f.idx1; left = $f.left; member = $f.member; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.expect(50); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		idx0 = _r$2;
		_r$3 = self.parseExpression(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		member = _r$3;
		_r$4 = self.expect(55); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		idx1 = _r$4;
		return new ast.BracketExpression.ptr(left, member, idx0, idx1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseBracketMember }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.idx0 = idx0; $f.idx1 = idx1; $f.left = left; $f.member = member; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseBracketMember = function(left) { return this.$val.parseBracketMember(left); };
	_parser.ptr.prototype.parseNewExpression = function() {
		var $ptr, _r$2, _r$3, _r$4, _tuple$1, argumentList, callee, idx, idx0, idx1, node, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple$1 = $f._tuple$1; argumentList = $f.argumentList; callee = $f.callee; idx = $f.idx; idx0 = $f.idx0; idx1 = $f.idx1; node = $f.node; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.expect(66); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		idx = _r$2;
		_r$3 = self.parseLeftHandSideExpression(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		callee = _r$3;
		node = new ast.NewExpression.ptr(idx, callee, 0, sliceType$2.nil, 0);
		/* */ if (self.token === 49) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (self.token === 49) { */ case 3:
			_r$4 = self.parseArgumentList(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$1 = _r$4;
			argumentList = _tuple$1[0];
			idx0 = _tuple$1[1];
			idx1 = _tuple$1[2];
			node.ArgumentList = argumentList;
			node.LeftParenthesis = idx0;
			node.RightParenthesis = idx1;
		/* } */ case 4:
		return node;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseNewExpression }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple$1 = _tuple$1; $f.argumentList = argumentList; $f.callee = callee; $f.idx = idx; $f.idx0 = idx0; $f.idx1 = idx1; $f.node = node; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseNewExpression = function() { return this.$val.parseNewExpression(); };
	_parser.ptr.prototype.parseLeftHandSideExpression = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, left, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; left = $f.left; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		left = $ifaceNil;
		/* */ if (self.token === 66) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.token === 66) { */ case 1:
			_r$2 = self.parseNewExpression(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			left = _r$2;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$3 = self.parsePrimaryExpression(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			left = _r$3;
		/* } */ case 3:
		/* while (true) { */ case 6:
			/* */ if (self.token === 53) { $s = 8; continue; }
			/* */ if (self.token === 50) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (self.token === 53) { */ case 8:
				_r$4 = self.parseDotMember(left); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				left = _r$4;
				$s = 11; continue;
			/* } else if (self.token === 50) { */ case 9:
				_r$5 = self.parseBracketMember(left); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				left = _r$5;
				$s = 11; continue;
			/* } else { */ case 10:
				/* break; */ $s = 7; continue;
			/* } */ case 11:
		/* } */ $s = 6; continue; case 7:
		return left;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseLeftHandSideExpression }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.left = left; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseLeftHandSideExpression = function() { return this.$val.parseLeftHandSideExpression(); };
	_parser.ptr.prototype.parseLeftHandSideExpressionAllowCall = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, allowIn, left, self, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; allowIn = $f.allowIn; left = $f.left; self = $f.self; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		allowIn = [allowIn];
		self = [self];
		self[0] = this;
		allowIn[0] = self[0].scope.allowIn;
		self[0].scope.allowIn = true;
		$deferred.push([(function(allowIn, self) { return function() {
			var $ptr;
			self[0].scope.allowIn = allowIn[0];
		}; })(allowIn, self), []]);
		left = $ifaceNil;
		/* */ if (self[0].token === 66) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self[0].token === 66) { */ case 1:
			_r$2 = self[0].parseNewExpression(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			left = _r$2;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$3 = self[0].parsePrimaryExpression(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			left = _r$3;
		/* } */ case 3:
		/* while (true) { */ case 6:
			/* */ if (self[0].token === 53) { $s = 8; continue; }
			/* */ if (self[0].token === 50) { $s = 9; continue; }
			/* */ if (self[0].token === 49) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (self[0].token === 53) { */ case 8:
				_r$4 = self[0].parseDotMember(left); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				left = _r$4;
				$s = 12; continue;
			/* } else if (self[0].token === 50) { */ case 9:
				_r$5 = self[0].parseBracketMember(left); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				left = _r$5;
				$s = 12; continue;
			/* } else if (self[0].token === 49) { */ case 10:
				_r$6 = self[0].parseCallExpression(left); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				left = _r$6;
				$s = 12; continue;
			/* } else { */ case 11:
				/* break; */ $s = 7; continue;
			/* } */ case 12:
		/* } */ $s = 6; continue; case 7:
		return left;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseLeftHandSideExpressionAllowCall }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.allowIn = allowIn; $f.left = left; $f.self = self; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	_parser.prototype.parseLeftHandSideExpressionAllowCall = function() { return this.$val.parseLeftHandSideExpressionAllowCall(); };
	_parser.ptr.prototype.parsePostfixExpression = function() {
		var $ptr, _r$2, _r$3, _ref, _ref$1, idx, operand, self, tkn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; idx = $f.idx; operand = $f.operand; self = $f.self; tkn = $f.tkn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.parseLeftHandSideExpressionAllowCall(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		operand = _r$2;
		_ref = self.token;
		/* */ if (_ref === 36 || _ref === 37) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* switch (0) { default: if (_ref === 36 || _ref === 37) { */ case 2:
			if (self.implicitSemicolon) {
				/* break; */ $s = 3; continue;
			}
			tkn = self.token;
			idx = self.idx;
			$r = self.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_ref$1 = operand;
			/* */ if ($assertType(_ref$1, ptrType$3, true)[1] || $assertType(_ref$1, ptrType$5, true)[1] || $assertType(_ref$1, ptrType$6, true)[1]) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ($assertType(_ref$1, ptrType$3, true)[1] || $assertType(_ref$1, ptrType$5, true)[1] || $assertType(_ref$1, ptrType$6, true)[1]) { */ case 5:
				$s = 7; continue;
			/* } else { */ case 6:
				_r$3 = self.error(new file.Idx(idx), "Invalid left-hand side in assignment", new sliceType([])); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				$r = self.nextStatement(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return new ast.BadExpression.ptr(idx, self.idx);
			/* } */ case 7:
			return new ast.UnaryExpression.ptr(tkn, idx, operand, true);
		/* } } */ case 3:
		return operand;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parsePostfixExpression }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f.idx = idx; $f.operand = operand; $f.self = self; $f.tkn = tkn; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parsePostfixExpression = function() { return this.$val.parsePostfixExpression(); };
	_parser.ptr.prototype.parseUnaryExpression = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, idx, idx$1, operand, self, tkn, tkn$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; idx = $f.idx; idx$1 = $f.idx$1; operand = $f.operand; self = $f.self; tkn = $f.tkn; tkn$1 = $f.tkn$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_ref = self.token;
		/* */ if (_ref === 10 || _ref === 11 || _ref === 43 || _ref === 44) { $s = 1; continue; }
		/* */ if (_ref === 79 || _ref === 71 || _ref === 78) { $s = 2; continue; }
		/* */ if (_ref === 36 || _ref === 37) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 10 || _ref === 11 || _ref === 43 || _ref === 44) { */ case 1:
			tkn = self.token;
			idx = self.idx;
			$r = self.next(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = self.parseUnaryExpression(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ $s = 7; case 7:
			return new ast.UnaryExpression.ptr(tkn, idx, _r$2, false);
		/* } else if (_ref === 79 || _ref === 71 || _ref === 78) { */ case 2:
			tkn = self.token;
			idx = self.idx;
			$r = self.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = self.parseUnaryExpression(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ $s = 10; case 10:
			return new ast.UnaryExpression.ptr(tkn, idx, _r$3, false);
		/* } else if (_ref === 36 || _ref === 37) { */ case 3:
			tkn$1 = self.token;
			idx$1 = self.idx;
			$r = self.next(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$4 = self.parseUnaryExpression(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			operand = _r$4;
			_ref$1 = operand;
			/* */ if ($assertType(_ref$1, ptrType$3, true)[1] || $assertType(_ref$1, ptrType$5, true)[1] || $assertType(_ref$1, ptrType$6, true)[1]) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ($assertType(_ref$1, ptrType$3, true)[1] || $assertType(_ref$1, ptrType$5, true)[1] || $assertType(_ref$1, ptrType$6, true)[1]) { */ case 13:
				$s = 15; continue;
			/* } else { */ case 14:
				_r$5 = self.error(new file.Idx(idx$1), "Invalid left-hand side in assignment", new sliceType([])); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				$r = self.nextStatement(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return new ast.BadExpression.ptr(idx$1, self.idx);
			/* } */ case 15:
			return new ast.UnaryExpression.ptr(tkn$1, idx$1, operand, false);
		/* } */ case 4:
		_r$6 = self.parsePostfixExpression(); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ $s = 19; case 19:
		return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseUnaryExpression }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f.idx = idx; $f.idx$1 = idx$1; $f.operand = operand; $f.self = self; $f.tkn = tkn; $f.tkn$1 = tkn$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseUnaryExpression = function() { return this.$val.parseUnaryExpression(); };
	_parser.ptr.prototype.parseMultiplicativeExpression = function() {
		var $ptr, _r$2, _r$3, left, next, self, tkn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; left = $f.left; next = $f.next; self = $f.self; tkn = $f.tkn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		next = $methodVal(self, "parseUnaryExpression");
		_r$2 = next(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		left = _r$2;
		/* while (true) { */ case 2:
			/* if (!((self.token === 12) || (self.token === 13) || (self.token === 14))) { break; } */ if(!((self.token === 12) || (self.token === 13) || (self.token === 14))) { $s = 3; continue; }
			tkn = self.token;
			$r = self.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = next(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			left = new ast.BinaryExpression.ptr(tkn, left, _r$3, false);
		/* } */ $s = 2; continue; case 3:
		return left;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseMultiplicativeExpression }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.left = left; $f.next = next; $f.self = self; $f.tkn = tkn; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseMultiplicativeExpression = function() { return this.$val.parseMultiplicativeExpression(); };
	_parser.ptr.prototype.parseAdditiveExpression = function() {
		var $ptr, _r$2, _r$3, left, next, self, tkn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; left = $f.left; next = $f.next; self = $f.self; tkn = $f.tkn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		next = $methodVal(self, "parseMultiplicativeExpression");
		_r$2 = next(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		left = _r$2;
		/* while (true) { */ case 2:
			/* if (!((self.token === 10) || (self.token === 11))) { break; } */ if(!((self.token === 10) || (self.token === 11))) { $s = 3; continue; }
			tkn = self.token;
			$r = self.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = next(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			left = new ast.BinaryExpression.ptr(tkn, left, _r$3, false);
		/* } */ $s = 2; continue; case 3:
		return left;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseAdditiveExpression }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.left = left; $f.next = next; $f.self = self; $f.tkn = tkn; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseAdditiveExpression = function() { return this.$val.parseAdditiveExpression(); };
	_parser.ptr.prototype.parseShiftExpression = function() {
		var $ptr, _r$2, _r$3, left, next, self, tkn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; left = $f.left; next = $f.next; self = $f.self; tkn = $f.tkn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		next = $methodVal(self, "parseAdditiveExpression");
		_r$2 = next(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		left = _r$2;
		/* while (true) { */ case 2:
			/* if (!((self.token === 18) || (self.token === 19) || (self.token === 20))) { break; } */ if(!((self.token === 18) || (self.token === 19) || (self.token === 20))) { $s = 3; continue; }
			tkn = self.token;
			$r = self.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = next(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			left = new ast.BinaryExpression.ptr(tkn, left, _r$3, false);
		/* } */ $s = 2; continue; case 3:
		return left;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseShiftExpression }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.left = left; $f.next = next; $f.self = self; $f.tkn = tkn; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseShiftExpression = function() { return this.$val.parseShiftExpression(); };
	_parser.ptr.prototype.parseRelationalExpression = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _ref, allowIn, left, next, self, tkn, tkn$1, tkn$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; allowIn = $f.allowIn; left = $f.left; next = $f.next; self = $f.self; tkn = $f.tkn; tkn$1 = $f.tkn$1; tkn$2 = $f.tkn$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		allowIn = [allowIn];
		self = [self];
		self[0] = this;
		next = $methodVal(self[0], "parseShiftExpression");
		_r$2 = next(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		left = _r$2;
		allowIn[0] = self[0].scope.allowIn;
		self[0].scope.allowIn = true;
		$deferred.push([(function(allowIn, self) { return function() {
			var $ptr;
			self[0].scope.allowIn = allowIn[0];
		}; })(allowIn, self), []]);
		_ref = self[0].token;
		/* */ if (_ref === 40 || _ref === 47 || _ref === 41 || _ref === 48) { $s = 2; continue; }
		/* */ if (_ref === 86) { $s = 3; continue; }
		/* */ if (_ref === 62) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_ref === 40 || _ref === 47 || _ref === 41 || _ref === 48) { */ case 2:
			tkn = self[0].token;
			$r = self[0].next(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = self[0].parseRelationalExpression(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ $s = 8; case 8:
			return new ast.BinaryExpression.ptr(tkn, left, _r$3, true);
		/* } else if (_ref === 86) { */ case 3:
			tkn$1 = self[0].token;
			$r = self[0].next(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$4 = self[0].parseRelationalExpression(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ $s = 11; case 11:
			return new ast.BinaryExpression.ptr(tkn$1, left, _r$4, false);
		/* } else if (_ref === 62) { */ case 4:
			if (!allowIn[0]) {
				return left;
			}
			tkn$2 = self[0].token;
			$r = self[0].next(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$5 = self[0].parseRelationalExpression(); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ $s = 14; case 14:
			return new ast.BinaryExpression.ptr(tkn$2, left, _r$5, false);
		/* } */ case 5:
		return left;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseRelationalExpression }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.allowIn = allowIn; $f.left = left; $f.next = next; $f.self = self; $f.tkn = tkn; $f.tkn$1 = tkn$1; $f.tkn$2 = tkn$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	_parser.prototype.parseRelationalExpression = function() { return this.$val.parseRelationalExpression(); };
	_parser.ptr.prototype.parseEqualityExpression = function() {
		var $ptr, _r$2, _r$3, left, next, self, tkn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; left = $f.left; next = $f.next; self = $f.self; tkn = $f.tkn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		next = $methodVal(self, "parseRelationalExpression");
		_r$2 = next(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		left = _r$2;
		/* while (true) { */ case 2:
			/* if (!((self.token === 38) || (self.token === 45) || (self.token === 39) || (self.token === 46))) { break; } */ if(!((self.token === 38) || (self.token === 45) || (self.token === 39) || (self.token === 46))) { $s = 3; continue; }
			tkn = self.token;
			$r = self.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = next(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			left = new ast.BinaryExpression.ptr(tkn, left, _r$3, true);
		/* } */ $s = 2; continue; case 3:
		return left;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseEqualityExpression }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.left = left; $f.next = next; $f.self = self; $f.tkn = tkn; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseEqualityExpression = function() { return this.$val.parseEqualityExpression(); };
	_parser.ptr.prototype.parseBitwiseAndExpression = function() {
		var $ptr, _r$2, _r$3, left, next, self, tkn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; left = $f.left; next = $f.next; self = $f.self; tkn = $f.tkn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		next = $methodVal(self, "parseEqualityExpression");
		_r$2 = next(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		left = _r$2;
		/* while (true) { */ case 2:
			/* if (!(self.token === 15)) { break; } */ if(!(self.token === 15)) { $s = 3; continue; }
			tkn = self.token;
			$r = self.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = next(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			left = new ast.BinaryExpression.ptr(tkn, left, _r$3, false);
		/* } */ $s = 2; continue; case 3:
		return left;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseBitwiseAndExpression }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.left = left; $f.next = next; $f.self = self; $f.tkn = tkn; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseBitwiseAndExpression = function() { return this.$val.parseBitwiseAndExpression(); };
	_parser.ptr.prototype.parseBitwiseExclusiveOrExpression = function() {
		var $ptr, _r$2, _r$3, left, next, self, tkn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; left = $f.left; next = $f.next; self = $f.self; tkn = $f.tkn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		next = $methodVal(self, "parseBitwiseAndExpression");
		_r$2 = next(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		left = _r$2;
		/* while (true) { */ case 2:
			/* if (!(self.token === 17)) { break; } */ if(!(self.token === 17)) { $s = 3; continue; }
			tkn = self.token;
			$r = self.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = next(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			left = new ast.BinaryExpression.ptr(tkn, left, _r$3, false);
		/* } */ $s = 2; continue; case 3:
		return left;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseBitwiseExclusiveOrExpression }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.left = left; $f.next = next; $f.self = self; $f.tkn = tkn; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseBitwiseExclusiveOrExpression = function() { return this.$val.parseBitwiseExclusiveOrExpression(); };
	_parser.ptr.prototype.parseBitwiseOrExpression = function() {
		var $ptr, _r$2, _r$3, left, next, self, tkn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; left = $f.left; next = $f.next; self = $f.self; tkn = $f.tkn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		next = $methodVal(self, "parseBitwiseExclusiveOrExpression");
		_r$2 = next(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		left = _r$2;
		/* while (true) { */ case 2:
			/* if (!(self.token === 16)) { break; } */ if(!(self.token === 16)) { $s = 3; continue; }
			tkn = self.token;
			$r = self.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = next(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			left = new ast.BinaryExpression.ptr(tkn, left, _r$3, false);
		/* } */ $s = 2; continue; case 3:
		return left;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseBitwiseOrExpression }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.left = left; $f.next = next; $f.self = self; $f.tkn = tkn; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseBitwiseOrExpression = function() { return this.$val.parseBitwiseOrExpression(); };
	_parser.ptr.prototype.parseLogicalAndExpression = function() {
		var $ptr, _r$2, _r$3, left, next, self, tkn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; left = $f.left; next = $f.next; self = $f.self; tkn = $f.tkn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		next = $methodVal(self, "parseBitwiseOrExpression");
		_r$2 = next(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		left = _r$2;
		/* while (true) { */ case 2:
			/* if (!(self.token === 34)) { break; } */ if(!(self.token === 34)) { $s = 3; continue; }
			tkn = self.token;
			$r = self.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = next(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			left = new ast.BinaryExpression.ptr(tkn, left, _r$3, false);
		/* } */ $s = 2; continue; case 3:
		return left;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseLogicalAndExpression }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.left = left; $f.next = next; $f.self = self; $f.tkn = tkn; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseLogicalAndExpression = function() { return this.$val.parseLogicalAndExpression(); };
	_parser.ptr.prototype.parseLogicalOrExpression = function() {
		var $ptr, _r$2, _r$3, left, next, self, tkn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; left = $f.left; next = $f.next; self = $f.self; tkn = $f.tkn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		next = $methodVal(self, "parseLogicalAndExpression");
		_r$2 = next(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		left = _r$2;
		/* while (true) { */ case 2:
			/* if (!(self.token === 35)) { break; } */ if(!(self.token === 35)) { $s = 3; continue; }
			tkn = self.token;
			$r = self.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = next(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			left = new ast.BinaryExpression.ptr(tkn, left, _r$3, false);
		/* } */ $s = 2; continue; case 3:
		return left;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseLogicalOrExpression }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.left = left; $f.next = next; $f.self = self; $f.tkn = tkn; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseLogicalOrExpression = function() { return this.$val.parseLogicalOrExpression(); };
	_parser.ptr.prototype.parseConditionlExpression = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, consequent, left, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; consequent = $f.consequent; left = $f.left; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.parseLogicalOrExpression(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		left = _r$2;
		/* */ if (self.token === 59) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (self.token === 59) { */ case 2:
			$r = self.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = self.parseAssignmentExpression(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			consequent = _r$3;
			_r$4 = self.expect(58); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			_r$5 = self.parseAssignmentExpression(); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ $s = 8; case 8:
			return new ast.ConditionalExpression.ptr(left, consequent, _r$5);
		/* } */ case 3:
		return left;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseConditionlExpression }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.consequent = consequent; $f.left = left; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseConditionlExpression = function() { return this.$val.parseConditionlExpression(); };
	_parser.ptr.prototype.parseAssignmentExpression = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _ref, _ref$1, idx, left, operator, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; idx = $f.idx; left = $f.left; operator = $f.operator; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.parseConditionlExpression(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		left = _r$2;
		operator = 0;
		_ref = self.token;
		if (_ref === 42) {
			operator = self.token;
		} else if (_ref === 22) {
			operator = 10;
		} else if (_ref === 23) {
			operator = 11;
		} else if (_ref === 24) {
			operator = 12;
		} else if (_ref === 25) {
			operator = 13;
		} else if (_ref === 26) {
			operator = 14;
		} else if (_ref === 27) {
			operator = 15;
		} else if (_ref === 33) {
			operator = 21;
		} else if (_ref === 28) {
			operator = 16;
		} else if (_ref === 29) {
			operator = 17;
		} else if (_ref === 30) {
			operator = 18;
		} else if (_ref === 31) {
			operator = 19;
		} else if (_ref === 32) {
			operator = 20;
		}
		/* */ if (!((operator === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((operator === 0))) { */ case 2:
			idx = self.idx;
			$r = self.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_ref$1 = left;
			/* */ if ($assertType(_ref$1, ptrType$3, true)[1] || $assertType(_ref$1, ptrType$5, true)[1] || $assertType(_ref$1, ptrType$6, true)[1]) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ($assertType(_ref$1, ptrType$3, true)[1] || $assertType(_ref$1, ptrType$5, true)[1] || $assertType(_ref$1, ptrType$6, true)[1]) { */ case 5:
				$s = 7; continue;
			/* } else { */ case 6:
				_r$3 = left.Idx0(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$4 = self.error(new file.Idx(_r$3), "Invalid left-hand side in assignment", new sliceType([])); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				$r = self.nextStatement(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return new ast.BadExpression.ptr(idx, self.idx);
			/* } */ case 7:
			_r$5 = self.parseAssignmentExpression(); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ $s = 12; case 12:
			return new ast.AssignExpression.ptr(operator, left, _r$5);
		/* } */ case 3:
		return left;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseAssignmentExpression }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f.idx = idx; $f.left = left; $f.operator = operator; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseAssignmentExpression = function() { return this.$val.parseAssignmentExpression(); };
	_parser.ptr.prototype.parseExpression = function() {
		var $ptr, _r$2, _r$3, left, next, self, sequence, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; left = $f.left; next = $f.next; self = $f.self; sequence = $f.sequence; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		next = $methodVal(self, "parseAssignmentExpression");
		_r$2 = next(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		left = _r$2;
		/* */ if (self.token === 52) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (self.token === 52) { */ case 2:
			sequence = new sliceType$2([left]);
			/* while (true) { */ case 4:
				if (!((self.token === 52))) {
					/* break; */ $s = 5; continue;
				}
				$r = self.next(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$3 = next(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				sequence = $append(sequence, _r$3);
			/* } */ $s = 4; continue; case 5:
			return new ast.SequenceExpression.ptr(sequence);
		/* } */ case 3:
		return left;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseExpression }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.left = left; $f.next = next; $f.self = self; $f.sequence = sequence; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseExpression = function() { return this.$val.parseExpression(); };
	isDecimalDigit = function(chr) {
		var $ptr, chr;
		return 48 <= chr && chr <= 57;
	};
	digitValue = function(chr) {
		var $ptr, chr;
		if (48 <= chr && chr <= 57) {
			return ((chr - 48 >> 0) >> 0);
		} else if (97 <= chr && chr <= 102) {
			return (((chr - 97 >> 0) + 10 >> 0) >> 0);
		} else if (65 <= chr && chr <= 70) {
			return (((chr - 65 >> 0) + 10 >> 0) >> 0);
		}
		return 16;
	};
	isDigit = function(chr, base) {
		var $ptr, base, chr;
		return digitValue(chr) < base;
	};
	isIdentifierStart = function(chr) {
		var $ptr, chr;
		return (chr === 36) || (chr === 95) || (chr === 92) || 97 <= chr && chr <= 122 || 65 <= chr && chr <= 90 || chr >= 128 && unicode.IsLetter(chr);
	};
	isIdentifierPart = function(chr) {
		var $ptr, chr;
		return (chr === 36) || (chr === 95) || (chr === 92) || 97 <= chr && chr <= 122 || 65 <= chr && chr <= 90 || 48 <= chr && chr <= 57 || chr >= 128 && (unicode.IsLetter(chr) || unicode.IsDigit(chr));
	};
	_parser.ptr.prototype.scanIdentifier = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple$1, decimal, distance, j, literal, offset, ok, parse, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple$1 = $f._tuple$1; decimal = $f.decimal; distance = $f.distance; j = $f.j; literal = $f.literal; offset = $f.offset; ok = $f.ok; parse = $f.parse; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		offset = self.chrOffset;
		parse = false;
		/* while (true) { */ case 1:
			/* if (!(isIdentifierPart(self.chr))) { break; } */ if(!(isIdentifierPart(self.chr))) { $s = 2; continue; }
			/* */ if (self.chr === 92) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (self.chr === 92) { */ case 3:
				distance = self.chrOffset - offset >> 0;
				$r = self.read(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (!((self.chr === 117))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (!((self.chr === 117))) { */ case 6:
					_r$2 = fmt.Errorf("Invalid identifier escape character: %c (%s)", new sliceType([new $Int32(self.chr), new $String($encodeRune(self.chr))])); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ $s = 9; case 9:
					return ["", _r$2];
				/* } */ case 7:
				parse = true;
				value = 0;
				j = 0;
				/* while (true) { */ case 10:
					/* if (!(j < 4)) { break; } */ if(!(j < 4)) { $s = 11; continue; }
					$r = self.read(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_tuple$1 = hex2decimal((self.chr << 24 >>> 24));
					decimal = _tuple$1[0];
					ok = _tuple$1[1];
					/* */ if (!ok) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if (!ok) { */ case 13:
						_r$3 = fmt.Errorf("Invalid identifier escape character: %c (%s)", new sliceType([new $Int32(self.chr), new $String($encodeRune(self.chr))])); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						/* */ $s = 16; case 16:
						return ["", _r$3];
					/* } */ case 14:
					value = (value << 4 >> 0) | decimal;
					j = j + (1) >> 0;
				/* } */ $s = 10; continue; case 11:
				/* */ if (value === 92) { $s = 17; continue; }
				/* */ if (distance === 0) { $s = 18; continue; }
				/* */ if (distance > 0) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (value === 92) { */ case 17:
					_r$4 = fmt.Errorf("Invalid identifier escape value: %c (%s)", new sliceType([new $Int32(value), new $String($encodeRune(value))])); /* */ $s = 21; case 21: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ $s = 22; case 22:
					return ["", _r$4];
				/* } else if (distance === 0) { */ case 18:
					/* */ if (!isIdentifierStart(value)) { $s = 23; continue; }
					/* */ $s = 24; continue;
					/* if (!isIdentifierStart(value)) { */ case 23:
						_r$5 = fmt.Errorf("Invalid identifier escape value: %c (%s)", new sliceType([new $Int32(value), new $String($encodeRune(value))])); /* */ $s = 25; case 25: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						/* */ $s = 26; case 26:
						return ["", _r$5];
					/* } */ case 24:
					$s = 20; continue;
				/* } else if (distance > 0) { */ case 19:
					/* */ if (!isIdentifierPart(value)) { $s = 27; continue; }
					/* */ $s = 28; continue;
					/* if (!isIdentifierPart(value)) { */ case 27:
						_r$6 = fmt.Errorf("Invalid identifier escape value: %c (%s)", new sliceType([new $Int32(value), new $String($encodeRune(value))])); /* */ $s = 29; case 29: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						/* */ $s = 30; case 30:
						return ["", _r$6];
					/* } */ case 28:
				/* } */ case 20:
			/* } */ case 4:
			$r = self.read(); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		literal = self.str.substring(offset, self.chrOffset);
		/* */ if (parse) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if (parse) { */ case 32:
			_r$7 = parseStringLiteral(literal); /* */ $s = 34; case 34: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ $s = 35; case 35:
			return _r$7;
		/* } */ case 33:
		return [literal, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.scanIdentifier }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple$1 = _tuple$1; $f.decimal = decimal; $f.distance = distance; $f.j = j; $f.literal = literal; $f.offset = offset; $f.ok = ok; $f.parse = parse; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.scanIdentifier = function() { return this.$val.scanIdentifier(); };
	isLineTerminator = function(chr) {
		var $ptr, _ref, chr;
		_ref = chr;
		if (_ref === 10 || _ref === 13 || _ref === 8232 || _ref === 8233) {
			return true;
		}
		return false;
	};
	_parser.ptr.prototype.scan = function() {
		var $ptr, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, chr, err, err$1, idx, insertSemicolon, literal, self, strict, tkn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; chr = $f.chr; err = $f.err; err$1 = $f.err$1; idx = $f.idx; insertSemicolon = $f.insertSemicolon; literal = $f.literal; self = $f.self; strict = $f.strict; tkn = $f.tkn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		tkn = 0;
		literal = "";
		idx = 0;
		self = this;
		self.implicitSemicolon = false;
		/* while (true) { */ case 1:
			$r = self.skipWhiteSpace(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			idx = self.idxOf(self.chrOffset);
			insertSemicolon = false;
			chr = self.chr;
			/* */ if (isIdentifierStart(chr)) { $s = 4; continue; }
			/* */ if (48 <= chr && chr <= 57) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* switch (0) { default: if (isIdentifierStart(chr)) { */ case 4:
				err = $ifaceNil;
				_r$2 = self.scanIdentifier(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				literal = _tuple$1[0];
				err = _tuple$1[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					tkn = 1;
					/* break; */ $s = 7; continue;
				}
				if (literal.length > 1) {
					strict = false;
					_tuple$2 = token.IsKeyword(literal);
					tkn = _tuple$2[0];
					strict = _tuple$2[1];
					_ref = tkn;
					switch (0) { default: if (_ref === 0) {
						if (literal === "true" || literal === "false") {
							self.insertSemicolon = true;
							tkn = 6;
							return [tkn, literal, idx];
						} else if (literal === "null") {
							self.insertSemicolon = true;
							tkn = 7;
							return [tkn, literal, idx];
						}
					} else if (_ref === 4) {
						tkn = 4;
						if (strict) {
							break;
						}
						return [tkn, literal, idx];
					} else if (_ref === 68 || _ref === 74 || _ref === 76 || _ref === 77 || _ref === 84 || _ref === 85) {
						self.insertSemicolon = true;
						return [tkn, literal, idx];
					} else {
						return [tkn, literal, idx];
					} }
				}
				self.insertSemicolon = true;
				tkn = 9;
				return [tkn, literal, idx];
			/* } else if (48 <= chr && chr <= 57) { */ case 5:
				self.insertSemicolon = true;
				_r$3 = self.scanNumericLiteral(false); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$3 = _r$3;
				tkn = _tuple$3[0];
				literal = _tuple$3[1];
				return [tkn, literal, idx];
			/* } else { */ case 6:
				$r = self.read(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_ref$1 = chr;
				/* */ if (_ref$1 === -1) { $s = 11; continue; }
				/* */ if (_ref$1 === 13 || _ref$1 === 10 || _ref$1 === 8232 || _ref$1 === 8233) { $s = 12; continue; }
				/* */ if (_ref$1 === 58) { $s = 13; continue; }
				/* */ if (_ref$1 === 46) { $s = 14; continue; }
				/* */ if (_ref$1 === 44) { $s = 15; continue; }
				/* */ if (_ref$1 === 59) { $s = 16; continue; }
				/* */ if (_ref$1 === 40) { $s = 17; continue; }
				/* */ if (_ref$1 === 41) { $s = 18; continue; }
				/* */ if (_ref$1 === 91) { $s = 19; continue; }
				/* */ if (_ref$1 === 93) { $s = 20; continue; }
				/* */ if (_ref$1 === 123) { $s = 21; continue; }
				/* */ if (_ref$1 === 125) { $s = 22; continue; }
				/* */ if (_ref$1 === 43) { $s = 23; continue; }
				/* */ if (_ref$1 === 45) { $s = 24; continue; }
				/* */ if (_ref$1 === 42) { $s = 25; continue; }
				/* */ if (_ref$1 === 47) { $s = 26; continue; }
				/* */ if (_ref$1 === 37) { $s = 27; continue; }
				/* */ if (_ref$1 === 94) { $s = 28; continue; }
				/* */ if (_ref$1 === 60) { $s = 29; continue; }
				/* */ if (_ref$1 === 62) { $s = 30; continue; }
				/* */ if (_ref$1 === 61) { $s = 31; continue; }
				/* */ if (_ref$1 === 33) { $s = 32; continue; }
				/* */ if (_ref$1 === 38) { $s = 33; continue; }
				/* */ if (_ref$1 === 124) { $s = 34; continue; }
				/* */ if (_ref$1 === 126) { $s = 35; continue; }
				/* */ if (_ref$1 === 63) { $s = 36; continue; }
				/* */ if (_ref$1 === 34 || _ref$1 === 39) { $s = 37; continue; }
				/* */ $s = 38; continue;
				/* if (_ref$1 === -1) { */ case 11:
					if (self.insertSemicolon) {
						self.insertSemicolon = false;
						self.implicitSemicolon = true;
					}
					tkn = 2;
					$s = 39; continue;
				/* } else if (_ref$1 === 13 || _ref$1 === 10 || _ref$1 === 8232 || _ref$1 === 8233) { */ case 12:
					self.insertSemicolon = false;
					self.implicitSemicolon = true;
					/* continue; */ $s = 1; continue;
					$s = 39; continue;
				/* } else if (_ref$1 === 58) { */ case 13:
					tkn = 58;
					$s = 39; continue;
				/* } else if (_ref$1 === 46) { */ case 14:
					/* */ if (digitValue(self.chr) < 10) { $s = 40; continue; }
					/* */ $s = 41; continue;
					/* if (digitValue(self.chr) < 10) { */ case 40:
						insertSemicolon = true;
						_r$4 = self.scanNumericLiteral(true); /* */ $s = 43; case 43: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						_tuple$4 = _r$4;
						tkn = _tuple$4[0];
						literal = _tuple$4[1];
						$s = 42; continue;
					/* } else { */ case 41:
						tkn = 53;
					/* } */ case 42:
					$s = 39; continue;
				/* } else if (_ref$1 === 44) { */ case 15:
					tkn = 52;
					$s = 39; continue;
				/* } else if (_ref$1 === 59) { */ case 16:
					tkn = 57;
					$s = 39; continue;
				/* } else if (_ref$1 === 40) { */ case 17:
					tkn = 49;
					$s = 39; continue;
				/* } else if (_ref$1 === 41) { */ case 18:
					tkn = 54;
					insertSemicolon = true;
					$s = 39; continue;
				/* } else if (_ref$1 === 91) { */ case 19:
					tkn = 50;
					$s = 39; continue;
				/* } else if (_ref$1 === 93) { */ case 20:
					tkn = 55;
					insertSemicolon = true;
					$s = 39; continue;
				/* } else if (_ref$1 === 123) { */ case 21:
					tkn = 51;
					$s = 39; continue;
				/* } else if (_ref$1 === 125) { */ case 22:
					tkn = 56;
					insertSemicolon = true;
					$s = 39; continue;
				/* } else if (_ref$1 === 43) { */ case 23:
					_r$5 = self.switch3(10, 22, 43, 36); /* */ $s = 44; case 44: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					tkn = _r$5;
					if (tkn === 36) {
						insertSemicolon = true;
					}
					$s = 39; continue;
				/* } else if (_ref$1 === 45) { */ case 24:
					_r$6 = self.switch3(11, 23, 45, 37); /* */ $s = 45; case 45: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					tkn = _r$6;
					if (tkn === 37) {
						insertSemicolon = true;
					}
					$s = 39; continue;
				/* } else if (_ref$1 === 42) { */ case 25:
					_r$7 = self.switch2(12, 24); /* */ $s = 46; case 46: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					tkn = _r$7;
					$s = 39; continue;
				/* } else if (_ref$1 === 47) { */ case 26:
					/* */ if (self.chr === 47) { $s = 47; continue; }
					/* */ if (self.chr === 42) { $s = 48; continue; }
					/* */ $s = 49; continue;
					/* if (self.chr === 47) { */ case 47:
						$r = self.skipSingleLineComment(); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* continue; */ $s = 1; continue;
						$s = 50; continue;
					/* } else if (self.chr === 42) { */ case 48:
						$r = self.skipMultiLineComment(); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* continue; */ $s = 1; continue;
						$s = 50; continue;
					/* } else { */ case 49:
						_r$8 = self.switch2(13, 25); /* */ $s = 53; case 53: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						tkn = _r$8;
						insertSemicolon = true;
					/* } */ case 50:
					$s = 39; continue;
				/* } else if (_ref$1 === 37) { */ case 27:
					_r$9 = self.switch2(14, 26); /* */ $s = 54; case 54: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					tkn = _r$9;
					$s = 39; continue;
				/* } else if (_ref$1 === 94) { */ case 28:
					_r$10 = self.switch2(17, 29); /* */ $s = 55; case 55: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					tkn = _r$10;
					$s = 39; continue;
				/* } else if (_ref$1 === 60) { */ case 29:
					_r$11 = self.switch4(40, 47, 60, 18, 30); /* */ $s = 56; case 56: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					tkn = _r$11;
					$s = 39; continue;
				/* } else if (_ref$1 === 62) { */ case 30:
					_r$12 = self.switch6(41, 48, 62, 19, 31, 62, 20, 32); /* */ $s = 57; case 57: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					tkn = _r$12;
					$s = 39; continue;
				/* } else if (_ref$1 === 61) { */ case 31:
					_r$13 = self.switch2(42, 38); /* */ $s = 58; case 58: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					tkn = _r$13;
					/* */ if ((tkn === 38) && (self.chr === 61)) { $s = 59; continue; }
					/* */ $s = 60; continue;
					/* if ((tkn === 38) && (self.chr === 61)) { */ case 59:
						$r = self.read(); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						tkn = 39;
					/* } */ case 60:
					$s = 39; continue;
				/* } else if (_ref$1 === 33) { */ case 32:
					_r$14 = self.switch2(43, 45); /* */ $s = 62; case 62: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					tkn = _r$14;
					/* */ if ((tkn === 45) && (self.chr === 61)) { $s = 63; continue; }
					/* */ $s = 64; continue;
					/* if ((tkn === 45) && (self.chr === 61)) { */ case 63:
						$r = self.read(); /* */ $s = 65; case 65: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						tkn = 46;
					/* } */ case 64:
					$s = 39; continue;
				/* } else if (_ref$1 === 38) { */ case 33:
					/* */ if (self.chr === 94) { $s = 66; continue; }
					/* */ $s = 67; continue;
					/* if (self.chr === 94) { */ case 66:
						$r = self.read(); /* */ $s = 69; case 69: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_r$15 = self.switch2(21, 33); /* */ $s = 70; case 70: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						tkn = _r$15;
						$s = 68; continue;
					/* } else { */ case 67:
						_r$16 = self.switch3(15, 27, 38, 34); /* */ $s = 71; case 71: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						tkn = _r$16;
					/* } */ case 68:
					$s = 39; continue;
				/* } else if (_ref$1 === 124) { */ case 34:
					_r$17 = self.switch3(16, 28, 124, 35); /* */ $s = 72; case 72: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					tkn = _r$17;
					$s = 39; continue;
				/* } else if (_ref$1 === 126) { */ case 35:
					tkn = 44;
					$s = 39; continue;
				/* } else if (_ref$1 === 63) { */ case 36:
					tkn = 59;
					$s = 39; continue;
				/* } else if (_ref$1 === 34 || _ref$1 === 39) { */ case 37:
					insertSemicolon = true;
					tkn = 5;
					err$1 = $ifaceNil;
					_r$18 = self.scanString(self.chrOffset - 1 >> 0); /* */ $s = 73; case 73: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					_tuple$5 = _r$18;
					literal = _tuple$5[0];
					err$1 = _tuple$5[1];
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						tkn = 1;
					}
					$s = 39; continue;
				/* } else { */ case 38:
					_r$19 = self.errorUnexpected(idx, chr); /* */ $s = 74; case 74: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					_r$19;
					tkn = 1;
				/* } */ case 39:
			/* } } */ case 7:
			self.insertSemicolon = insertSemicolon;
			return [tkn, literal, idx];
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.scan }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.chr = chr; $f.err = err; $f.err$1 = err$1; $f.idx = idx; $f.insertSemicolon = insertSemicolon; $f.literal = literal; $f.self = self; $f.strict = strict; $f.tkn = tkn; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.scan = function() { return this.$val.scan(); };
	_parser.ptr.prototype.switch2 = function(tkn0, tkn1) {
		var $ptr, self, tkn0, tkn1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; self = $f.self; tkn0 = $f.tkn0; tkn1 = $f.tkn1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (self.chr === 61) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.chr === 61) { */ case 1:
			$r = self.read(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return tkn1;
		/* } */ case 2:
		return tkn0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.switch2 }; } $f.$ptr = $ptr; $f.self = self; $f.tkn0 = tkn0; $f.tkn1 = tkn1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.switch2 = function(tkn0, tkn1) { return this.$val.switch2(tkn0, tkn1); };
	_parser.ptr.prototype.switch3 = function(tkn0, tkn1, chr2, tkn2) {
		var $ptr, chr2, self, tkn0, tkn1, tkn2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; chr2 = $f.chr2; self = $f.self; tkn0 = $f.tkn0; tkn1 = $f.tkn1; tkn2 = $f.tkn2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (self.chr === 61) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.chr === 61) { */ case 1:
			$r = self.read(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return tkn1;
		/* } */ case 2:
		/* */ if (self.chr === chr2) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (self.chr === chr2) { */ case 4:
			$r = self.read(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return tkn2;
		/* } */ case 5:
		return tkn0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.switch3 }; } $f.$ptr = $ptr; $f.chr2 = chr2; $f.self = self; $f.tkn0 = tkn0; $f.tkn1 = tkn1; $f.tkn2 = tkn2; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.switch3 = function(tkn0, tkn1, chr2, tkn2) { return this.$val.switch3(tkn0, tkn1, chr2, tkn2); };
	_parser.ptr.prototype.switch4 = function(tkn0, tkn1, chr2, tkn2, tkn3) {
		var $ptr, chr2, self, tkn0, tkn1, tkn2, tkn3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; chr2 = $f.chr2; self = $f.self; tkn0 = $f.tkn0; tkn1 = $f.tkn1; tkn2 = $f.tkn2; tkn3 = $f.tkn3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (self.chr === 61) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.chr === 61) { */ case 1:
			$r = self.read(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return tkn1;
		/* } */ case 2:
		/* */ if (self.chr === chr2) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (self.chr === chr2) { */ case 4:
			$r = self.read(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (self.chr === 61) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (self.chr === 61) { */ case 7:
				$r = self.read(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return tkn3;
			/* } */ case 8:
			return tkn2;
		/* } */ case 5:
		return tkn0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.switch4 }; } $f.$ptr = $ptr; $f.chr2 = chr2; $f.self = self; $f.tkn0 = tkn0; $f.tkn1 = tkn1; $f.tkn2 = tkn2; $f.tkn3 = tkn3; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.switch4 = function(tkn0, tkn1, chr2, tkn2, tkn3) { return this.$val.switch4(tkn0, tkn1, chr2, tkn2, tkn3); };
	_parser.ptr.prototype.switch6 = function(tkn0, tkn1, chr2, tkn2, tkn3, chr3, tkn4, tkn5) {
		var $ptr, chr2, chr3, self, tkn0, tkn1, tkn2, tkn3, tkn4, tkn5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; chr2 = $f.chr2; chr3 = $f.chr3; self = $f.self; tkn0 = $f.tkn0; tkn1 = $f.tkn1; tkn2 = $f.tkn2; tkn3 = $f.tkn3; tkn4 = $f.tkn4; tkn5 = $f.tkn5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (self.chr === 61) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.chr === 61) { */ case 1:
			$r = self.read(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return tkn1;
		/* } */ case 2:
		/* */ if (self.chr === chr2) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (self.chr === chr2) { */ case 4:
			$r = self.read(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (self.chr === 61) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (self.chr === 61) { */ case 7:
				$r = self.read(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return tkn3;
			/* } */ case 8:
			/* */ if (self.chr === chr3) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (self.chr === chr3) { */ case 10:
				$r = self.read(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (self.chr === 61) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (self.chr === 61) { */ case 13:
					$r = self.read(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return tkn5;
				/* } */ case 14:
				return tkn4;
			/* } */ case 11:
			return tkn2;
		/* } */ case 5:
		return tkn0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.switch6 }; } $f.$ptr = $ptr; $f.chr2 = chr2; $f.chr3 = chr3; $f.self = self; $f.tkn0 = tkn0; $f.tkn1 = tkn1; $f.tkn2 = tkn2; $f.tkn3 = tkn3; $f.tkn4 = tkn4; $f.tkn5 = tkn5; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.switch6 = function(tkn0, tkn1, chr2, tkn2, tkn3, chr3, tkn4, tkn5) { return this.$val.switch6(tkn0, tkn1, chr2, tkn2, tkn3, chr3, tkn4, tkn5); };
	_parser.ptr.prototype._peek = function() {
		var $ptr, self;
		self = this;
		if ((self.offset + 1 >> 0) < self.length) {
			return (self.str.charCodeAt((self.offset + 1 >> 0)) >> 0);
		}
		return -1;
	};
	_parser.prototype._peek = function() { return this.$val._peek(); };
	_parser.ptr.prototype.read = function() {
		var $ptr, _r$2, _tmp, _tmp$1, _tuple$1, chr, self, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple$1 = $f._tuple$1; chr = $f.chr; self = $f.self; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (self.offset < self.length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.offset < self.length) { */ case 1:
			self.chrOffset = self.offset;
			_tmp = (self.str.charCodeAt(self.offset) >> 0);
			_tmp$1 = 1;
			chr = _tmp;
			width = _tmp$1;
			/* */ if (chr >= 128) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (chr >= 128) { */ case 4:
				_tuple$1 = utf8.DecodeRuneInString(self.str.substring(self.offset));
				chr = _tuple$1[0];
				width = _tuple$1[1];
				/* */ if ((chr === 65533) && (width === 1)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((chr === 65533) && (width === 1)) { */ case 6:
					_r$2 = self.error(new $Int(self.chrOffset), "Invalid UTF-8 character", new sliceType([])); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
				/* } */ case 7:
			/* } */ case 5:
			self.offset = self.offset + (width) >> 0;
			self.chr = chr;
			$s = 3; continue;
		/* } else { */ case 2:
			self.chrOffset = self.length;
			self.chr = -1;
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.read }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple$1 = _tuple$1; $f.chr = chr; $f.self = self; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.read = function() { return this.$val.read(); };
	_RegExp_parser.ptr.prototype.read = function() {
		var $ptr, _r$2, _tmp, _tmp$1, _tuple$1, chr, self, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple$1 = $f._tuple$1; chr = $f.chr; self = $f.self; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (self.offset < self.length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.offset < self.length) { */ case 1:
			self.chrOffset = self.offset;
			_tmp = (self.str.charCodeAt(self.offset) >> 0);
			_tmp$1 = 1;
			chr = _tmp;
			width = _tmp$1;
			/* */ if (chr >= 128) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (chr >= 128) { */ case 4:
				_tuple$1 = utf8.DecodeRuneInString(self.str.substring(self.offset));
				chr = _tuple$1[0];
				width = _tuple$1[1];
				/* */ if ((chr === 65533) && (width === 1)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((chr === 65533) && (width === 1)) { */ case 6:
					_r$2 = self.error(self.chrOffset, "Invalid UTF-8 character", new sliceType([])); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
				/* } */ case 7:
			/* } */ case 5:
			self.offset = self.offset + (width) >> 0;
			self.chr = chr;
			$s = 3; continue;
		/* } else { */ case 2:
			self.chrOffset = self.length;
			self.chr = -1;
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _RegExp_parser.ptr.prototype.read }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple$1 = _tuple$1; $f.chr = chr; $f.self = self; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	_RegExp_parser.prototype.read = function() { return this.$val.read(); };
	_parser.ptr.prototype.skipSingleLineComment = function() {
		var $ptr, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* while (true) { */ case 1:
			/* if (!(!((self.chr === -1)))) { break; } */ if(!(!((self.chr === -1)))) { $s = 2; continue; }
			$r = self.read(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (isLineTerminator(self.chr)) {
				return;
			}
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.skipSingleLineComment }; } $f.$ptr = $ptr; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.skipSingleLineComment = function() { return this.$val.skipSingleLineComment(); };
	_parser.ptr.prototype.skipMultiLineComment = function() {
		var $ptr, _r$2, chr, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; chr = $f.chr; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		$r = self.read(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 2:
			/* if (!(self.chr >= 0)) { break; } */ if(!(self.chr >= 0)) { $s = 3; continue; }
			chr = self.chr;
			$r = self.read(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if ((chr === 42) && (self.chr === 47)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ((chr === 42) && (self.chr === 47)) { */ case 5:
				$r = self.read(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 6:
		/* } */ $s = 2; continue; case 3:
		_r$2 = self.errorUnexpected(0, self.chr); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.skipMultiLineComment }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.chr = chr; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.skipMultiLineComment = function() { return this.$val.skipMultiLineComment(); };
	_parser.ptr.prototype.skipWhiteSpace = function() {
		var $ptr, _ref, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* while (true) { */ case 1:
			_ref = self.chr;
			/* */ if (_ref === 32 || _ref === 9 || _ref === 12 || _ref === 11 || _ref === 160 || _ref === 65279) { $s = 3; continue; }
			/* */ if (_ref === 13) { $s = 4; continue; }
			/* */ if (_ref === 8232 || _ref === 8233 || _ref === 10) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_ref === 32 || _ref === 9 || _ref === 12 || _ref === 11 || _ref === 160 || _ref === 65279) { */ case 3:
				$r = self.read(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* continue; */ $s = 1; continue;
				$s = 6; continue;
			/* } else if (_ref === 13) { */ case 4:
				/* */ if (self._peek() === 10) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (self._peek() === 10) { */ case 8:
					$r = self.read(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 9:
				if (self.insertSemicolon) {
					return;
				}
				$r = self.read(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* continue; */ $s = 1; continue;
				$s = 6; continue;
			/* } else if (_ref === 8232 || _ref === 8233 || _ref === 10) { */ case 5:
				if (self.insertSemicolon) {
					return;
				}
				$r = self.read(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* continue; */ $s = 1; continue;
			/* } */ case 6:
			/* */ if (self.chr >= 128) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (self.chr >= 128) { */ case 13:
				/* */ if (unicode.IsSpace(self.chr)) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (unicode.IsSpace(self.chr)) { */ case 15:
					$r = self.read(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* continue; */ $s = 1; continue;
				/* } */ case 16:
			/* } */ case 14:
			/* break; */ $s = 2; continue;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.skipWhiteSpace }; } $f.$ptr = $ptr; $f._ref = _ref; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.skipWhiteSpace = function() { return this.$val.skipWhiteSpace(); };
	_parser.ptr.prototype.scanMantissa = function(base) {
		var $ptr, base, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; base = $f.base; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* while (true) { */ case 1:
			/* if (!(digitValue(self.chr) < base)) { break; } */ if(!(digitValue(self.chr) < base)) { $s = 2; continue; }
			$r = self.read(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.scanMantissa }; } $f.$ptr = $ptr; $f.base = base; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.scanMantissa = function(base) { return this.$val.scanMantissa(base); };
	_parser.ptr.prototype.scanEscape = function(quote) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, base, digit, length, quote, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; base = $f.base; digit = $f.digit; length = $f.length; quote = $f.quote; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_tmp = 0;
		_tmp$1 = 0;
		length = _tmp;
		base = _tmp$1;
		_ref = self.chr;
		/* */ if (_ref === 97 || _ref === 98 || _ref === 102 || _ref === 110 || _ref === 114 || _ref === 116 || _ref === 118 || _ref === 92 || _ref === 34 || _ref === 39 || _ref === 48) { $s = 1; continue; }
		/* */ if (_ref === 13 || _ref === 10 || _ref === 8232 || _ref === 8233) { $s = 2; continue; }
		/* */ if (_ref === 120) { $s = 3; continue; }
		/* */ if (_ref === 117) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_ref === 97 || _ref === 98 || _ref === 102 || _ref === 110 || _ref === 114 || _ref === 116 || _ref === 118 || _ref === 92 || _ref === 34 || _ref === 39 || _ref === 48) { */ case 1:
			$r = self.read(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } else if (_ref === 13 || _ref === 10 || _ref === 8232 || _ref === 8233) { */ case 2:
			$r = self.scanNewline(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } else if (_ref === 120) { */ case 3:
			$r = self.read(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tmp$2 = 2;
			_tmp$3 = 16;
			length = _tmp$2;
			base = _tmp$3;
			$s = 6; continue;
		/* } else if (_ref === 117) { */ case 4:
			$r = self.read(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tmp$4 = 4;
			_tmp$5 = 16;
			length = _tmp$4;
			base = _tmp$5;
			$s = 6; continue;
		/* } else { */ case 5:
			$r = self.read(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 6:
		value = 0;
		/* while (true) { */ case 12:
			/* if (!(length > 0 && !((self.chr === quote)) && self.chr >= 0)) { break; } */ if(!(length > 0 && !((self.chr === quote)) && self.chr >= 0)) { $s = 13; continue; }
			digit = (digitValue(self.chr) >>> 0);
			if (digit >= base) {
				/* break; */ $s = 13; continue;
			}
			value = ($imul(value, base) >>> 0) + digit >>> 0;
			$r = self.read(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			length = length - (1) >>> 0;
		/* } */ $s = 12; continue; case 13:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.scanEscape }; } $f.$ptr = $ptr; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.base = base; $f.digit = digit; $f.length = length; $f.quote = quote; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.scanEscape = function(quote) { return this.$val.scanEscape(quote); };
	_parser.ptr.prototype.scanString = function(offset) {
		var $ptr, _r$2, chr, err, offset, quote, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; chr = $f.chr; err = $f.err; offset = $f.offset; quote = $f.quote; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		quote = (self.str.charCodeAt(offset) >> 0);
		/* while (true) { */ case 1:
			/* if (!(!((self.chr === quote)))) { break; } */ if(!(!((self.chr === quote)))) { $s = 2; continue; }
			chr = self.chr;
			/* */ if ((chr === 10) || (chr === 13) || (chr === 8232) || (chr === 8233) || chr < 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((chr === 10) || (chr === 13) || (chr === 8232) || (chr === 8233) || chr < 0) { */ case 3:
				/* goto newline */ $s = 5; continue;
			/* } */ case 4:
			$r = self.read(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (chr === 92) { $s = 7; continue; }
			/* */ if ((chr === 91) && (quote === 47)) { $s = 8; continue; }
			/* */ if ((chr === 93) && (quote === -1)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (chr === 92) { */ case 7:
				/* */ if (quote === 47) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (quote === 47) { */ case 11:
					/* */ if ((self.chr === 10) || (self.chr === 13) || (self.chr === 8232) || (self.chr === 8233) || self.chr < 0) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if ((self.chr === 10) || (self.chr === 13) || (self.chr === 8232) || (self.chr === 8233) || self.chr < 0) { */ case 14:
						/* goto newline */ $s = 5; continue;
					/* } */ case 15:
					$r = self.read(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 13; continue;
				/* } else { */ case 12:
					$r = self.scanEscape(quote); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 13:
				$s = 10; continue;
			/* } else if ((chr === 91) && (quote === 47)) { */ case 8:
				quote = -1;
				$s = 10; continue;
			/* } else if ((chr === 93) && (quote === -1)) { */ case 9:
				quote = 47;
			/* } */ case 10:
		/* } */ $s = 1; continue; case 2:
		$r = self.read(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return [self.str.substring(offset, self.chrOffset), $ifaceNil];
		/* newline: */ case 5:
		$r = self.scanNewline(); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		err = "String not terminated";
		/* */ if (quote === 47) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (quote === 47) { */ case 20:
			err = "Invalid regular expression: missing /";
			_r$2 = self.error(new file.Idx(self.idxOf(offset)), err, new sliceType([])); /* */ $s = 22; case 22: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 21:
		return ["", errors.New(err)];
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.scanString }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.chr = chr; $f.err = err; $f.offset = offset; $f.quote = quote; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.scanString = function(offset) { return this.$val.scanString(offset); };
	_parser.ptr.prototype.scanNewline = function() {
		var $ptr, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (self.chr === 13) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.chr === 13) { */ case 1:
			$r = self.read(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (!((self.chr === 10))) {
				return;
			}
		/* } */ case 2:
		$r = self.read(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.scanNewline }; } $f.$ptr = $ptr; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.scanNewline = function() { return this.$val.scanNewline(); };
	hex2decimal = function(chr) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, chr, chr$1, ok, value;
		value = 0;
		ok = false;
		chr$1 = (chr >> 0);
		if (48 <= chr$1 && chr$1 <= 57) {
			_tmp = chr$1 - 48 >> 0;
			_tmp$1 = true;
			value = _tmp;
			ok = _tmp$1;
			return [value, ok];
		} else if (97 <= chr$1 && chr$1 <= 102) {
			_tmp$2 = (chr$1 - 97 >> 0) + 10 >> 0;
			_tmp$3 = true;
			value = _tmp$2;
			ok = _tmp$3;
			return [value, ok];
		} else if (65 <= chr$1 && chr$1 <= 70) {
			_tmp$4 = (chr$1 - 65 >> 0) + 10 >> 0;
			_tmp$5 = true;
			value = _tmp$4;
			ok = _tmp$5;
			return [value, ok];
		}
		return [value, ok];
	};
	parseNumberLiteral = function(literal) {
		var $ptr, _i, _ref, _rune, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple$1, _tuple$2, chr, digit, err, literal, parseIntErr, value, value$1, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		value = $ifaceNil;
		err = $ifaceNil;
		_tuple$1 = strconv.ParseInt(literal, 0, 64);
		value = _tuple$1[0];
		err = _tuple$1[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return [value, err];
		}
		parseIntErr = err;
		_tuple$2 = strconv.ParseFloat(literal, 64);
		value = new $Float64(_tuple$2[0]);
		err = _tuple$2[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return [value, err];
		} else if ($interfaceIsEqual($assertType(err, ptrType$7).Err, strconv.ErrRange)) {
			_tmp = value;
			_tmp$1 = $ifaceNil;
			value = _tmp;
			err = _tmp$1;
			return [value, err];
		}
		err = parseIntErr;
		/* */ if ($interfaceIsEqual($assertType(err, ptrType$7).Err, strconv.ErrRange)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual($assertType(err, ptrType$7).Err, strconv.ErrRange)) { */ case 1:
			/* */ if (literal.length > 2 && (literal.charCodeAt(0) === 48) && ((literal.charCodeAt(1) === 88) || (literal.charCodeAt(1) === 120))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (literal.length > 2 && (literal.charCodeAt(0) === 48) && ((literal.charCodeAt(1) === 88) || (literal.charCodeAt(1) === 120))) { */ case 3:
				value$1 = 0;
				literal = literal.substring(2);
				_ref = literal;
				_i = 0;
				/* while (true) { */ case 5:
					/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 6; continue; }
					_rune = $decodeRune(_ref, _i);
					chr = _rune[0];
					digit = digitValue(chr);
					/* */ if (digit >= 16) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (digit >= 16) { */ case 7:
						/* goto error */ $s = 9; continue;
					/* } */ case 8:
					value$1 = value$1 * 16 + digit;
					_i += _rune[1];
				/* } */ $s = 5; continue; case 6:
				_tmp$2 = new $Float64(value$1);
				_tmp$3 = $ifaceNil;
				value = _tmp$2;
				err = _tmp$3;
				return [value, err];
			/* } */ case 4:
		/* } */ case 2:
		/* error: */ case 9:
		_tmp$4 = $ifaceNil;
		_tmp$5 = errors.New("Illegal numeric literal");
		value = _tmp$4;
		err = _tmp$5;
		return [value, err];
		/* */ $s = -1; case -1: } return; }
	};
	parseStringLiteral = function(literal) {
		var $ptr, _q, _r$2, _r$3, _ref, _ref$1, _tuple$1, _tuple$2, _tuple$3, buffer, chr, chr$1, chr$2, chr$3, decimal, decimal$1, j, j$1, literal, ok, size, size$1, size$2, str, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; buffer = $f.buffer; chr = $f.chr; chr$1 = $f.chr$1; chr$2 = $f.chr$2; chr$3 = $f.chr$3; decimal = $f.decimal; decimal$1 = $f.decimal$1; j = $f.j; j$1 = $f.j$1; literal = $f.literal; ok = $f.ok; size = $f.size; size$1 = $f.size$1; size$2 = $f.size$2; str = $f.str; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (literal === "") {
			return ["", $ifaceNil];
		}
		if (!strings.ContainsRune(literal, 92)) {
			return [literal, $ifaceNil];
		}
		str = literal;
		buffer = bytes.NewBuffer($makeSlice(sliceType$5, 0, (_q = ($imul(3, literal.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))));
		/* while (true) { */ case 1:
			/* if (!(str.length > 0)) { break; } */ if(!(str.length > 0)) { $s = 2; continue; }
			chr = str.charCodeAt(0);
			/* */ if (chr >= 128) { $s = 3; continue; }
			/* */ if (!((chr === 92))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (chr >= 128) { */ case 3:
				_tuple$1 = utf8.DecodeRuneInString(str);
				chr$1 = _tuple$1[0];
				size = _tuple$1[1];
				buffer.WriteRune(chr$1);
				str = str.substring(size);
				/* continue; */ $s = 1; continue;
				$s = 5; continue;
			/* } else if (!((chr === 92))) { */ case 4:
				buffer.WriteByte(chr);
				str = str.substring(1);
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			if (str.length <= 1) {
				$panic(new $String("len(str) <= 1"));
			}
			chr$2 = str.charCodeAt(1);
			value = 0;
			/* */ if (chr$2 >= 128) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (chr$2 >= 128) { */ case 6:
				str = str.substring(1);
				size$1 = 0;
				_tuple$2 = utf8.DecodeRuneInString(str);
				value = _tuple$2[0];
				size$1 = _tuple$2[1];
				str = str.substring(size$1);
				$s = 8; continue;
			/* } else { */ case 7:
				str = str.substring(2);
				_ref = chr$2;
				/* */ if (_ref === 98) { $s = 9; continue; }
				/* */ if (_ref === 102) { $s = 10; continue; }
				/* */ if (_ref === 110) { $s = 11; continue; }
				/* */ if (_ref === 114) { $s = 12; continue; }
				/* */ if (_ref === 116) { $s = 13; continue; }
				/* */ if (_ref === 118) { $s = 14; continue; }
				/* */ if (_ref === 120 || _ref === 117) { $s = 15; continue; }
				/* */ if (_ref === 48) { $s = 16; continue; }
				/* */ if (_ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) { $s = 17; continue; }
				/* */ if (_ref === 92) { $s = 18; continue; }
				/* */ if (_ref === 39 || _ref === 34) { $s = 19; continue; }
				/* */ if (_ref === 13) { $s = 20; continue; }
				/* */ if (_ref === 10) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* switch (0) { default: if (_ref === 98) { */ case 9:
					value = 8;
					$s = 23; continue;
				/* } else if (_ref === 102) { */ case 10:
					value = 12;
					$s = 23; continue;
				/* } else if (_ref === 110) { */ case 11:
					value = 10;
					$s = 23; continue;
				/* } else if (_ref === 114) { */ case 12:
					value = 13;
					$s = 23; continue;
				/* } else if (_ref === 116) { */ case 13:
					value = 9;
					$s = 23; continue;
				/* } else if (_ref === 118) { */ case 14:
					value = 11;
					$s = 23; continue;
				/* } else if (_ref === 120 || _ref === 117) { */ case 15:
					size$2 = 0;
					_ref$1 = chr$2;
					if (_ref$1 === 120) {
						size$2 = 2;
					} else if (_ref$1 === 117) {
						size$2 = 4;
					}
					/* */ if (str.length < size$2) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (str.length < size$2) { */ case 24:
						_r$2 = fmt.Errorf("invalid escape: \\%s: len(%q) != %d", new sliceType([new $String($encodeRune(chr$2)), new $String(str), new $Int(size$2)])); /* */ $s = 26; case 26: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						/* */ $s = 27; case 27:
						return ["", _r$2];
					/* } */ case 25:
					j = 0;
					/* while (true) { */ case 28:
						/* if (!(j < size$2)) { break; } */ if(!(j < size$2)) { $s = 29; continue; }
						_tuple$3 = hex2decimal(str.charCodeAt(j));
						decimal = _tuple$3[0];
						ok = _tuple$3[1];
						/* */ if (!ok) { $s = 30; continue; }
						/* */ $s = 31; continue;
						/* if (!ok) { */ case 30:
							_r$3 = fmt.Errorf("invalid escape: \\%s: %q", new sliceType([new $String($encodeRune(chr$2)), new $String(str.substring(0, size$2))])); /* */ $s = 32; case 32: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
							/* */ $s = 33; case 33:
							return ["", _r$3];
						/* } */ case 31:
						value = (value << 4 >> 0) | decimal;
						j = j + (1) >> 0;
					/* } */ $s = 28; continue; case 29:
					str = str.substring(size$2);
					if (chr$2 === 120) {
						/* break; */ $s = 23; continue;
					}
					if (value > 1114111) {
						$panic(new $String("value > utf8.MaxRune"));
					}
					$s = 23; continue;
				/* } else if (_ref === 48) { */ case 16:
					if ((str.length === 0) || 48 > str.charCodeAt(0) || str.charCodeAt(0) > 55) {
						value = 0;
						/* break; */ $s = 23; continue;
					}
					value = (chr$2 >> 0) - 48 >> 0;
					j$1 = 0;
					while (true) {
						if (!(j$1 < 2)) { break; }
						if (str.length < (j$1 + 1 >> 0)) {
							break;
						}
						chr$3 = str.charCodeAt(j$1);
						if (48 > chr$3 || chr$3 > 55) {
							break;
						}
						decimal$1 = (str.charCodeAt(j$1) >> 0) - 48 >> 0;
						value = ((value << 3 >> 0)) | decimal$1;
						j$1 = j$1 + (1) >> 0;
					}
					str = str.substring(j$1);
					$s = 23; continue;
				/* } else if (_ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) { */ case 17:
					value = (chr$2 >> 0) - 48 >> 0;
					j$1 = 0;
					while (true) {
						if (!(j$1 < 2)) { break; }
						if (str.length < (j$1 + 1 >> 0)) {
							break;
						}
						chr$3 = str.charCodeAt(j$1);
						if (48 > chr$3 || chr$3 > 55) {
							break;
						}
						decimal$1 = (str.charCodeAt(j$1) >> 0) - 48 >> 0;
						value = ((value << 3 >> 0)) | decimal$1;
						j$1 = j$1 + (1) >> 0;
					}
					str = str.substring(j$1);
					$s = 23; continue;
				/* } else if (_ref === 92) { */ case 18:
					value = 92;
					$s = 23; continue;
				/* } else if (_ref === 39 || _ref === 34) { */ case 19:
					value = (chr$2 >> 0);
					$s = 23; continue;
				/* } else if (_ref === 13) { */ case 20:
					if (str.length > 0) {
						if (str.charCodeAt(0) === 10) {
							str = str.substring(1);
						}
					}
					/* continue; */ $s = 1; continue;
					$s = 23; continue;
				/* } else if (_ref === 10) { */ case 21:
					/* continue; */ $s = 1; continue;
					$s = 23; continue;
				/* } else { */ case 22:
					value = (chr$2 >> 0);
				/* } } */ case 23:
			/* } */ case 8:
			buffer.WriteRune(value);
		/* } */ $s = 1; continue; case 2:
		return [buffer.String(), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseStringLiteral }; } $f.$ptr = $ptr; $f._q = _q; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.buffer = buffer; $f.chr = chr; $f.chr$1 = chr$1; $f.chr$2 = chr$2; $f.chr$3 = chr$3; $f.decimal = decimal; $f.decimal$1 = decimal$1; $f.j = j; $f.j$1 = j$1; $f.literal = literal; $f.ok = ok; $f.size = size; $f.size$1 = size$1; $f.size$2 = size$2; $f.str = str; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.ptr.prototype.scanNumericLiteral = function(decimalPoint) {
		var $ptr, _r$2, decimalPoint, offset, offset$1, self, tkn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; decimalPoint = $f.decimalPoint; offset = $f.offset; offset$1 = $f.offset$1; self = $f.self; tkn = $f.tkn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		offset = self.chrOffset;
		tkn = 8;
		/* */ if (decimalPoint) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (decimalPoint) { */ case 1:
			offset = offset - (1) >> 0;
			$r = self.scanMantissa(10); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* goto exponent */ $s = 4; continue;
		/* } */ case 2:
		/* */ if (self.chr === 48) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (self.chr === 48) { */ case 5:
			offset$1 = self.chrOffset;
			$r = self.read(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if ((self.chr === 120) || (self.chr === 88)) { $s = 8; continue; }
			/* */ if (self.chr === 46) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if ((self.chr === 120) || (self.chr === 88)) { */ case 8:
				$r = self.read(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (isDigit(self.chr, 16)) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (isDigit(self.chr, 16)) { */ case 13:
					$r = self.read(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 15; continue;
				/* } else { */ case 14:
					return [1, self.str.substring(offset$1, self.chrOffset)];
				/* } */ case 15:
				$r = self.scanMantissa(16); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if ((self.chrOffset - offset$1 >> 0) <= 2) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if ((self.chrOffset - offset$1 >> 0) <= 2) { */ case 18:
					_r$2 = self.error(new $Int(0), "Illegal hexadecimal number", new sliceType([])); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
				/* } */ case 19:
				/* goto hexadecimal */ $s = 21; continue;
				$s = 11; continue;
			/* } else if (self.chr === 46) { */ case 9:
				/* goto float */ $s = 22; continue;
				$s = 11; continue;
			/* } else { */ case 10:
				/* */ if ((self.chr === 101) || (self.chr === 69)) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if ((self.chr === 101) || (self.chr === 69)) { */ case 23:
					/* goto exponent */ $s = 4; continue;
				/* } */ case 24:
				$r = self.scanMantissa(8); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if ((self.chr === 56) || (self.chr === 57)) {
					return [1, self.str.substring(offset$1, self.chrOffset)];
				}
				/* goto octal */ $s = 26; continue;
			/* } */ case 11:
		/* } */ case 6:
		$r = self.scanMantissa(10); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* float: */ case 22:
		/* */ if (self.chr === 46) { $s = 28; continue; }
		/* */ $s = 29; continue;
		/* if (self.chr === 46) { */ case 28:
			$r = self.read(); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = self.scanMantissa(10); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 29:
		/* exponent: */ case 4:
		/* */ if ((self.chr === 101) || (self.chr === 69)) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if ((self.chr === 101) || (self.chr === 69)) { */ case 32:
			$r = self.read(); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if ((self.chr === 45) || (self.chr === 43)) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if ((self.chr === 45) || (self.chr === 43)) { */ case 35:
				$r = self.read(); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 36:
			/* */ if (isDecimalDigit(self.chr)) { $s = 38; continue; }
			/* */ $s = 39; continue;
			/* if (isDecimalDigit(self.chr)) { */ case 38:
				$r = self.read(); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = self.scanMantissa(10); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 40; continue;
			/* } else { */ case 39:
				return [1, self.str.substring(offset, self.chrOffset)];
			/* } */ case 40:
		/* } */ case 33:
		/* hexadecimal: */ case 21:
		/* octal: */ case 26:
		if (isIdentifierStart(self.chr) || isDecimalDigit(self.chr)) {
			return [1, self.str.substring(offset, self.chrOffset)];
		}
		return [tkn, self.str.substring(offset, self.chrOffset)];
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.scanNumericLiteral }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.decimalPoint = decimalPoint; $f.offset = offset; $f.offset$1 = offset$1; $f.self = self; $f.tkn = tkn; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.scanNumericLiteral = function(decimalPoint) { return this.$val.scanNumericLiteral(decimalPoint); };
	_newParser = function(filename, src, base) {
		var $ptr, base, filename, src;
		return new _parser.ptr(src, src.length, base, 32, 0, 0, 0, 0, "", ptrType$8.nil, false, false, ErrorList.nil, new structType.ptr(0, 0), 0, file.NewFile(filename, src, base));
	};
	ReadSource = function(filename, src) {
		var $ptr, _r$2, _r$3, _ref, _tuple$1, bfr, err, filename, src, src$1, src$2, src$3, src$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple$1 = $f._tuple$1; bfr = $f.bfr; err = $f.err; filename = $f.filename; src = $f.src; src$1 = $f.src$1; src$2 = $f.src$2; src$3 = $f.src$3; src$4 = $f.src$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bfr = [bfr];
		/* */ if (!($interfaceIsEqual(src, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(src, $ifaceNil))) { */ case 1:
			_ref = src;
			/* */ if ($assertType(_ref, $String, true)[1]) { $s = 3; continue; }
			/* */ if ($assertType(_ref, sliceType$5, true)[1]) { $s = 4; continue; }
			/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 5; continue; }
			/* */ if ($assertType(_ref, io.Reader, true)[1]) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ($assertType(_ref, $String, true)[1]) { */ case 3:
				src$1 = _ref.$val;
				return [new sliceType$5($stringToBytes(src$1)), $ifaceNil];
			/* } else if ($assertType(_ref, sliceType$5, true)[1]) { */ case 4:
				src$2 = _ref.$val;
				return [src$2, $ifaceNil];
			/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 5:
				src$3 = _ref.$val;
				if (!(src$3 === ptrType$10.nil)) {
					return [src$3.Bytes(), $ifaceNil];
				}
				$s = 7; continue;
			/* } else if ($assertType(_ref, io.Reader, true)[1]) { */ case 6:
				src$4 = _ref;
				bfr[0] = new bytes.Buffer.ptr(sliceType$5.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
				_r$2 = io.Copy(bfr[0], src$4); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				err = _tuple$1[1];
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 9:
					return [sliceType$5.nil, err];
				/* } */ case 10:
				return [bfr[0].Bytes(), $ifaceNil];
			/* } */ case 7:
			return [sliceType$5.nil, errors.New("invalid source")];
		/* } */ case 2:
		_r$3 = ioutil.ReadFile(filename); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 12; case 12:
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadSource }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple$1 = _tuple$1; $f.bfr = bfr; $f.err = err; $f.filename = filename; $f.src = src; $f.src$1 = src$1; $f.src$2 = src$2; $f.src$3 = src$3; $f.src$4 = src$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadSource = ReadSource;
	ParseFile = function(fileSet, filename, src, mode) {
		var $ptr, _r$2, _r$3, _tuple$1, base, err, fileSet, filename, mode, parser, src, str, str$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple$1 = $f._tuple$1; base = $f.base; err = $f.err; fileSet = $f.fileSet; filename = $f.filename; mode = $f.mode; parser = $f.parser; src = $f.src; str = $f.str; str$1 = $f.str$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = ReadSource(filename, src); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		str = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$11.nil, err];
		}
		str$1 = $bytesToString(str);
		base = 1;
		if (!(fileSet === ptrType$12.nil)) {
			base = fileSet.AddFile(filename, str$1);
		}
		parser = _newParser(filename, str$1, base);
		parser.mode = mode;
		_r$3 = parser.parse(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$3;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ParseFile }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple$1 = _tuple$1; $f.base = base; $f.err = err; $f.fileSet = fileSet; $f.filename = filename; $f.mode = mode; $f.parser = parser; $f.src = src; $f.str = str; $f.str$1 = str$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ParseFile = ParseFile;
	ParseFunction = function(parameterList, body) {
		var $ptr, _r$2, _tuple$1, body, err, parameterList, parser, program, src, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; body = $f.body; err = $f.err; parameterList = $f.parameterList; parser = $f.parser; program = $f.program; src = $f.src; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		src = "(function(" + parameterList + ") {\n" + body + "\n})";
		parser = _newParser("", src, 1);
		_r$2 = parser.parse(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		program = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$13.nil, err];
		}
		return [$assertType($assertType((x = program.Body, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), ptrType$14).Expression, ptrType$13), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParseFunction }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.body = body; $f.err = err; $f.parameterList = parameterList; $f.parser = parser; $f.program = program; $f.src = src; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ParseFunction = ParseFunction;
	_parser.ptr.prototype.slice = function(idx0, idx1) {
		var $ptr, from, idx0, idx1, self, to;
		self = this;
		from = (idx0 >> 0) - self.base >> 0;
		to = (idx1 >> 0) - self.base >> 0;
		if (from >= 0 && to <= self.str.length) {
			return self.str.substring(from, to);
		}
		return "";
	};
	_parser.prototype.slice = function(idx0, idx1) { return this.$val.slice(idx0, idx1); };
	_parser.ptr.prototype.parse = function() {
		var $ptr, _r$2, program, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; program = $f.program; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		$r = self.next(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$2 = self.parseProgram(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		program = _r$2;
		return [program, self.errors.Err()];
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parse }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.program = program; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parse = function() { return this.$val.parse(); };
	_parser.ptr.prototype.next = function() {
		var $ptr, _r$2, _tuple$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.scan(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		self.token = _tuple$1[0];
		self.literal = _tuple$1[1];
		self.idx = _tuple$1[2];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.next }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.next = function() { return this.$val.next(); };
	_parser.ptr.prototype.optionalSemicolon = function() {
		var $ptr, _r$2, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (self.token === 57) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.token === 57) { */ case 1:
			$r = self.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 2:
		if (self.implicitSemicolon) {
			self.implicitSemicolon = false;
			return;
		}
		/* */ if (!((self.token === 2)) && !((self.token === 56))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((self.token === 2)) && !((self.token === 56))) { */ case 4:
			_r$2 = self.expect(57); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 5:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.optionalSemicolon }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.optionalSemicolon = function() { return this.$val.optionalSemicolon(); };
	_parser.ptr.prototype.semicolon = function() {
		var $ptr, _r$2, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (!((self.token === 54)) && !((self.token === 56))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((self.token === 54)) && !((self.token === 56))) { */ case 1:
			if (self.implicitSemicolon) {
				self.implicitSemicolon = false;
				return;
			}
			_r$2 = self.expect(57); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.semicolon }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.semicolon = function() { return this.$val.semicolon(); };
	_parser.ptr.prototype.idxOf = function(offset) {
		var $ptr, offset, self;
		self = this;
		return ((self.base + offset >> 0) >> 0);
	};
	_parser.prototype.idxOf = function(offset) { return this.$val.idxOf(offset); };
	_parser.ptr.prototype.expect = function(value) {
		var $ptr, _r$2, idx, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; idx = $f.idx; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		idx = self.idx;
		/* */ if (!((self.token === value))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((self.token === value))) { */ case 1:
			_r$2 = self.errorUnexpectedToken(self.token); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 2:
		$r = self.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return idx;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.expect }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.idx = idx; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.expect = function(value) { return this.$val.expect(value); };
	lineCount = function(str) {
		var $ptr, _i, _ref, _ref$1, _rune, _tmp, _tmp$1, chr, index, last, line, pair, str;
		_tmp = 0;
		_tmp$1 = -1;
		line = _tmp;
		last = _tmp$1;
		pair = false;
		_ref = str;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			index = _i;
			chr = _rune[0];
			_ref$1 = chr;
			if (_ref$1 === 13) {
				line = line + (1) >> 0;
				last = index;
				pair = true;
				_i += _rune[1];
				continue;
			} else if (_ref$1 === 10) {
				if (!pair) {
					line = line + (1) >> 0;
				}
				last = index;
			} else if (_ref$1 === 8232 || _ref$1 === 8233) {
				line = line + (1) >> 0;
				last = index + 2 >> 0;
			}
			pair = false;
			_i += _rune[1];
		}
		return [line, last];
	};
	_parser.ptr.prototype.position = function(idx) {
		var $ptr, _tuple$1, idx, last, line, offset, position, self, str;
		self = this;
		position = new file.Position.ptr("", 0, 0, 0);
		offset = (idx >> 0) - self.base >> 0;
		str = self.str.substring(0, offset);
		position.Filename = self.file.Name();
		_tuple$1 = lineCount(str);
		line = _tuple$1[0];
		last = _tuple$1[1];
		position.Line = 1 + line >> 0;
		if (last >= 0) {
			position.Column = offset - last >> 0;
		} else {
			position.Column = 1 + str.length >> 0;
		}
		return position;
	};
	_parser.prototype.position = function(idx) { return this.$val.position(idx); };
	TransformRegExp = function(pattern) {
		var $ptr, _q, err, parser, pattern, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; err = $f.err; parser = $f.parser; pattern = $f.pattern; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (pattern === "") {
			return ["", $ifaceNil];
		}
		parser = new _RegExp_parser.ptr(pattern, pattern.length, 0, 0, 0, sliceType$6.nil, false, bytes.NewBuffer($makeSlice(sliceType$5, 0, (_q = ($imul(3, pattern.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")))));
		$r = parser.read(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = parser.scan(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		err = $ifaceNil;
		if (parser.errors.$length > 0) {
			err = (x = parser.errors, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		}
		if (parser.invalid) {
			return ["", err];
		}
		return [parser.goRegexp.String(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: TransformRegExp }; } $f.$ptr = $ptr; $f._q = _q; $f.err = err; $f.parser = parser; $f.pattern = pattern; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TransformRegExp = TransformRegExp;
	_RegExp_parser.ptr.prototype.scan = function() {
		var $ptr, _r$2, _ref, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _ref = $f._ref; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* while (true) { */ case 1:
			/* if (!(!((self.chr === -1)))) { break; } */ if(!(!((self.chr === -1)))) { $s = 2; continue; }
			_ref = self.chr;
			/* */ if (_ref === 92) { $s = 3; continue; }
			/* */ if (_ref === 40) { $s = 4; continue; }
			/* */ if (_ref === 91) { $s = 5; continue; }
			/* */ if (_ref === 41) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_ref === 92) { */ case 3:
				$r = self.read(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = self.scanEscape(false); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 8; continue;
			/* } else if (_ref === 40) { */ case 4:
				$r = self.pass(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = self.scanGroup(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 8; continue;
			/* } else if (_ref === 91) { */ case 5:
				$r = self.pass(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = self.scanBracket(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 8; continue;
			/* } else if (_ref === 41) { */ case 6:
				_r$2 = self.error(-1, "Unmatched ')'", new sliceType([])); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				self.invalid = true;
				$r = self.pass(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 8; continue;
			/* } else { */ case 7:
				$r = self.pass(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _RegExp_parser.ptr.prototype.scan }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._ref = _ref; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_RegExp_parser.prototype.scan = function() { return this.$val.scan(); };
	_RegExp_parser.ptr.prototype.scanGroup = function() {
		var $ptr, _r$2, _r$3, _ref, self, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; self = $f.self; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		str = self.str.substring(self.chrOffset);
		/* */ if (str.length > 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (str.length > 1) { */ case 1:
			/* */ if (str.charCodeAt(0) === 63) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (str.charCodeAt(0) === 63) { */ case 3:
				/* */ if ((str.charCodeAt(1) === 61) || (str.charCodeAt(1) === 33)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((str.charCodeAt(1) === 61) || (str.charCodeAt(1) === 33)) { */ case 5:
					_r$2 = self.error(-1, "re2: Invalid (%s) <lookahead>", new sliceType([new $String(self.str.substring(self.chrOffset, (self.chrOffset + 2 >> 0)))])); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
				/* } */ case 6:
			/* } */ case 4:
		/* } */ case 2:
		/* while (true) { */ case 8:
			/* if (!(!((self.chr === -1)) && !((self.chr === 41)))) { break; } */ if(!(!((self.chr === -1)) && !((self.chr === 41)))) { $s = 9; continue; }
			_ref = self.chr;
			/* */ if (_ref === 92) { $s = 10; continue; }
			/* */ if (_ref === 40) { $s = 11; continue; }
			/* */ if (_ref === 91) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_ref === 92) { */ case 10:
				$r = self.read(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = self.scanEscape(false); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 14; continue;
			/* } else if (_ref === 40) { */ case 11:
				$r = self.pass(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = self.scanGroup(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 14; continue;
			/* } else if (_ref === 91) { */ case 12:
				$r = self.pass(); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = self.scanBracket(); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 14; continue;
			/* } else { */ case 13:
				$r = self.pass(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* continue; */ $s = 8; continue;
			/* } */ case 14:
		/* } */ $s = 8; continue; case 9:
		/* */ if (!((self.chr === 41))) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (!((self.chr === 41))) { */ case 22:
			_r$3 = self.error(-1, "Unterminated group", new sliceType([])); /* */ $s = 24; case 24: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			self.invalid = true;
			return;
		/* } */ case 23:
		$r = self.pass(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _RegExp_parser.ptr.prototype.scanGroup }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.self = self; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	_RegExp_parser.prototype.scanGroup = function() { return this.$val.scanGroup(); };
	_RegExp_parser.ptr.prototype.scanBracket = function() {
		var $ptr, _r$2, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* while (true) { */ case 1:
			/* if (!(!((self.chr === -1)))) { break; } */ if(!(!((self.chr === -1)))) { $s = 2; continue; }
			/* */ if (self.chr === 93) { $s = 3; continue; }
			/* */ if (self.chr === 92) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (self.chr === 93) { */ case 3:
				/* break; */ $s = 2; continue;
				$s = 5; continue;
			/* } else if (self.chr === 92) { */ case 4:
				$r = self.read(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = self.scanEscape(true); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			$r = self.pass(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		/* */ if (!((self.chr === 93))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!((self.chr === 93))) { */ case 9:
			_r$2 = self.error(-1, "Unterminated character class", new sliceType([])); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			self.invalid = true;
			return;
		/* } */ case 10:
		$r = self.pass(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _RegExp_parser.ptr.prototype.scanBracket }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_RegExp_parser.prototype.scanBracket = function() { return this.$val.scanBracket(); };
	_RegExp_parser.ptr.prototype.scanEscape = function(inClass) {
		var $ptr, _r$2, _r$3, _r$4, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, base, digit, digit$1, digit$2, err, err$1, err$10, err$2, err$3, err$4, err$5, err$6, err$7, err$8, err$9, inClass, length, length$1, offset, self, size, size$1, tmp, tmp$1, value, value$1, value$2, valueOffset, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; base = $f.base; digit = $f.digit; digit$1 = $f.digit$1; digit$2 = $f.digit$2; err = $f.err; err$1 = $f.err$1; err$10 = $f.err$10; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; err$7 = $f.err$7; err$8 = $f.err$8; err$9 = $f.err$9; inClass = $f.inClass; length = $f.length; length$1 = $f.length$1; offset = $f.offset; self = $f.self; size = $f.size; size$1 = $f.size$1; tmp = $f.tmp; tmp$1 = $f.tmp$1; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; valueOffset = $f.valueOffset; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		offset = self.chrOffset;
		_tmp = 0;
		_tmp$1 = 0;
		length = _tmp;
		base = _tmp$1;
		_ref = self.chr;
		/* */ if (_ref === 48 || _ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) { $s = 1; continue; }
		/* */ if (_ref === 56 || _ref === 57) { $s = 2; continue; }
		/* */ if (_ref === 120) { $s = 3; continue; }
		/* */ if (_ref === 117) { $s = 4; continue; }
		/* */ if (_ref === 98) { $s = 5; continue; }
		/* */ if (_ref === 66) { $s = 6; continue; }
		/* */ if (_ref === 100 || _ref === 68 || _ref === 115 || _ref === 83 || _ref === 119 || _ref === 87) { $s = 7; continue; }
		/* */ if (_ref === 92) { $s = 8; continue; }
		/* */ if (_ref === 102 || _ref === 110 || _ref === 114 || _ref === 116 || _ref === 118) { $s = 9; continue; }
		/* */ if (_ref === 99) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (_ref === 48 || _ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) { */ case 1:
			value = new $Int64(0, 0);
			size = 0;
			/* while (true) { */ case 13:
				digit = new $Int64(0, digitValue(self.chr));
				if ((digit.$high > 0 || (digit.$high === 0 && digit.$low >= 8))) {
					/* break; */ $s = 14; continue;
				}
				value = (x = $mul64(value, new $Int64(0, 8)), new $Int64(x.$high + digit.$high, x.$low + digit.$low));
				$r = self.read(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				size = size + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			/* */ if (size === 1) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (size === 1) { */ case 16:
				_tuple$1 = self.goRegexp.Write(new sliceType$5([92, (value.$low << 24 >>> 24) + 48 << 24 >>> 24]));
				err = _tuple$1[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					self.errors = $append(self.errors, err);
				}
				/* */ if (!((value.$high === 0 && value.$low === 0))) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (!((value.$high === 0 && value.$low === 0))) { */ case 18:
					_r$2 = self.error(-1, "re2: Invalid \\%d <backreference>", new sliceType([value])); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
				/* } */ case 19:
				return;
			/* } */ case 17:
			tmp = new sliceType$5([92, 120, 48, 0]);
			if ((value.$high > 0 || (value.$high === 0 && value.$low >= 16))) {
				tmp = $subslice(tmp, 0, 2);
			} else {
				tmp = $subslice(tmp, 0, 3);
			}
			tmp = strconv.AppendInt(tmp, value, 16);
			_tuple$2 = self.goRegexp.Write(tmp);
			err$1 = _tuple$2[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				self.errors = $append(self.errors, err$1);
			}
			return;
		/* } else if (_ref === 56 || _ref === 57) { */ case 2:
			size$1 = 0;
			/* while (true) { */ case 21:
				digit$1 = digitValue(self.chr);
				if (digit$1 >= 10) {
					/* break; */ $s = 22; continue;
				}
				$r = self.read(); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				size$1 = size$1 + (1) >> 0;
			/* } */ $s = 21; continue; case 22:
			err$2 = self.goRegexp.WriteByte(92);
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				self.errors = $append(self.errors, err$2);
			}
			_tuple$3 = self.goRegexp.WriteString(self.str.substring(offset, self.chrOffset));
			err$2 = _tuple$3[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				self.errors = $append(self.errors, err$2);
			}
			_r$3 = self.error(-1, "re2: Invalid \\%s <backreference>", new sliceType([new $String(self.str.substring(offset, self.chrOffset))])); /* */ $s = 24; case 24: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			return;
		/* } else if (_ref === 120) { */ case 3:
			$r = self.read(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tmp$2 = 2;
			_tmp$3 = 16;
			length = _tmp$2;
			base = _tmp$3;
			$s = 12; continue;
		/* } else if (_ref === 117) { */ case 4:
			$r = self.read(); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tmp$4 = 4;
			_tmp$5 = 16;
			length = _tmp$4;
			base = _tmp$5;
			$s = 12; continue;
		/* } else if (_ref === 98) { */ case 5:
			/* */ if (inClass) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if (inClass) { */ case 27:
				_tuple$4 = self.goRegexp.Write(new sliceType$5([92, 120, 48, 56]));
				err$3 = _tuple$4[1];
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					self.errors = $append(self.errors, err$3);
				}
				$r = self.read(); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 28:
			err$4 = self.goRegexp.WriteByte(92);
			if (!($interfaceIsEqual(err$4, $ifaceNil))) {
				self.errors = $append(self.errors, err$4);
			}
			$r = self.pass(); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } else if (_ref === 66) { */ case 6:
			err$4 = self.goRegexp.WriteByte(92);
			if (!($interfaceIsEqual(err$4, $ifaceNil))) {
				self.errors = $append(self.errors, err$4);
			}
			$r = self.pass(); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } else if (_ref === 100 || _ref === 68 || _ref === 115 || _ref === 83 || _ref === 119 || _ref === 87) { */ case 7:
			err$4 = self.goRegexp.WriteByte(92);
			if (!($interfaceIsEqual(err$4, $ifaceNil))) {
				self.errors = $append(self.errors, err$4);
			}
			$r = self.pass(); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } else if (_ref === 92) { */ case 8:
			err$4 = self.goRegexp.WriteByte(92);
			if (!($interfaceIsEqual(err$4, $ifaceNil))) {
				self.errors = $append(self.errors, err$4);
			}
			$r = self.pass(); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } else if (_ref === 102 || _ref === 110 || _ref === 114 || _ref === 116 || _ref === 118) { */ case 9:
			err$4 = self.goRegexp.WriteByte(92);
			if (!($interfaceIsEqual(err$4, $ifaceNil))) {
				self.errors = $append(self.errors, err$4);
			}
			$r = self.pass(); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } else if (_ref === 99) { */ case 10:
			$r = self.read(); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			value$1 = new $Int64(0, 0);
			if (97 <= self.chr && self.chr <= 122) {
				value$1 = (x$1 = (x$2 = new $Int64(0, self.chr), new $Int64(x$2.$high - 0, x$2.$low - 97)), new $Int64(x$1.$high + 0, x$1.$low + 1));
			} else if (65 <= self.chr && self.chr <= 90) {
				value$1 = (x$3 = (x$4 = new $Int64(0, self.chr), new $Int64(x$4.$high - 0, x$4.$low - 65)), new $Int64(x$3.$high + 0, x$3.$low + 1));
			} else {
				err$5 = self.goRegexp.WriteByte(99);
				if (!($interfaceIsEqual(err$5, $ifaceNil))) {
					self.errors = $append(self.errors, err$5);
				}
				return;
			}
			tmp$1 = new sliceType$5([92, 120, 48, 0]);
			if ((value$1.$high > 0 || (value$1.$high === 0 && value$1.$low >= 16))) {
				tmp$1 = $subslice(tmp$1, 0, 2);
			} else {
				tmp$1 = $subslice(tmp$1, 0, 3);
			}
			tmp$1 = strconv.AppendInt(tmp$1, value$1, 16);
			_tuple$5 = self.goRegexp.Write(tmp$1);
			err$6 = _tuple$5[1];
			if (!($interfaceIsEqual(err$6, $ifaceNil))) {
				self.errors = $append(self.errors, err$6);
			}
			$r = self.read(); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } else { */ case 11:
			if ((self.chr === 36) || !isIdentifierPart(self.chr)) {
				err$7 = self.goRegexp.WriteByte(92);
				if (!($interfaceIsEqual(err$7, $ifaceNil))) {
					self.errors = $append(self.errors, err$7);
				}
			} else {
			}
			$r = self.pass(); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 12:
		valueOffset = self.chrOffset;
		value$2 = 0;
		length$1 = length;
		/* while (true) { */ case 38:
			/* if (!(length$1 > 0)) { break; } */ if(!(length$1 > 0)) { $s = 39; continue; }
			digit$2 = (digitValue(self.chr) >>> 0);
			/* */ if (digit$2 >= base) { $s = 40; continue; }
			/* */ $s = 41; continue;
			/* if (digit$2 >= base) { */ case 40:
				/* goto skip */ $s = 42; continue;
			/* } */ case 41:
			value$2 = ($imul(value$2, base) >>> 0) + digit$2 >>> 0;
			$r = self.read(); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			length$1 = length$1 - (1) >>> 0;
		/* } */ $s = 38; continue; case 39:
		/* */ if (length === 4) { $s = 44; continue; }
		/* */ if (length === 2) { $s = 45; continue; }
		/* */ $s = 46; continue;
		/* if (length === 4) { */ case 44:
			_tuple$6 = self.goRegexp.Write(new sliceType$5([92, 120, 123, self.str.charCodeAt((valueOffset + 0 >> 0)), self.str.charCodeAt((valueOffset + 1 >> 0)), self.str.charCodeAt((valueOffset + 2 >> 0)), self.str.charCodeAt((valueOffset + 3 >> 0)), 125]));
			err$8 = _tuple$6[1];
			if (!($interfaceIsEqual(err$8, $ifaceNil))) {
				self.errors = $append(self.errors, err$8);
			}
			$s = 47; continue;
		/* } else if (length === 2) { */ case 45:
			_tuple$7 = self.goRegexp.Write(new sliceType$5([92, 120, self.str.charCodeAt((valueOffset + 0 >> 0)), self.str.charCodeAt((valueOffset + 1 >> 0))]));
			err$9 = _tuple$7[1];
			if (!($interfaceIsEqual(err$9, $ifaceNil))) {
				self.errors = $append(self.errors, err$9);
			}
			$s = 47; continue;
		/* } else { */ case 46:
			_r$4 = self.error(-1, "re2: Illegal branch in scanEscape", new sliceType([])); /* */ $s = 48; case 48: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			/* goto skip */ $s = 42; continue;
		/* } */ case 47:
		return;
		/* skip: */ case 42:
		_tuple$8 = self.goRegexp.WriteString(self.str.substring(offset, self.chrOffset));
		err$10 = _tuple$8[1];
		if (!($interfaceIsEqual(err$10, $ifaceNil))) {
			self.errors = $append(self.errors, err$10);
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _RegExp_parser.ptr.prototype.scanEscape }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f.base = base; $f.digit = digit; $f.digit$1 = digit$1; $f.digit$2 = digit$2; $f.err = err; $f.err$1 = err$1; $f.err$10 = err$10; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.err$7 = err$7; $f.err$8 = err$8; $f.err$9 = err$9; $f.inClass = inClass; $f.length = length; $f.length$1 = length$1; $f.offset = offset; $f.self = self; $f.size = size; $f.size$1 = size$1; $f.tmp = tmp; $f.tmp$1 = tmp$1; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.valueOffset = valueOffset; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	_RegExp_parser.prototype.scanEscape = function(inClass) { return this.$val.scanEscape(inClass); };
	_RegExp_parser.ptr.prototype.pass = function() {
		var $ptr, _tuple$1, err, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple$1 = $f._tuple$1; err = $f.err; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		if (!((self.chr === -1))) {
			_tuple$1 = self.goRegexp.WriteRune(self.chr);
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				self.errors = $append(self.errors, err);
			}
		}
		$r = self.read(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _RegExp_parser.ptr.prototype.pass }; } $f.$ptr = $ptr; $f._tuple$1 = _tuple$1; $f.err = err; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_RegExp_parser.prototype.pass = function() { return this.$val.pass(); };
	_RegExp_parser.ptr.prototype.error = function(offset, msg, msgValues) {
		var $ptr, _r$2, err, msg, msgValues, offset, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; err = $f.err; msg = $f.msg; msgValues = $f.msgValues; offset = $f.offset; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = fmt.Errorf(msg, msgValues); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		err = _r$2;
		self.errors = $append(self.errors, err);
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _RegExp_parser.ptr.prototype.error }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.err = err; $f.msg = msg; $f.msgValues = msgValues; $f.offset = offset; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_RegExp_parser.prototype.error = function(offset, msg, msgValues) { return this.$val.error(offset, msg, msgValues); };
	_parser.ptr.prototype.openScope = function() {
		var $ptr, self;
		self = this;
		self.scope = new _scope.ptr(self.scope, true, false, false, false, sliceType$3.nil, sliceType$7.nil);
	};
	_parser.prototype.openScope = function() { return this.$val.openScope(); };
	_parser.ptr.prototype.closeScope = function() {
		var $ptr, self;
		self = this;
		self.scope = self.scope.outer;
	};
	_parser.prototype.closeScope = function() { return this.$val.closeScope(); };
	_scope.ptr.prototype.declare = function(declaration) {
		var $ptr, declaration, self;
		self = this;
		self.declarationList = $append(self.declarationList, declaration);
	};
	_scope.prototype.declare = function(declaration) { return this.$val.declare(declaration); };
	_scope.ptr.prototype.hasLabel = function(name) {
		var $ptr, _i, _ref, label, name, self;
		self = this;
		_ref = self.labels;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			label = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (label === name) {
				return true;
			}
			_i++;
		}
		if (!(self.outer === ptrType$8.nil) && !self.inFunction) {
			return self.outer.hasLabel(name);
		}
		return false;
	};
	_scope.prototype.hasLabel = function(name) { return this.$val.hasLabel(name); };
	_parser.ptr.prototype.parseBlockStatement = function() {
		var $ptr, _r$2, _r$3, _r$4, node, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; node = $f.node; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		node = new ast.BlockStatement.ptr(0, sliceType$8.nil, 0);
		_r$2 = self.expect(51); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		node.LeftBrace = _r$2;
		_r$3 = self.parseStatementList(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		node.List = _r$3;
		_r$4 = self.expect(56); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		node.RightBrace = _r$4;
		return node;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseBlockStatement }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.node = node; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseBlockStatement = function() { return this.$val.parseBlockStatement(); };
	_parser.ptr.prototype.parseEmptyStatement = function() {
		var $ptr, _r$2, idx, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; idx = $f.idx; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.expect(57); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		idx = _r$2;
		return new ast.EmptyStatement.ptr(idx);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseEmptyStatement }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.idx = idx; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseEmptyStatement = function() { return this.$val.parseEmptyStatement(); };
	_parser.ptr.prototype.parseStatementList = function() {
		var $ptr, _r$2, list, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; list = $f.list; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		list = sliceType$8.nil;
		self = this;
		/* while (true) { */ case 1:
			/* if (!(!((self.token === 56)) && !((self.token === 2)))) { break; } */ if(!(!((self.token === 56)) && !((self.token === 2)))) { $s = 2; continue; }
			_r$2 = self.parseStatement(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			list = $append(list, _r$2);
		/* } */ $s = 1; continue; case 2:
		return list;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseStatementList }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.list = list; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseStatementList = function() { return this.$val.parseStatementList(); };
	_parser.ptr.prototype.parseStatement = function() {
		var $ptr, _i, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple$1, colon, expression, identifier, isIdentifier, label, self, statement, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple$1 = $f._tuple$1; colon = $f.colon; expression = $f.expression; identifier = $f.identifier; isIdentifier = $f.isIdentifier; label = $f.label; self = $f.self; statement = $f.statement; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (self.token === 2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.token === 2) { */ case 1:
			_r$2 = self.errorUnexpectedToken(self.token); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			return new ast.BadStatement.ptr(self.idx, self.idx + 1 >> 0);
		/* } */ case 2:
		_ref = self.token;
		/* */ if (_ref === 57) { $s = 4; continue; }
		/* */ if (_ref === 51) { $s = 5; continue; }
		/* */ if (_ref === 61) { $s = 6; continue; }
		/* */ if (_ref === 63) { $s = 7; continue; }
		/* */ if (_ref === 73) { $s = 8; continue; }
		/* */ if (_ref === 65) { $s = 9; continue; }
		/* */ if (_ref === 74) { $s = 10; continue; }
		/* */ if (_ref === 84) { $s = 11; continue; }
		/* */ if (_ref === 85) { $s = 12; continue; }
		/* */ if (_ref === 72) { $s = 13; continue; }
		/* */ if (_ref === 64) { $s = 14; continue; }
		/* */ if (_ref === 83) { $s = 15; continue; }
		/* */ if (_ref === 80) { $s = 16; continue; }
		/* */ if (_ref === 77) { $s = 17; continue; }
		/* */ if (_ref === 76) { $s = 18; continue; }
		/* */ if (_ref === 67) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if (_ref === 57) { */ case 4:
			_r$3 = self.parseEmptyStatement(); /* */ $s = 21; case 21: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ $s = 22; case 22:
			return _r$3;
		/* } else if (_ref === 51) { */ case 5:
			_r$4 = self.parseBlockStatement(); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ $s = 24; case 24:
			return _r$4;
		/* } else if (_ref === 61) { */ case 6:
			_r$5 = self.parseIfStatement(); /* */ $s = 25; case 25: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ $s = 26; case 26:
			return _r$5;
		/* } else if (_ref === 63) { */ case 7:
			_r$6 = self.parseDoWhileStatement(); /* */ $s = 27; case 27: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			/* */ $s = 28; case 28:
			return _r$6;
		/* } else if (_ref === 73) { */ case 8:
			_r$7 = self.parseWhileStatement(); /* */ $s = 29; case 29: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ $s = 30; case 30:
			return _r$7;
		/* } else if (_ref === 65) { */ case 9:
			_r$8 = self.parseForOrForInStatement(); /* */ $s = 31; case 31: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			/* */ $s = 32; case 32:
			return _r$8;
		/* } else if (_ref === 74) { */ case 10:
			_r$9 = self.parseBreakStatement(); /* */ $s = 33; case 33: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			/* */ $s = 34; case 34:
			return _r$9;
		/* } else if (_ref === 84) { */ case 11:
			_r$10 = self.parseContinueStatement(); /* */ $s = 35; case 35: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			/* */ $s = 36; case 36:
			return _r$10;
		/* } else if (_ref === 85) { */ case 12:
			_r$11 = self.parseDebuggerStatement(); /* */ $s = 37; case 37: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			/* */ $s = 38; case 38:
			return _r$11;
		/* } else if (_ref === 72) { */ case 13:
			_r$12 = self.parseWithStatement(); /* */ $s = 39; case 39: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			/* */ $s = 40; case 40:
			return _r$12;
		/* } else if (_ref === 64) { */ case 14:
			_r$13 = self.parseVariableStatement(); /* */ $s = 41; case 41: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 42; case 42:
			return _r$13;
		/* } else if (_ref === 83) { */ case 15:
			_r$14 = self.parseFunction(true); /* */ $s = 43; case 43: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$14;
			return new ast.EmptyStatement.ptr(0);
		/* } else if (_ref === 80) { */ case 16:
			_r$15 = self.parseSwitchStatement(); /* */ $s = 44; case 44: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 45; case 45:
			return _r$15;
		/* } else if (_ref === 77) { */ case 17:
			_r$16 = self.parseReturnStatement(); /* */ $s = 46; case 46: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ $s = 47; case 47:
			return _r$16;
		/* } else if (_ref === 76) { */ case 18:
			_r$17 = self.parseThrowStatement(); /* */ $s = 48; case 48: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ $s = 49; case 49:
			return _r$17;
		/* } else if (_ref === 67) { */ case 19:
			_r$18 = self.parseTryStatement(); /* */ $s = 50; case 50: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			/* */ $s = 51; case 51:
			return _r$18;
		/* } */ case 20:
		_r$19 = self.parseExpression(); /* */ $s = 52; case 52: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		expression = _r$19;
		_tuple$1 = $assertType(expression, ptrType$3, true);
		identifier = _tuple$1[0];
		isIdentifier = _tuple$1[1];
		/* */ if (isIdentifier && (self.token === 58)) { $s = 53; continue; }
		/* */ $s = 54; continue;
		/* if (isIdentifier && (self.token === 58)) { */ case 53:
			colon = self.idx;
			$r = self.next(); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			label = identifier.Name;
			_ref$1 = self.scope.labels;
			_i = 0;
			/* while (true) { */ case 56:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 57; continue; }
				value = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				/* */ if (label === value) { $s = 58; continue; }
				/* */ $s = 59; continue;
				/* if (label === value) { */ case 58:
					_r$20 = self.error(new file.Idx(identifier.Idx0()), "Label '%s' already exists", new sliceType([new $String(label)])); /* */ $s = 60; case 60: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
					_r$20;
				/* } */ case 59:
				_i++;
			/* } */ $s = 56; continue; case 57:
			self.scope.labels = $append(self.scope.labels, label);
			_r$21 = self.parseStatement(); /* */ $s = 61; case 61: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			statement = _r$21;
			self.scope.labels = $subslice(self.scope.labels, 0, (self.scope.labels.$length - 1 >> 0));
			return new ast.LabelledStatement.ptr(identifier, colon, statement);
		/* } */ case 54:
		$r = self.optionalSemicolon(); /* */ $s = 62; case 62: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return new ast.ExpressionStatement.ptr(expression);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseStatement }; } $f.$ptr = $ptr; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple$1 = _tuple$1; $f.colon = colon; $f.expression = expression; $f.identifier = identifier; $f.isIdentifier = isIdentifier; $f.label = label; $f.self = self; $f.statement = statement; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseStatement = function() { return this.$val.parseStatement(); };
	_parser.ptr.prototype.parseTryStatement = function() {
		var $ptr, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, catch$1, identifier, node, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; catch$1 = $f.catch$1; identifier = $f.identifier; node = $f.node; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.expect(67); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = self.parseBlockStatement(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		node = new ast.TryStatement.ptr(_r$2, _r$3, ptrType$15.nil, $ifaceNil);
		/* */ if (self.token === 75) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (self.token === 75) { */ case 3:
			catch$1 = self.idx;
			$r = self.next(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$4 = self.expect(49); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			/* */ if (!((self.token === 9))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!((self.token === 9))) { */ case 7:
				_r$5 = self.expect(9); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				$r = self.nextStatement(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return new ast.BadStatement.ptr(catch$1, self.idx);
			/* } else { */ case 8:
				_r$6 = self.parseIdentifier(); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				identifier = _r$6;
				_r$7 = self.expect(54); /* */ $s = 13; case 13: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				_r$8 = self.parseBlockStatement(); /* */ $s = 14; case 14: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				node.Catch = new ast.CatchStatement.ptr(catch$1, identifier, _r$8);
			/* } */ case 9:
		/* } */ case 4:
		/* */ if (self.token === 82) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (self.token === 82) { */ case 15:
			$r = self.next(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$9 = self.parseBlockStatement(); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			node.Finally = _r$9;
		/* } */ case 16:
		/* */ if (node.Catch === ptrType$15.nil && $interfaceIsEqual(node.Finally, $ifaceNil)) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if (node.Catch === ptrType$15.nil && $interfaceIsEqual(node.Finally, $ifaceNil)) { */ case 19:
			_r$10 = self.error(new file.Idx(node.Try), "Missing catch or finally after try", new sliceType([])); /* */ $s = 21; case 21: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$10;
			_r$11 = node.Body.Idx1(); /* */ $s = 22; case 22: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			/* */ $s = 23; case 23:
			return new ast.BadStatement.ptr(node.Try, _r$11);
		/* } */ case 20:
		return node;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseTryStatement }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.catch$1 = catch$1; $f.identifier = identifier; $f.node = node; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseTryStatement = function() { return this.$val.parseTryStatement(); };
	_parser.ptr.prototype.parseFunctionParameterList = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, closing, list, opening, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; closing = $f.closing; list = $f.list; opening = $f.opening; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.expect(49); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		opening = _r$2;
		list = sliceType$9.nil;
		/* while (true) { */ case 2:
			/* if (!(!((self.token === 54)) && !((self.token === 2)))) { break; } */ if(!(!((self.token === 54)) && !((self.token === 2)))) { $s = 3; continue; }
			/* */ if (!((self.token === 9))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!((self.token === 9))) { */ case 4:
				_r$3 = self.expect(9); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				$s = 6; continue;
			/* } else { */ case 5:
				_r$4 = self.parseIdentifier(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				list = $append(list, _r$4);
			/* } */ case 6:
			/* */ if (!((self.token === 54))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!((self.token === 54))) { */ case 9:
				_r$5 = self.expect(52); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
			/* } */ case 10:
		/* } */ $s = 2; continue; case 3:
		_r$6 = self.expect(54); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		closing = _r$6;
		return new ast.ParameterList.ptr(opening, list, closing);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseFunctionParameterList }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.closing = closing; $f.list = list; $f.opening = opening; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseFunctionParameterList = function() { return this.$val.parseFunctionParameterList(); };
	_parser.ptr.prototype.parseFunction = function(declaration) {
		var $ptr, _arg, _arg$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, declaration, name, node, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; declaration = $f.declaration; name = $f.name; node = $f.node; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.expect(83); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		node = new ast.FunctionLiteral.ptr(_r$2, ptrType$3.nil, ptrType$4.nil, $ifaceNil, "", sliceType$3.nil);
		name = ptrType$3.nil;
		/* */ if (self.token === 9) { $s = 2; continue; }
		/* */ if (declaration) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (self.token === 9) { */ case 2:
			_r$3 = self.parseIdentifier(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			name = _r$3;
			if (declaration) {
				self.scope.declare(new ast.FunctionDeclaration.ptr(node));
			}
			$s = 4; continue;
		/* } else if (declaration) { */ case 3:
			_r$4 = self.expect(9); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 4:
		node.Name = name;
		_r$5 = self.parseFunctionParameterList(); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		node.ParameterList = _r$5;
		$r = self.parseFunctionBlock(node); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_arg = node.Idx0();
		_r$6 = node.Idx1(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg$1 = _r$6;
		_r$7 = self.slice(_arg, _arg$1); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		node.Source = _r$7;
		return node;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseFunction }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.declaration = declaration; $f.name = name; $f.node = node; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseFunction = function(declaration) { return this.$val.parseFunction(declaration); };
	_parser.ptr.prototype.parseFunctionBlock = function(node) {
		var $ptr, _r$2, inFunction, node, self, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; inFunction = $f.inFunction; node = $f.node; self = $f.self; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		inFunction = [inFunction];
		self = [self];
		self[0] = this;
		self[0].openScope();
		inFunction[0] = self[0].scope.inFunction;
		self[0].scope.inFunction = true;
		$deferred.push([(function(inFunction, self) { return function() {
			var $ptr;
			self[0].scope.inFunction = inFunction[0];
			self[0].closeScope();
		}; })(inFunction, self), []]);
		_r$2 = self[0].parseBlockStatement(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		node.Body = _r$2;
		node.DeclarationList = self[0].scope.declarationList;
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseFunctionBlock }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.inFunction = inFunction; $f.node = node; $f.self = self; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	_parser.prototype.parseFunctionBlock = function(node) { return this.$val.parseFunctionBlock(node); };
	_parser.ptr.prototype.parseDebuggerStatement = function() {
		var $ptr, _r$2, idx, node, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; idx = $f.idx; node = $f.node; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.expect(85); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		idx = _r$2;
		node = new ast.DebuggerStatement.ptr(idx);
		$r = self.semicolon(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return node;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseDebuggerStatement }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.idx = idx; $f.node = node; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseDebuggerStatement = function() { return this.$val.parseDebuggerStatement(); };
	_parser.ptr.prototype.parseReturnStatement = function() {
		var $ptr, _r$2, _r$3, _r$4, idx, node, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; idx = $f.idx; node = $f.node; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.expect(77); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		idx = _r$2;
		/* */ if (!self.scope.inFunction) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!self.scope.inFunction) { */ case 2:
			_r$3 = self.error(new file.Idx(idx), "Illegal return statement", new sliceType([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			$r = self.nextStatement(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return new ast.BadStatement.ptr(idx, self.idx);
		/* } */ case 3:
		node = new ast.ReturnStatement.ptr(idx, $ifaceNil);
		/* */ if (!self.implicitSemicolon && !((self.token === 57)) && !((self.token === 56)) && !((self.token === 2))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!self.implicitSemicolon && !((self.token === 57)) && !((self.token === 56)) && !((self.token === 2))) { */ case 6:
			_r$4 = self.parseExpression(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			node.Argument = _r$4;
		/* } */ case 7:
		$r = self.semicolon(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return node;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseReturnStatement }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.idx = idx; $f.node = node; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseReturnStatement = function() { return this.$val.parseReturnStatement(); };
	_parser.ptr.prototype.parseThrowStatement = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, idx, node, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; idx = $f.idx; node = $f.node; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.expect(76); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		idx = _r$2;
		/* */ if (self.implicitSemicolon) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (self.implicitSemicolon) { */ case 2:
			/* */ if (self.chr === -1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (self.chr === -1) { */ case 4:
				_r$3 = self.error(new file.Idx(idx), "Unexpected end of input", new sliceType([])); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				$s = 6; continue;
			/* } else { */ case 5:
				_r$4 = self.error(new file.Idx(idx), "Illegal newline after throw", new sliceType([])); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
			/* } */ case 6:
			$r = self.nextStatement(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return new ast.BadStatement.ptr(idx, self.idx);
		/* } */ case 3:
		_r$5 = self.parseExpression(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		node = new ast.ThrowStatement.ptr(0, _r$5);
		$r = self.semicolon(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return node;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseThrowStatement }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.idx = idx; $f.node = node; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseThrowStatement = function() { return this.$val.parseThrowStatement(); };
	_parser.ptr.prototype.parseSwitchStatement = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, clause, inSwitch, index, node, self, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; clause = $f.clause; inSwitch = $f.inSwitch; index = $f.index; node = $f.node; self = $f.self; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		inSwitch = [inSwitch];
		self = [self];
		self[0] = this;
		_r$2 = self[0].expect(80); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = self[0].expect(49); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = self[0].parseExpression(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		node = new ast.SwitchStatement.ptr(0, _r$4, -1, sliceType$10.nil);
		_r$5 = self[0].expect(54); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = self[0].expect(51); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		inSwitch[0] = self[0].scope.inSwitch;
		self[0].scope.inSwitch = true;
		$deferred.push([(function(inSwitch, self) { return function() {
			var $ptr;
			self[0].scope.inSwitch = inSwitch[0];
		}; })(inSwitch, self), []]);
		index = 0;
		/* while (true) { */ case 6:
			/* if (!(!((self[0].token === 2)))) { break; } */ if(!(!((self[0].token === 2)))) { $s = 7; continue; }
			/* */ if (self[0].token === 56) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (self[0].token === 56) { */ case 8:
				$r = self[0].next(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* break; */ $s = 7; continue;
			/* } */ case 9:
			_r$7 = self[0].parseCaseStatement(); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			clause = _r$7;
			/* */ if ($interfaceIsEqual(clause.Test, $ifaceNil)) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ($interfaceIsEqual(clause.Test, $ifaceNil)) { */ case 12:
				/* */ if (!((node.Default === -1))) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!((node.Default === -1))) { */ case 14:
					_r$8 = self[0].error(new file.Idx(clause.Case), "Already saw a default in switch", new sliceType([])); /* */ $s = 16; case 16: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$8;
				/* } */ case 15:
				node.Default = index;
			/* } */ case 13:
			node.Body = $append(node.Body, clause);
			index = index + (1) >> 0;
		/* } */ $s = 6; continue; case 7:
		return node;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseSwitchStatement }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.clause = clause; $f.inSwitch = inSwitch; $f.index = index; $f.node = node; $f.self = self; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	_parser.prototype.parseSwitchStatement = function() { return this.$val.parseSwitchStatement(); };
	_parser.ptr.prototype.parseWithStatement = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, node, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; node = $f.node; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.expect(72); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = self.expect(49); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = self.parseExpression(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		node = new ast.WithStatement.ptr(0, _r$4, $ifaceNil);
		_r$5 = self.expect(54); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = self.parseStatement(); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		node.Body = _r$6;
		return node;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseWithStatement }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.node = node; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseWithStatement = function() { return this.$val.parseWithStatement(); };
	_parser.ptr.prototype.parseCaseStatement = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, node, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; node = $f.node; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		node = new ast.CaseStatement.ptr(self.idx, $ifaceNil, sliceType$8.nil);
		/* */ if (self.token === 81) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.token === 81) { */ case 1:
			$r = self.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			_r$2 = self.expect(70); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			_r$3 = self.parseExpression(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			node.Test = _r$3;
		/* } */ case 3:
		_r$4 = self.expect(58); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		/* while (true) { */ case 8:
			if ((self.token === 2) || (self.token === 56) || (self.token === 70) || (self.token === 81)) {
				/* break; */ $s = 9; continue;
			}
			_r$5 = self.parseStatement(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			node.Consequent = $append(node.Consequent, _r$5);
		/* } */ $s = 8; continue; case 9:
		return node;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseCaseStatement }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.node = node; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseCaseStatement = function() { return this.$val.parseCaseStatement(); };
	_parser.ptr.prototype.parseIterationStatement = function() {
		var $ptr, _r$2, inIteration, self, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; inIteration = $f.inIteration; self = $f.self; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		inIteration = [inIteration];
		self = [self];
		self[0] = this;
		inIteration[0] = self[0].scope.inIteration;
		self[0].scope.inIteration = true;
		$deferred.push([(function(inIteration, self) { return function() {
			var $ptr;
			self[0].scope.inIteration = inIteration[0];
		}; })(inIteration, self), []]);
		_r$2 = self[0].parseStatement(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$2;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseIterationStatement }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.inIteration = inIteration; $f.self = self; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	_parser.prototype.parseIterationStatement = function() { return this.$val.parseIterationStatement(); };
	_parser.ptr.prototype.parseForIn = function(into) {
		var $ptr, _r$2, _r$3, _r$4, into, self, source, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; into = $f.into; self = $f.self; source = $f.source; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.parseExpression(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		source = _r$2;
		_r$3 = self.expect(54); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = self.parseIterationStatement(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 4; case 4:
		return new ast.ForInStatement.ptr(0, into, source, _r$4);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseForIn }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.into = into; $f.self = self; $f.source = source; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseForIn = function(into) { return this.$val.parseForIn(into); };
	_parser.ptr.prototype.parseFor = function(initializer) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, initializer, self, test, update, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; initializer = $f.initializer; self = $f.self; test = $f.test; update = $f.update; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_tmp = $ifaceNil;
		_tmp$1 = $ifaceNil;
		test = _tmp;
		update = _tmp$1;
		/* */ if (!((self.token === 57))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((self.token === 57))) { */ case 1:
			_r$2 = self.parseExpression(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			test = _r$2;
		/* } */ case 2:
		_r$3 = self.expect(57); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		/* */ if (!((self.token === 54))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((self.token === 54))) { */ case 5:
			_r$4 = self.parseExpression(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			update = _r$4;
		/* } */ case 6:
		_r$5 = self.expect(54); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = self.parseIterationStatement(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ $s = 10; case 10:
		return new ast.ForStatement.ptr(0, initializer, update, test, _r$6);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseFor }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.initializer = initializer; $f.self = self; $f.test = test; $f.update = update; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseFor = function(initializer) { return this.$val.parseFor(initializer); };
	_parser.ptr.prototype.parseForOrForInStatement = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, allowIn, forIn, idx, left, list, self, var_, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; allowIn = $f.allowIn; forIn = $f.forIn; idx = $f.idx; left = $f.left; list = $f.list; self = $f.self; var_ = $f.var_; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.expect(65); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		idx = _r$2;
		_r$3 = self.expect(49); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		left = sliceType$2.nil;
		forIn = false;
		/* */ if (!((self.token === 57))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!((self.token === 57))) { */ case 3:
			allowIn = self.scope.allowIn;
			self.scope.allowIn = false;
			/* */ if (self.token === 64) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (self.token === 64) { */ case 5:
				var_ = self.idx;
				$r = self.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$4 = self.parseVariableDeclarationList(var_); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				list = _r$4;
				/* */ if ((list.$length === 1) && (self.token === 62)) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if ((list.$length === 1) && (self.token === 62)) { */ case 10:
					$r = self.next(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					forIn = true;
					left = new sliceType$2([(0 >= list.$length ? $throwRuntimeError("index out of range") : list.$array[list.$offset + 0])]);
					$s = 12; continue;
				/* } else { */ case 11:
					left = list;
				/* } */ case 12:
				$s = 7; continue;
			/* } else { */ case 6:
				_r$5 = self.parseExpression(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				left = $append(left, _r$5);
				/* */ if (self.token === 62) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (self.token === 62) { */ case 15:
					$r = self.next(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					forIn = true;
				/* } */ case 16:
			/* } */ case 7:
			self.scope.allowIn = allowIn;
		/* } */ case 4:
		/* */ if (forIn) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (forIn) { */ case 18:
			_ref = (0 >= left.$length ? $throwRuntimeError("index out of range") : left.$array[left.$offset + 0]);
			/* */ if ($assertType(_ref, ptrType$3, true)[1] || $assertType(_ref, ptrType$5, true)[1] || $assertType(_ref, ptrType$6, true)[1] || $assertType(_ref, ptrType$1, true)[1]) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ($assertType(_ref, ptrType$3, true)[1] || $assertType(_ref, ptrType$5, true)[1] || $assertType(_ref, ptrType$6, true)[1] || $assertType(_ref, ptrType$1, true)[1]) { */ case 20:
				$s = 22; continue;
			/* } else { */ case 21:
				_r$6 = self.error(new file.Idx(idx), "Invalid left-hand side in for-in", new sliceType([])); /* */ $s = 23; case 23: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				$r = self.nextStatement(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return new ast.BadStatement.ptr(idx, self.idx);
			/* } */ case 22:
			_r$7 = self.parseForIn((0 >= left.$length ? $throwRuntimeError("index out of range") : left.$array[left.$offset + 0])); /* */ $s = 25; case 25: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ $s = 26; case 26:
			return _r$7;
		/* } */ case 19:
		_r$8 = self.expect(57); /* */ $s = 27; case 27: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$8;
		_r$9 = self.parseFor(new ast.SequenceExpression.ptr(left)); /* */ $s = 28; case 28: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		/* */ $s = 29; case 29:
		return _r$9;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseForOrForInStatement }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.allowIn = allowIn; $f.forIn = forIn; $f.idx = idx; $f.left = left; $f.list = list; $f.self = self; $f.var_ = var_; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseForOrForInStatement = function() { return this.$val.parseForOrForInStatement(); };
	_parser.ptr.prototype.parseVariableStatement = function() {
		var $ptr, _r$2, _r$3, idx, list, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; idx = $f.idx; list = $f.list; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.expect(64); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		idx = _r$2;
		_r$3 = self.parseVariableDeclarationList(idx); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		list = _r$3;
		$r = self.semicolon(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return new ast.VariableStatement.ptr(idx, list);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseVariableStatement }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.idx = idx; $f.list = list; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseVariableStatement = function() { return this.$val.parseVariableStatement(); };
	_parser.ptr.prototype.parseDoWhileStatement = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, inIteration, node, self, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; inIteration = $f.inIteration; node = $f.node; self = $f.self; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		inIteration = [inIteration];
		self = [self];
		self[0] = this;
		inIteration[0] = self[0].scope.inIteration;
		self[0].scope.inIteration = true;
		$deferred.push([(function(inIteration, self) { return function() {
			var $ptr;
			self[0].scope.inIteration = inIteration[0];
		}; })(inIteration, self), []]);
		_r$2 = self[0].expect(63); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		node = new ast.DoWhileStatement.ptr(0, $ifaceNil, $ifaceNil);
		/* */ if (self[0].token === 51) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (self[0].token === 51) { */ case 2:
			_r$3 = self[0].parseBlockStatement(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			node.Body = _r$3;
			$s = 4; continue;
		/* } else { */ case 3:
			_r$4 = self[0].parseStatement(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			node.Body = _r$4;
		/* } */ case 4:
		_r$5 = self[0].expect(73); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = self[0].expect(49); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		_r$7 = self[0].parseExpression(); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		node.Test = _r$7;
		_r$8 = self[0].expect(54); /* */ $s = 10; case 10: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$8;
		return node;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseDoWhileStatement }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.inIteration = inIteration; $f.node = node; $f.self = self; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	_parser.prototype.parseDoWhileStatement = function() { return this.$val.parseDoWhileStatement(); };
	_parser.ptr.prototype.parseWhileStatement = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, node, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; node = $f.node; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.expect(73); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = self.expect(49); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = self.parseExpression(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		node = new ast.WhileStatement.ptr(0, _r$4, $ifaceNil);
		_r$5 = self.expect(54); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = self.parseIterationStatement(); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		node.Body = _r$6;
		return node;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseWhileStatement }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.node = node; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseWhileStatement = function() { return this.$val.parseWhileStatement(); };
	_parser.ptr.prototype.parseIfStatement = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, node, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; node = $f.node; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.expect(61); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = self.expect(49); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = self.parseExpression(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		node = new ast.IfStatement.ptr(0, _r$4, $ifaceNil, $ifaceNil);
		_r$5 = self.expect(54); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		/* */ if (self.token === 51) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (self.token === 51) { */ case 5:
			_r$6 = self.parseBlockStatement(); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			node.Consequent = _r$6;
			$s = 7; continue;
		/* } else { */ case 6:
			_r$7 = self.parseStatement(); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			node.Consequent = _r$7;
		/* } */ case 7:
		/* */ if (self.token === 69) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (self.token === 69) { */ case 10:
			$r = self.next(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$8 = self.parseStatement(); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			node.Alternate = _r$8;
		/* } */ case 11:
		return node;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseIfStatement }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.node = node; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseIfStatement = function() { return this.$val.parseIfStatement(); };
	_parser.ptr.prototype.parseSourceElement = function() {
		var $ptr, _r$2, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.parseStatement(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseSourceElement }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseSourceElement = function() { return this.$val.parseSourceElement(); };
	_parser.ptr.prototype.parseSourceElements = function() {
		var $ptr, _r$2, _r$3, body, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; body = $f.body; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		body = sliceType$8.nil;
		/* while (true) { */ case 1:
			if (!((self.token === 5))) {
				/* break; */ $s = 2; continue;
			}
			_r$2 = self.parseSourceElement(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			body = $append(body, _r$2);
		/* } */ $s = 1; continue; case 2:
		/* while (true) { */ case 4:
			/* if (!(!((self.token === 2)))) { break; } */ if(!(!((self.token === 2)))) { $s = 5; continue; }
			_r$3 = self.parseSourceElement(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			body = $append(body, _r$3);
		/* } */ $s = 4; continue; case 5:
		return body;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseSourceElements }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.body = body; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseSourceElements = function() { return this.$val.parseSourceElements(); };
	_parser.ptr.prototype.parseProgram = function() {
		var $ptr, _r$2, self, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; self = $f.self; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		self = this;
		self.openScope();
		$deferred.push([$methodVal(self, "closeScope"), []]);
		_r$2 = self.parseSourceElements(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return new ast.Program.ptr(_r$2, self.scope.declarationList, self.file);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$11.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseProgram }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.self = self; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	_parser.prototype.parseProgram = function() { return this.$val.parseProgram(); };
	_parser.ptr.prototype.parseBreakStatement = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, identifier, idx, self, semicolon, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; identifier = $f.identifier; idx = $f.idx; self = $f.self; semicolon = $f.semicolon; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.expect(74); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		idx = _r$2;
		semicolon = self.implicitSemicolon;
		/* */ if (self.token === 57) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (self.token === 57) { */ case 2:
			semicolon = true;
			$r = self.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ if (semicolon || (self.token === 56)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (semicolon || (self.token === 56)) { */ case 5:
			self.implicitSemicolon = false;
			/* */ if (!self.scope.inIteration && !self.scope.inSwitch) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!self.scope.inIteration && !self.scope.inSwitch) { */ case 7:
				/* goto illegal */ $s = 9; continue;
			/* } */ case 8:
			return new ast.BranchStatement.ptr(idx, 74, ptrType$3.nil);
		/* } */ case 6:
		/* */ if (self.token === 9) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (self.token === 9) { */ case 10:
			_r$3 = self.parseIdentifier(); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			identifier = _r$3;
			/* */ if (!self.scope.hasLabel(identifier.Name)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!self.scope.hasLabel(identifier.Name)) { */ case 13:
				_r$4 = self.error(new file.Idx(idx), "Undefined label '%s'", new sliceType([new $String(identifier.Name)])); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				return new ast.BadStatement.ptr(idx, identifier.Idx1());
			/* } */ case 14:
			$r = self.semicolon(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return new ast.BranchStatement.ptr(idx, 74, identifier);
		/* } */ case 11:
		_r$5 = self.expect(9); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		/* illegal: */ case 9:
		_r$6 = self.error(new file.Idx(idx), "Illegal break statement", new sliceType([])); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		$r = self.nextStatement(); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return new ast.BadStatement.ptr(idx, self.idx);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseBreakStatement }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.identifier = identifier; $f.idx = idx; $f.self = self; $f.semicolon = semicolon; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseBreakStatement = function() { return this.$val.parseBreakStatement(); };
	_parser.ptr.prototype.parseContinueStatement = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, identifier, idx, self, semicolon, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; identifier = $f.identifier; idx = $f.idx; self = $f.self; semicolon = $f.semicolon; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$2 = self.expect(84); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		idx = _r$2;
		semicolon = self.implicitSemicolon;
		/* */ if (self.token === 57) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (self.token === 57) { */ case 2:
			semicolon = true;
			$r = self.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ if (semicolon || (self.token === 56)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (semicolon || (self.token === 56)) { */ case 5:
			self.implicitSemicolon = false;
			/* */ if (!self.scope.inIteration) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!self.scope.inIteration) { */ case 7:
				/* goto illegal */ $s = 9; continue;
			/* } */ case 8:
			return new ast.BranchStatement.ptr(idx, 84, ptrType$3.nil);
		/* } */ case 6:
		/* */ if (self.token === 9) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (self.token === 9) { */ case 10:
			_r$3 = self.parseIdentifier(); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			identifier = _r$3;
			/* */ if (!self.scope.hasLabel(identifier.Name)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!self.scope.hasLabel(identifier.Name)) { */ case 13:
				_r$4 = self.error(new file.Idx(idx), "Undefined label '%s'", new sliceType([new $String(identifier.Name)])); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				return new ast.BadStatement.ptr(idx, identifier.Idx1());
			/* } */ case 14:
			/* */ if (!self.scope.inIteration) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (!self.scope.inIteration) { */ case 16:
				/* goto illegal */ $s = 9; continue;
			/* } */ case 17:
			$r = self.semicolon(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return new ast.BranchStatement.ptr(idx, 84, identifier);
		/* } */ case 11:
		_r$5 = self.expect(9); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		/* illegal: */ case 9:
		_r$6 = self.error(new file.Idx(idx), "Illegal continue statement", new sliceType([])); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		$r = self.nextStatement(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return new ast.BadStatement.ptr(idx, self.idx);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.parseContinueStatement }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.identifier = identifier; $f.idx = idx; $f.self = self; $f.semicolon = semicolon; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.parseContinueStatement = function() { return this.$val.parseContinueStatement(); };
	_parser.ptr.prototype.nextStatement = function() {
		var $ptr, _ref, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* while (true) { */ case 1:
			_ref = self.token;
			if (_ref === 74 || _ref === 84 || _ref === 65 || _ref === 61 || _ref === 77 || _ref === 80 || _ref === 64 || _ref === 63 || _ref === 67 || _ref === 72 || _ref === 73 || _ref === 76 || _ref === 75 || _ref === 82) {
				if ((self.idx === self.recover.idx) && self.recover.count < 10) {
					self.recover.count = self.recover.count + (1) >> 0;
					return;
				}
				if (self.idx > self.recover.idx) {
					self.recover.idx = self.idx;
					self.recover.count = 0;
					return;
				}
			} else if (_ref === 2) {
				return;
			}
			$r = self.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _parser.ptr.prototype.nextStatement }; } $f.$ptr = $ptr; $f._ref = _ref; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_parser.prototype.nextStatement = function() { return this.$val.nextStatement(); };
	Error.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ErrorList.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Sort", name: "Sort", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Err", name: "Err", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([file.Position, $String], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}];
	ptrType$23.methods = [{prop: "error", name: "error", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([$emptyInterface, $String, sliceType], [ptrType$17], true)}, {prop: "errorUnexpected", name: "errorUnexpected", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([file.Idx, $Int32], [$error], false)}, {prop: "errorUnexpectedToken", name: "errorUnexpectedToken", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([token.Token], [$error], false)}, {prop: "parseIdentifier", name: "parseIdentifier", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ptrType$3], false)}, {prop: "parsePrimaryExpression", name: "parsePrimaryExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseRegExpLiteral", name: "parseRegExpLiteral", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ptrType$18], false)}, {prop: "parseVariableDeclaration", name: "parseVariableDeclaration", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([ptrType$2], [ast.Expression], false)}, {prop: "parseVariableDeclarationList", name: "parseVariableDeclarationList", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([file.Idx], [sliceType$2], false)}, {prop: "parseObjectPropertyKey", name: "parseObjectPropertyKey", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [$String, $String], false)}, {prop: "parseObjectProperty", name: "parseObjectProperty", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Property], false)}, {prop: "parseObjectLiteral", name: "parseObjectLiteral", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseArrayLiteral", name: "parseArrayLiteral", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseArgumentList", name: "parseArgumentList", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [sliceType$2, file.Idx, file.Idx], false)}, {prop: "parseCallExpression", name: "parseCallExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([ast.Expression], [ast.Expression], false)}, {prop: "parseDotMember", name: "parseDotMember", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([ast.Expression], [ast.Expression], false)}, {prop: "parseBracketMember", name: "parseBracketMember", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([ast.Expression], [ast.Expression], false)}, {prop: "parseNewExpression", name: "parseNewExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseLeftHandSideExpression", name: "parseLeftHandSideExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseLeftHandSideExpressionAllowCall", name: "parseLeftHandSideExpressionAllowCall", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parsePostfixExpression", name: "parsePostfixExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseUnaryExpression", name: "parseUnaryExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseMultiplicativeExpression", name: "parseMultiplicativeExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseAdditiveExpression", name: "parseAdditiveExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseShiftExpression", name: "parseShiftExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseRelationalExpression", name: "parseRelationalExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseEqualityExpression", name: "parseEqualityExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseBitwiseAndExpression", name: "parseBitwiseAndExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseBitwiseExclusiveOrExpression", name: "parseBitwiseExclusiveOrExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseBitwiseOrExpression", name: "parseBitwiseOrExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseLogicalAndExpression", name: "parseLogicalAndExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseLogicalOrExpression", name: "parseLogicalOrExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseConditionlExpression", name: "parseConditionlExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseAssignmentExpression", name: "parseAssignmentExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "parseExpression", name: "parseExpression", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Expression], false)}, {prop: "scanIdentifier", name: "scanIdentifier", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [$String, $error], false)}, {prop: "scan", name: "scan", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [token.Token, $String, file.Idx], false)}, {prop: "switch2", name: "switch2", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([token.Token, token.Token], [token.Token], false)}, {prop: "switch3", name: "switch3", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([token.Token, token.Token, $Int32, token.Token], [token.Token], false)}, {prop: "switch4", name: "switch4", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([token.Token, token.Token, $Int32, token.Token, token.Token], [token.Token], false)}, {prop: "switch6", name: "switch6", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([token.Token, token.Token, $Int32, token.Token, token.Token, $Int32, token.Token, token.Token], [token.Token], false)}, {prop: "chrAt", name: "chrAt", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([$Int], [_chr], false)}, {prop: "_peek", name: "_peek", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [$Int32], false)}, {prop: "read", name: "read", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [], false)}, {prop: "skipSingleLineComment", name: "skipSingleLineComment", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [], false)}, {prop: "skipMultiLineComment", name: "skipMultiLineComment", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [], false)}, {prop: "skipWhiteSpace", name: "skipWhiteSpace", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [], false)}, {prop: "skipLineWhiteSpace", name: "skipLineWhiteSpace", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [], false)}, {prop: "scanMantissa", name: "scanMantissa", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([$Int], [], false)}, {prop: "scanEscape", name: "scanEscape", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([$Int32], [], false)}, {prop: "scanString", name: "scanString", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([$Int], [$String, $error], false)}, {prop: "scanNewline", name: "scanNewline", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [], false)}, {prop: "scanNumericLiteral", name: "scanNumericLiteral", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([$Bool], [token.Token, $String], false)}, {prop: "slice", name: "slice", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([file.Idx, file.Idx], [$String], false)}, {prop: "parse", name: "parse", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ptrType$11, $error], false)}, {prop: "next", name: "next", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [], false)}, {prop: "optionalSemicolon", name: "optionalSemicolon", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [], false)}, {prop: "semicolon", name: "semicolon", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [], false)}, {prop: "idxOf", name: "idxOf", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([$Int], [file.Idx], false)}, {prop: "expect", name: "expect", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([token.Token], [file.Idx], false)}, {prop: "position", name: "position", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([file.Idx], [file.Position], false)}, {prop: "openScope", name: "openScope", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [], false)}, {prop: "closeScope", name: "closeScope", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [], false)}, {prop: "parseBlockStatement", name: "parseBlockStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ptrType$19], false)}, {prop: "parseEmptyStatement", name: "parseEmptyStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Statement], false)}, {prop: "parseStatementList", name: "parseStatementList", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [sliceType$8], false)}, {prop: "parseStatement", name: "parseStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Statement], false)}, {prop: "parseTryStatement", name: "parseTryStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Statement], false)}, {prop: "parseFunctionParameterList", name: "parseFunctionParameterList", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ptrType$4], false)}, {prop: "parseParameterList", name: "parseParameterList", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [sliceType$7], false)}, {prop: "parseFunction", name: "parseFunction", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([$Bool], [ptrType$13], false)}, {prop: "parseFunctionBlock", name: "parseFunctionBlock", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([ptrType$13], [], false)}, {prop: "parseDebuggerStatement", name: "parseDebuggerStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Statement], false)}, {prop: "parseReturnStatement", name: "parseReturnStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Statement], false)}, {prop: "parseThrowStatement", name: "parseThrowStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Statement], false)}, {prop: "parseSwitchStatement", name: "parseSwitchStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Statement], false)}, {prop: "parseWithStatement", name: "parseWithStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Statement], false)}, {prop: "parseCaseStatement", name: "parseCaseStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ptrType$16], false)}, {prop: "parseIterationStatement", name: "parseIterationStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Statement], false)}, {prop: "parseForIn", name: "parseForIn", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([ast.Expression], [ptrType$20], false)}, {prop: "parseFor", name: "parseFor", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([ast.Expression], [ptrType$21], false)}, {prop: "parseForOrForInStatement", name: "parseForOrForInStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Statement], false)}, {prop: "parseVariableStatement", name: "parseVariableStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ptrType$22], false)}, {prop: "parseDoWhileStatement", name: "parseDoWhileStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Statement], false)}, {prop: "parseWhileStatement", name: "parseWhileStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Statement], false)}, {prop: "parseIfStatement", name: "parseIfStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Statement], false)}, {prop: "parseSourceElement", name: "parseSourceElement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Statement], false)}, {prop: "parseSourceElements", name: "parseSourceElements", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [sliceType$8], false)}, {prop: "parseProgram", name: "parseProgram", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ptrType$11], false)}, {prop: "parseBreakStatement", name: "parseBreakStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Statement], false)}, {prop: "parseContinueStatement", name: "parseContinueStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [ast.Statement], false)}, {prop: "nextStatement", name: "nextStatement", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [], false)}];
	ptrType$24.methods = [{prop: "read", name: "read", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [], false)}, {prop: "scan", name: "scan", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [], false)}, {prop: "scanGroup", name: "scanGroup", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [], false)}, {prop: "scanBracket", name: "scanBracket", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [], false)}, {prop: "scanEscape", name: "scanEscape", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([$Bool], [], false)}, {prop: "pass", name: "pass", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([], [], false)}, {prop: "error", name: "error", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([$Int, $String, sliceType], [$error], true)}];
	ptrType$8.methods = [{prop: "declare", name: "declare", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([ast.Declaration], [], false)}, {prop: "hasLabel", name: "hasLabel", pkg: "github.com/robertkrimen/otto/parser", typ: $funcType([$String], [$Bool], false)}];
	Error.init([{prop: "Position", name: "Position", pkg: "", typ: file.Position, tag: ""}, {prop: "Message", name: "Message", pkg: "", typ: $String, tag: ""}]);
	ErrorList.init(ptrType$17);
	_chr.init([{prop: "value", name: "value", pkg: "github.com/robertkrimen/otto/parser", typ: $Int32, tag: ""}, {prop: "width", name: "width", pkg: "github.com/robertkrimen/otto/parser", typ: $Int, tag: ""}]);
	_parser.init([{prop: "str", name: "str", pkg: "github.com/robertkrimen/otto/parser", typ: $String, tag: ""}, {prop: "length", name: "length", pkg: "github.com/robertkrimen/otto/parser", typ: $Int, tag: ""}, {prop: "base", name: "base", pkg: "github.com/robertkrimen/otto/parser", typ: $Int, tag: ""}, {prop: "chr", name: "chr", pkg: "github.com/robertkrimen/otto/parser", typ: $Int32, tag: ""}, {prop: "chrOffset", name: "chrOffset", pkg: "github.com/robertkrimen/otto/parser", typ: $Int, tag: ""}, {prop: "offset", name: "offset", pkg: "github.com/robertkrimen/otto/parser", typ: $Int, tag: ""}, {prop: "idx", name: "idx", pkg: "github.com/robertkrimen/otto/parser", typ: file.Idx, tag: ""}, {prop: "token", name: "token", pkg: "github.com/robertkrimen/otto/parser", typ: token.Token, tag: ""}, {prop: "literal", name: "literal", pkg: "github.com/robertkrimen/otto/parser", typ: $String, tag: ""}, {prop: "scope", name: "scope", pkg: "github.com/robertkrimen/otto/parser", typ: ptrType$8, tag: ""}, {prop: "insertSemicolon", name: "insertSemicolon", pkg: "github.com/robertkrimen/otto/parser", typ: $Bool, tag: ""}, {prop: "implicitSemicolon", name: "implicitSemicolon", pkg: "github.com/robertkrimen/otto/parser", typ: $Bool, tag: ""}, {prop: "errors", name: "errors", pkg: "github.com/robertkrimen/otto/parser", typ: ErrorList, tag: ""}, {prop: "recover", name: "recover", pkg: "github.com/robertkrimen/otto/parser", typ: structType, tag: ""}, {prop: "mode", name: "mode", pkg: "github.com/robertkrimen/otto/parser", typ: Mode, tag: ""}, {prop: "file", name: "file", pkg: "github.com/robertkrimen/otto/parser", typ: ptrType$9, tag: ""}]);
	_RegExp_parser.init([{prop: "str", name: "str", pkg: "github.com/robertkrimen/otto/parser", typ: $String, tag: ""}, {prop: "length", name: "length", pkg: "github.com/robertkrimen/otto/parser", typ: $Int, tag: ""}, {prop: "chr", name: "chr", pkg: "github.com/robertkrimen/otto/parser", typ: $Int32, tag: ""}, {prop: "chrOffset", name: "chrOffset", pkg: "github.com/robertkrimen/otto/parser", typ: $Int, tag: ""}, {prop: "offset", name: "offset", pkg: "github.com/robertkrimen/otto/parser", typ: $Int, tag: ""}, {prop: "errors", name: "errors", pkg: "github.com/robertkrimen/otto/parser", typ: sliceType$6, tag: ""}, {prop: "invalid", name: "invalid", pkg: "github.com/robertkrimen/otto/parser", typ: $Bool, tag: ""}, {prop: "goRegexp", name: "goRegexp", pkg: "github.com/robertkrimen/otto/parser", typ: ptrType$10, tag: ""}]);
	_scope.init([{prop: "outer", name: "outer", pkg: "github.com/robertkrimen/otto/parser", typ: ptrType$8, tag: ""}, {prop: "allowIn", name: "allowIn", pkg: "github.com/robertkrimen/otto/parser", typ: $Bool, tag: ""}, {prop: "inIteration", name: "inIteration", pkg: "github.com/robertkrimen/otto/parser", typ: $Bool, tag: ""}, {prop: "inSwitch", name: "inSwitch", pkg: "github.com/robertkrimen/otto/parser", typ: $Bool, tag: ""}, {prop: "inFunction", name: "inFunction", pkg: "github.com/robertkrimen/otto/parser", typ: $Bool, tag: ""}, {prop: "declarationList", name: "declarationList", pkg: "github.com/robertkrimen/otto/parser", typ: sliceType$3, tag: ""}, {prop: "labels", name: "labels", pkg: "github.com/robertkrimen/otto/parser", typ: sliceType$7, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ast.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dbg.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = file.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = token.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ioutil.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = regexp.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = dbg.New(new sliceType([])); /* */ $s = 16; case 16: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		dbg$1 = _tuple[0];
		dbgf = _tuple[1];
		_r$1 = regexp.MustCompile("^[$_\\p{L}][$_\\p{L}\\d}]*$"); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		matchIdentifier = _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/robertkrimen/otto/registry"] = (function() {
	var $pkg = {}, $init, Entry, ptrType, sliceType, funcType, registry, Apply;
	Entry = $pkg.Entry = $newType(0, $kindStruct, "registry.Entry", "Entry", "github.com/robertkrimen/otto/registry", function(active_, source_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.active = false;
			this.source = $throwNilPointerError;
			return;
		}
		this.active = active_;
		this.source = source_;
	});
	ptrType = $ptrType(Entry);
	sliceType = $sliceType(ptrType);
	funcType = $funcType([], [$String], false);
	Entry.ptr.prototype.Enable = function() {
		var $ptr, self;
		self = this;
		self.active = true;
	};
	Entry.prototype.Enable = function() { return this.$val.Enable(); };
	Entry.ptr.prototype.Disable = function() {
		var $ptr, self;
		self = this;
		self.active = false;
	};
	Entry.prototype.Disable = function() { return this.$val.Disable(); };
	Entry.ptr.prototype.Source = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, Entry);
		_r = self.source(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Entry.ptr.prototype.Source }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	Entry.prototype.Source = function() { return this.$val.Source(); };
	Apply = function(callback) {
		var $ptr, _i, _ref, callback, entry, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; callback = $f.callback; entry = $f.entry; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = registry;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			entry = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (!entry.active) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!entry.active) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			$r = callback(entry); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Apply }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.callback = callback; $f.entry = entry; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Apply = Apply;
	Entry.methods = [{prop: "Source", name: "Source", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType.methods = [{prop: "Enable", name: "Enable", pkg: "", typ: $funcType([], [], false)}, {prop: "Disable", name: "Disable", pkg: "", typ: $funcType([], [], false)}];
	Entry.init([{prop: "active", name: "active", pkg: "github.com/robertkrimen/otto/registry", typ: $Bool, tag: ""}, {prop: "source", name: "source", pkg: "github.com/robertkrimen/otto/registry", typ: funcType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		registry = $makeSlice(sliceType, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/rand"] = (function() {
	var $pkg = {}, $init, nosync, math, Source, Rand, lockedSource, rngSource, arrayType, sliceType, ptrType, ptrType$2, ptrType$3, ke, we, fe, kn, wn, fn, globalRand, rng_cooked, absInt32, NewSource, New, Float64, seedrand;
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	math = $packages["math"];
	Source = $pkg.Source = $newType(8, $kindInterface, "rand.Source", "Source", "math/rand", null);
	Rand = $pkg.Rand = $newType(0, $kindStruct, "rand.Rand", "Rand", "math/rand", function(src_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.src = $ifaceNil;
			return;
		}
		this.src = src_;
	});
	lockedSource = $pkg.lockedSource = $newType(0, $kindStruct, "rand.lockedSource", "lockedSource", "math/rand", function(lk_, src_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lk = new nosync.Mutex.ptr(false);
			this.src = $ifaceNil;
			return;
		}
		this.lk = lk_;
		this.src = src_;
	});
	rngSource = $pkg.rngSource = $newType(0, $kindStruct, "rand.rngSource", "rngSource", "math/rand", function(tap_, feed_, vec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.tap = 0;
			this.feed = 0;
			this.vec = arrayType.zero();
			return;
		}
		this.tap = tap_;
		this.feed = feed_;
		this.vec = vec_;
	});
	arrayType = $arrayType($Int64, 607);
	sliceType = $sliceType($Int);
	ptrType = $ptrType(Rand);
	ptrType$2 = $ptrType(lockedSource);
	ptrType$3 = $ptrType(rngSource);
	Rand.ptr.prototype.ExpFloat64 = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, i, j, r, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; j = $f.j; r = $f.r; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* while (true) { */ case 1:
			_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = _r;
			i = (j & 255) >>> 0;
			x = j * ((i < 0 || i >= we.length) ? $throwRuntimeError("index out of range") : we[i]);
			if (j < ((i < 0 || i >= ke.length) ? $throwRuntimeError("index out of range") : ke[i])) {
				return x;
			}
			/* */ if (i === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === 0) { */ case 4:
				_r$1 = r.Float64(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = math.Log(_r$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ $s = 8; case 8:
				return 7.69711747013105 - _r$2;
			/* } */ case 5:
			_r$3 = r.Float64(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if ($fround(((i < 0 || i >= fe.length) ? $throwRuntimeError("index out of range") : fe[i]) + $fround($fround(_r$3) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? $throwRuntimeError("index out of range") : fe[x$1])) - ((i < 0 || i >= fe.length) ? $throwRuntimeError("index out of range") : fe[i]))))) < $fround(math.Exp(-x))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if ($fround(((i < 0 || i >= fe.length) ? $throwRuntimeError("index out of range") : fe[i]) + $fround($fround(_r$3) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? $throwRuntimeError("index out of range") : fe[x$1])) - ((i < 0 || i >= fe.length) ? $throwRuntimeError("index out of range") : fe[i]))))) < $fround(math.Exp(-x))) { */ case 9:
				return x;
			/* } */ case 10:
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.ExpFloat64 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.j = j; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.ExpFloat64 = function() { return this.$val.ExpFloat64(); };
	absInt32 = function(i) {
		var $ptr, i;
		if (i < 0) {
			return (-i >>> 0);
		}
		return (i >>> 0);
	};
	Rand.ptr.prototype.NormFloat64 = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, i, j, r, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; i = $f.i; j = $f.j; r = $f.r; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* while (true) { */ case 1:
			_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = (_r >> 0);
			i = j & 127;
			x = j * ((i < 0 || i >= wn.length) ? $throwRuntimeError("index out of range") : wn[i]);
			if (absInt32(j) < ((i < 0 || i >= kn.length) ? $throwRuntimeError("index out of range") : kn[i])) {
				return x;
			}
			/* */ if (i === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === 0) { */ case 4:
				/* while (true) { */ case 6:
					_r$1 = r.Float64(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = math.Log(_r$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					x = -_r$2 * 0.29047645161474317;
					_r$3 = r.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = math.Log(_r$3); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					y = -_r$4;
					if (y + y >= x * x) {
						/* break; */ $s = 7; continue;
					}
				/* } */ $s = 6; continue; case 7:
				if (j > 0) {
					return 3.442619855899 + x;
				}
				return -3.442619855899 - x;
			/* } */ case 5:
			_r$5 = r.Float64(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if ($fround(((i < 0 || i >= fn.length) ? $throwRuntimeError("index out of range") : fn[i]) + $fround($fround(_r$5) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? $throwRuntimeError("index out of range") : fn[x$1])) - ((i < 0 || i >= fn.length) ? $throwRuntimeError("index out of range") : fn[i]))))) < $fround(math.Exp(-0.5 * x * x))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ($fround(((i < 0 || i >= fn.length) ? $throwRuntimeError("index out of range") : fn[i]) + $fround($fround(_r$5) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? $throwRuntimeError("index out of range") : fn[x$1])) - ((i < 0 || i >= fn.length) ? $throwRuntimeError("index out of range") : fn[i]))))) < $fround(math.Exp(-0.5 * x * x))) { */ case 12:
				return x;
			/* } */ case 13:
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.NormFloat64 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.i = i; $f.j = j; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.NormFloat64 = function() { return this.$val.NormFloat64(); };
	NewSource = function(seed) {
		var $ptr, rng, seed;
		rng = new rngSource.ptr(0, 0, arrayType.zero());
		rng.Seed(seed);
		return rng;
	};
	$pkg.NewSource = NewSource;
	New = function(src) {
		var $ptr, src;
		return new Rand.ptr(src);
	};
	$pkg.New = New;
	Rand.ptr.prototype.Seed = function(seed) {
		var $ptr, r, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Seed }; } $f.$ptr = $ptr; $f.r = r; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	Rand.ptr.prototype.Int63 = function() {
		var $ptr, _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int63 }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int63 = function() { return this.$val.Int63(); };
	Rand.ptr.prototype.Uint32 = function() {
		var $ptr, _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return ($shiftRightInt64(_r, 31).$low >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Uint32 }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Uint32 = function() { return this.$val.Uint32(); };
	Rand.ptr.prototype.Int31 = function() {
		var $ptr, _r, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return ((x = $shiftRightInt64(_r, 32), x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int31 }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int31 = function() { return this.$val.Int31(); };
	Rand.ptr.prototype.Int = function() {
		var $ptr, _r, r, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		u = (_r.$low >>> 0);
		return (((u << 1 >>> 0) >>> 1 >>> 0) >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int = function() { return this.$val.Int(); };
	Rand.ptr.prototype.Int63n = function(n) {
		var $ptr, _r, _r$1, _r$2, max, n, r, v, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; max = $f.max; n = $f.n; r = $f.r; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if ((n.$high < 0 || (n.$high === 0 && n.$low <= 0))) {
			$panic(new $String("invalid argument to Int63n"));
		}
		/* */ if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { */ case 1:
			_r = r.Int63(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return (x$2 = _r, x$3 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		/* } */ case 2:
		max = (x$4 = (x$5 = $div64(new $Uint64(2147483648, 0), new $Uint64(n.$high, n.$low), true), new $Uint64(2147483647 - x$5.$high, 4294967295 - x$5.$low)), new $Int64(x$4.$high, x$4.$low));
		_r$1 = r.Int63(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		v = _r$1;
		/* while (true) { */ case 6:
			/* if (!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { break; } */ if(!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { $s = 7; continue; }
			_r$2 = r.Int63(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
		/* } */ $s = 6; continue; case 7:
		return $div64(v, n, true);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int63n }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.max = max; $f.n = n; $f.r = r; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int63n = function(n) { return this.$val.Int63n(n); };
	Rand.ptr.prototype.Int31n = function(n) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, max, n, r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; max = $f.max; n = $f.n; r = $f.r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Int31n"));
		}
		/* */ if ((n & ((n - 1 >> 0))) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((n & ((n - 1 >> 0))) === 0) { */ case 1:
			_r = r.Int31(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r & ((n - 1 >> 0));
		/* } */ case 2:
		max = ((2147483647 - (_r$1 = 2147483648 % (n >>> 0), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >>> 0) >> 0);
		_r$2 = r.Int31(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		v = _r$2;
		/* while (true) { */ case 6:
			/* if (!(v > max)) { break; } */ if(!(v > max)) { $s = 7; continue; }
			_r$3 = r.Int31(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
		/* } */ $s = 6; continue; case 7:
		return (_r$4 = v % n, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int31n }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.max = max; $f.n = n; $f.r = r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int31n = function(n) { return this.$val.Int31n(n); };
	Rand.ptr.prototype.Intn = function(n) {
		var $ptr, _r, _r$1, n, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; n = $f.n; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Intn"));
		}
		/* */ if (n <= 2147483647) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n <= 2147483647) { */ case 1:
			_r = r.Int31n((n >> 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return (_r >> 0);
		/* } */ case 2:
		_r$1 = r.Int63n(new $Int64(0, n)); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return ((x = _r$1, x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Intn }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.n = n; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Intn = function(n) { return this.$val.Intn(n); };
	Rand.ptr.prototype.Float64 = function() {
		var $ptr, _r, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = $flatten64(_r) / 9.223372036854776e+18;
		if (f === 1) {
			f = 0;
		}
		return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Float64 }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Float64 = function() { return this.$val.Float64(); };
	Rand.ptr.prototype.Float32 = function() {
		var $ptr, _r, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = $fround(_r);
		if (f === 1) {
			f = 0;
		}
		return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Float32 }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Float32 = function() { return this.$val.Float32(); };
	Rand.ptr.prototype.Perm = function(n) {
		var $ptr, _r, i, j, m, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; j = $f.j; m = $f.m; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		m = $makeSlice(sliceType, n);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_r = r.Intn(i + 1 >> 0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = _r;
			((i < 0 || i >= m.$length) ? $throwRuntimeError("index out of range") : m.$array[m.$offset + i] = ((j < 0 || j >= m.$length) ? $throwRuntimeError("index out of range") : m.$array[m.$offset + j]));
			((j < 0 || j >= m.$length) ? $throwRuntimeError("index out of range") : m.$array[m.$offset + j] = i);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Perm }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.j = j; $f.m = m; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Perm = function(n) { return this.$val.Perm(n); };
	Float64 = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = globalRand.Float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float64 }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Float64 = Float64;
	lockedSource.ptr.prototype.Int63 = function() {
		var $ptr, _r, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		r = this;
		r.lk.Lock();
		_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		r.lk.Unlock();
		return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Int63 }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Int63 = function() { return this.$val.Int63(); };
	lockedSource.ptr.prototype.Seed = function(seed) {
		var $ptr, r, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		r.lk.Lock();
		$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r.lk.Unlock();
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Seed }; } $f.$ptr = $ptr; $f.r = r; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	seedrand = function(x) {
		var $ptr, _q, _r, hi, lo, x;
		hi = (_q = x / 44488, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		lo = (_r = x % 44488, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		x = ($imul(48271, lo)) - ($imul(3399, hi)) >> 0;
		if (x < 0) {
			x = x + (2147483647) >> 0;
		}
		return x;
	};
	rngSource.ptr.prototype.Seed = function(seed) {
		var $ptr, i, rng, seed, u, x, x$1, x$2, x$3, x$4, x$5;
		rng = this;
		rng.tap = 0;
		rng.feed = 334;
		seed = $div64(seed, new $Int64(0, 2147483647), true);
		if ((seed.$high < 0 || (seed.$high === 0 && seed.$low < 0))) {
			seed = (x = new $Int64(0, 2147483647), new $Int64(seed.$high + x.$high, seed.$low + x.$low));
		}
		if ((seed.$high === 0 && seed.$low === 0)) {
			seed = new $Int64(0, 89482311);
		}
		x$1 = ((seed.$low + ((seed.$high >> 31) * 4294967296)) >> 0);
		i = -20;
		while (true) {
			if (!(i < 607)) { break; }
			x$1 = seedrand(x$1);
			if (i >= 0) {
				u = new $Int64(0, 0);
				u = $shiftLeft64(new $Int64(0, x$1), 40);
				x$1 = seedrand(x$1);
				u = (x$2 = $shiftLeft64(new $Int64(0, x$1), 20), new $Int64(u.$high ^ x$2.$high, (u.$low ^ x$2.$low) >>> 0));
				x$1 = seedrand(x$1);
				u = (x$3 = new $Int64(0, x$1), new $Int64(u.$high ^ x$3.$high, (u.$low ^ x$3.$low) >>> 0));
				u = (x$4 = ((i < 0 || i >= rng_cooked.length) ? $throwRuntimeError("index out of range") : rng_cooked[i]), new $Int64(u.$high ^ x$4.$high, (u.$low ^ x$4.$low) >>> 0));
				(x$5 = rng.vec, ((i < 0 || i >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[i] = new $Int64(u.$high & 2147483647, (u.$low & 4294967295) >>> 0)));
			}
			i = i + (1) >> 0;
		}
	};
	rngSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	rngSource.ptr.prototype.Int63 = function() {
		var $ptr, rng, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		rng = this;
		rng.tap = rng.tap - (1) >> 0;
		if (rng.tap < 0) {
			rng.tap = rng.tap + (607) >> 0;
		}
		rng.feed = rng.feed - (1) >> 0;
		if (rng.feed < 0) {
			rng.feed = rng.feed + (607) >> 0;
		}
		x$7 = (x = (x$1 = (x$2 = rng.vec, x$3 = rng.feed, ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[x$3])), x$4 = (x$5 = rng.vec, x$6 = rng.tap, ((x$6 < 0 || x$6 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[x$6])), new $Int64(x$1.$high + x$4.$high, x$1.$low + x$4.$low)), new $Int64(x.$high & 2147483647, (x.$low & 4294967295) >>> 0));
		(x$8 = rng.vec, x$9 = rng.feed, ((x$9 < 0 || x$9 >= x$8.length) ? $throwRuntimeError("index out of range") : x$8[x$9] = x$7));
		return x$7;
	};
	rngSource.prototype.Int63 = function() { return this.$val.Int63(); };
	ptrType.methods = [{prop: "ExpFloat64", name: "ExpFloat64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "NormFloat64", name: "NormFloat64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Int31", name: "Int31", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int63n", name: "Int63n", pkg: "", typ: $funcType([$Int64], [$Int64], false)}, {prop: "Int31n", name: "Int31n", pkg: "", typ: $funcType([$Int32], [$Int32], false)}, {prop: "Intn", name: "Intn", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Float32", name: "Float32", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([$Int], [sliceType], false)}];
	ptrType$2.methods = [{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}];
	ptrType$3.methods = [{prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}];
	Source.init([{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}]);
	Rand.init([{prop: "src", name: "src", pkg: "math/rand", typ: Source, tag: ""}]);
	lockedSource.init([{prop: "lk", name: "lk", pkg: "math/rand", typ: nosync.Mutex, tag: ""}, {prop: "src", name: "src", pkg: "math/rand", typ: Source, tag: ""}]);
	rngSource.init([{prop: "tap", name: "tap", pkg: "math/rand", typ: $Int, tag: ""}, {prop: "feed", name: "feed", pkg: "math/rand", typ: $Int, tag: ""}, {prop: "vec", name: "vec", pkg: "math/rand", typ: arrayType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = nosync.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ke = $toNativeArray($kindUint32, [3801129273, 0, 2615860924, 3279400049, 3571300752, 3733536696, 3836274812, 3906990442, 3958562475, 3997804264, 4028649213, 4053523342, 4074002619, 4091154507, 4105727352, 4118261130, 4129155133, 4138710916, 4147160435, 4154685009, 4161428406, 4167506077, 4173011791, 4178022498, 4182601930, 4186803325, 4190671498, 4194244443, 4197554582, 4200629752, 4203493986, 4206168142, 4208670408, 4211016720, 4213221098, 4215295924, 4217252177, 4219099625, 4220846988, 4222502074, 4224071896, 4225562770, 4226980400, 4228329951, 4229616109, 4230843138, 4232014925, 4233135020, 4234206673, 4235232866, 4236216336, 4237159604, 4238064994, 4238934652, 4239770563, 4240574564, 4241348362, 4242093539, 4242811568, 4243503822, 4244171579, 4244816032, 4245438297, 4246039419, 4246620374, 4247182079, 4247725394, 4248251127, 4248760037, 4249252839, 4249730206, 4250192773, 4250641138, 4251075867, 4251497493, 4251906522, 4252303431, 4252688672, 4253062674, 4253425844, 4253778565, 4254121205, 4254454110, 4254777611, 4255092022, 4255397640, 4255694750, 4255983622, 4256264513, 4256537670, 4256803325, 4257061702, 4257313014, 4257557464, 4257795244, 4258026541, 4258251531, 4258470383, 4258683258, 4258890309, 4259091685, 4259287526, 4259477966, 4259663135, 4259843154, 4260018142, 4260188212, 4260353470, 4260514019, 4260669958, 4260821380, 4260968374, 4261111028, 4261249421, 4261383632, 4261513736, 4261639802, 4261761900, 4261880092, 4261994441, 4262105003, 4262211835, 4262314988, 4262414513, 4262510454, 4262602857, 4262691764, 4262777212, 4262859239, 4262937878, 4263013162, 4263085118, 4263153776, 4263219158, 4263281289, 4263340187, 4263395872, 4263448358, 4263497660, 4263543789, 4263586755, 4263626565, 4263663224, 4263696735, 4263727099, 4263754314, 4263778377, 4263799282, 4263817020, 4263831582, 4263842955, 4263851124, 4263856071, 4263857776, 4263856218, 4263851370, 4263843206, 4263831695, 4263816804, 4263798497, 4263776735, 4263751476, 4263722676, 4263690284, 4263654251, 4263614520, 4263571032, 4263523724, 4263472530, 4263417377, 4263358192, 4263294892, 4263227394, 4263155608, 4263079437, 4262998781, 4262913534, 4262823581, 4262728804, 4262629075, 4262524261, 4262414220, 4262298801, 4262177846, 4262051187, 4261918645, 4261780032, 4261635148, 4261483780, 4261325704, 4261160681, 4260988457, 4260808763, 4260621313, 4260425802, 4260221905, 4260009277, 4259787550, 4259556329, 4259315195, 4259063697, 4258801357, 4258527656, 4258242044, 4257943926, 4257632664, 4257307571, 4256967906, 4256612870, 4256241598, 4255853155, 4255446525, 4255020608, 4254574202, 4254106002, 4253614578, 4253098370, 4252555662, 4251984571, 4251383021, 4250748722, 4250079132, 4249371435, 4248622490, 4247828790, 4246986404, 4246090910, 4245137315, 4244119963, 4243032411, 4241867296, 4240616155, 4239269214, 4237815118, 4236240596, 4234530035, 4232664930, 4230623176, 4228378137, 4225897409, 4223141146, 4220059768, 4216590757, 4212654085, 4208145538, 4202926710, 4196809522, 4189531420, 4180713890, 4169789475, 4155865042, 4137444620, 4111806704, 4073393724, 4008685917, 3873074895]);
		we = $toNativeArray($kindFloat32, [2.0249555365836613e-09, 1.4866739783681027e-11, 2.4409616689036184e-11, 3.1968806074589295e-11, 3.844677007314168e-11, 4.42282044321729e-11, 4.951644302919611e-11, 5.443358958023836e-11, 5.905943789574764e-11, 6.34494193296753e-11, 6.764381416113352e-11, 7.167294535648239e-11, 7.556032188826833e-11, 7.932458162551725e-11, 8.298078890689453e-11, 8.654132271912474e-11, 9.001651507523079e-11, 9.341507428706208e-11, 9.674443190998971e-11, 1.0001099254308699e-10, 1.0322031424037093e-10, 1.0637725422757427e-10, 1.0948611461891744e-10, 1.1255067711157807e-10, 1.1557434870246297e-10, 1.1856014781042035e-10, 1.2151082917633005e-10, 1.2442885610752796e-10, 1.2731647680563896e-10, 1.3017574518325858e-10, 1.330085347417409e-10, 1.3581656632677408e-10, 1.386014220061682e-10, 1.413645728254309e-10, 1.4410737880776736e-10, 1.4683107507629245e-10, 1.4953686899854546e-10, 1.522258291641876e-10, 1.5489899640730442e-10, 1.575573282952547e-10, 1.6020171300645814e-10, 1.628330109637588e-10, 1.6545202707884954e-10, 1.68059510752272e-10, 1.7065616975120435e-10, 1.73242697965037e-10, 1.758197337720091e-10, 1.783878739169964e-10, 1.8094774290045024e-10, 1.834998542005195e-10, 1.8604476292871652e-10, 1.8858298256319017e-10, 1.9111498494872592e-10, 1.9364125580789704e-10, 1.9616222535212557e-10, 1.9867835154840918e-10, 2.011900368525943e-10, 2.0369768372052732e-10, 2.062016807302669e-10, 2.0870240258208383e-10, 2.1120022397624894e-10, 2.136955057352452e-10, 2.1618855317040442e-10, 2.1867974098199738e-10, 2.2116936060356807e-10, 2.2365774510202385e-10, 2.2614519978869652e-10, 2.2863201609713002e-10, 2.3111849933865614e-10, 2.3360494094681883e-10, 2.3609159072179864e-10, 2.3857874009713953e-10, 2.4106666662859766e-10, 2.4355562011635357e-10, 2.460458781161634e-10, 2.485376904282077e-10, 2.5103127909709144e-10, 2.5352694943414633e-10, 2.560248957284017e-10, 2.585253955356137e-10, 2.610286709003873e-10, 2.6353494386732734e-10, 2.6604446423661443e-10, 2.6855745405285347e-10, 2.71074163116225e-10, 2.7359478571575835e-10, 2.7611959940720965e-10, 2.786487707240326e-10, 2.8118254946640775e-10, 2.8372118543451563e-10, 2.8626484516180994e-10, 2.8881380620404684e-10, 2.9136826285025563e-10, 2.9392840938946563e-10, 2.96494523377433e-10, 2.990667713476114e-10, 3.016454031001814e-10, 3.042306406797479e-10, 3.068226783753403e-10, 3.09421765987139e-10, 3.12028125559749e-10, 3.1464195138219964e-10, 3.17263521010247e-10, 3.1989300097734485e-10, 3.225306410836737e-10, 3.2517669112941405e-10, 3.2783134540359526e-10, 3.3049485370639786e-10, 3.3316743808242677e-10, 3.3584937608743815e-10, 3.385408342548857e-10, 3.4124211789610115e-10, 3.4395342130011386e-10, 3.4667499426710435e-10, 3.494071143528288e-10, 3.521500313574677e-10, 3.54903967325626e-10, 3.576691720574843e-10, 3.6044595086437425e-10, 3.632345535464765e-10, 3.660352021483959e-10, 3.688482297370399e-10, 3.716738583570134e-10, 3.7451239331964814e-10, 3.773641121807003e-10, 3.802292924959261e-10, 3.831082673322328e-10, 3.8600128648980103e-10, 3.8890865527996255e-10, 3.9183070676962473e-10, 3.9476774627011935e-10, 3.977200790927782e-10, 4.006880383045086e-10, 4.0367195697221803e-10, 4.066721681628138e-10, 4.0968900494320337e-10, 4.127228558914453e-10, 4.15774054074447e-10, 4.188429603146915e-10, 4.2192993543466173e-10, 4.25035395767992e-10, 4.2815970213716525e-10, 4.313032986313914e-10, 4.3446651831757777e-10, 4.376498607960855e-10, 4.408536868893975e-10, 4.4407846844229937e-10, 4.4732464954400086e-10, 4.5059267428371186e-10, 4.538830145062178e-10, 4.5719619756745544e-10, 4.605326675566346e-10, 4.638929240741163e-10, 4.672775499869886e-10, 4.706869893844612e-10, 4.74121908400349e-10, 4.775827511238617e-10, 4.810701836888143e-10, 4.845848167178701e-10, 4.881271498113904e-10, 4.916979601254923e-10, 4.952977472605369e-10, 4.989272883726414e-10, 5.025872495956207e-10, 5.062783525744408e-10, 5.100013189540675e-10, 5.13756870379467e-10, 5.175458395179078e-10, 5.21369003525507e-10, 5.252272505806843e-10, 5.29121357839557e-10, 5.330522134805449e-10, 5.3702081670437e-10, 5.41028055689452e-10, 5.450749851476644e-10, 5.491624932574268e-10, 5.532918012640664e-10, 5.574638528571541e-10, 5.616799247931681e-10, 5.659410717839819e-10, 5.702485705860738e-10, 5.746036979559221e-10, 5.790077306500052e-10, 5.83462111958255e-10, 5.879682296594524e-10, 5.925275825546805e-10, 5.971417249561739e-10, 6.01812211176167e-10, 6.065408175714992e-10, 6.113292094767075e-10, 6.16179329782085e-10, 6.21092954844471e-10, 6.260721940876124e-10, 6.311191569352559e-10, 6.362359528111483e-10, 6.414249686947926e-10, 6.466885360545405e-10, 6.520292639144998e-10, 6.574497612987784e-10, 6.629528592760892e-10, 6.685415554485985e-10, 6.742187919073217e-10, 6.799880103436351e-10, 6.858525969377638e-10, 6.918161599145378e-10, 6.978825850545434e-10, 7.040559801829716e-10, 7.103406751696184e-10, 7.167412219288849e-10, 7.232625609532306e-10, 7.2990985477972e-10, 7.366885990123251e-10, 7.436047333442275e-10, 7.506645305355164e-10, 7.57874762946642e-10, 7.652426470272644e-10, 7.727759543385559e-10, 7.804830115532013e-10, 7.883728114777e-10, 7.964550685635174e-10, 8.047402189070851e-10, 8.132396422944055e-10, 8.219657177122031e-10, 8.309318788590758e-10, 8.401527806789488e-10, 8.496445214056791e-10, 8.594246980742071e-10, 8.695127395874636e-10, 8.799300732498239e-10, 8.90700457834015e-10, 9.01850316648023e-10, 9.134091816243028e-10, 9.254100818978372e-10, 9.37890431984556e-10, 9.508922538259412e-10, 9.64463842123564e-10, 9.78660263939446e-10, 9.935448019859905e-10, 1.0091912860943353e-09, 1.0256859805934937e-09, 1.0431305819125214e-09, 1.0616465484503124e-09, 1.0813799855569073e-09, 1.1025096391392708e-09, 1.1252564435793033e-09, 1.149898620766976e-09, 1.176793218427008e-09, 1.2064089727203964e-09, 1.2393785997488749e-09, 1.2765849488616254e-09, 1.319313880365769e-09, 1.36954347862428e-09, 1.4305497897382224e-09, 1.5083649884672923e-09, 1.6160853766322703e-09, 1.7921247819074893e-09]);
		fe = $toNativeArray($kindFloat32, [1, 0.9381436705589294, 0.900469958782196, 0.8717043399810791, 0.847785472869873, 0.8269932866096497, 0.8084216713905334, 0.7915276288986206, 0.7759568691253662, 0.7614634037017822, 0.7478685975074768, 0.7350381016731262, 0.7228676676750183, 0.7112747430801392, 0.7001926302909851, 0.6895664930343628, 0.6793505549430847, 0.669506311416626, 0.6600008606910706, 0.6508058309555054, 0.6418967247009277, 0.633251965045929, 0.62485271692276, 0.6166821718215942, 0.608725368976593, 0.6009689569473267, 0.5934008955955505, 0.5860103368759155, 0.5787873864173889, 0.5717230439186096, 0.5648092031478882, 0.5580382943153381, 0.5514034032821655, 0.5448982119560242, 0.5385168790817261, 0.5322538614273071, 0.526104211807251, 0.5200631618499756, 0.5141264200210571, 0.5082897543907166, 0.5025495290756226, 0.4969019889831543, 0.4913438558578491, 0.4858720004558563, 0.48048335313796997, 0.4751752018928528, 0.4699448347091675, 0.4647897481918335, 0.4597076177597046, 0.4546961486339569, 0.4497532546520233, 0.44487687945365906, 0.4400651156902313, 0.4353161156177521, 0.4306281507015228, 0.42599955201148987, 0.42142874002456665, 0.4169141948223114, 0.4124544560909271, 0.40804818272590637, 0.4036940038204193, 0.39939069747924805, 0.3951369822025299, 0.39093172550201416, 0.38677382469177246, 0.38266217708587646, 0.378595769405365, 0.37457355856895447, 0.37059465050697327, 0.366658091545105, 0.362762987613678, 0.358908474445343, 0.35509374737739563, 0.35131800174713135, 0.3475804924964905, 0.34388044476509094, 0.34021714329719543, 0.33658990263938904, 0.3329980671405792, 0.3294409513473511, 0.32591795921325684, 0.32242849469184875, 0.3189719021320343, 0.3155476748943329, 0.31215524673461914, 0.3087940812110901, 0.30546361207962036, 0.30216339230537415, 0.29889291524887085, 0.29565170407295227, 0.2924392819404602, 0.2892552316188812, 0.28609907627105713, 0.2829704284667969, 0.27986884117126465, 0.2767939269542694, 0.2737452983856201, 0.2707225978374481, 0.26772540807724, 0.26475343108177185, 0.2618062496185303, 0.258883535861969, 0.2559850215911865, 0.25311028957366943, 0.25025907158851624, 0.24743106961250305, 0.2446259707212448, 0.24184346199035645, 0.23908329010009766, 0.23634515702724457, 0.2336287796497345, 0.23093391954898834, 0.22826029360294342, 0.22560766339302063, 0.22297576069831848, 0.22036437690258026, 0.21777324378490448, 0.21520215272903442, 0.212650865316391, 0.21011915802955627, 0.20760682225227356, 0.20511364936828613, 0.20263944566249847, 0.20018397271633148, 0.19774706661701202, 0.1953285187482834, 0.19292815029621124, 0.19054576754570007, 0.18818120658397675, 0.18583425879478455, 0.18350479006767273, 0.18119260668754578, 0.17889754474163055, 0.17661945521831512, 0.17435817420482635, 0.1721135377883911, 0.16988539695739746, 0.16767361760139465, 0.16547803580760956, 0.16329853236675262, 0.16113494336605072, 0.1589871346950531, 0.15685498714447021, 0.15473836660385132, 0.15263713896274567, 0.1505511850118637, 0.1484803706407547, 0.14642459154129028, 0.1443837285041809, 0.14235764741897583, 0.1403462439775467, 0.13834942877292633, 0.136367067694664, 0.13439907133579254, 0.1324453204870224, 0.1305057406425476, 0.12858019769191742, 0.12666863203048706, 0.12477091699838638, 0.12288697808980942, 0.1210167184472084, 0.11916005611419678, 0.11731690168380737, 0.11548716574907303, 0.11367076635360718, 0.11186762899160385, 0.11007767915725708, 0.1083008274435997, 0.10653700679540634, 0.10478614270687103, 0.1030481606721878, 0.10132300108671188, 0.0996105819940567, 0.09791085124015808, 0.09622374176979065, 0.09454918652772903, 0.09288713335990906, 0.09123751521110535, 0.08960027992725372, 0.08797537535429001, 0.08636274188756943, 0.0847623273730278, 0.08317409455776215, 0.08159798383712769, 0.08003395050764084, 0.07848194986581802, 0.07694194465875626, 0.07541389018297195, 0.07389774918556213, 0.07239348441362381, 0.070901058614254, 0.06942043453454971, 0.06795158982276917, 0.06649449467658997, 0.06504911929368973, 0.06361543387174606, 0.06219341605901718, 0.06078304722905159, 0.0593843050301075, 0.05799717456102371, 0.05662164092063904, 0.05525768920779228, 0.05390531197190285, 0.05256449431180954, 0.05123523622751236, 0.04991753399372101, 0.04861138388514519, 0.047316793352365494, 0.04603376239538193, 0.044762298464775085, 0.04350241273641586, 0.04225412383675575, 0.04101744294166565, 0.039792392402887344, 0.03857899457216263, 0.03737728297710419, 0.03618728369474411, 0.03500903770327568, 0.03384258225560188, 0.0326879620552063, 0.031545232981443405, 0.030414443463087082, 0.0292956605553627, 0.028188949450850487, 0.027094384655356407, 0.02601204626262188, 0.024942025542259216, 0.023884421214461327, 0.022839335724711418, 0.021806888282299042, 0.020787203684449196, 0.019780423492193222, 0.018786700442433357, 0.017806200310587883, 0.016839107498526573, 0.015885621309280396, 0.014945968054234982, 0.01402039173990488, 0.013109165243804455, 0.012212592177093029, 0.011331013403832912, 0.010464809834957123, 0.009614413604140282, 0.008780314587056637, 0.007963077165186405, 0.007163353264331818, 0.0063819061033427715, 0.005619642324745655, 0.004877655766904354, 0.004157294984906912, 0.003460264764726162, 0.0027887988835573196, 0.0021459676790982485, 0.001536299823783338, 0.0009672692976891994, 0.0004541343660093844]);
		kn = $toNativeArray($kindUint32, [1991057938, 0, 1611602771, 1826899878, 1918584482, 1969227037, 2001281515, 2023368125, 2039498179, 2051788381, 2061460127, 2069267110, 2075699398, 2081089314, 2085670119, 2089610331, 2093034710, 2096037586, 2098691595, 2101053571, 2103168620, 2105072996, 2106796166, 2108362327, 2109791536, 2111100552, 2112303493, 2113412330, 2114437283, 2115387130, 2116269447, 2117090813, 2117856962, 2118572919, 2119243101, 2119871411, 2120461303, 2121015852, 2121537798, 2122029592, 2122493434, 2122931299, 2123344971, 2123736059, 2124106020, 2124456175, 2124787725, 2125101763, 2125399283, 2125681194, 2125948325, 2126201433, 2126441213, 2126668298, 2126883268, 2127086657, 2127278949, 2127460589, 2127631985, 2127793506, 2127945490, 2128088244, 2128222044, 2128347141, 2128463758, 2128572095, 2128672327, 2128764606, 2128849065, 2128925811, 2128994934, 2129056501, 2129110560, 2129157136, 2129196237, 2129227847, 2129251929, 2129268426, 2129277255, 2129278312, 2129271467, 2129256561, 2129233410, 2129201800, 2129161480, 2129112170, 2129053545, 2128985244, 2128906855, 2128817916, 2128717911, 2128606255, 2128482298, 2128345305, 2128194452, 2128028813, 2127847342, 2127648860, 2127432031, 2127195339, 2126937058, 2126655214, 2126347546, 2126011445, 2125643893, 2125241376, 2124799783, 2124314271, 2123779094, 2123187386, 2122530867, 2121799464, 2120980787, 2120059418, 2119015917, 2117825402, 2116455471, 2114863093, 2112989789, 2110753906, 2108037662, 2104664315, 2100355223, 2094642347, 2086670106, 2074676188, 2054300022, 2010539237]);
		wn = $toNativeArray($kindFloat32, [1.7290404663583558e-09, 1.2680928529462676e-10, 1.689751810696194e-10, 1.9862687883343e-10, 2.223243117382978e-10, 2.4244936613904144e-10, 2.601613091623989e-10, 2.761198769629658e-10, 2.9073962681813725e-10, 3.042996965518796e-10, 3.169979556627567e-10, 3.289802041894774e-10, 3.4035738116777736e-10, 3.5121602848242617e-10, 3.61625090983253e-10, 3.7164057942185025e-10, 3.813085680537398e-10, 3.906675816178762e-10, 3.997501218933053e-10, 4.0858399996679395e-10, 4.1719308563337165e-10, 4.255982233303257e-10, 4.3381759295968436e-10, 4.4186720948857783e-10, 4.497613115272969e-10, 4.57512583373898e-10, 4.6513240481438345e-10, 4.726310454117311e-10, 4.800177477726209e-10, 4.873009773476156e-10, 4.944885056978876e-10, 5.015873272284921e-10, 5.086040477664255e-10, 5.155446070048697e-10, 5.224146670812502e-10, 5.292193350214802e-10, 5.359634958068682e-10, 5.426517013518151e-10, 5.492881705038144e-10, 5.558769555769061e-10, 5.624218868405251e-10, 5.689264614971989e-10, 5.75394121238304e-10, 5.818281967329142e-10, 5.882316855831959e-10, 5.946076964136182e-10, 6.009590047817426e-10, 6.072883862451306e-10, 6.135985053390414e-10, 6.19892026598734e-10, 6.261713370037114e-10, 6.324390455780815e-10, 6.386973727678935e-10, 6.449488165749528e-10, 6.511955974453087e-10, 6.574400468473129e-10, 6.636843297158634e-10, 6.699307220081607e-10, 6.761814441702541e-10, 6.824387166481927e-10, 6.887046488657234e-10, 6.949815167800466e-10, 7.012714853260604e-10, 7.075767749498141e-10, 7.13899661608508e-10, 7.202424212593428e-10, 7.266072743483676e-10, 7.329966078550854e-10, 7.394128087589991e-10, 7.458582640396116e-10, 7.523354716987285e-10, 7.588469852493063e-10, 7.653954137154528e-10, 7.719834771435785e-10, 7.786139510912449e-10, 7.852897221383159e-10, 7.920137878869582e-10, 7.987892014504894e-10, 8.056192379868321e-10, 8.125072836762115e-10, 8.194568912323064e-10, 8.264716688799467e-10, 8.3355555791087e-10, 8.407127216614185e-10, 8.479473234679347e-10, 8.552640262671218e-10, 8.626675485068347e-10, 8.701631637464402e-10, 8.777562010564566e-10, 8.854524335966119e-10, 8.932581896381464e-10, 9.011799639857543e-10, 9.092249730890956e-10, 9.174008219758889e-10, 9.25715837318819e-10, 9.341788453909317e-10, 9.42799727177146e-10, 9.515889187738935e-10, 9.605578554783278e-10, 9.697193048552322e-10, 9.790869226478094e-10, 9.886760299337993e-10, 9.985036131254788e-10, 1.008588212947359e-09, 1.0189509236369076e-09, 1.0296150598776421e-09, 1.040606933955246e-09, 1.0519566329136865e-09, 1.0636980185552147e-09, 1.0758701707302976e-09, 1.0885182755160372e-09, 1.101694735439196e-09, 1.115461056855338e-09, 1.1298901814171813e-09, 1.1450695946990663e-09, 1.1611052119775422e-09, 1.178127595480305e-09, 1.1962995039027646e-09, 1.2158286599728285e-09, 1.2369856250415978e-09, 1.2601323318151003e-09, 1.2857697129220469e-09, 1.3146201904845611e-09, 1.3477839955200466e-09, 1.3870635751089821e-09, 1.43574030442295e-09, 1.5008658760251592e-09, 1.6030947680434338e-09]);
		fn = $toNativeArray($kindFloat32, [1, 0.963599681854248, 0.9362826943397522, 0.9130436182022095, 0.8922816514968872, 0.8732430338859558, 0.8555005788803101, 0.8387836217880249, 0.8229072093963623, 0.8077383041381836, 0.7931770086288452, 0.7791460752487183, 0.7655841708183289, 0.7524415850639343, 0.7396772503852844, 0.7272568941116333, 0.7151514887809753, 0.7033361196517944, 0.6917891502380371, 0.6804918646812439, 0.6694276928901672, 0.6585819721221924, 0.6479418277740479, 0.6374954581260681, 0.6272324919700623, 0.6171433925628662, 0.6072195172309875, 0.5974531769752502, 0.5878370404243469, 0.5783646702766418, 0.5690299868583679, 0.5598273873329163, 0.550751805305481, 0.5417983531951904, 0.5329626798629761, 0.5242405533790588, 0.5156282186508179, 0.5071220397949219, 0.49871864914894104, 0.4904148280620575, 0.48220765590667725, 0.47409430146217346, 0.466072142124176, 0.45813870429992676, 0.45029163360595703, 0.44252872467041016, 0.4348478317260742, 0.42724698781967163, 0.41972434520721436, 0.41227802634239197, 0.40490642189979553, 0.39760786294937134, 0.3903807997703552, 0.3832238018512726, 0.3761354684829712, 0.3691144585609436, 0.36215949058532715, 0.3552693724632263, 0.3484429717063904, 0.3416791558265686, 0.33497685194015503, 0.32833510637283325, 0.3217529058456421, 0.3152293860912323, 0.30876362323760986, 0.3023548424243927, 0.2960021495819092, 0.2897048592567444, 0.28346219658851624, 0.2772735059261322, 0.271138072013855, 0.2650552988052368, 0.25902456045150757, 0.25304529070854187, 0.24711695313453674, 0.24123899638652802, 0.23541094362735748, 0.22963231801986694, 0.22390270233154297, 0.21822164952754974, 0.21258877217769623, 0.20700371265411377, 0.20146611332893372, 0.1959756463766098, 0.19053204357624054, 0.18513499200344086, 0.17978426814079285, 0.1744796335697174, 0.16922089457511902, 0.16400785744190216, 0.1588403731584549, 0.15371830761432648, 0.14864157140254974, 0.14361007511615753, 0.13862377405166626, 0.13368265330791473, 0.12878671288490295, 0.12393598258495331, 0.11913054436445236, 0.11437050998210907, 0.10965602099895477, 0.1049872562289238, 0.10036443918943405, 0.09578784555196762, 0.09125780314207077, 0.08677466958761215, 0.08233889937400818, 0.07795098423957825, 0.07361150532960892, 0.06932111829519272, 0.06508058309555054, 0.06089077144861221, 0.05675266310572624, 0.05266740173101425, 0.048636294901371, 0.044660862535238266, 0.040742866694927216, 0.03688438981771469, 0.03308788686990738, 0.029356317594647408, 0.025693291798233986, 0.02210330404341221, 0.018592102453112602, 0.015167297795414925, 0.011839478276669979, 0.0086244847625494, 0.005548994988203049, 0.0026696291752159595]);
		rng_cooked = $toNativeArray($kindInt64, [new $Int64(1173834291, 3952672746), new $Int64(1081821761, 3130416987), new $Int64(324977939, 3414273807), new $Int64(1241840476, 2806224363), new $Int64(669549340, 1997590414), new $Int64(2103305448, 2402795971), new $Int64(1663160183, 1140819369), new $Int64(1120601685, 1788868961), new $Int64(1848035537, 1089001426), new $Int64(1235702047, 873593504), new $Int64(1911387977, 581324885), new $Int64(492609478, 1609182556), new $Int64(1069394745, 1241596776), new $Int64(1895445337, 1771189259), new $Int64(772864846, 3467012610), new $Int64(2006957225, 2344407434), new $Int64(402115761, 782467244), new $Int64(26335124, 3404933915), new $Int64(1063924276, 618867887), new $Int64(1178782866, 520164395), new $Int64(555910815, 1341358184), new $Int64(632398609, 665794848), new $Int64(1527227641, 3183648150), new $Int64(1781176124, 696329606), new $Int64(1789146075, 4151988961), new $Int64(60039534, 998951326), new $Int64(1535158725, 1364957564), new $Int64(63173359, 4090230633), new $Int64(649454641, 4009697548), new $Int64(248009524, 2569622517), new $Int64(778703922, 3742421481), new $Int64(1038377625, 1506914633), new $Int64(1738099768, 1983412561), new $Int64(236311649, 1436266083), new $Int64(1035966148, 3922894967), new $Int64(810508934, 1792680179), new $Int64(563141142, 1188796351), new $Int64(1349617468, 405968250), new $Int64(1044074554, 433754187), new $Int64(870549669, 4073162024), new $Int64(1053232044, 433121399), new $Int64(2451824, 4162580594), new $Int64(2010221076, 4132415622), new $Int64(611252600, 3033822028), new $Int64(2016407895, 824682382), new $Int64(2366218, 3583765414), new $Int64(1522878809, 535386927), new $Int64(1637219058, 2286693689), new $Int64(1453075389, 2968466525), new $Int64(193683513, 1351410206), new $Int64(1863677552, 1412813499), new $Int64(492736522, 4126267639), new $Int64(512765208, 2105529399), new $Int64(2132966268, 2413882233), new $Int64(947457634, 32226200), new $Int64(1149341356, 2032329073), new $Int64(106485445, 1356518208), new $Int64(79673492, 3430061722), new $Int64(663048513, 3820169661), new $Int64(481498454, 2981816134), new $Int64(1017155588, 4184371017), new $Int64(206574701, 2119206761), new $Int64(1295374591, 2472200560), new $Int64(1587026100, 2853524696), new $Int64(1307803389, 1681119904), new $Int64(1972496813, 95608918), new $Int64(392686347, 3690479145), new $Int64(941912722, 1397922290), new $Int64(988169623, 1516129515), new $Int64(1827305493, 1547420459), new $Int64(1311333971, 1470949486), new $Int64(194013850, 1336785672), new $Int64(2102397034, 4131677129), new $Int64(755205548, 4246329084), new $Int64(1004983461, 3788585631), new $Int64(2081005363, 3080389532), new $Int64(1501045284, 2215402037), new $Int64(391002300, 1171593935), new $Int64(1408774047, 1423855166), new $Int64(1628305930, 2276716302), new $Int64(1779030508, 2068027241), new $Int64(1369359303, 3427553297), new $Int64(189241615, 3289637845), new $Int64(1057480830, 3486407650), new $Int64(634572984, 3071877822), new $Int64(1159653919, 3363620705), new $Int64(1213226718, 4159821533), new $Int64(2070861710, 1894661), new $Int64(1472989750, 1156868282), new $Int64(348271067, 776219088), new $Int64(1646054810, 2425634259), new $Int64(1716021749, 680510161), new $Int64(1573220192, 1310101429), new $Int64(1095885995, 2964454134), new $Int64(1821788136, 3467098407), new $Int64(1990672920, 2109628894), new $Int64(7834944, 1232604732), new $Int64(309412934, 3261916179), new $Int64(1699175360, 434597899), new $Int64(235436061, 1624796439), new $Int64(521080809, 3589632480), new $Int64(1198416575, 864579159), new $Int64(208735487, 1380889830), new $Int64(619206309, 2654509477), new $Int64(1419738251, 1468209306), new $Int64(403198876, 100794388), new $Int64(956062190, 2991674471), new $Int64(1938816907, 2224662036), new $Int64(1973824487, 977097250), new $Int64(1351320195, 726419512), new $Int64(1964023751, 1747974366), new $Int64(1394388465, 1556430604), new $Int64(1097991433, 1080776742), new $Int64(1761636690, 280794874), new $Int64(117767733, 919835643), new $Int64(1180474222, 3434019658), new $Int64(196069168, 2461941785), new $Int64(133215641, 3615001066), new $Int64(417204809, 3103414427), new $Int64(790056561, 3380809712), new $Int64(879802240, 2724693469), new $Int64(547796833, 598827710), new $Int64(300924196, 3452273442), new $Int64(2071705424, 649274915), new $Int64(1346182319, 2585724112), new $Int64(636549385, 3165579553), new $Int64(1185578221, 2635894283), new $Int64(2094573470, 2053289721), new $Int64(985976581, 3169337108), new $Int64(1170569632, 144717764), new $Int64(1079216270, 1383666384), new $Int64(2022678706, 681540375), new $Int64(1375448925, 537050586), new $Int64(182715304, 315246468), new $Int64(226402871, 849323088), new $Int64(1262421183, 45543944), new $Int64(1201038398, 2319052083), new $Int64(2106775454, 3613090841), new $Int64(560472520, 2992171180), new $Int64(1765620479, 2068244785), new $Int64(917538188, 4239862634), new $Int64(777927839, 3892253031), new $Int64(720683925, 958186149), new $Int64(1724185863, 1877702262), new $Int64(1357886971, 837674867), new $Int64(1837048883, 1507589294), new $Int64(1905518400, 873336795), new $Int64(267722611, 2764496274), new $Int64(341003118, 4196182374), new $Int64(1080717893, 550964545), new $Int64(818747069, 420611474), new $Int64(222653272, 204265180), new $Int64(1549974541, 1787046383), new $Int64(1215581865, 3102292318), new $Int64(418321538, 1552199393), new $Int64(1243493047, 980542004), new $Int64(267284263, 3293718720), new $Int64(1179528763, 3771917473), new $Int64(599484404, 2195808264), new $Int64(252818753, 3894702887), new $Int64(780007692, 2099949527), new $Int64(1424094358, 338442522), new $Int64(490737398, 637158004), new $Int64(419862118, 281976339), new $Int64(574970164, 3619802330), new $Int64(1715552825, 3084554784), new $Int64(882872465, 4129772886), new $Int64(43084605, 1680378557), new $Int64(525521057, 3339087776), new $Int64(1680500332, 4220317857), new $Int64(211654685, 2959322499), new $Int64(1675600481, 1488354890), new $Int64(1312620086, 3958162143), new $Int64(920972075, 2773705983), new $Int64(1876039582, 225908689), new $Int64(963748535, 908216283), new $Int64(1541787429, 3574646075), new $Int64(319760557, 1936937569), new $Int64(1519770881, 75492235), new $Int64(816689472, 1935193178), new $Int64(2142521206, 2018250883), new $Int64(455141620, 3943126022), new $Int64(1546084160, 3066544345), new $Int64(1932392669, 2793082663), new $Int64(908474287, 3297036421), new $Int64(1640597065, 2206987825), new $Int64(1594236910, 807894872), new $Int64(366158341, 766252117), new $Int64(2060649606, 3833114345), new $Int64(845619743, 1255067973), new $Int64(1201145605, 741697208), new $Int64(671241040, 2810093753), new $Int64(1109032642, 4229340371), new $Int64(1462188720, 1361684224), new $Int64(988084219, 1906263026), new $Int64(475781207, 3904421704), new $Int64(1523946520, 1769075545), new $Int64(1062308525, 2621599764), new $Int64(1279509432, 3431891480), new $Int64(404732502, 1871896503), new $Int64(128756421, 1412808876), new $Int64(1605404688, 952876175), new $Int64(1917039957, 1824438899), new $Int64(1662295856, 1005035476), new $Int64(1990909507, 527508597), new $Int64(1288873303, 3066806859), new $Int64(565995893, 3244940914), new $Int64(1257737460, 209092916), new $Int64(1899814242, 1242699167), new $Int64(1433653252, 456723774), new $Int64(1776978905, 1001252870), new $Int64(1468772157, 2026725874), new $Int64(857254202, 2137562569), new $Int64(765939740, 3183366709), new $Int64(1533887628, 2612072960), new $Int64(56977098, 1727148468), new $Int64(949899753, 3803658212), new $Int64(1883670356, 479946959), new $Int64(685713571, 1562982345), new $Int64(201241205, 1766109365), new $Int64(700596547, 3257093788), new $Int64(1962768719, 2365720207), new $Int64(93384808, 3742754173), new $Int64(1689098413, 2878193673), new $Int64(1096135042, 2174002182), new $Int64(1313222695, 3573511231), new $Int64(1392911121, 1760299077), new $Int64(771856457, 2260779833), new $Int64(1281464374, 1452805722), new $Int64(917811730, 2940011802), new $Int64(1890251082, 1886183802), new $Int64(893897673, 2514369088), new $Int64(1644345561, 3924317791), new $Int64(172616216, 500935732), new $Int64(1403501753, 676580929), new $Int64(581571365, 1184984890), new $Int64(1455515235, 1271474274), new $Int64(318728910, 3163791473), new $Int64(2051027584, 2842487377), new $Int64(1511537551, 2170968612), new $Int64(573262976, 3535856740), new $Int64(94256461, 1488599718), new $Int64(966951817, 3408913763), new $Int64(60951736, 2501050084), new $Int64(1272353200, 1639124157), new $Int64(138001144, 4088176393), new $Int64(1574896563, 3989947576), new $Int64(1982239940, 3414355209), new $Int64(1355154361, 2275136352), new $Int64(89709303, 2151835223), new $Int64(1216338715, 1654534827), new $Int64(1467562197, 377892833), new $Int64(1664767638, 660204544), new $Int64(85706799, 390828249), new $Int64(725310955, 3402783878), new $Int64(678849488, 3717936603), new $Int64(1113532086, 2211058823), new $Int64(1564224320, 2692150867), new $Int64(1952770442, 1928910388), new $Int64(788716862, 3931011137), new $Int64(1083670504, 1112701047), new $Int64(2079333076, 2452299106), new $Int64(1251318826, 2337204777), new $Int64(1774877857, 273889282), new $Int64(1798719843, 1462008793), new $Int64(2138834788, 1554494002), new $Int64(952516517, 182675323), new $Int64(548928884, 1882802136), new $Int64(589279648, 3700220025), new $Int64(381039426, 3083431543), new $Int64(1295624457, 3622207527), new $Int64(338126939, 432729309), new $Int64(480013522, 2391914317), new $Int64(297925497, 235747924), new $Int64(2120733629, 3088823825), new $Int64(1402403853, 2314658321), new $Int64(1165929723, 2957634338), new $Int64(501323675, 4117056981), new $Int64(1564699815, 1482500298), new $Int64(1406657158, 840489337), new $Int64(799522364, 3483178565), new $Int64(532129761, 2074004656), new $Int64(724246478, 3643392642), new $Int64(1482330167, 1583624461), new $Int64(1261660694, 287473085), new $Int64(1667835381, 3136843981), new $Int64(1138806821, 1266970974), new $Int64(135185781, 1998688839), new $Int64(392094735, 1492900209), new $Int64(1031326774, 1538112737), new $Int64(76914806, 2207265429), new $Int64(260686035, 963263315), new $Int64(1671145500, 2295892134), new $Int64(1068469660, 2002560897), new $Int64(1791233343, 1369254035), new $Int64(33436120, 3353312708), new $Int64(57507843, 947771099), new $Int64(201728503, 1747061399), new $Int64(1507240140, 2047354631), new $Int64(720000810, 4165367136), new $Int64(479265078, 3388864963), new $Int64(1195302398, 286492130), new $Int64(2045622690, 2795735007), new $Int64(1431753082, 3703961339), new $Int64(1999047161, 1797825479), new $Int64(1429039600, 1116589674), new $Int64(482063550, 2593309206), new $Int64(1329049334, 3404995677), new $Int64(1396904208, 3453462936), new $Int64(1014767077, 3016498634), new $Int64(75698599, 1650371545), new $Int64(1592007860, 212344364), new $Int64(1127766888, 3843932156), new $Int64(1399463792, 3573129983), new $Int64(1256901817, 665897820), new $Int64(1071492673, 1675628772), new $Int64(243225682, 2831752928), new $Int64(2120298836, 1486294219), new $Int64(193076235, 268782709), new $Int64(1145360145, 4186179080), new $Int64(624342951, 1613720397), new $Int64(857179861, 2703686015), new $Int64(1235864944, 2205342611), new $Int64(1474779655, 1411666394), new $Int64(619028749, 677744900), new $Int64(270855115, 4172867247), new $Int64(135494707, 2163418403), new $Int64(849547544, 2841526879), new $Int64(1029966689, 1082141470), new $Int64(377371856, 4046134367), new $Int64(51415528, 2142943655), new $Int64(1897659315, 3124627521), new $Int64(998228909, 219992939), new $Int64(1068692697, 1756846531), new $Int64(1283749206, 1225118210), new $Int64(1621625642, 1647770243), new $Int64(111523943, 444807907), new $Int64(2036369448, 3952076173), new $Int64(53201823, 1461839639), new $Int64(315761893, 3699250910), new $Int64(702974850, 1373688981), new $Int64(734022261, 147523747), new $Int64(100152742, 1211276581), new $Int64(1294440951, 2548832680), new $Int64(1144696256, 1995631888), new $Int64(154500578, 2011457303), new $Int64(796460974, 3057425772), new $Int64(667839456, 81484597), new $Int64(465502760, 3646681560), new $Int64(775020923, 635548515), new $Int64(602489502, 2508044581), new $Int64(353263531, 1014917157), new $Int64(719992433, 3214891315), new $Int64(852684611, 959582252), new $Int64(226415134, 3347040449), new $Int64(1784615552, 4102971975), new $Int64(397887437, 4078022210), new $Int64(1610679822, 2851767182), new $Int64(749162636, 1540160644), new $Int64(598384772, 1057290595), new $Int64(2034890660, 3907769253), new $Int64(579300318, 4248952684), new $Int64(1092907599, 132554364), new $Int64(1061621234, 1029351092), new $Int64(697840928, 2583007416), new $Int64(298619124, 1486185789), new $Int64(55905697, 2871589073), new $Int64(2017643612, 723203291), new $Int64(146250550, 2494333952), new $Int64(1064490251, 2230939180), new $Int64(342915576, 3943232912), new $Int64(1768732449, 2181367922), new $Int64(1418222537, 2889274791), new $Int64(1824032949, 2046728161), new $Int64(1653899792, 1376052477), new $Int64(1022327048, 381236993), new $Int64(1034385958, 3188942166), new $Int64(2073003539, 350070824), new $Int64(144881592, 61758415), new $Int64(1405659422, 3492950336), new $Int64(117440928, 3093818430), new $Int64(1693893113, 2962480613), new $Int64(235432940, 3154871160), new $Int64(511005079, 3228564679), new $Int64(610731502, 888276216), new $Int64(1200780674, 3574998604), new $Int64(870415268, 1967526716), new $Int64(591335707, 1554691298), new $Int64(574459414, 339944798), new $Int64(1223764147, 1154515356), new $Int64(1825645307, 967516237), new $Int64(1546195135, 596588202), new $Int64(279882768, 3764362170), new $Int64(492091056, 266611402), new $Int64(1754227768, 2047856075), new $Int64(1146757215, 21444105), new $Int64(1198058894, 3065563181), new $Int64(1915064845, 1140663212), new $Int64(633187674, 2323741028), new $Int64(2126290159, 3103873707), new $Int64(1008658319, 2766828349), new $Int64(1661896145, 1970872996), new $Int64(1628585413, 3766615585), new $Int64(1552335120, 2036813414), new $Int64(152606527, 3105536507), new $Int64(13954645, 3396176938), new $Int64(1426081645, 1377154485), new $Int64(2085644467, 3807014186), new $Int64(543009040, 3710110597), new $Int64(396058129, 916420443), new $Int64(734556788, 2103831255), new $Int64(381322154, 717331943), new $Int64(572884752, 3550505941), new $Int64(45939673, 378749927), new $Int64(149867929, 611017331), new $Int64(592130075, 758907650), new $Int64(1012992349, 154266815), new $Int64(1107028706, 1407468696), new $Int64(469292398, 970098704), new $Int64(1862426162, 1971660656), new $Int64(998365243, 3332747885), new $Int64(1947089649, 1935189867), new $Int64(1510248801, 203520055), new $Int64(842317902, 3916463034), new $Int64(1758884993, 3474113316), new $Int64(1036101639, 316544223), new $Int64(373738757, 1650844677), new $Int64(1240292229, 4267565603), new $Int64(1077208624, 2501167616), new $Int64(626831785, 3929401789), new $Int64(56122796, 337170252), new $Int64(1186981558, 2061966842), new $Int64(1843292800, 2508461464), new $Int64(206012532, 2791377107), new $Int64(1240791848, 1227227588), new $Int64(1813978778, 1709681848), new $Int64(1153692192, 3768820575), new $Int64(1145186199, 2887126398), new $Int64(700372314, 296561685), new $Int64(700300844, 3729960077), new $Int64(575172304, 372833036), new $Int64(2078875613, 2409779288), new $Int64(1829161290, 555274064), new $Int64(1041887929, 4239804901), new $Int64(1839403216, 3723486978), new $Int64(498390553, 2145871984), new $Int64(564717933, 3565480803), new $Int64(578829821, 2197313814), new $Int64(974785092, 3613674566), new $Int64(438638731, 3042093666), new $Int64(2050927384, 3324034321), new $Int64(869420878, 3708873369), new $Int64(946682149, 1698090092), new $Int64(1618900382, 4213940712), new $Int64(304003901, 2087477361), new $Int64(381315848, 2407950639), new $Int64(851258090, 3942568569), new $Int64(923583198, 4088074412), new $Int64(723260036, 2964773675), new $Int64(1473561819, 1539178386), new $Int64(1062961552, 2694849566), new $Int64(460977733, 2120273838), new $Int64(542912908, 2484608657), new $Int64(880846449, 2956190677), new $Int64(1970902366, 4223313749), new $Int64(662161910, 3502682327), new $Int64(705634754, 4133891139), new $Int64(1116124348, 1166449596), new $Int64(1038247601, 3362705993), new $Int64(93734798, 3892921029), new $Int64(1876124043, 786869787), new $Int64(1057490746, 1046342263), new $Int64(242763728, 493777327), new $Int64(1293910447, 3304827646), new $Int64(616460742, 125356352), new $Int64(499300063, 74094113), new $Int64(1351896723, 2500816079), new $Int64(1657235204, 514015239), new $Int64(1377565129, 543520454), new $Int64(107706923, 3614531153), new $Int64(2056746300, 2356753985), new $Int64(1390062617, 2018141668), new $Int64(131272971, 2087974891), new $Int64(644556607, 3166972343), new $Int64(372256200, 1517638666), new $Int64(1212207984, 173466846), new $Int64(1451709187, 4241513471), new $Int64(733932806, 2783126920), new $Int64(1972004134, 4167264826), new $Int64(29260506, 3907395640), new $Int64(1236582087, 1539634186), new $Int64(1551526350, 178241987), new $Int64(2034206012, 182168164), new $Int64(1044953189, 2386154934), new $Int64(1379126408, 4077374341), new $Int64(32803926, 1732699140), new $Int64(1726425903, 1041306002), new $Int64(1860414813, 2068001749), new $Int64(1005320202, 3208962910), new $Int64(844054010, 697710380), new $Int64(638124245, 2228431183), new $Int64(1337169671, 3554678728), new $Int64(1396494601, 173470263), new $Int64(2061597383, 3848297795), new $Int64(1220546671, 246236185), new $Int64(163293187, 2066374846), new $Int64(1771673660, 312890749), new $Int64(703378057, 3573310289), new $Int64(1548631747, 143166754), new $Int64(613554316, 2081511079), new $Int64(1197802104, 486038032), new $Int64(240999859, 2982218564), new $Int64(364901986, 1000939191), new $Int64(1902782651, 2750454885), new $Int64(1475638791, 3375313137), new $Int64(503615608, 881302957), new $Int64(638698903, 2514186393), new $Int64(443860803, 360024739), new $Int64(1399671872, 292500025), new $Int64(1381210821, 2276300752), new $Int64(521803381, 4069087683), new $Int64(208500981, 1637778212), new $Int64(720490469, 1676670893), new $Int64(1067262482, 3855174429), new $Int64(2114075974, 2067248671), new $Int64(2058057389, 2884561259), new $Int64(1341742553, 2456511185), new $Int64(983726246, 561175414), new $Int64(427994085, 432588903), new $Int64(885133709, 4059399550), new $Int64(2054387382, 1075014784), new $Int64(413651020, 2728058415), new $Int64(1839142064, 1299703678), new $Int64(1262333188, 2347583393), new $Int64(1285481956, 2468164145), new $Int64(989129637, 1140014346), new $Int64(2033889184, 1936972070), new $Int64(409904655, 3870530098), new $Int64(1662989391, 1717789158), new $Int64(1914486492, 1153452491), new $Int64(1157059232, 3948827651), new $Int64(790338018, 2101413152), new $Int64(1495744672, 3854091229), new $Int64(83644069, 4215565463), new $Int64(762206335, 1202710438), new $Int64(1582574611, 2072216740), new $Int64(705690639, 2066751068), new $Int64(33900336, 173902580), new $Int64(1405499842, 142459001), new $Int64(172391592, 1889151926), new $Int64(1648540523, 3034199774), new $Int64(1618587731, 516490102), new $Int64(93114264, 3692577783), new $Int64(68662295, 2953948865), new $Int64(1826544975, 4041040923), new $Int64(204965672, 592046130), new $Int64(1441840008, 384297211), new $Int64(95834184, 265863924), new $Int64(2101717619, 1333136237), new $Int64(1499611781, 1406273556), new $Int64(1074670496, 426305476), new $Int64(125704633, 2750898176), new $Int64(488068495, 1633944332), new $Int64(2037723464, 3236349343), new $Int64(444060402, 4013676611), new $Int64(1718532237, 2265047407), new $Int64(1433593806, 875071080), new $Int64(1804436145, 1418843655), new $Int64(2009228711, 451657300), new $Int64(1229446621, 1866374663), new $Int64(1653472867, 1551455622), new $Int64(577191481, 3560962459), new $Int64(1669204077, 3347903778), new $Int64(1849156454, 2675874918), new $Int64(316128071, 2762991672), new $Int64(530492383, 3689068477), new $Int64(844089962, 4071997905), new $Int64(1508155730, 1381702441), new $Int64(2089931018, 2373284878), new $Int64(1283216186, 2143983064), new $Int64(308739063, 1938207195), new $Int64(1754949306, 1188152253), new $Int64(1272345009, 615870490), new $Int64(742653194, 2662252621), new $Int64(1477718295, 3839976789), new $Int64(56149435, 306752547), new $Int64(720795581, 2162363077), new $Int64(2090431015, 2767224719), new $Int64(675859549, 2628837712), new $Int64(1678405918, 2967771969), new $Int64(1694285728, 499792248), new $Int64(403352367, 4285253508), new $Int64(962357072, 2856511070), new $Int64(679471692, 2526409716), new $Int64(353777175, 1240875658), new $Int64(1232590226, 2577342868), new $Int64(1146185433, 4136853496), new $Int64(670368674, 2403540137), new $Int64(1372824515, 1371410668), new $Int64(1970921600, 371758825), new $Int64(1706420536, 1528834084), new $Int64(2075795018, 1504757260), new $Int64(685663576, 699052551), new $Int64(1641940109, 3347789870), new $Int64(1951619734, 3430604759), new $Int64(2119672219, 1935601723), new $Int64(966789690, 834676166)]);
		globalRand = New(new lockedSource.ptr(new nosync.Mutex.ptr(false), NewSource(new $Int64(0, 1))));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["net/url"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, sort, strconv, strings, EscapeError, sliceType, ishex, unhex, shouldEscape, QueryUnescape, unescape, QueryEscape, escape;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	EscapeError = $pkg.EscapeError = $newType(8, $kindString, "url.EscapeError", "EscapeError", "net/url", null);
	sliceType = $sliceType($Uint8);
	ishex = function(c) {
		var $ptr, c;
		if (48 <= c && c <= 57) {
			return true;
		} else if (97 <= c && c <= 102) {
			return true;
		} else if (65 <= c && c <= 70) {
			return true;
		}
		return false;
	};
	unhex = function(c) {
		var $ptr, c;
		if (48 <= c && c <= 57) {
			return c - 48 << 24 >>> 24;
		} else if (97 <= c && c <= 102) {
			return (c - 97 << 24 >>> 24) + 10 << 24 >>> 24;
		} else if (65 <= c && c <= 70) {
			return (c - 65 << 24 >>> 24) + 10 << 24 >>> 24;
		}
		return 0;
	};
	EscapeError.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "invalid URL escape " + strconv.Quote(e);
	};
	$ptrType(EscapeError).prototype.Error = function() { return new EscapeError(this.$get()).Error(); };
	shouldEscape = function(c, mode) {
		var $ptr, _ref, _ref$1, _ref$2, c, mode;
		if (65 <= c && c <= 90 || 97 <= c && c <= 122 || 48 <= c && c <= 57) {
			return false;
		}
		if (mode === 2) {
			_ref = c;
			if (_ref === 33 || _ref === 36 || _ref === 38 || _ref === 39 || _ref === 40 || _ref === 41 || _ref === 42 || _ref === 43 || _ref === 44 || _ref === 59 || _ref === 61 || _ref === 58 || _ref === 91 || _ref === 93) {
				return false;
			}
		}
		_ref$1 = c;
		if (_ref$1 === 45 || _ref$1 === 95 || _ref$1 === 46 || _ref$1 === 126) {
			return false;
		} else if (_ref$1 === 36 || _ref$1 === 38 || _ref$1 === 43 || _ref$1 === 44 || _ref$1 === 47 || _ref$1 === 58 || _ref$1 === 59 || _ref$1 === 61 || _ref$1 === 63 || _ref$1 === 64) {
			_ref$2 = mode;
			if (_ref$2 === 1) {
				return c === 63;
			} else if (_ref$2 === 3) {
				return (c === 64) || (c === 47) || (c === 63) || (c === 58);
			} else if (_ref$2 === 4) {
				return true;
			} else if (_ref$2 === 5) {
				return false;
			}
		}
		return true;
	};
	QueryUnescape = function(s) {
		var $ptr, s;
		return unescape(s, 4);
	};
	$pkg.QueryUnescape = QueryUnescape;
	unescape = function(s, mode) {
		var $ptr, _ref, _ref$1, hasPlus, i, i$1, j, mode, n, s, t;
		n = 0;
		hasPlus = false;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			_ref = s.charCodeAt(i);
			if (_ref === 37) {
				n = n + (1) >> 0;
				if ((i + 2 >> 0) >= s.length || !ishex(s.charCodeAt((i + 1 >> 0))) || !ishex(s.charCodeAt((i + 2 >> 0)))) {
					s = s.substring(i);
					if (s.length > 3) {
						s = s.substring(0, 3);
					}
					return ["", new EscapeError(s)];
				}
				i = i + (3) >> 0;
			} else if (_ref === 43) {
				hasPlus = mode === 4;
				i = i + (1) >> 0;
			} else {
				i = i + (1) >> 0;
			}
		}
		if ((n === 0) && !hasPlus) {
			return [s, $ifaceNil];
		}
		t = $makeSlice(sliceType, (s.length - ($imul(2, n)) >> 0));
		j = 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			_ref$1 = s.charCodeAt(i$1);
			if (_ref$1 === 37) {
				((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = (((unhex(s.charCodeAt((i$1 + 1 >> 0))) << 4 << 24 >>> 24) | unhex(s.charCodeAt((i$1 + 2 >> 0)))) >>> 0));
				j = j + (1) >> 0;
				i$1 = i$1 + (3) >> 0;
			} else if (_ref$1 === 43) {
				if (mode === 4) {
					((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = 32);
				} else {
					((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = 43);
				}
				j = j + (1) >> 0;
				i$1 = i$1 + (1) >> 0;
			} else {
				((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = s.charCodeAt(i$1));
				j = j + (1) >> 0;
				i$1 = i$1 + (1) >> 0;
			}
		}
		return [$bytesToString(t), $ifaceNil];
	};
	QueryEscape = function(s) {
		var $ptr, s;
		return escape(s, 4);
	};
	$pkg.QueryEscape = QueryEscape;
	escape = function(s, mode) {
		var $ptr, _tmp, _tmp$1, c, c$1, hexCount, i, i$1, j, mode, s, spaceCount, t, x, x$1;
		_tmp = 0;
		_tmp$1 = 0;
		spaceCount = _tmp;
		hexCount = _tmp$1;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (shouldEscape(c, mode)) {
				if ((c === 32) && (mode === 4)) {
					spaceCount = spaceCount + (1) >> 0;
				} else {
					hexCount = hexCount + (1) >> 0;
				}
			}
			i = i + (1) >> 0;
		}
		if ((spaceCount === 0) && (hexCount === 0)) {
			return s;
		}
		t = $makeSlice(sliceType, (s.length + ($imul(2, hexCount)) >> 0));
		j = 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			c$1 = s.charCodeAt(i$1);
			if ((c$1 === 32) && (mode === 4)) {
				((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = 43);
				j = j + (1) >> 0;
			} else if (shouldEscape(c$1, mode)) {
				((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = 37);
				(x = j + 1 >> 0, ((x < 0 || x >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + x] = "0123456789ABCDEF".charCodeAt((c$1 >>> 4 << 24 >>> 24))));
				(x$1 = j + 2 >> 0, ((x$1 < 0 || x$1 >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + x$1] = "0123456789ABCDEF".charCodeAt(((c$1 & 15) >>> 0))));
				j = j + (3) >> 0;
			} else {
				((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = s.charCodeAt(i$1));
				j = j + (1) >> 0;
			}
			i$1 = i$1 + (1) >> 0;
		}
		return $bytesToString(t);
	};
	EscapeError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/robertkrimen/otto"] = (function() {
	var $pkg = {}, $init, bytes, gob, hex, json, errors, fmt, ast, dbg, file, parser, registry, token, math, rand, url, os, reflect, regexp, runtime, strconv, strings, sync, time, unicode, utf16, utf8, _builtinJSON_parseContext, _builtinJSON_stringifyContext, _clone, _compiler, _nodeProgram, _nodeDeclaration, _node, _nodeExpression, _nodeArrayLiteral, _nodeAssignExpression, _nodeBinaryExpression, _nodeBracketExpression, _nodeCallExpression, _nodeConditionalExpression, _nodeDotExpression, _nodeFunctionLiteral, _nodeIdentifier, _nodeLiteral, _nodeNewExpression, _nodeObjectLiteral, _nodeProperty, _nodeRegExpLiteral, _nodeSequenceExpression, _nodeThisExpression, _nodeUnaryExpression, _nodeVariableExpression, _nodeStatement, _nodeBlockStatement, _nodeBranchStatement, _nodeCaseStatement, _nodeCatchStatement, _nodeDebuggerStatement, _nodeDoWhileStatement, _nodeEmptyStatement, _nodeExpressionStatement, _nodeForInStatement, _nodeForStatement, _nodeIfStatement, _nodeLabelledStatement, _nodeReturnStatement, _nodeSwitchStatement, _nodeThrowStatement, _nodeTryStatement, _nodeVariableStatement, _nodeWhileStatement, _nodeWithStatement, _exception, _error, _frame, _at, Error, _lessThanResult, _object, _defaultValueHint, _objectClass, Otto, Context, Object, _propertyMode, _propertyGetSet, _property, _resultKind, _result, _global, _runtime, _scope, Script, _stash, _objectStash, _dclStash, _dclProperty, _fnStash, _argumentsObject, _dateObject, _ecmaTime, _constructFunction, _nativeFunction, _nativeFunctionObject, _bindFunctionObject, _nodeFunctionObject, FunctionCall, _goArrayObject, _goMapObject, _goSliceObject, _goStructObject, _reference, _propertyReference, _stashReference, _regExpObject, _stringObject, _stringASCII, _stringWide, _valueKind, Value, _numberKind, _number, ptrType, sliceType, sliceType$1, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, sliceType$2, sliceType$3, sliceType$4, sliceType$5, structType, structType$1, structType$2, ptrType$7, ptrType$8, sliceType$6, ptrType$9, ptrType$10, ptrType$11, ptrType$12, mapType, sliceType$7, ptrType$13, arrayType, arrayType$1, ptrType$14, sliceType$8, ptrType$15, ptrType$16, ptrType$17, ptrType$18, arrayType$2, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, ptrType$25, ptrType$26, ptrType$27, ptrType$28, ptrType$29, ptrType$30, ptrType$31, ptrType$32, ptrType$33, ptrType$34, ptrType$35, ptrType$36, ptrType$37, ptrType$38, ptrType$39, ptrType$40, ptrType$41, ptrType$42, ptrType$43, ptrType$44, ptrType$45, ptrType$46, ptrType$47, ptrType$48, ptrType$49, ptrType$50, ptrType$51, ptrType$52, ptrType$53, ptrType$54, ptrType$55, ptrType$56, ptrType$57, ptrType$58, ptrType$59, ptrType$60, ptrType$61, ptrType$62, ptrType$63, ptrType$64, ptrType$65, ptrType$66, ptrType$67, ptrType$68, ptrType$69, ptrType$70, ptrType$71, ptrType$72, ptrType$73, ptrType$74, sliceType$9, sliceType$10, ptrType$75, ptrType$76, ptrType$77, sliceType$11, ptrType$78, ptrType$79, ptrType$80, ptrType$81, ptrType$82, ptrType$83, ptrType$84, ptrType$85, ptrType$86, ptrType$87, ptrType$88, ptrType$89, ptrType$90, ptrType$91, ptrType$92, ptrType$93, ptrType$94, sliceType$12, ptrType$95, sliceType$13, ptrType$96, sliceType$14, sliceType$15, ptrType$97, ptrType$98, ptrType$99, funcType, sliceType$16, ptrType$100, ptrType$101, ptrType$102, ptrType$105, ptrType$106, ptrType$107, ptrType$108, ptrType$109, mapType$1, mapType$2, mapType$3, mapType$4, ptrType$110, funcType$1, mapType$5, funcType$2, funcType$3, funcType$4, funcType$5, funcType$6, funcType$7, funcType$8, funcType$9, funcType$10, funcType$11, funcType$12, chanType, mapType$6, funcType$13, mapType$7, mapType$8, ptrType$111, parseInt_alphabetTable, parseFloat_matchBadSpecial, parseFloat_matchValid, encodeURI_Regexp, encodeURIComponent_Regexp, decodeURI_guard, matchIdentifier, builtinString_replace_Regexp, trueLiteral, falseLiteral, nullLiteral, emptyStatement, dbg$1, dbgf, nativeFrame, equalDispatch, lessThanTable, prototypeValueObject, prototypeValueFunction, prototypeValueString, prototypeValueBoolean, prototypeValueNumber, prototypeValueDate, prototypeValueRegExp, _classObject, _classArray, _classString, _classArguments, _classGoStruct, _classGoMap, _classGoArray, _classGoSlice, isIdentifier_Regexp, _nilGetSetObject, _nilGetSetObject$24ptr, scriptVersion, invalidDateObject, dateLayoutList, matchDateTimeZone, emptyValue, nullValue, falseValue, trueValue, __NaN__, __PositiveInfinity__, __NegativeInfinity__, __PositiveZero__, __NegativeZero__, stringToNumberParseInteger, matchLeading0Exponent, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _r$7, _r$8, _r$9, _r$10, _r$11, _r$12, builtinGlobal_eval, builtinGlobal_isNaN, builtinGlobal_isFinite, digitValue, builtinGlobal_parseInt, builtinGlobal_parseFloat, _builtinGlobal_encodeURI, builtinGlobal_encodeURI, builtinGlobal_encodeURIComponent, _decodeURI, builtinGlobal_decodeURI, builtinGlobal_decodeURIComponent, builtin_shouldEscape, builtin_escape, builtin_unescape, builtinGlobal_escape, builtinGlobal_unescape, builtinArray, builtinNewArray, builtinNewArrayNative, builtinArray_toString, builtinArray_toLocaleString, builtinArray_concat, builtinArray_shift, builtinArray_push, builtinArray_pop, builtinArray_join, builtinArray_splice, builtinArray_slice, builtinArray_unshift, builtinArray_reverse, sortCompare, arraySortSwap, arraySortQuickPartition, arraySortQuickSort, builtinArray_sort, builtinArray_isArray, builtinArray_indexOf, builtinArray_lastIndexOf, builtinArray_every, builtinArray_some, builtinArray_forEach, builtinArray_map, builtinArray_filter, builtinArray_reduce, builtinArray_reduceRight, builtinBoolean, builtinNewBoolean, builtinBoolean_toString, builtinBoolean_valueOf, builtinDate, builtinNewDate, builtinDate_toString, builtinDate_toDateString, builtinDate_toTimeString, builtinDate_toUTCString, builtinDate_toISOString, builtinDate_toJSON, builtinDate_toGMTString, builtinDate_getTime, builtinDate_setTime, _builtinDate_beforeSet, builtinDate_parse, builtinDate_UTC, builtinDate_now, builtinDate_toLocaleString, builtinDate_toLocaleDateString, builtinDate_toLocaleTimeString, builtinDate_valueOf, builtinDate_getYear, builtinDate_getFullYear, builtinDate_getUTCFullYear, builtinDate_getMonth, builtinDate_getUTCMonth, builtinDate_getDate, builtinDate_getUTCDate, builtinDate_getDay, builtinDate_getUTCDay, builtinDate_getHours, builtinDate_getUTCHours, builtinDate_getMinutes, builtinDate_getUTCMinutes, builtinDate_getSeconds, builtinDate_getUTCSeconds, builtinDate_getMilliseconds, builtinDate_getUTCMilliseconds, builtinDate_getTimezoneOffset, builtinDate_setMilliseconds, builtinDate_setUTCMilliseconds, builtinDate_setSeconds, builtinDate_setUTCSeconds, builtinDate_setMinutes, builtinDate_setUTCMinutes, builtinDate_setHours, builtinDate_setUTCHours, builtinDate_setDate, builtinDate_setUTCDate, builtinDate_setMonth, builtinDate_setUTCMonth, builtinDate_setYear, builtinDate_setFullYear, builtinDate_setUTCFullYear, builtinError, builtinNewError, builtinError_toString, builtinEvalError, builtinNewEvalError, builtinTypeError, builtinNewTypeError, builtinRangeError, builtinNewRangeError, builtinReferenceError, builtinNewReferenceError, builtinSyntaxError, builtinNewSyntaxError, builtinURIError, builtinNewURIError, builtinFunction, builtinNewFunction, builtinNewFunctionNative, builtinFunction_toString, builtinFunction_apply, builtinFunction_call, builtinFunction_bind, builtinJSON_parse, builtinJSON_reviveWalk, builtinJSON_parseWalk, builtinJSON_stringify, builtinJSON_stringifyWalk, builtinMath_abs, builtinMath_acos, builtinMath_asin, builtinMath_atan, builtinMath_atan2, builtinMath_cos, builtinMath_ceil, builtinMath_exp, builtinMath_floor, builtinMath_log, builtinMath_max, builtinMath_min, builtinMath_pow, builtinMath_random, builtinMath_round, builtinMath_sin, builtinMath_sqrt, builtinMath_tan, numberValueFromNumberArgumentList, builtinNumber, builtinNewNumber, builtinNumber_toString, builtinNumber_valueOf, builtinNumber_toFixed, builtinNumber_toExponential, builtinNumber_toPrecision, builtinNumber_toLocaleString, builtinObject, builtinNewObject, builtinObject_valueOf, builtinObject_hasOwnProperty, builtinObject_isPrototypeOf, builtinObject_propertyIsEnumerable, builtinObject_toString, builtinObject_toLocaleString, builtinObject_getPrototypeOf, builtinObject_getOwnPropertyDescriptor, builtinObject_defineProperty, builtinObject_defineProperties, builtinObject_create, builtinObject_isExtensible, builtinObject_preventExtensions, builtinObject_isSealed, builtinObject_seal, builtinObject_isFrozen, builtinObject_freeze, builtinObject_keys, builtinObject_getOwnPropertyNames, builtinRegExp, builtinNewRegExp, builtinRegExp_toString, builtinRegExp_exec, builtinRegExp_test, builtinRegExp_compile, stringValueFromStringArgumentList, builtinString, builtinNewString, builtinString_toString, builtinString_valueOf, builtinString_fromCharCode, builtinString_charAt, builtinString_charCodeAt, builtinString_concat, builtinString_indexOf, builtinString_lastIndexOf, builtinString_match, builtinString_findAndReplaceString, builtinString_replace, builtinString_search, builtinString_split, builtinString_slice, builtinString_substring, builtinString_substr, builtinString_toLowerCase, builtinString_toUpperCase, builtinString_trim, builtinString_trimLeft, builtinString_trimRight, builtinString_localeCompare, builtinString_toLocaleLowerCase, builtinString_toLocaleUpperCase, cmpl_parse, formatForConsole, builtinConsole_log, builtinConsole_error, builtinConsole_dir, builtinConsole_time, builtinConsole_timeEnd, builtinConsole_trace, builtinConsole_assert, newException, _position, newError, catchPanic, valueKindDispatchKey, makeEqualDispatch, calculateLessThan, newContext, _newContext, newConsoleObject, toValue_int, toValue_int32, toValue_int64, toValue_uint16, toValue_uint32, toValue_float64, toValue_string, toValue_string16, toValue_bool, toValue_object, newObject, objectEnumerate, init, objectGetOwnProperty, objectGetProperty, objectGet, objectCanPut, _objectCanPut, objectPut, objectHasProperty, objectHasOwnProperty, objectDefineOwnProperty, objectDelete, objectClone, New, _newObject, stringToArrayIndex, isUint32, arrayIndexToString, valueOfArrayIndex, getValueOfArrayIndex, valueToRangeIndex, rangeStartEnd, rangeStartLength, hereBeDragons, toPropertyDescriptor, newReturnResult, newContinueResult, newBreakResult, checkObjectCoercible, testObjectCoercible, convertNumeric, callParamConvert, callSliceRequired, newScope, getStashProperties, argumentsGet, argumentsGetOwnProperty, argumentsDefineOwnProperty, argumentsDelete, isArray, objectLength, arrayUint32, arrayDefineOwnProperty, ecmaTime, epochToInteger, epochToTime, timeToEpoch, dateObjectOf, dateToGoMonth, dateFromGoMonth, dateFromGoDay, newDateTime, dateParse, defaultConstruct, _newGoArrayObject, goArrayGetOwnProperty, goArrayEnumerate, goArrayDefineOwnProperty, goArrayDelete, _newGoMapObject, goMapGetOwnProperty, goMapEnumerate, goMapDefineOwnProperty, goMapDelete, _newGoSliceObject, goSliceGetOwnProperty, goSliceEnumerate, goSliceDefineOwnProperty, goSliceDelete, _newGoStructObject, goStructGetOwnProperty, validGoStructName, goStructEnumerate, goStructCanPut, goStructPut, goStructMarshalJSON, newPropertyReference, getIdentifierReference, execRegExp, execResultToArray, _newStringObject, stringAt, stringEnumerate, stringGetOwnProperty, toValue_reflectValuePanic, toValue, NaNValue, positiveInfinityValue, negativeInfinityValue, positiveZeroValue, negativeZeroValue, sameValue, strictEqualityComparison, stringToReflectValue, parseNumber, toIntegerFloat, toInt32, toUint32, toUint16, toNumberPrimitive, toPrimitive, _toPrimitive, floatToString, numberToStringRadix;
	bytes = $packages["bytes"];
	gob = $packages["encoding/gob"];
	hex = $packages["encoding/hex"];
	json = $packages["encoding/json"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	ast = $packages["github.com/robertkrimen/otto/ast"];
	dbg = $packages["github.com/robertkrimen/otto/dbg"];
	file = $packages["github.com/robertkrimen/otto/file"];
	parser = $packages["github.com/robertkrimen/otto/parser"];
	registry = $packages["github.com/robertkrimen/otto/registry"];
	token = $packages["github.com/robertkrimen/otto/token"];
	math = $packages["math"];
	rand = $packages["math/rand"];
	url = $packages["net/url"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	regexp = $packages["regexp"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	time = $packages["time"];
	unicode = $packages["unicode"];
	utf16 = $packages["unicode/utf16"];
	utf8 = $packages["unicode/utf8"];
	_builtinJSON_parseContext = $pkg._builtinJSON_parseContext = $newType(0, $kindStruct, "otto._builtinJSON_parseContext", "_builtinJSON_parseContext", "github.com/robertkrimen/otto", function(call_, reviver_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.call = new FunctionCall.ptr(ptrType$3.nil, ptrType$4.nil, false, new Value.ptr(0, $ifaceNil), sliceType$5.nil, ptrType$11.nil);
			this.reviver = new Value.ptr(0, $ifaceNil);
			return;
		}
		this.call = call_;
		this.reviver = reviver_;
	});
	_builtinJSON_stringifyContext = $pkg._builtinJSON_stringifyContext = $newType(0, $kindStruct, "otto._builtinJSON_stringifyContext", "_builtinJSON_stringifyContext", "github.com/robertkrimen/otto", function(call_, stack_, propertyList_, replacerFunction_, gap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.call = new FunctionCall.ptr(ptrType$3.nil, ptrType$4.nil, false, new Value.ptr(0, $ifaceNil), sliceType$5.nil, ptrType$11.nil);
			this.stack = sliceType$7.nil;
			this.propertyList = sliceType.nil;
			this.replacerFunction = ptrType$13.nil;
			this.gap = "";
			return;
		}
		this.call = call_;
		this.stack = stack_;
		this.propertyList = propertyList_;
		this.replacerFunction = replacerFunction_;
		this.gap = gap_;
	});
	_clone = $pkg._clone = $newType(0, $kindStruct, "otto._clone", "_clone", "github.com/robertkrimen/otto", function(runtime_, _object_, _objectStash_, _dclStash_, _fnStash_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.runtime = ptrType$3.nil;
			this._object = false;
			this._objectStash = false;
			this._dclStash = false;
			this._fnStash = false;
			return;
		}
		this.runtime = runtime_;
		this._object = _object_;
		this._objectStash = _objectStash_;
		this._dclStash = _dclStash_;
		this._fnStash = _fnStash_;
	});
	_compiler = $pkg._compiler = $newType(0, $kindStruct, "otto._compiler", "_compiler", "github.com/robertkrimen/otto", function(file_, program_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$1.nil;
			this.program = ptrType$9.nil;
			return;
		}
		this.file = file_;
		this.program = program_;
	});
	_nodeProgram = $pkg._nodeProgram = $newType(0, $kindStruct, "otto._nodeProgram", "_nodeProgram", "github.com/robertkrimen/otto", function(body_, varList_, functionList_, variableList_, file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.body = sliceType$12.nil;
			this.varList = sliceType.nil;
			this.functionList = sliceType$10.nil;
			this.variableList = sliceType$14.nil;
			this.file = ptrType$1.nil;
			return;
		}
		this.body = body_;
		this.varList = varList_;
		this.functionList = functionList_;
		this.variableList = variableList_;
		this.file = file_;
	});
	_nodeDeclaration = $pkg._nodeDeclaration = $newType(0, $kindStruct, "otto._nodeDeclaration", "_nodeDeclaration", "github.com/robertkrimen/otto", function(name_, definition_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.definition = $ifaceNil;
			return;
		}
		this.name = name_;
		this.definition = definition_;
	});
	_node = $pkg._node = $newType(8, $kindInterface, "otto._node", "_node", "github.com/robertkrimen/otto", null);
	_nodeExpression = $pkg._nodeExpression = $newType(8, $kindInterface, "otto._nodeExpression", "_nodeExpression", "github.com/robertkrimen/otto", null);
	_nodeArrayLiteral = $pkg._nodeArrayLiteral = $newType(0, $kindStruct, "otto._nodeArrayLiteral", "_nodeArrayLiteral", "github.com/robertkrimen/otto", function(value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.value = sliceType$9.nil;
			return;
		}
		this.value = value_;
	});
	_nodeAssignExpression = $pkg._nodeAssignExpression = $newType(0, $kindStruct, "otto._nodeAssignExpression", "_nodeAssignExpression", "github.com/robertkrimen/otto", function(operator_, left_, right_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.operator = 0;
			this.left = $ifaceNil;
			this.right = $ifaceNil;
			return;
		}
		this.operator = operator_;
		this.left = left_;
		this.right = right_;
	});
	_nodeBinaryExpression = $pkg._nodeBinaryExpression = $newType(0, $kindStruct, "otto._nodeBinaryExpression", "_nodeBinaryExpression", "github.com/robertkrimen/otto", function(operator_, left_, right_, comparison_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.operator = 0;
			this.left = $ifaceNil;
			this.right = $ifaceNil;
			this.comparison = false;
			return;
		}
		this.operator = operator_;
		this.left = left_;
		this.right = right_;
		this.comparison = comparison_;
	});
	_nodeBracketExpression = $pkg._nodeBracketExpression = $newType(0, $kindStruct, "otto._nodeBracketExpression", "_nodeBracketExpression", "github.com/robertkrimen/otto", function(idx_, left_, member_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.idx = 0;
			this.left = $ifaceNil;
			this.member = $ifaceNil;
			return;
		}
		this.idx = idx_;
		this.left = left_;
		this.member = member_;
	});
	_nodeCallExpression = $pkg._nodeCallExpression = $newType(0, $kindStruct, "otto._nodeCallExpression", "_nodeCallExpression", "github.com/robertkrimen/otto", function(callee_, argumentList_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.callee = $ifaceNil;
			this.argumentList = sliceType$9.nil;
			return;
		}
		this.callee = callee_;
		this.argumentList = argumentList_;
	});
	_nodeConditionalExpression = $pkg._nodeConditionalExpression = $newType(0, $kindStruct, "otto._nodeConditionalExpression", "_nodeConditionalExpression", "github.com/robertkrimen/otto", function(test_, consequent_, alternate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.test = $ifaceNil;
			this.consequent = $ifaceNil;
			this.alternate = $ifaceNil;
			return;
		}
		this.test = test_;
		this.consequent = consequent_;
		this.alternate = alternate_;
	});
	_nodeDotExpression = $pkg._nodeDotExpression = $newType(0, $kindStruct, "otto._nodeDotExpression", "_nodeDotExpression", "github.com/robertkrimen/otto", function(idx_, left_, identifier_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.idx = 0;
			this.left = $ifaceNil;
			this.identifier = "";
			return;
		}
		this.idx = idx_;
		this.left = left_;
		this.identifier = identifier_;
	});
	_nodeFunctionLiteral = $pkg._nodeFunctionLiteral = $newType(0, $kindStruct, "otto._nodeFunctionLiteral", "_nodeFunctionLiteral", "github.com/robertkrimen/otto", function(name_, body_, source_, parameterList_, varList_, functionList_, file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.body = $ifaceNil;
			this.source = "";
			this.parameterList = sliceType.nil;
			this.varList = sliceType.nil;
			this.functionList = sliceType$10.nil;
			this.file = ptrType$1.nil;
			return;
		}
		this.name = name_;
		this.body = body_;
		this.source = source_;
		this.parameterList = parameterList_;
		this.varList = varList_;
		this.functionList = functionList_;
		this.file = file_;
	});
	_nodeIdentifier = $pkg._nodeIdentifier = $newType(0, $kindStruct, "otto._nodeIdentifier", "_nodeIdentifier", "github.com/robertkrimen/otto", function(idx_, name_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.idx = 0;
			this.name = "";
			return;
		}
		this.idx = idx_;
		this.name = name_;
	});
	_nodeLiteral = $pkg._nodeLiteral = $newType(0, $kindStruct, "otto._nodeLiteral", "_nodeLiteral", "github.com/robertkrimen/otto", function(value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.value = new Value.ptr(0, $ifaceNil);
			return;
		}
		this.value = value_;
	});
	_nodeNewExpression = $pkg._nodeNewExpression = $newType(0, $kindStruct, "otto._nodeNewExpression", "_nodeNewExpression", "github.com/robertkrimen/otto", function(callee_, argumentList_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.callee = $ifaceNil;
			this.argumentList = sliceType$9.nil;
			return;
		}
		this.callee = callee_;
		this.argumentList = argumentList_;
	});
	_nodeObjectLiteral = $pkg._nodeObjectLiteral = $newType(0, $kindStruct, "otto._nodeObjectLiteral", "_nodeObjectLiteral", "github.com/robertkrimen/otto", function(value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.value = sliceType$11.nil;
			return;
		}
		this.value = value_;
	});
	_nodeProperty = $pkg._nodeProperty = $newType(0, $kindStruct, "otto._nodeProperty", "_nodeProperty", "github.com/robertkrimen/otto", function(key_, kind_, value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.key = "";
			this.kind = "";
			this.value = $ifaceNil;
			return;
		}
		this.key = key_;
		this.kind = kind_;
		this.value = value_;
	});
	_nodeRegExpLiteral = $pkg._nodeRegExpLiteral = $newType(0, $kindStruct, "otto._nodeRegExpLiteral", "_nodeRegExpLiteral", "github.com/robertkrimen/otto", function(flags_, pattern_, regexp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.flags = "";
			this.pattern = "";
			this.regexp = ptrType$2.nil;
			return;
		}
		this.flags = flags_;
		this.pattern = pattern_;
		this.regexp = regexp_;
	});
	_nodeSequenceExpression = $pkg._nodeSequenceExpression = $newType(0, $kindStruct, "otto._nodeSequenceExpression", "_nodeSequenceExpression", "github.com/robertkrimen/otto", function(sequence_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sequence = sliceType$9.nil;
			return;
		}
		this.sequence = sequence_;
	});
	_nodeThisExpression = $pkg._nodeThisExpression = $newType(0, $kindStruct, "otto._nodeThisExpression", "_nodeThisExpression", "github.com/robertkrimen/otto", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	_nodeUnaryExpression = $pkg._nodeUnaryExpression = $newType(0, $kindStruct, "otto._nodeUnaryExpression", "_nodeUnaryExpression", "github.com/robertkrimen/otto", function(operator_, operand_, postfix_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.operator = 0;
			this.operand = $ifaceNil;
			this.postfix = false;
			return;
		}
		this.operator = operator_;
		this.operand = operand_;
		this.postfix = postfix_;
	});
	_nodeVariableExpression = $pkg._nodeVariableExpression = $newType(0, $kindStruct, "otto._nodeVariableExpression", "_nodeVariableExpression", "github.com/robertkrimen/otto", function(idx_, name_, initializer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.idx = 0;
			this.name = "";
			this.initializer = $ifaceNil;
			return;
		}
		this.idx = idx_;
		this.name = name_;
		this.initializer = initializer_;
	});
	_nodeStatement = $pkg._nodeStatement = $newType(8, $kindInterface, "otto._nodeStatement", "_nodeStatement", "github.com/robertkrimen/otto", null);
	_nodeBlockStatement = $pkg._nodeBlockStatement = $newType(0, $kindStruct, "otto._nodeBlockStatement", "_nodeBlockStatement", "github.com/robertkrimen/otto", function(list_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.list = sliceType$12.nil;
			return;
		}
		this.list = list_;
	});
	_nodeBranchStatement = $pkg._nodeBranchStatement = $newType(0, $kindStruct, "otto._nodeBranchStatement", "_nodeBranchStatement", "github.com/robertkrimen/otto", function(branch_, label_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.branch = 0;
			this.label = "";
			return;
		}
		this.branch = branch_;
		this.label = label_;
	});
	_nodeCaseStatement = $pkg._nodeCaseStatement = $newType(0, $kindStruct, "otto._nodeCaseStatement", "_nodeCaseStatement", "github.com/robertkrimen/otto", function(test_, consequent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.test = $ifaceNil;
			this.consequent = sliceType$12.nil;
			return;
		}
		this.test = test_;
		this.consequent = consequent_;
	});
	_nodeCatchStatement = $pkg._nodeCatchStatement = $newType(0, $kindStruct, "otto._nodeCatchStatement", "_nodeCatchStatement", "github.com/robertkrimen/otto", function(parameter_, body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.parameter = "";
			this.body = $ifaceNil;
			return;
		}
		this.parameter = parameter_;
		this.body = body_;
	});
	_nodeDebuggerStatement = $pkg._nodeDebuggerStatement = $newType(0, $kindStruct, "otto._nodeDebuggerStatement", "_nodeDebuggerStatement", "github.com/robertkrimen/otto", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	_nodeDoWhileStatement = $pkg._nodeDoWhileStatement = $newType(0, $kindStruct, "otto._nodeDoWhileStatement", "_nodeDoWhileStatement", "github.com/robertkrimen/otto", function(test_, body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.test = $ifaceNil;
			this.body = sliceType$12.nil;
			return;
		}
		this.test = test_;
		this.body = body_;
	});
	_nodeEmptyStatement = $pkg._nodeEmptyStatement = $newType(0, $kindStruct, "otto._nodeEmptyStatement", "_nodeEmptyStatement", "github.com/robertkrimen/otto", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	_nodeExpressionStatement = $pkg._nodeExpressionStatement = $newType(0, $kindStruct, "otto._nodeExpressionStatement", "_nodeExpressionStatement", "github.com/robertkrimen/otto", function(expression_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.expression = $ifaceNil;
			return;
		}
		this.expression = expression_;
	});
	_nodeForInStatement = $pkg._nodeForInStatement = $newType(0, $kindStruct, "otto._nodeForInStatement", "_nodeForInStatement", "github.com/robertkrimen/otto", function(into_, source_, body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.into = $ifaceNil;
			this.source = $ifaceNil;
			this.body = sliceType$12.nil;
			return;
		}
		this.into = into_;
		this.source = source_;
		this.body = body_;
	});
	_nodeForStatement = $pkg._nodeForStatement = $newType(0, $kindStruct, "otto._nodeForStatement", "_nodeForStatement", "github.com/robertkrimen/otto", function(initializer_, update_, test_, body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.initializer = $ifaceNil;
			this.update = $ifaceNil;
			this.test = $ifaceNil;
			this.body = sliceType$12.nil;
			return;
		}
		this.initializer = initializer_;
		this.update = update_;
		this.test = test_;
		this.body = body_;
	});
	_nodeIfStatement = $pkg._nodeIfStatement = $newType(0, $kindStruct, "otto._nodeIfStatement", "_nodeIfStatement", "github.com/robertkrimen/otto", function(test_, consequent_, alternate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.test = $ifaceNil;
			this.consequent = $ifaceNil;
			this.alternate = $ifaceNil;
			return;
		}
		this.test = test_;
		this.consequent = consequent_;
		this.alternate = alternate_;
	});
	_nodeLabelledStatement = $pkg._nodeLabelledStatement = $newType(0, $kindStruct, "otto._nodeLabelledStatement", "_nodeLabelledStatement", "github.com/robertkrimen/otto", function(label_, statement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.label = "";
			this.statement = $ifaceNil;
			return;
		}
		this.label = label_;
		this.statement = statement_;
	});
	_nodeReturnStatement = $pkg._nodeReturnStatement = $newType(0, $kindStruct, "otto._nodeReturnStatement", "_nodeReturnStatement", "github.com/robertkrimen/otto", function(argument_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.argument = $ifaceNil;
			return;
		}
		this.argument = argument_;
	});
	_nodeSwitchStatement = $pkg._nodeSwitchStatement = $newType(0, $kindStruct, "otto._nodeSwitchStatement", "_nodeSwitchStatement", "github.com/robertkrimen/otto", function(discriminant_, default__, body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.discriminant = $ifaceNil;
			this.default_ = 0;
			this.body = sliceType$13.nil;
			return;
		}
		this.discriminant = discriminant_;
		this.default_ = default__;
		this.body = body_;
	});
	_nodeThrowStatement = $pkg._nodeThrowStatement = $newType(0, $kindStruct, "otto._nodeThrowStatement", "_nodeThrowStatement", "github.com/robertkrimen/otto", function(argument_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.argument = $ifaceNil;
			return;
		}
		this.argument = argument_;
	});
	_nodeTryStatement = $pkg._nodeTryStatement = $newType(0, $kindStruct, "otto._nodeTryStatement", "_nodeTryStatement", "github.com/robertkrimen/otto", function(body_, catch$1_, finally$2_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.body = $ifaceNil;
			this.catch$1 = ptrType$54.nil;
			this.finally$2 = $ifaceNil;
			return;
		}
		this.body = body_;
		this.catch$1 = catch$1_;
		this.finally$2 = finally$2_;
	});
	_nodeVariableStatement = $pkg._nodeVariableStatement = $newType(0, $kindStruct, "otto._nodeVariableStatement", "_nodeVariableStatement", "github.com/robertkrimen/otto", function(list_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.list = sliceType$9.nil;
			return;
		}
		this.list = list_;
	});
	_nodeWhileStatement = $pkg._nodeWhileStatement = $newType(0, $kindStruct, "otto._nodeWhileStatement", "_nodeWhileStatement", "github.com/robertkrimen/otto", function(test_, body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.test = $ifaceNil;
			this.body = sliceType$12.nil;
			return;
		}
		this.test = test_;
		this.body = body_;
	});
	_nodeWithStatement = $pkg._nodeWithStatement = $newType(0, $kindStruct, "otto._nodeWithStatement", "_nodeWithStatement", "github.com/robertkrimen/otto", function(object_, body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = $ifaceNil;
			this.body = $ifaceNil;
			return;
		}
		this.object = object_;
		this.body = body_;
	});
	_exception = $pkg._exception = $newType(0, $kindStruct, "otto._exception", "_exception", "github.com/robertkrimen/otto", function(value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.value = $ifaceNil;
			return;
		}
		this.value = value_;
	});
	_error = $pkg._error = $newType(0, $kindStruct, "otto._error", "_error", "github.com/robertkrimen/otto", function(name_, message_, trace_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.message = "";
			this.trace = sliceType$15.nil;
			this.offset = 0;
			return;
		}
		this.name = name_;
		this.message = message_;
		this.trace = trace_;
		this.offset = offset_;
	});
	_frame = $pkg._frame = $newType(0, $kindStruct, "otto._frame", "_frame", "github.com/robertkrimen/otto", function(file_, offset_, callee_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$1.nil;
			this.offset = 0;
			this.callee = "";
			return;
		}
		this.file = file_;
		this.offset = offset_;
		this.callee = callee_;
	});
	_at = $pkg._at = $newType(4, $kindInt, "otto._at", "_at", "github.com/robertkrimen/otto", null);
	Error = $pkg.Error = $newType(0, $kindStruct, "otto.Error", "Error", "github.com/robertkrimen/otto", function(_error_) {
		this.$val = this;
		if (arguments.length === 0) {
			this._error = new _error.ptr("", "", sliceType$15.nil, 0);
			return;
		}
		this._error = _error_;
	});
	_lessThanResult = $pkg._lessThanResult = $newType(4, $kindInt, "otto._lessThanResult", "_lessThanResult", "github.com/robertkrimen/otto", null);
	_object = $pkg._object = $newType(0, $kindStruct, "otto._object", "_object", "github.com/robertkrimen/otto", function(runtime_, class$1_, objectClass_, value_, prototype_, extensible_, property_, propertyOrder_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.runtime = ptrType$3.nil;
			this.class$1 = "";
			this.objectClass = ptrType.nil;
			this.value = $ifaceNil;
			this.prototype = ptrType$4.nil;
			this.extensible = false;
			this.property = false;
			this.propertyOrder = sliceType.nil;
			return;
		}
		this.runtime = runtime_;
		this.class$1 = class$1_;
		this.objectClass = objectClass_;
		this.value = value_;
		this.prototype = prototype_;
		this.extensible = extensible_;
		this.property = property_;
		this.propertyOrder = propertyOrder_;
	});
	_defaultValueHint = $pkg._defaultValueHint = $newType(4, $kindInt, "otto._defaultValueHint", "_defaultValueHint", "github.com/robertkrimen/otto", null);
	_objectClass = $pkg._objectClass = $newType(0, $kindStruct, "otto._objectClass", "_objectClass", "github.com/robertkrimen/otto", function(getOwnProperty_, getProperty_, get_, canPut_, put_, hasProperty_, hasOwnProperty_, defineOwnProperty_, delete$8_, enumerate_, clone_, marshalJSON_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.getOwnProperty = $throwNilPointerError;
			this.getProperty = $throwNilPointerError;
			this.get = $throwNilPointerError;
			this.canPut = $throwNilPointerError;
			this.put = $throwNilPointerError;
			this.hasProperty = $throwNilPointerError;
			this.hasOwnProperty = $throwNilPointerError;
			this.defineOwnProperty = $throwNilPointerError;
			this.delete$8 = $throwNilPointerError;
			this.enumerate = $throwNilPointerError;
			this.clone = $throwNilPointerError;
			this.marshalJSON = $throwNilPointerError;
			return;
		}
		this.getOwnProperty = getOwnProperty_;
		this.getProperty = getProperty_;
		this.get = get_;
		this.canPut = canPut_;
		this.put = put_;
		this.hasProperty = hasProperty_;
		this.hasOwnProperty = hasOwnProperty_;
		this.defineOwnProperty = defineOwnProperty_;
		this.delete$8 = delete$8_;
		this.enumerate = enumerate_;
		this.clone = clone_;
		this.marshalJSON = marshalJSON_;
	});
	Otto = $pkg.Otto = $newType(0, $kindStruct, "otto.Otto", "Otto", "github.com/robertkrimen/otto", function(Interrupt_, runtime_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Interrupt = $chanNil;
			this.runtime = ptrType$3.nil;
			return;
		}
		this.Interrupt = Interrupt_;
		this.runtime = runtime_;
	});
	Context = $pkg.Context = $newType(0, $kindStruct, "otto.Context", "Context", "github.com/robertkrimen/otto", function(Filename_, Line_, Column_, Callee_, Symbols_, This_, Stacktrace_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Filename = "";
			this.Line = 0;
			this.Column = 0;
			this.Callee = "";
			this.Symbols = false;
			this.This = new Value.ptr(0, $ifaceNil);
			this.Stacktrace = sliceType.nil;
			return;
		}
		this.Filename = Filename_;
		this.Line = Line_;
		this.Column = Column_;
		this.Callee = Callee_;
		this.Symbols = Symbols_;
		this.This = This_;
		this.Stacktrace = Stacktrace_;
	});
	Object = $pkg.Object = $newType(0, $kindStruct, "otto.Object", "Object", "github.com/robertkrimen/otto", function(object_, value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = ptrType$4.nil;
			this.value = new Value.ptr(0, $ifaceNil);
			return;
		}
		this.object = object_;
		this.value = value_;
	});
	_propertyMode = $pkg._propertyMode = $newType(4, $kindInt, "otto._propertyMode", "_propertyMode", "github.com/robertkrimen/otto", null);
	_propertyGetSet = $pkg._propertyGetSet = $newType(8, $kindArray, "otto._propertyGetSet", "_propertyGetSet", "github.com/robertkrimen/otto", null);
	_property = $pkg._property = $newType(0, $kindStruct, "otto._property", "_property", "github.com/robertkrimen/otto", function(value_, mode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.value = $ifaceNil;
			this.mode = 0;
			return;
		}
		this.value = value_;
		this.mode = mode_;
	});
	_resultKind = $pkg._resultKind = $newType(4, $kindInt, "otto._resultKind", "_resultKind", "github.com/robertkrimen/otto", null);
	_result = $pkg._result = $newType(0, $kindStruct, "otto._result", "_result", "github.com/robertkrimen/otto", function(kind_, value_, target_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.kind = 0;
			this.value = new Value.ptr(0, $ifaceNil);
			this.target = "";
			return;
		}
		this.kind = kind_;
		this.value = value_;
		this.target = target_;
	});
	_global = $pkg._global = $newType(0, $kindStruct, "otto._global", "_global", "github.com/robertkrimen/otto", function(Object_, Function_, Array_, String_, Boolean_, Number_, Math_, Date_, RegExp_, Error_, EvalError_, TypeError_, RangeError_, ReferenceError_, SyntaxError_, URIError_, JSON_, ObjectPrototype_, FunctionPrototype_, ArrayPrototype_, StringPrototype_, BooleanPrototype_, NumberPrototype_, DatePrototype_, RegExpPrototype_, ErrorPrototype_, EvalErrorPrototype_, TypeErrorPrototype_, RangeErrorPrototype_, ReferenceErrorPrototype_, SyntaxErrorPrototype_, URIErrorPrototype_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = ptrType$4.nil;
			this.Function = ptrType$4.nil;
			this.Array = ptrType$4.nil;
			this.String = ptrType$4.nil;
			this.Boolean = ptrType$4.nil;
			this.Number = ptrType$4.nil;
			this.Math = ptrType$4.nil;
			this.Date = ptrType$4.nil;
			this.RegExp = ptrType$4.nil;
			this.Error = ptrType$4.nil;
			this.EvalError = ptrType$4.nil;
			this.TypeError = ptrType$4.nil;
			this.RangeError = ptrType$4.nil;
			this.ReferenceError = ptrType$4.nil;
			this.SyntaxError = ptrType$4.nil;
			this.URIError = ptrType$4.nil;
			this.JSON = ptrType$4.nil;
			this.ObjectPrototype = ptrType$4.nil;
			this.FunctionPrototype = ptrType$4.nil;
			this.ArrayPrototype = ptrType$4.nil;
			this.StringPrototype = ptrType$4.nil;
			this.BooleanPrototype = ptrType$4.nil;
			this.NumberPrototype = ptrType$4.nil;
			this.DatePrototype = ptrType$4.nil;
			this.RegExpPrototype = ptrType$4.nil;
			this.ErrorPrototype = ptrType$4.nil;
			this.EvalErrorPrototype = ptrType$4.nil;
			this.TypeErrorPrototype = ptrType$4.nil;
			this.RangeErrorPrototype = ptrType$4.nil;
			this.ReferenceErrorPrototype = ptrType$4.nil;
			this.SyntaxErrorPrototype = ptrType$4.nil;
			this.URIErrorPrototype = ptrType$4.nil;
			return;
		}
		this.Object = Object_;
		this.Function = Function_;
		this.Array = Array_;
		this.String = String_;
		this.Boolean = Boolean_;
		this.Number = Number_;
		this.Math = Math_;
		this.Date = Date_;
		this.RegExp = RegExp_;
		this.Error = Error_;
		this.EvalError = EvalError_;
		this.TypeError = TypeError_;
		this.RangeError = RangeError_;
		this.ReferenceError = ReferenceError_;
		this.SyntaxError = SyntaxError_;
		this.URIError = URIError_;
		this.JSON = JSON_;
		this.ObjectPrototype = ObjectPrototype_;
		this.FunctionPrototype = FunctionPrototype_;
		this.ArrayPrototype = ArrayPrototype_;
		this.StringPrototype = StringPrototype_;
		this.BooleanPrototype = BooleanPrototype_;
		this.NumberPrototype = NumberPrototype_;
		this.DatePrototype = DatePrototype_;
		this.RegExpPrototype = RegExpPrototype_;
		this.ErrorPrototype = ErrorPrototype_;
		this.EvalErrorPrototype = EvalErrorPrototype_;
		this.TypeErrorPrototype = TypeErrorPrototype_;
		this.RangeErrorPrototype = RangeErrorPrototype_;
		this.ReferenceErrorPrototype = ReferenceErrorPrototype_;
		this.SyntaxErrorPrototype = SyntaxErrorPrototype_;
		this.URIErrorPrototype = URIErrorPrototype_;
	});
	_runtime = $pkg._runtime = $newType(0, $kindStruct, "otto._runtime", "_runtime", "github.com/robertkrimen/otto", function(global_, globalObject_, globalStash_, scope_, otto_, eval$5_, debugger$6_, labels_, lck_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.global = new _global.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil);
			this.globalObject = ptrType$4.nil;
			this.globalStash = ptrType$15.nil;
			this.scope = ptrType$16.nil;
			this.otto = ptrType$11.nil;
			this.eval$5 = ptrType$4.nil;
			this.debugger$6 = $throwNilPointerError;
			this.labels = sliceType.nil;
			this.lck = new sync.Mutex.ptr(0, 0);
			return;
		}
		this.global = global_;
		this.globalObject = globalObject_;
		this.globalStash = globalStash_;
		this.scope = scope_;
		this.otto = otto_;
		this.eval$5 = eval$5_;
		this.debugger$6 = debugger$6_;
		this.labels = labels_;
		this.lck = lck_;
	});
	_scope = $pkg._scope = $newType(0, $kindStruct, "otto._scope", "_scope", "github.com/robertkrimen/otto", function(lexical_, variable_, this$2_, eval$3_, outer_, frame_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lexical = $ifaceNil;
			this.variable = $ifaceNil;
			this.this$2 = ptrType$4.nil;
			this.eval$3 = false;
			this.outer = ptrType$16.nil;
			this.frame = new _frame.ptr(ptrType$1.nil, 0, "");
			return;
		}
		this.lexical = lexical_;
		this.variable = variable_;
		this.this$2 = this$2_;
		this.eval$3 = eval$3_;
		this.outer = outer_;
		this.frame = frame_;
	});
	Script = $pkg.Script = $newType(0, $kindStruct, "otto.Script", "Script", "github.com/robertkrimen/otto", function(version_, program_, filename_, src_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.version = "";
			this.program = ptrType$101.nil;
			this.filename = "";
			this.src = "";
			return;
		}
		this.version = version_;
		this.program = program_;
		this.filename = filename_;
		this.src = src_;
	});
	_stash = $pkg._stash = $newType(8, $kindInterface, "otto._stash", "_stash", "github.com/robertkrimen/otto", null);
	_objectStash = $pkg._objectStash = $newType(0, $kindStruct, "otto._objectStash", "_objectStash", "github.com/robertkrimen/otto", function(_runtime_, _outer_, object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this._runtime = ptrType$3.nil;
			this._outer = $ifaceNil;
			this.object = ptrType$4.nil;
			return;
		}
		this._runtime = _runtime_;
		this._outer = _outer_;
		this.object = object_;
	});
	_dclStash = $pkg._dclStash = $newType(0, $kindStruct, "otto._dclStash", "_dclStash", "github.com/robertkrimen/otto", function(_runtime_, _outer_, property_) {
		this.$val = this;
		if (arguments.length === 0) {
			this._runtime = ptrType$3.nil;
			this._outer = $ifaceNil;
			this.property = false;
			return;
		}
		this._runtime = _runtime_;
		this._outer = _outer_;
		this.property = property_;
	});
	_dclProperty = $pkg._dclProperty = $newType(0, $kindStruct, "otto._dclProperty", "_dclProperty", "github.com/robertkrimen/otto", function(value_, mutable_, deletable_, readable_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.value = new Value.ptr(0, $ifaceNil);
			this.mutable = false;
			this.deletable = false;
			this.readable = false;
			return;
		}
		this.value = value_;
		this.mutable = mutable_;
		this.deletable = deletable_;
		this.readable = readable_;
	});
	_fnStash = $pkg._fnStash = $newType(0, $kindStruct, "otto._fnStash", "_fnStash", "github.com/robertkrimen/otto", function(_dclStash_, arguments$1_, indexOfArgumentName_) {
		this.$val = this;
		if (arguments.length === 0) {
			this._dclStash = new _dclStash.ptr(ptrType$3.nil, $ifaceNil, false);
			this.arguments$1 = ptrType$4.nil;
			this.indexOfArgumentName = false;
			return;
		}
		this._dclStash = _dclStash_;
		this.arguments$1 = arguments$1_;
		this.indexOfArgumentName = indexOfArgumentName_;
	});
	_argumentsObject = $pkg._argumentsObject = $newType(0, $kindStruct, "otto._argumentsObject", "_argumentsObject", "github.com/robertkrimen/otto", function(indexOfParameterName_, stash_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.indexOfParameterName = sliceType.nil;
			this.stash = $ifaceNil;
			return;
		}
		this.indexOfParameterName = indexOfParameterName_;
		this.stash = stash_;
	});
	_dateObject = $pkg._dateObject = $newType(0, $kindStruct, "otto._dateObject", "_dateObject", "github.com/robertkrimen/otto", function(time_, epoch_, value_, isNaN_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.time = new time.Time.ptr(new $Int64(0, 0), 0, ptrType$5.nil);
			this.epoch = new $Int64(0, 0);
			this.value = new Value.ptr(0, $ifaceNil);
			this.isNaN = false;
			return;
		}
		this.time = time_;
		this.epoch = epoch_;
		this.value = value_;
		this.isNaN = isNaN_;
	});
	_ecmaTime = $pkg._ecmaTime = $newType(0, $kindStruct, "otto._ecmaTime", "_ecmaTime", "github.com/robertkrimen/otto", function(year_, month_, day_, hour_, minute_, second_, millisecond_, location_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.year = 0;
			this.month = 0;
			this.day = 0;
			this.hour = 0;
			this.minute = 0;
			this.second = 0;
			this.millisecond = 0;
			this.location = ptrType$5.nil;
			return;
		}
		this.year = year_;
		this.month = month_;
		this.day = day_;
		this.hour = hour_;
		this.minute = minute_;
		this.second = second_;
		this.millisecond = millisecond_;
		this.location = location_;
	});
	_constructFunction = $pkg._constructFunction = $newType(4, $kindFunc, "otto._constructFunction", "_constructFunction", "github.com/robertkrimen/otto", null);
	_nativeFunction = $pkg._nativeFunction = $newType(4, $kindFunc, "otto._nativeFunction", "_nativeFunction", "github.com/robertkrimen/otto", null);
	_nativeFunctionObject = $pkg._nativeFunctionObject = $newType(0, $kindStruct, "otto._nativeFunctionObject", "_nativeFunctionObject", "github.com/robertkrimen/otto", function(name_, call_, construct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.call = $throwNilPointerError;
			this.construct = $throwNilPointerError;
			return;
		}
		this.name = name_;
		this.call = call_;
		this.construct = construct_;
	});
	_bindFunctionObject = $pkg._bindFunctionObject = $newType(0, $kindStruct, "otto._bindFunctionObject", "_bindFunctionObject", "github.com/robertkrimen/otto", function(target_, this$1_, argumentList_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.target = ptrType$4.nil;
			this.this$1 = new Value.ptr(0, $ifaceNil);
			this.argumentList = sliceType$5.nil;
			return;
		}
		this.target = target_;
		this.this$1 = this$1_;
		this.argumentList = argumentList_;
	});
	_nodeFunctionObject = $pkg._nodeFunctionObject = $newType(0, $kindStruct, "otto._nodeFunctionObject", "_nodeFunctionObject", "github.com/robertkrimen/otto", function(node_, stash_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.node = ptrType$10.nil;
			this.stash = $ifaceNil;
			return;
		}
		this.node = node_;
		this.stash = stash_;
	});
	FunctionCall = $pkg.FunctionCall = $newType(0, $kindStruct, "otto.FunctionCall", "FunctionCall", "github.com/robertkrimen/otto", function(runtime_, _thisObject_, eval$2_, This_, ArgumentList_, Otto_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.runtime = ptrType$3.nil;
			this._thisObject = ptrType$4.nil;
			this.eval$2 = false;
			this.This = new Value.ptr(0, $ifaceNil);
			this.ArgumentList = sliceType$5.nil;
			this.Otto = ptrType$11.nil;
			return;
		}
		this.runtime = runtime_;
		this._thisObject = _thisObject_;
		this.eval$2 = eval$2_;
		this.This = This_;
		this.ArgumentList = ArgumentList_;
		this.Otto = Otto_;
	});
	_goArrayObject = $pkg._goArrayObject = $newType(0, $kindStruct, "otto._goArrayObject", "_goArrayObject", "github.com/robertkrimen/otto", function(value_, writable_, propertyMode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.value = new reflect.Value.ptr(ptrType$99.nil, 0, 0);
			this.writable = false;
			this.propertyMode = 0;
			return;
		}
		this.value = value_;
		this.writable = writable_;
		this.propertyMode = propertyMode_;
	});
	_goMapObject = $pkg._goMapObject = $newType(0, $kindStruct, "otto._goMapObject", "_goMapObject", "github.com/robertkrimen/otto", function(value_, keyKind_, valueKind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.value = new reflect.Value.ptr(ptrType$99.nil, 0, 0);
			this.keyKind = 0;
			this.valueKind = 0;
			return;
		}
		this.value = value_;
		this.keyKind = keyKind_;
		this.valueKind = valueKind_;
	});
	_goSliceObject = $pkg._goSliceObject = $newType(0, $kindStruct, "otto._goSliceObject", "_goSliceObject", "github.com/robertkrimen/otto", function(value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.value = new reflect.Value.ptr(ptrType$99.nil, 0, 0);
			return;
		}
		this.value = value_;
	});
	_goStructObject = $pkg._goStructObject = $newType(0, $kindStruct, "otto._goStructObject", "_goStructObject", "github.com/robertkrimen/otto", function(value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.value = new reflect.Value.ptr(ptrType$99.nil, 0, 0);
			return;
		}
		this.value = value_;
	});
	_reference = $pkg._reference = $newType(8, $kindInterface, "otto._reference", "_reference", "github.com/robertkrimen/otto", null);
	_propertyReference = $pkg._propertyReference = $newType(0, $kindStruct, "otto._propertyReference", "_propertyReference", "github.com/robertkrimen/otto", function(name_, strict_, base_, runtime_, at_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.strict = false;
			this.base = ptrType$4.nil;
			this.runtime = ptrType$3.nil;
			this.at = 0;
			return;
		}
		this.name = name_;
		this.strict = strict_;
		this.base = base_;
		this.runtime = runtime_;
		this.at = at_;
	});
	_stashReference = $pkg._stashReference = $newType(0, $kindStruct, "otto._stashReference", "_stashReference", "github.com/robertkrimen/otto", function(name_, strict_, base_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.strict = false;
			this.base = $ifaceNil;
			return;
		}
		this.name = name_;
		this.strict = strict_;
		this.base = base_;
	});
	_regExpObject = $pkg._regExpObject = $newType(0, $kindStruct, "otto._regExpObject", "_regExpObject", "github.com/robertkrimen/otto", function(regularExpression_, global_, ignoreCase_, multiline_, source_, flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.regularExpression = ptrType$2.nil;
			this.global = false;
			this.ignoreCase = false;
			this.multiline = false;
			this.source = "";
			this.flags = "";
			return;
		}
		this.regularExpression = regularExpression_;
		this.global = global_;
		this.ignoreCase = ignoreCase_;
		this.multiline = multiline_;
		this.source = source_;
		this.flags = flags_;
	});
	_stringObject = $pkg._stringObject = $newType(8, $kindInterface, "otto._stringObject", "_stringObject", "github.com/robertkrimen/otto", null);
	_stringASCII = $pkg._stringASCII = $newType(8, $kindString, "otto._stringASCII", "_stringASCII", "github.com/robertkrimen/otto", null);
	_stringWide = $pkg._stringWide = $newType(0, $kindStruct, "otto._stringWide", "_stringWide", "github.com/robertkrimen/otto", function(string_, length_, runes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.string = "";
			this.length = 0;
			this.runes = sliceType$3.nil;
			return;
		}
		this.string = string_;
		this.length = length_;
		this.runes = runes_;
	});
	_valueKind = $pkg._valueKind = $newType(4, $kindInt, "otto._valueKind", "_valueKind", "github.com/robertkrimen/otto", null);
	Value = $pkg.Value = $newType(0, $kindStruct, "otto.Value", "Value", "github.com/robertkrimen/otto", function(kind_, value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.kind = 0;
			this.value = $ifaceNil;
			return;
		}
		this.kind = kind_;
		this.value = value_;
	});
	_numberKind = $pkg._numberKind = $newType(4, $kindInt, "otto._numberKind", "_numberKind", "github.com/robertkrimen/otto", null);
	_number = $pkg._number = $newType(0, $kindStruct, "otto._number", "_number", "github.com/robertkrimen/otto", function(kind_, int64_, float64_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.kind = 0;
			this.int64 = new $Int64(0, 0);
			this.float64 = 0;
			return;
		}
		this.kind = kind_;
		this.int64 = int64_;
		this.float64 = float64_;
	});
	ptrType = $ptrType(_objectClass);
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(file.File);
	ptrType$2 = $ptrType(regexp.Regexp);
	ptrType$3 = $ptrType(_runtime);
	ptrType$4 = $ptrType(_object);
	ptrType$5 = $ptrType(time.Location);
	ptrType$6 = $ptrType(strconv.NumError);
	sliceType$2 = $sliceType($Uint16);
	sliceType$3 = $sliceType($Int32);
	sliceType$4 = $sliceType($Uint8);
	sliceType$5 = $sliceType(Value);
	structType = $structType([{prop: "name", name: "name", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "index", name: "index", pkg: "github.com/robertkrimen/otto", typ: $Int64, tag: ""}, {prop: "exists", name: "exists", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}]);
	structType$1 = $structType([{prop: "name", name: "name", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "exists", name: "exists", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}, {prop: "defined", name: "defined", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}, {prop: "value", name: "value", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}]);
	structType$2 = $structType([{prop: "name", name: "name", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "exists", name: "exists", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}]);
	ptrType$7 = $ptrType(_dateObject);
	ptrType$8 = $ptrType(_ecmaTime);
	sliceType$6 = $sliceType($Int);
	ptrType$9 = $ptrType(ast.Program);
	ptrType$10 = $ptrType(_nodeFunctionLiteral);
	ptrType$11 = $ptrType(Otto);
	ptrType$12 = $ptrType($emptyInterface);
	mapType = $mapType($String, $emptyInterface);
	sliceType$7 = $sliceType(ptrType$4);
	ptrType$13 = $ptrType(Value);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$14 = $ptrType(_property);
	sliceType$8 = $sliceType(sliceType$6);
	ptrType$15 = $ptrType(_objectStash);
	ptrType$16 = $ptrType(_scope);
	ptrType$17 = $ptrType(_dclStash);
	ptrType$18 = $ptrType(_fnStash);
	arrayType$2 = $arrayType(ptrType$4, 2);
	ptrType$19 = $ptrType(_nodeArrayLiteral);
	ptrType$20 = $ptrType(_nodeAssignExpression);
	ptrType$21 = $ptrType(_nodeBinaryExpression);
	ptrType$22 = $ptrType(_nodeBracketExpression);
	ptrType$23 = $ptrType(_nodeCallExpression);
	ptrType$24 = $ptrType(_nodeConditionalExpression);
	ptrType$25 = $ptrType(_nodeDotExpression);
	ptrType$26 = $ptrType(_nodeIdentifier);
	ptrType$27 = $ptrType(_nodeLiteral);
	ptrType$28 = $ptrType(_nodeNewExpression);
	ptrType$29 = $ptrType(_nodeObjectLiteral);
	ptrType$30 = $ptrType(_nodeRegExpLiteral);
	ptrType$31 = $ptrType(_nodeSequenceExpression);
	ptrType$32 = $ptrType(_nodeThisExpression);
	ptrType$33 = $ptrType(_nodeUnaryExpression);
	ptrType$34 = $ptrType(_nodeVariableExpression);
	ptrType$35 = $ptrType(_propertyReference);
	ptrType$36 = $ptrType(_stashReference);
	ptrType$37 = $ptrType(_nodeBlockStatement);
	ptrType$38 = $ptrType(_nodeBranchStatement);
	ptrType$39 = $ptrType(_nodeDebuggerStatement);
	ptrType$40 = $ptrType(_nodeDoWhileStatement);
	ptrType$41 = $ptrType(_nodeEmptyStatement);
	ptrType$42 = $ptrType(_nodeExpressionStatement);
	ptrType$43 = $ptrType(_nodeForInStatement);
	ptrType$44 = $ptrType(_nodeForStatement);
	ptrType$45 = $ptrType(_nodeIfStatement);
	ptrType$46 = $ptrType(_nodeLabelledStatement);
	ptrType$47 = $ptrType(_nodeReturnStatement);
	ptrType$48 = $ptrType(_nodeSwitchStatement);
	ptrType$49 = $ptrType(_nodeThrowStatement);
	ptrType$50 = $ptrType(_nodeTryStatement);
	ptrType$51 = $ptrType(_nodeVariableStatement);
	ptrType$52 = $ptrType(_nodeWhileStatement);
	ptrType$53 = $ptrType(_nodeWithStatement);
	ptrType$54 = $ptrType(_nodeCatchStatement);
	ptrType$55 = $ptrType(ast.ArrayLiteral);
	ptrType$56 = $ptrType(ast.AssignExpression);
	ptrType$57 = $ptrType(ast.BinaryExpression);
	ptrType$58 = $ptrType(ast.BooleanLiteral);
	ptrType$59 = $ptrType(ast.BracketExpression);
	ptrType$60 = $ptrType(ast.CallExpression);
	ptrType$61 = $ptrType(ast.ConditionalExpression);
	ptrType$62 = $ptrType(ast.DotExpression);
	ptrType$63 = $ptrType(ast.FunctionLiteral);
	ptrType$64 = $ptrType(ast.Identifier);
	ptrType$65 = $ptrType(ast.NewExpression);
	ptrType$66 = $ptrType(ast.NullLiteral);
	ptrType$67 = $ptrType(ast.NumberLiteral);
	ptrType$68 = $ptrType(ast.ObjectLiteral);
	ptrType$69 = $ptrType(ast.RegExpLiteral);
	ptrType$70 = $ptrType(ast.SequenceExpression);
	ptrType$71 = $ptrType(ast.StringLiteral);
	ptrType$72 = $ptrType(ast.ThisExpression);
	ptrType$73 = $ptrType(ast.UnaryExpression);
	ptrType$74 = $ptrType(ast.VariableExpression);
	sliceType$9 = $sliceType(_nodeExpression);
	sliceType$10 = $sliceType(ptrType$10);
	ptrType$75 = $ptrType(ast.ParameterList);
	ptrType$76 = $ptrType(ast.FunctionDeclaration);
	ptrType$77 = $ptrType(ast.VariableDeclaration);
	sliceType$11 = $sliceType(_nodeProperty);
	ptrType$78 = $ptrType(ast.BlockStatement);
	ptrType$79 = $ptrType(ast.BranchStatement);
	ptrType$80 = $ptrType(ast.DebuggerStatement);
	ptrType$81 = $ptrType(ast.DoWhileStatement);
	ptrType$82 = $ptrType(ast.EmptyStatement);
	ptrType$83 = $ptrType(ast.ExpressionStatement);
	ptrType$84 = $ptrType(ast.ForInStatement);
	ptrType$85 = $ptrType(ast.ForStatement);
	ptrType$86 = $ptrType(ast.IfStatement);
	ptrType$87 = $ptrType(ast.LabelledStatement);
	ptrType$88 = $ptrType(ast.ReturnStatement);
	ptrType$89 = $ptrType(ast.SwitchStatement);
	ptrType$90 = $ptrType(ast.ThrowStatement);
	ptrType$91 = $ptrType(ast.TryStatement);
	ptrType$92 = $ptrType(ast.VariableStatement);
	ptrType$93 = $ptrType(ast.WhileStatement);
	ptrType$94 = $ptrType(ast.WithStatement);
	sliceType$12 = $sliceType(_nodeStatement);
	ptrType$95 = $ptrType(_nodeCaseStatement);
	sliceType$13 = $sliceType(ptrType$95);
	ptrType$96 = $ptrType(ast.CatchStatement);
	sliceType$14 = $sliceType(_nodeDeclaration);
	sliceType$15 = $sliceType(_frame);
	ptrType$97 = $ptrType(_exception);
	ptrType$98 = $ptrType(Object);
	ptrType$99 = $ptrType(reflect.rtype);
	funcType = $funcType([FunctionCall], [Value], false);
	sliceType$16 = $sliceType(reflect.Value);
	ptrType$100 = $ptrType(file.FileSet);
	ptrType$101 = $ptrType(_nodeProgram);
	ptrType$102 = $ptrType(Script);
	ptrType$105 = $ptrType(_goArrayObject);
	ptrType$106 = $ptrType(_goMapObject);
	ptrType$107 = $ptrType(_goSliceObject);
	ptrType$108 = $ptrType(_goStructObject);
	ptrType$109 = $ptrType(_clone);
	mapType$1 = $mapType(ptrType$4, ptrType$4);
	mapType$2 = $mapType(ptrType$15, ptrType$15);
	mapType$3 = $mapType(ptrType$17, ptrType$17);
	mapType$4 = $mapType(ptrType$18, ptrType$18);
	ptrType$110 = $ptrType(_compiler);
	funcType$1 = $funcType([$String], [$Bool], false);
	mapType$5 = $mapType($String, _property);
	funcType$2 = $funcType([ptrType$4, $String], [ptrType$14], false);
	funcType$3 = $funcType([ptrType$4, $String], [Value], false);
	funcType$4 = $funcType([ptrType$4, $String], [$Bool], false);
	funcType$5 = $funcType([ptrType$4, $String, Value, $Bool], [], false);
	funcType$6 = $funcType([ptrType$4, $String, _property, $Bool], [$Bool], false);
	funcType$7 = $funcType([ptrType$4, $String, $Bool], [$Bool], false);
	funcType$8 = $funcType([ptrType$4, $Bool, funcType$1], [], false);
	funcType$9 = $funcType([ptrType$4, ptrType$4, ptrType$109], [ptrType$4], false);
	funcType$10 = $funcType([ptrType$4], [json.Marshaler], false);
	funcType$11 = $funcType([ptrType$11], [], false);
	funcType$12 = $funcType([], [], false);
	chanType = $chanType(funcType$12, false, false);
	mapType$6 = $mapType($String, Value);
	funcType$13 = $funcType([], [Value], false);
	mapType$7 = $mapType($String, _dclProperty);
	mapType$8 = $mapType($String, $String);
	ptrType$111 = $ptrType(FunctionCall);
	builtinGlobal_eval = function(call) {
		var $ptr, _r$13, _r$14, _r$15, call, program, returnValue, runtime$1, src, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; call = $f.call; program = $f.program; returnValue = $f.returnValue; runtime$1 = $f.runtime$1; src = $f.src; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		call = $clone(call, FunctionCall);
		src = $clone(call.Argument(0), Value);
		if (!src.IsString()) {
			return src;
		}
		runtime$1 = call.runtime;
		_r$13 = src.string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = runtime$1.cmpl_parseOrThrow(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		program = _r$14;
		if (!call.eval$2) {
			runtime$1.enterGlobalScope();
			$deferred.push([$methodVal(runtime$1, "leaveScope"), []]);
		}
		_r$15 = runtime$1.cmpl_evaluate_nodeProgram(program, true); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		returnValue = $clone(_r$15, Value);
		if (returnValue.isEmpty()) {
			return new Value.ptr(0, $ifaceNil);
		}
		return returnValue;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return new Value.ptr(0, $ifaceNil); } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: builtinGlobal_eval }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.call = call; $f.program = program; $f.returnValue = returnValue; $f.runtime$1 = runtime$1; $f.src = src; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	builtinGlobal_isNaN = function(call) {
		var $ptr, _r$13, call, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		value = _r$13;
		return toValue_bool(math.IsNaN(value));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinGlobal_isNaN }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinGlobal_isFinite = function(call) {
		var $ptr, _r$13, call, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		value = _r$13;
		return toValue_bool(!math.IsNaN(value) && !math.IsInf(value, 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinGlobal_isFinite }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	digitValue = function(chr) {
		var $ptr, chr;
		if (48 <= chr && chr <= 57) {
			return ((chr - 48 >> 0) >> 0);
		} else if (97 <= chr && chr <= 122) {
			return (((chr - 97 >> 0) + 10 >> 0) >> 0);
		} else if (65 <= chr && chr <= 90) {
			return (((chr - 65 >> 0) + 10 >> 0) >> 0);
		}
		return 36;
	};
	builtinGlobal_parseInt = function(call) {
		var $ptr, _i, _r$13, _r$14, _r$15, _ref, _ref$1, _ref$2, _rune, _tuple$1, base, base$1, call, chr, digit, digit$1, err, index, input, negative, radix, strip, value, value$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _rune = $f._rune; _tuple$1 = $f._tuple$1; base = $f.base; base$1 = $f.base$1; call = $f.call; chr = $f.chr; digit = $f.digit; digit$1 = $f.digit$1; err = $f.err; index = $f.index; input = $f.input; negative = $f.negative; radix = $f.radix; strip = $f.strip; value = $f.value; value$1 = $f.value$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = strings.TrimSpace(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		input = _r$14;
		if (input.length === 0) {
			return NaNValue();
		}
		_r$15 = toInt32(call.Argument(1)); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		radix = (_r$15 >> 0);
		negative = false;
		_ref = input.charCodeAt(0);
		if (_ref === 43) {
			input = input.substring(1);
		} else if (_ref === 45) {
			negative = true;
			input = input.substring(1);
		}
		strip = true;
		if (radix === 0) {
			radix = 10;
		} else {
			if (radix < 2 || radix > 36) {
				return NaNValue();
			} else if (!((radix === 16))) {
				strip = false;
			}
		}
		_ref$1 = input.length;
		if (_ref$1 === 0) {
			return NaNValue();
		} else if (_ref$1 === 1) {
		} else {
			if (strip) {
				if ((input.charCodeAt(0) === 48) && ((input.charCodeAt(1) === 120) || (input.charCodeAt(1) === 88))) {
					input = input.substring(2);
					radix = 16;
				}
			}
		}
		base = radix;
		index = 0;
		while (true) {
			if (!(index < input.length)) { break; }
			digit = digitValue((input.charCodeAt(index) >> 0));
			if (digit >= base) {
				break;
			}
			index = index + (1) >> 0;
		}
		input = input.substring(0, index);
		_tuple$1 = strconv.ParseInt(input, radix, 64);
		value = _tuple$1[0];
		err = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
			/* */ if ($interfaceIsEqual($assertType(err, ptrType$6).Err, strconv.ErrRange)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ($interfaceIsEqual($assertType(err, ptrType$6).Err, strconv.ErrRange)) { */ case 6:
				base$1 = base;
				value$1 = 0;
				_ref$2 = input;
				_i = 0;
				/* while (true) { */ case 8:
					/* if (!(_i < _ref$2.length)) { break; } */ if(!(_i < _ref$2.length)) { $s = 9; continue; }
					_rune = $decodeRune(_ref$2, _i);
					chr = _rune[0];
					digit$1 = digitValue(chr);
					/* */ if (digit$1 >= base$1) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (digit$1 >= base$1) { */ case 10:
						/* goto error */ $s = 12; continue;
					/* } */ case 11:
					value$1 = value$1 * base$1 + digit$1;
					_i += _rune[1];
				/* } */ $s = 8; continue; case 9:
				if (negative) {
					value$1 = value$1 * (-1);
				}
				return toValue_float64(value$1);
			/* } */ case 7:
			/* error: */ case 12:
			return NaNValue();
		/* } */ case 5:
		if (negative) {
			value = $mul64(value, (new $Int64(-1, 4294967295)));
		}
		return toValue_int64(value);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinGlobal_parseInt }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._rune = _rune; $f._tuple$1 = _tuple$1; $f.base = base; $f.base$1 = base$1; $f.call = call; $f.chr = chr; $f.digit = digit; $f.digit$1 = digit$1; $f.err = err; $f.index = index; $f.input = input; $f.negative = negative; $f.radix = radix; $f.strip = strip; $f.value = value; $f.value$1 = value$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinGlobal_parseFloat = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _tuple$1, _tuple$2, call, end, err, input, input$1, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; call = $f.call; end = $f.end; err = $f.err; input = $f.input; input$1 = $f.input$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = strings.TrimSpace(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		input = _r$14;
		_r$15 = parseFloat_matchBadSpecial.MatchString(input); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ if (_r$15) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_r$15) { */ case 3:
			return NaNValue();
		/* } */ case 4:
		_tuple$1 = strconv.ParseFloat(input, 64);
		value = _tuple$1[0];
		err = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 6:
			end = input.length;
			/* while (true) { */ case 8:
				/* if (!(end > 0)) { break; } */ if(!(end > 0)) { $s = 9; continue; }
				input$1 = input.substring(0, end);
				_r$16 = parseFloat_matchValid.MatchString(input$1); /* */ $s = 12; case 12: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				/* */ if (!_r$16) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!_r$16) { */ case 10:
					return NaNValue();
				/* } */ case 11:
				_tuple$2 = strconv.ParseFloat(input$1, 64);
				value = _tuple$2[0];
				err = _tuple$2[1];
				if ($interfaceIsEqual(err, $ifaceNil)) {
					/* break; */ $s = 9; continue;
				}
				end = end - (1) >> 0;
			/* } */ $s = 8; continue; case 9:
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return NaNValue();
			}
		/* } */ case 7:
		return toValue_float64(value);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinGlobal_parseFloat }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.call = call; $f.end = end; $f.err = err; $f.input = input; $f.input$1 = input$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_builtinGlobal_encodeURI = function(call, escape) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _ref, call, decode, encode, encode$1, escape, index, input, length, output, size, value, value$1, value$2, value1, vl, vl$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _ref = $f._ref; call = $f.call; decode = $f.decode; encode = $f.encode; encode$1 = $f.encode$1; escape = $f.escape; index = $f.index; input = $f.input; length = $f.length; output = $f.output; size = $f.size; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; value1 = $f.value1; vl = $f.vl; vl$1 = $f.vl$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		value = $clone(call.Argument(0), Value);
		input = sliceType$2.nil;
		_ref = value.value;
		/* */ if ($assertType(_ref, sliceType$2, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, sliceType$2, true)[1]) { */ case 1:
			vl = _ref.$val;
			input = vl;
			$s = 3; continue;
		/* } else { */ case 2:
			vl$1 = _ref;
			_r$13 = value.string(); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = utf16.Encode(new sliceType$3($stringToRunes(_r$13))); /* */ $s = 5; case 5: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			input = _r$14;
		/* } */ case 3:
		if (input.$length === 0) {
			return toValue_string("");
		}
		output = new sliceType$4([]);
		length = input.$length;
		encode = $makeSlice(sliceType$4, 4);
		index = 0;
		/* while (true) { */ case 6:
			/* if (!(index < length)) { break; } */ if(!(index < length)) { $s = 7; continue; }
			value$1 = ((index < 0 || index >= input.$length) ? $throwRuntimeError("index out of range") : input.$array[input.$offset + index]);
			decode = utf16.Decode($subslice(input, index, (index + 1 >> 0)));
			/* */ if (value$1 >= 56320 && value$1 <= 57343) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (value$1 >= 56320 && value$1 <= 57343) { */ case 8:
				_r$15 = call.runtime.panicURIError(new sliceType$1([new $String("URI malformed")])); /* */ $s = 10; case 10: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				$panic(_r$15);
			/* } */ case 9:
			/* */ if (value$1 >= 55296 && value$1 <= 56319) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (value$1 >= 55296 && value$1 <= 56319) { */ case 11:
				index = index + (1) >> 0;
				/* */ if (index >= length) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (index >= length) { */ case 13:
					_r$16 = call.runtime.panicURIError(new sliceType$1([new $String("URI malformed")])); /* */ $s = 15; case 15: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					$panic(_r$16);
				/* } */ case 14:
				value1 = ((index < 0 || index >= input.$length) ? $throwRuntimeError("index out of range") : input.$array[input.$offset + index]);
				/* */ if (value1 < 56320 || value1 > 57343) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (value1 < 56320 || value1 > 57343) { */ case 16:
					_r$17 = call.runtime.panicURIError(new sliceType$1([new $String("URI malformed")])); /* */ $s = 18; case 18: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					$panic(_r$17);
				/* } */ case 17:
				decode = new sliceType$3([((($imul((((value$1 >> 0) - 55296 >> 0)), 1024))) + (((value1 >> 0) - 56320 >> 0)) >> 0) + 65536 >> 0]);
			/* } */ case 12:
			index = index + (1) >> 0;
			size = utf8.EncodeRune(encode, (0 >= decode.$length ? $throwRuntimeError("index out of range") : decode.$array[decode.$offset + 0]));
			encode$1 = $subslice(encode, 0, size);
			output = $appendSlice(output, encode$1);
		/* } */ $s = 6; continue; case 7:
		_r$18 = escape.ReplaceAllFunc(output, (function(target) {
			var $ptr, target;
			if ((0 >= target.$length ? $throwRuntimeError("index out of range") : target.$array[target.$offset + 0]) === 32) {
				return new sliceType$4($stringToBytes("%20"));
			}
			return new sliceType$4($stringToBytes(url.QueryEscape($bytesToString(target))));
		})); /* */ $s = 19; case 19: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		value$2 = _r$18;
		return toValue_string($bytesToString(value$2));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _builtinGlobal_encodeURI }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._ref = _ref; $f.call = call; $f.decode = decode; $f.encode = encode; $f.encode$1 = encode$1; $f.escape = escape; $f.index = index; $f.input = input; $f.length = length; $f.output = output; $f.size = size; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.value1 = value1; $f.vl = vl; $f.vl$1 = vl$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinGlobal_encodeURI = function(call) {
		var $ptr, _r$13, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = _builtinGlobal_encodeURI(call, encodeURI_Regexp); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinGlobal_encodeURI }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinGlobal_encodeURIComponent = function(call) {
		var $ptr, _r$13, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = _builtinGlobal_encodeURI(call, encodeURIComponent_Regexp); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinGlobal_encodeURIComponent }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	_decodeURI = function(input, reserve) {
		var $ptr, _r$13, _tuple$1, err, input, output, reserve, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _tuple$1 = $f._tuple$1; err = $f.err; input = $f.input; output = $f.output; reserve = $f.reserve; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (reserve) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (reserve) { */ case 1:
			_r$13 = decodeURI_guard.ReplaceAllString(input, "%25$1"); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			input = _r$13;
		/* } */ case 2:
		input = strings.Replace(input, "+", "%2B", -1);
		_tuple$1 = url.QueryUnescape(input);
		output = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) || !utf8.ValidString(output)) {
			return ["", true];
		}
		return [output, false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: _decodeURI }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._tuple$1 = _tuple$1; $f.err = err; $f.input = input; $f.output = output; $f.reserve = reserve; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinGlobal_decodeURI = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _tuple$1, call, err, output, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _tuple$1 = $f._tuple$1; call = $f.call; err = $f.err; output = $f.output; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = _decodeURI(_r$13, true); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_tuple$1 = _r$14;
		output = _tuple$1[0];
		err = _tuple$1[1];
		/* */ if (err) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (err) { */ case 3:
			_r$15 = call.runtime.panicURIError(new sliceType$1([new $String("URI malformed")])); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			$panic(_r$15);
		/* } */ case 4:
		return toValue_string(output);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinGlobal_decodeURI }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._tuple$1 = _tuple$1; $f.call = call; $f.err = err; $f.output = output; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinGlobal_decodeURIComponent = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _tuple$1, call, err, output, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _tuple$1 = $f._tuple$1; call = $f.call; err = $f.err; output = $f.output; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = _decodeURI(_r$13, false); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_tuple$1 = _r$14;
		output = _tuple$1[0];
		err = _tuple$1[1];
		/* */ if (err) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (err) { */ case 3:
			_r$15 = call.runtime.panicURIError(new sliceType$1([new $String("URI malformed")])); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			$panic(_r$15);
		/* } */ case 4:
		return toValue_string(output);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinGlobal_decodeURIComponent }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._tuple$1 = _tuple$1; $f.call = call; $f.err = err; $f.output = output; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtin_shouldEscape = function(chr) {
		var $ptr, chr;
		if (65 <= chr && chr <= 90 || 97 <= chr && chr <= 122 || 48 <= chr && chr <= 57) {
			return false;
		}
		return !strings.ContainsRune("*_+-./", (chr >> 0));
	};
	builtin_escape = function(input) {
		var $ptr, _tuple$1, chr, chr16, index, input, length, output, width, x;
		output = $makeSlice(sliceType$4, 0, input.length);
		length = input.length;
		index = 0;
		while (true) {
			if (!(index < length)) { break; }
			if (builtin_shouldEscape(input.charCodeAt(index))) {
				_tuple$1 = utf8.DecodeRuneInString(input.substring(index));
				chr = _tuple$1[0];
				width = _tuple$1[1];
				chr16 = (x = utf16.Encode(new sliceType$3([chr])), (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
				if (256 > chr16) {
					output = $append(output, 37, "0123456789ABCDEF".charCodeAt((chr16 >>> 4 << 16 >>> 16)), "0123456789ABCDEF".charCodeAt(((chr16 & 15) >>> 0)));
				} else {
					output = $append(output, 37, 117, "0123456789ABCDEF".charCodeAt((chr16 >>> 12 << 16 >>> 16)), "0123456789ABCDEF".charCodeAt(((((chr16 >>> 8 << 16 >>> 16)) & 15) >>> 0)), "0123456789ABCDEF".charCodeAt(((((chr16 >>> 4 << 16 >>> 16)) & 15) >>> 0)), "0123456789ABCDEF".charCodeAt(((chr16 & 15) >>> 0)));
				}
				index = index + (width) >> 0;
			} else {
				output = $append(output, input.charCodeAt(index));
				index = index + (1) >> 0;
			}
		}
		return $bytesToString(output);
	};
	builtin_unescape = function(input) {
		var $ptr, _tuple$1, _tuple$2, byte16, byte8, chr, chr$1, err, err$1, index, input, length, output, value, value$1, x, x$1;
		output = $makeSlice(sliceType$3, 0, input.length);
		length = input.length;
		index = 0;
		while (true) {
			if (!(index < length)) { break; }
			if (input.charCodeAt(index) === 37) {
				if (index <= (length - 6 >> 0) && (input.charCodeAt((index + 1 >> 0)) === 117)) {
					_tuple$1 = hex.DecodeString(input.substring((index + 2 >> 0), (index + 6 >> 0)));
					byte16 = _tuple$1[0];
					err = _tuple$1[1];
					if ($interfaceIsEqual(err, $ifaceNil)) {
						value = (((0 >= byte16.$length ? $throwRuntimeError("index out of range") : byte16.$array[byte16.$offset + 0]) << 16 >>> 16) << 8 << 16 >>> 16) + ((1 >= byte16.$length ? $throwRuntimeError("index out of range") : byte16.$array[byte16.$offset + 1]) << 16 >>> 16) << 16 >>> 16;
						chr = (x = utf16.Decode(new sliceType$2([value])), (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
						output = $append(output, chr);
						index = index + (6) >> 0;
						continue;
					}
				}
				if (index <= (length - 3 >> 0)) {
					_tuple$2 = hex.DecodeString(input.substring((index + 1 >> 0), (index + 3 >> 0)));
					byte8 = _tuple$2[0];
					err$1 = _tuple$2[1];
					if ($interfaceIsEqual(err$1, $ifaceNil)) {
						value$1 = ((0 >= byte8.$length ? $throwRuntimeError("index out of range") : byte8.$array[byte8.$offset + 0]) << 16 >>> 16);
						chr$1 = (x$1 = utf16.Decode(new sliceType$2([value$1])), (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0]));
						output = $append(output, chr$1);
						index = index + (3) >> 0;
						continue;
					}
				}
			}
			output = $append(output, (input.charCodeAt(index) >> 0));
			index = index + (1) >> 0;
		}
		return $runesToString(output);
	};
	builtinGlobal_escape = function(call) {
		var $ptr, _r$13, _r$14, _r$15, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = builtin_escape(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toValue_string(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ $s = 4; case 4:
		return _r$15;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinGlobal_escape }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinGlobal_unescape = function(call) {
		var $ptr, _r$13, _r$14, _r$15, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = builtin_unescape(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toValue_string(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ $s = 4; case 4:
		return _r$15;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinGlobal_unescape }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray = function(call) {
		var $ptr, _r$13, _r$14, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = builtinNewArrayNative(call.runtime, call.ArgumentList); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinArray }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNewArray = function(self, argumentList) {
		var $ptr, _r$13, _r$14, argumentList, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; argumentList = $f.argumentList; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = builtinNewArrayNative(self.runtime, argumentList); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNewArray }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.argumentList = argumentList; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNewArrayNative = function(runtime$1, argumentList) {
		var $ptr, _r$13, _r$14, _r$15, argumentList, firstArgument, runtime$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; argumentList = $f.argumentList; firstArgument = $f.firstArgument; runtime$1 = $f.runtime$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (argumentList.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argumentList.$length === 1) { */ case 1:
			firstArgument = $clone((0 >= argumentList.$length ? $throwRuntimeError("index out of range") : argumentList.$array[argumentList.$offset + 0]), Value);
			/* */ if (firstArgument.IsNumber()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (firstArgument.IsNumber()) { */ case 3:
				_r$13 = arrayUint32(runtime$1, firstArgument); /* */ $s = 5; case 5: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$14 = runtime$1.newArray(_r$13); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				/* */ $s = 7; case 7:
				return _r$14;
			/* } */ case 4:
		/* } */ case 2:
		_r$15 = runtime$1.newArrayOf(argumentList); /* */ $s = 8; case 8: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ $s = 9; case 9:
		return _r$15;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNewArrayNative }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.argumentList = argumentList; $f.firstArgument = firstArgument; $f.runtime$1 = runtime$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_toString = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, call, join, join$1, thisObject, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; join = $f.join; join$1 = $f.join$1; thisObject = $f.thisObject; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		_r$14 = thisObject.get("join"); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		join = $clone(_r$14, Value);
		/* */ if (join.isCallable()) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (join.isCallable()) { */ case 3:
			join$1 = join._object();
			_r$15 = join$1.call(call.This, call.ArgumentList, false, nativeFrame); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 6; case 6:
			return _r$15;
		/* } */ case 4:
		_r$16 = builtinObject_toString(call); /* */ $s = 7; case 7: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 8; case 8:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinArray_toString }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.join = join; $f.join$1 = join$1; $f.thisObject = thisObject; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_toLocaleString = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _ref, call, index, length, object, separator, stringList, stringValue, thisObject, toLocaleString, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _ref = $f._ref; call = $f.call; index = $f.index; length = $f.length; object = $f.object; separator = $f.separator; stringList = $f.stringList; stringValue = $f.stringValue; thisObject = $f.thisObject; toLocaleString = $f.toLocaleString; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		separator = ",";
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		_r$14 = thisObject.get("length"); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toUint32(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		length = new $Int64(0, _r$15);
		if ((length.$high === 0 && length.$low === 0)) {
			return toValue_string("");
		}
		stringList = $makeSlice(sliceType, 0, $flatten64(length));
		index = new $Int64(0, 0);
		/* while (true) { */ case 4:
			/* if (!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { break; } */ if(!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { $s = 5; continue; }
			_r$16 = thisObject.get(arrayIndexToString(index)); /* */ $s = 6; case 6: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			value = $clone(_r$16, Value);
			stringValue = "";
			_ref = value.kind;
			/* */ if (_ref === 6 || _ref === 0 || _ref === 1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_ref === 6 || _ref === 0 || _ref === 1) { */ case 7:
				$s = 9; continue;
			/* } else { */ case 8:
				_r$17 = call.runtime.toObject(value); /* */ $s = 10; case 10: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				object = _r$17;
				_r$18 = object.get("toLocaleString"); /* */ $s = 11; case 11: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				toLocaleString = $clone(_r$18, Value);
				/* */ if (!toLocaleString.isCallable()) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (!toLocaleString.isCallable()) { */ case 12:
					_r$19 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 14; case 14: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					$panic(_r$19);
				/* } */ case 13:
				_r$20 = toLocaleString.call(call.runtime, toValue_object(object), new sliceType$1([])); /* */ $s = 15; case 15: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				_r$21 = _r$20.string(); /* */ $s = 16; case 16: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				stringValue = _r$21;
			/* } */ case 9:
			stringList = $append(stringList, stringValue);
			index = (x = new $Int64(0, 1), new $Int64(index.$high + x.$high, index.$low + x.$low));
		/* } */ $s = 4; continue; case 5:
		return toValue_string(strings.Join(stringList, separator));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinArray_toLocaleString }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._ref = _ref; $f.call = call; $f.index = index; $f.length = length; $f.object = object; $f.separator = separator; $f.stringList = stringList; $f.stringValue = stringValue; $f.thisObject = thisObject; $f.toLocaleString = toLocaleString; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_concat = function(call) {
		var $ptr, _i, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _ref, _ref$1, call, index, item, length, name, object, source, thisObject, valueArray, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _ref = $f._ref; _ref$1 = $f._ref$1; call = $f.call; index = $f.index; item = $f.item; length = $f.length; name = $f.name; object = $f.object; source = $f.source; thisObject = $f.thisObject; valueArray = $f.valueArray; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		valueArray = new sliceType$5([]);
		source = $appendSlice(new sliceType$5([$clone(toValue_object(thisObject), Value)]), call.ArgumentList);
		_ref = source;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			item = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Value);
			_ref$1 = item.kind;
			/* */ if (_ref$1 === 5) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_ref$1 === 5) { */ case 4:
				object = item._object();
				/* */ if (isArray(object)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (isArray(object)) { */ case 7:
					_r$14 = object.get("length"); /* */ $s = 9; case 9: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_r$15 = _r$14.number(); /* */ $s = 10; case 10: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					length = _r$15.int64;
					index = new $Int64(0, 0);
					/* while (true) { */ case 11:
						/* if (!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { break; } */ if(!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { $s = 12; continue; }
						name = strconv.FormatInt(index, 10);
						_r$16 = object.hasProperty(name); /* */ $s = 16; case 16: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						/* */ if (_r$16) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (_r$16) { */ case 13:
							_r$17 = object.get(name); /* */ $s = 17; case 17: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
							valueArray = $append(valueArray, _r$17);
							$s = 15; continue;
						/* } else { */ case 14:
							valueArray = $append(valueArray, new Value.ptr(0, $ifaceNil));
						/* } */ case 15:
						index = (x = new $Int64(0, 1), new $Int64(index.$high + x.$high, index.$low + x.$low));
					/* } */ $s = 11; continue; case 12:
					_i++;
					/* continue; */ $s = 2; continue;
				/* } */ case 8:
				valueArray = $append(valueArray, item);
				$s = 6; continue;
			/* } else { */ case 5:
				valueArray = $append(valueArray, item);
			/* } */ case 6:
			_i++;
		/* } */ $s = 2; continue; case 3:
		_r$18 = call.runtime.newArrayOf(valueArray); /* */ $s = 18; case 18: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		_r$19 = toValue_object(_r$18); /* */ $s = 19; case 19: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		/* */ $s = 20; case 20:
		return _r$19;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinArray_concat }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._ref = _ref; $f._ref$1 = _ref$1; $f.call = call; $f.index = index; $f.item = item; $f.length = length; $f.name = name; $f.object = object; $f.source = source; $f.thisObject = thisObject; $f.valueArray = valueArray; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_shift = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, call, first, from, index, length, thisObject, to, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; call = $f.call; first = $f.first; from = $f.from; index = $f.index; length = $f.length; thisObject = $f.thisObject; to = $f.to; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		_r$14 = thisObject.get("length"); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toUint32(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		length = new $Int64(0, _r$15);
		/* */ if ((0 === length.$high && 0 === length.$low)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((0 === length.$high && 0 === length.$low)) { */ case 4:
			$r = thisObject.put("length", toValue_int64(new $Int64(0, 0)), true); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return new Value.ptr(0, $ifaceNil);
		/* } */ case 5:
		_r$16 = thisObject.get("0"); /* */ $s = 7; case 7: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		first = $clone(_r$16, Value);
		index = new $Int64(0, 1);
		/* while (true) { */ case 8:
			/* if (!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { break; } */ if(!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { $s = 9; continue; }
			from = arrayIndexToString(index);
			to = arrayIndexToString(new $Int64(index.$high - 0, index.$low - 1));
			_r$17 = thisObject.hasProperty(from); /* */ $s = 13; case 13: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ if (_r$17) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_r$17) { */ case 10:
				_arg = to;
				_r$18 = thisObject.get(from); /* */ $s = 14; case 14: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				_arg$1 = _r$18;
				$r = thisObject.put(_arg, _arg$1, true); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 12; continue;
			/* } else { */ case 11:
				_r$19 = thisObject.delete$(to, true); /* */ $s = 16; case 16: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				_r$19;
			/* } */ case 12:
			index = (x = new $Int64(0, 1), new $Int64(index.$high + x.$high, index.$low + x.$low));
		/* } */ $s = 8; continue; case 9:
		_r$20 = thisObject.delete$(arrayIndexToString(new $Int64(length.$high - 0, length.$low - 1)), true); /* */ $s = 17; case 17: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		_r$20;
		$r = thisObject.put("length", toValue_int64(new $Int64(length.$high - 0, length.$low - 1)), true); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return first;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinArray_shift }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f.call = call; $f.first = first; $f.from = from; $f.index = index; $f.length = length; $f.thisObject = thisObject; $f.to = to; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_push = function(call) {
		var $ptr, _r$13, _r$14, _r$15, call, index, itemList, length, thisObject, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; call = $f.call; index = $f.index; itemList = $f.itemList; length = $f.length; thisObject = $f.thisObject; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		itemList = call.ArgumentList;
		_r$14 = thisObject.get("length"); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toUint32(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		index = new $Int64(0, _r$15);
		/* while (true) { */ case 4:
			/* if (!(itemList.$length > 0)) { break; } */ if(!(itemList.$length > 0)) { $s = 5; continue; }
			$r = thisObject.put(arrayIndexToString(index), (0 >= itemList.$length ? $throwRuntimeError("index out of range") : itemList.$array[itemList.$offset + 0]), true); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			itemList = $subslice(itemList, 1);
			index = (x = new $Int64(0, 1), new $Int64(index.$high + x.$high, index.$low + x.$low));
		/* } */ $s = 4; continue; case 5:
		length = $clone(toValue_int64(index), Value);
		$r = thisObject.put("length", length, true); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return length;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinArray_push }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.call = call; $f.index = index; $f.itemList = itemList; $f.length = length; $f.thisObject = thisObject; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_pop = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, call, last, length, thisObject, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; call = $f.call; last = $f.last; length = $f.length; thisObject = $f.thisObject; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		_r$14 = thisObject.get("length"); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toUint32(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		length = new $Int64(0, _r$15);
		/* */ if ((0 === length.$high && 0 === length.$low)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((0 === length.$high && 0 === length.$low)) { */ case 4:
			$r = thisObject.put("length", toValue_uint32(0), true); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return new Value.ptr(0, $ifaceNil);
		/* } */ case 5:
		_r$16 = thisObject.get(arrayIndexToString(new $Int64(length.$high - 0, length.$low - 1))); /* */ $s = 7; case 7: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		last = $clone(_r$16, Value);
		_r$17 = thisObject.delete$(arrayIndexToString(new $Int64(length.$high - 0, length.$low - 1)), true); /* */ $s = 8; case 8: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_r$17;
		$r = thisObject.put("length", toValue_int64(new $Int64(length.$high - 0, length.$low - 1)), true); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return last;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinArray_pop }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f.call = call; $f.last = last; $f.length = length; $f.thisObject = thisObject; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_join = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _ref, argument, call, index, length, separator, stringList, stringValue, thisObject, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _ref = $f._ref; argument = $f.argument; call = $f.call; index = $f.index; length = $f.length; separator = $f.separator; stringList = $f.stringList; stringValue = $f.stringValue; thisObject = $f.thisObject; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		separator = ",";
		argument = $clone(call.Argument(0), Value);
		/* */ if (argument.IsDefined()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argument.IsDefined()) { */ case 1:
			_r$13 = argument.string(); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			separator = _r$13;
		/* } */ case 2:
		_r$14 = call.thisObject(); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		thisObject = _r$14;
		_r$15 = thisObject.get("length"); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toUint32(_r$15); /* */ $s = 6; case 6: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		length = new $Int64(0, _r$16);
		if ((length.$high === 0 && length.$low === 0)) {
			return toValue_string("");
		}
		stringList = $makeSlice(sliceType, 0, $flatten64(length));
		index = new $Int64(0, 0);
		/* while (true) { */ case 7:
			/* if (!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { break; } */ if(!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { $s = 8; continue; }
			_r$17 = thisObject.get(arrayIndexToString(index)); /* */ $s = 9; case 9: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			value = $clone(_r$17, Value);
			stringValue = "";
			_ref = value.kind;
			/* */ if (_ref === 6 || _ref === 0 || _ref === 1) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_ref === 6 || _ref === 0 || _ref === 1) { */ case 10:
				$s = 12; continue;
			/* } else { */ case 11:
				_r$18 = value.string(); /* */ $s = 13; case 13: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				stringValue = _r$18;
			/* } */ case 12:
			stringList = $append(stringList, stringValue);
			index = (x = new $Int64(0, 1), new $Int64(index.$high + x.$high, index.$low + x.$low));
		/* } */ $s = 7; continue; case 8:
		return toValue_string(strings.Join(stringList, separator));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinArray_join }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._ref = _ref; $f.argument = argument; $f.call = call; $f.index = index; $f.length = length; $f.separator = separator; $f.stringList = stringList; $f.stringValue = stringValue; $f.thisObject = thisObject; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_splice = function(call) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, call, deleteCount, from, from$1, index, index$1, index$2, index$3, index$4, indexString, itemCount, itemList, length, start, stop, thisObject, to, to$1, valueArray, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; call = $f.call; deleteCount = $f.deleteCount; from = $f.from; from$1 = $f.from$1; index = $f.index; index$1 = $f.index$1; index$2 = $f.index$2; index$3 = $f.index$3; index$4 = $f.index$4; indexString = $f.indexString; itemCount = $f.itemCount; itemList = $f.itemList; length = $f.length; start = $f.start; stop = $f.stop; thisObject = $f.thisObject; to = $f.to; to$1 = $f.to$1; valueArray = $f.valueArray; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		_r$14 = thisObject.get("length"); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toUint32(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		length = new $Int64(0, _r$15);
		_r$16 = valueToRangeIndex(call.Argument(0), length, false); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		start = _r$16;
		_r$17 = valueToRangeIndex(call.Argument(1), (x = length, new $Int64(x.$high - start.$high, x.$low - start.$low)), true); /* */ $s = 5; case 5: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		deleteCount = _r$17;
		valueArray = $makeSlice(sliceType$5, $flatten64(deleteCount));
		index = new $Int64(0, 0);
		/* while (true) { */ case 6:
			/* if (!((index.$high < deleteCount.$high || (index.$high === deleteCount.$high && index.$low < deleteCount.$low)))) { break; } */ if(!((index.$high < deleteCount.$high || (index.$high === deleteCount.$high && index.$low < deleteCount.$low)))) { $s = 7; continue; }
			indexString = arrayIndexToString(new $Int64(start.$high + index.$high, start.$low + index.$low));
			_r$18 = thisObject.hasProperty(indexString); /* */ $s = 10; case 10: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			/* */ if (_r$18) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_r$18) { */ case 8:
				_r$19 = thisObject.get(indexString); /* */ $s = 11; case 11: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				Value.copy((($flatten64(index) < 0 || $flatten64(index) >= valueArray.$length) ? $throwRuntimeError("index out of range") : valueArray.$array[valueArray.$offset + $flatten64(index)]), _r$19);
			/* } */ case 9:
			index = (x$1 = new $Int64(0, 1), new $Int64(index.$high + x$1.$high, index.$low + x$1.$low));
		/* } */ $s = 6; continue; case 7:
		itemList = new sliceType$5([]);
		itemCount = new $Int64(0, call.ArgumentList.$length);
		if ((itemCount.$high > 0 || (itemCount.$high === 0 && itemCount.$low > 2))) {
			itemCount = (x$2 = new $Int64(0, 2), new $Int64(itemCount.$high - x$2.$high, itemCount.$low - x$2.$low));
			itemList = $subslice(call.ArgumentList, 2);
		} else {
			itemCount = new $Int64(0, 0);
		}
		/* */ if ((itemCount.$high < deleteCount.$high || (itemCount.$high === deleteCount.$high && itemCount.$low < deleteCount.$low))) { $s = 12; continue; }
		/* */ if ((itemCount.$high > deleteCount.$high || (itemCount.$high === deleteCount.$high && itemCount.$low > deleteCount.$low))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if ((itemCount.$high < deleteCount.$high || (itemCount.$high === deleteCount.$high && itemCount.$low < deleteCount.$low))) { */ case 12:
			stop = (x$3 = length, new $Int64(x$3.$high - deleteCount.$high, x$3.$low - deleteCount.$low));
			index$1 = start;
			/* while (true) { */ case 15:
				/* if (!((index$1.$high < stop.$high || (index$1.$high === stop.$high && index$1.$low < stop.$low)))) { break; } */ if(!((index$1.$high < stop.$high || (index$1.$high === stop.$high && index$1.$low < stop.$low)))) { $s = 16; continue; }
				from = arrayIndexToString(new $Int64(index$1.$high + deleteCount.$high, index$1.$low + deleteCount.$low));
				to = arrayIndexToString(new $Int64(index$1.$high + itemCount.$high, index$1.$low + itemCount.$low));
				_r$20 = thisObject.hasProperty(from); /* */ $s = 20; case 20: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				/* */ if (_r$20) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (_r$20) { */ case 17:
					_arg = to;
					_r$21 = thisObject.get(from); /* */ $s = 21; case 21: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
					_arg$1 = _r$21;
					$r = thisObject.put(_arg, _arg$1, true); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 19; continue;
				/* } else { */ case 18:
					_r$22 = thisObject.delete$(to, true); /* */ $s = 23; case 23: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					_r$22;
				/* } */ case 19:
				index$1 = (x$4 = new $Int64(0, 1), new $Int64(index$1.$high + x$4.$high, index$1.$low + x$4.$low));
			/* } */ $s = 15; continue; case 16:
			index$2 = length;
			/* while (true) { */ case 24:
				/* if (!((x$5 = new $Int64(stop.$high + itemCount.$high, stop.$low + itemCount.$low), (index$2.$high > x$5.$high || (index$2.$high === x$5.$high && index$2.$low > x$5.$low))))) { break; } */ if(!((x$5 = new $Int64(stop.$high + itemCount.$high, stop.$low + itemCount.$low), (index$2.$high > x$5.$high || (index$2.$high === x$5.$high && index$2.$low > x$5.$low))))) { $s = 25; continue; }
				_r$23 = thisObject.delete$(arrayIndexToString(new $Int64(index$2.$high - 0, index$2.$low - 1)), true); /* */ $s = 26; case 26: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				_r$23;
				index$2 = (x$6 = new $Int64(0, 1), new $Int64(index$2.$high - x$6.$high, index$2.$low - x$6.$low));
			/* } */ $s = 24; continue; case 25:
			$s = 14; continue;
		/* } else if ((itemCount.$high > deleteCount.$high || (itemCount.$high === deleteCount.$high && itemCount.$low > deleteCount.$low))) { */ case 13:
			index$3 = (x$7 = length, new $Int64(x$7.$high - deleteCount.$high, x$7.$low - deleteCount.$low));
			/* while (true) { */ case 27:
				/* if (!((index$3.$high > start.$high || (index$3.$high === start.$high && index$3.$low > start.$low)))) { break; } */ if(!((index$3.$high > start.$high || (index$3.$high === start.$high && index$3.$low > start.$low)))) { $s = 28; continue; }
				from$1 = arrayIndexToString((x$8 = new $Int64(index$3.$high + deleteCount.$high, index$3.$low + deleteCount.$low), new $Int64(x$8.$high - 0, x$8.$low - 1)));
				to$1 = arrayIndexToString((x$9 = new $Int64(index$3.$high + itemCount.$high, index$3.$low + itemCount.$low), new $Int64(x$9.$high - 0, x$9.$low - 1)));
				_r$24 = thisObject.hasProperty(from$1); /* */ $s = 32; case 32: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				/* */ if (_r$24) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if (_r$24) { */ case 29:
					_arg$2 = to$1;
					_r$25 = thisObject.get(from$1); /* */ $s = 33; case 33: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					_arg$3 = _r$25;
					$r = thisObject.put(_arg$2, _arg$3, true); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 31; continue;
				/* } else { */ case 30:
					_r$26 = thisObject.delete$(to$1, true); /* */ $s = 35; case 35: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
					_r$26;
				/* } */ case 31:
				index$3 = (x$10 = new $Int64(0, 1), new $Int64(index$3.$high - x$10.$high, index$3.$low - x$10.$low));
			/* } */ $s = 27; continue; case 28:
		/* } */ case 14:
		index$4 = new $Int64(0, 0);
		/* while (true) { */ case 36:
			/* if (!((index$4.$high < itemCount.$high || (index$4.$high === itemCount.$high && index$4.$low < itemCount.$low)))) { break; } */ if(!((index$4.$high < itemCount.$high || (index$4.$high === itemCount.$high && index$4.$low < itemCount.$low)))) { $s = 37; continue; }
			$r = thisObject.put(arrayIndexToString(new $Int64(index$4.$high + start.$high, index$4.$low + start.$low)), (($flatten64(index$4) < 0 || $flatten64(index$4) >= itemList.$length) ? $throwRuntimeError("index out of range") : itemList.$array[itemList.$offset + $flatten64(index$4)]), true); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			index$4 = (x$11 = new $Int64(0, 1), new $Int64(index$4.$high + x$11.$high, index$4.$low + x$11.$low));
		/* } */ $s = 36; continue; case 37:
		$r = thisObject.put("length", toValue_int64((x$12 = (x$13 = length, new $Int64(x$13.$high + itemCount.$high, x$13.$low + itemCount.$low)), new $Int64(x$12.$high - deleteCount.$high, x$12.$low - deleteCount.$low))), true); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$27 = call.runtime.newArrayOf(valueArray); /* */ $s = 40; case 40: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
		_r$28 = toValue_object(_r$27); /* */ $s = 41; case 41: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
		/* */ $s = 42; case 42:
		return _r$28;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinArray_splice }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f.call = call; $f.deleteCount = deleteCount; $f.from = from; $f.from$1 = from$1; $f.index = index; $f.index$1 = index$1; $f.index$2 = index$2; $f.index$3 = index$3; $f.index$4 = index$4; $f.indexString = indexString; $f.itemCount = itemCount; $f.itemList = itemList; $f.length = length; $f.start = start; $f.stop = stop; $f.thisObject = thisObject; $f.to = to; $f.to$1 = to$1; $f.valueArray = valueArray; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_slice = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _tuple$1, call, end, from, index, length, sliceLength, sliceValueArray, start, thisObject, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _tuple$1 = $f._tuple$1; call = $f.call; end = $f.end; from = $f.from; index = $f.index; length = $f.length; sliceLength = $f.sliceLength; sliceValueArray = $f.sliceValueArray; start = $f.start; thisObject = $f.thisObject; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		_r$14 = thisObject.get("length"); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toUint32(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		length = new $Int64(0, _r$15);
		_r$16 = rangeStartEnd(call.ArgumentList, length, false); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_tuple$1 = _r$16;
		start = _tuple$1[0];
		end = _tuple$1[1];
		/* */ if ((start.$high > end.$high || (start.$high === end.$high && start.$low >= end.$low))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ((start.$high > end.$high || (start.$high === end.$high && start.$low >= end.$low))) { */ case 5:
			_r$17 = call.runtime.newArray(0); /* */ $s = 7; case 7: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_r$18 = toValue_object(_r$17); /* */ $s = 8; case 8: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			/* */ $s = 9; case 9:
			return _r$18;
		/* } */ case 6:
		sliceLength = new $Int64(end.$high - start.$high, end.$low - start.$low);
		sliceValueArray = $makeSlice(sliceType$5, $flatten64(sliceLength));
		index = new $Int64(0, 0);
		/* while (true) { */ case 10:
			/* if (!((index.$high < sliceLength.$high || (index.$high === sliceLength.$high && index.$low < sliceLength.$low)))) { break; } */ if(!((index.$high < sliceLength.$high || (index.$high === sliceLength.$high && index.$low < sliceLength.$low)))) { $s = 11; continue; }
			from = arrayIndexToString(new $Int64(index.$high + start.$high, index.$low + start.$low));
			_r$19 = thisObject.hasProperty(from); /* */ $s = 14; case 14: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			/* */ if (_r$19) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_r$19) { */ case 12:
				_r$20 = thisObject.get(from); /* */ $s = 15; case 15: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				Value.copy((($flatten64(index) < 0 || $flatten64(index) >= sliceValueArray.$length) ? $throwRuntimeError("index out of range") : sliceValueArray.$array[sliceValueArray.$offset + $flatten64(index)]), _r$20);
			/* } */ case 13:
			index = (x = new $Int64(0, 1), new $Int64(index.$high + x.$high, index.$low + x.$low));
		/* } */ $s = 10; continue; case 11:
		_r$21 = call.runtime.newArrayOf(sliceValueArray); /* */ $s = 16; case 16: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		_r$22 = toValue_object(_r$21); /* */ $s = 17; case 17: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		/* */ $s = 18; case 18:
		return _r$22;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinArray_slice }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._tuple$1 = _tuple$1; $f.call = call; $f.end = end; $f.from = from; $f.index = index; $f.length = length; $f.sliceLength = sliceLength; $f.sliceValueArray = sliceValueArray; $f.start = start; $f.thisObject = thisObject; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_unshift = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, call, from, index, index$1, itemCount, itemList, length, newLength, thisObject, to, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; call = $f.call; from = $f.from; index = $f.index; index$1 = $f.index$1; itemCount = $f.itemCount; itemList = $f.itemList; length = $f.length; newLength = $f.newLength; thisObject = $f.thisObject; to = $f.to; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		_r$14 = thisObject.get("length"); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toUint32(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		length = new $Int64(0, _r$15);
		itemList = call.ArgumentList;
		itemCount = new $Int64(0, itemList.$length);
		index = length;
		/* while (true) { */ case 4:
			/* if (!((index.$high > 0 || (index.$high === 0 && index.$low > 0)))) { break; } */ if(!((index.$high > 0 || (index.$high === 0 && index.$low > 0)))) { $s = 5; continue; }
			from = arrayIndexToString(new $Int64(index.$high - 0, index.$low - 1));
			to = arrayIndexToString((x = new $Int64(index.$high + itemCount.$high, index.$low + itemCount.$low), new $Int64(x.$high - 0, x.$low - 1)));
			_r$16 = thisObject.hasProperty(from); /* */ $s = 9; case 9: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ if (_r$16) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$16) { */ case 6:
				_arg = to;
				_r$17 = thisObject.get(from); /* */ $s = 10; case 10: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_arg$1 = _r$17;
				$r = thisObject.put(_arg, _arg$1, true); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 8; continue;
			/* } else { */ case 7:
				_r$18 = thisObject.delete$(to, true); /* */ $s = 12; case 12: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				_r$18;
			/* } */ case 8:
			index = (x$1 = new $Int64(0, 1), new $Int64(index.$high - x$1.$high, index.$low - x$1.$low));
		/* } */ $s = 4; continue; case 5:
		index$1 = new $Int64(0, 0);
		/* while (true) { */ case 13:
			/* if (!((index$1.$high < itemCount.$high || (index$1.$high === itemCount.$high && index$1.$low < itemCount.$low)))) { break; } */ if(!((index$1.$high < itemCount.$high || (index$1.$high === itemCount.$high && index$1.$low < itemCount.$low)))) { $s = 14; continue; }
			$r = thisObject.put(arrayIndexToString(index$1), (($flatten64(index$1) < 0 || $flatten64(index$1) >= itemList.$length) ? $throwRuntimeError("index out of range") : itemList.$array[itemList.$offset + $flatten64(index$1)]), true); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			index$1 = (x$2 = new $Int64(0, 1), new $Int64(index$1.$high + x$2.$high, index$1.$low + x$2.$low));
		/* } */ $s = 13; continue; case 14:
		newLength = $clone(toValue_int64(new $Int64(length.$high + itemCount.$high, length.$low + itemCount.$low)), Value);
		$r = thisObject.put("length", newLength, true); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return newLength;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinArray_unshift }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f.call = call; $f.from = from; $f.index = index; $f.index$1 = index$1; $f.itemCount = itemCount; $f.itemList = itemList; $f.length = length; $f.newLength = newLength; $f.thisObject = thisObject; $f.to = to; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_reverse = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, call, length, lower, lowerValue, middle, thisObject, upper, upperValue, value, value$1, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; call = $f.call; length = $f.length; lower = $f.lower; lowerValue = $f.lowerValue; middle = $f.middle; thisObject = $f.thisObject; upper = $f.upper; upperValue = $f.upperValue; value = $f.value; value$1 = $f.value$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		_r$14 = thisObject.get("length"); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toUint32(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		length = new $Int64(0, _r$15);
		lower = new structType.ptr("", new $Int64(0, 0), false);
		upper = $clone(lower, structType);
		lower.index = new $Int64(0, 0);
		middle = $div64(length, new $Int64(0, 2), false);
		/* while (true) { */ case 4:
			/* if (!(!((x = lower.index, (x.$high === middle.$high && x.$low === middle.$low))))) { break; } */ if(!(!((x = lower.index, (x.$high === middle.$high && x.$low === middle.$low))))) { $s = 5; continue; }
			lower.name = arrayIndexToString(lower.index);
			upper.index = (x$1 = (x$2 = lower.index, new $Int64(length.$high - x$2.$high, length.$low - x$2.$low)), new $Int64(x$1.$high - 0, x$1.$low - 1));
			upper.name = arrayIndexToString(upper.index);
			_r$16 = thisObject.hasProperty(lower.name); /* */ $s = 6; case 6: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			lower.exists = _r$16;
			_r$17 = thisObject.hasProperty(upper.name); /* */ $s = 7; case 7: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			upper.exists = _r$17;
			/* */ if (lower.exists && upper.exists) { $s = 8; continue; }
			/* */ if (!lower.exists && upper.exists) { $s = 9; continue; }
			/* */ if (lower.exists && !upper.exists) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (lower.exists && upper.exists) { */ case 8:
				_r$18 = thisObject.get(lower.name); /* */ $s = 13; case 13: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				lowerValue = $clone(_r$18, Value);
				_r$19 = thisObject.get(upper.name); /* */ $s = 14; case 14: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				upperValue = $clone(_r$19, Value);
				$r = thisObject.put(lower.name, upperValue, true); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = thisObject.put(upper.name, lowerValue, true); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 12; continue;
			/* } else if (!lower.exists && upper.exists) { */ case 9:
				_r$20 = thisObject.get(upper.name); /* */ $s = 17; case 17: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				value = $clone(_r$20, Value);
				_r$21 = thisObject.delete$(upper.name, true); /* */ $s = 18; case 18: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				_r$21;
				$r = thisObject.put(lower.name, value, true); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 12; continue;
			/* } else if (lower.exists && !upper.exists) { */ case 10:
				_r$22 = thisObject.get(lower.name); /* */ $s = 20; case 20: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				value$1 = $clone(_r$22, Value);
				_r$23 = thisObject.delete$(lower.name, true); /* */ $s = 21; case 21: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				_r$23;
				$r = thisObject.put(upper.name, value$1, true); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 12; continue;
			/* } else { */ case 11:
			/* } */ case 12:
			lower.index = (x$3 = lower.index, x$4 = new $Int64(0, 1), new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low));
		/* } */ $s = 4; continue; case 5:
		return call.This;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinArray_reverse }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.call = call; $f.length = length; $f.lower = lower; $f.lowerValue = lowerValue; $f.middle = middle; $f.thisObject = thisObject; $f.upper = upper; $f.upperValue = upperValue; $f.value = value; $f.value$1 = value$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	sortCompare = function(thisObject, index0, index1, compare) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, compare, index0, index1, j, k, thisObject, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; compare = $f.compare; index0 = $f.index0; index1 = $f.index1; j = $f.j; k = $f.k; thisObject = $f.thisObject; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		j = new structType$1.ptr("", false, false, "");
		k = $clone(j, structType$1);
		j.name = arrayIndexToString(new $Int64(0, index0));
		_r$13 = thisObject.hasProperty(j.name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		j.exists = _r$13;
		k.name = arrayIndexToString(new $Int64(0, index1));
		_r$14 = thisObject.hasProperty(k.name); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		k.exists = _r$14;
		if (!j.exists && !k.exists) {
			return 0;
		} else if (!j.exists) {
			return 1;
		} else if (!k.exists) {
			return -1;
		}
		_r$15 = thisObject.get(j.name); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		x = $clone(_r$15, Value);
		_r$16 = thisObject.get(k.name); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		y = $clone(_r$16, Value);
		j.defined = x.IsDefined();
		k.defined = y.IsDefined();
		if (!j.defined && !k.defined) {
			return 0;
		} else if (!j.defined) {
			return 1;
		} else if (!k.defined) {
			return -1;
		}
		/* */ if (compare === ptrType$4.nil) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (compare === ptrType$4.nil) { */ case 5:
			_r$17 = x.string(); /* */ $s = 7; case 7: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			j.value = _r$17;
			_r$18 = y.string(); /* */ $s = 8; case 8: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			k.value = _r$18;
			if (j.value === k.value) {
				return 0;
			} else if (j.value < k.value) {
				return -1;
			}
			return 1;
		/* } */ case 6:
		_r$19 = compare.call(new Value.ptr(0, $ifaceNil), new sliceType$5([$clone(x, Value), $clone(y, Value)]), false, nativeFrame); /* */ $s = 9; case 9: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		_r$20 = toInt32(_r$19); /* */ $s = 10; case 10: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		/* */ $s = 11; case 11:
		return (_r$20 >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: sortCompare }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f.compare = compare; $f.index0 = index0; $f.index1 = index1; $f.j = j; $f.k = k; $f.thisObject = thisObject; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	arraySortSwap = function(thisObject, index0, index1) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, index0, index1, j, jValue, k, kValue, thisObject, value, value$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; index0 = $f.index0; index1 = $f.index1; j = $f.j; jValue = $f.jValue; k = $f.k; kValue = $f.kValue; thisObject = $f.thisObject; value = $f.value; value$1 = $f.value$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		j = new structType$2.ptr("", false);
		k = $clone(j, structType$2);
		j.name = arrayIndexToString(new $Int64(0, index0));
		_r$13 = thisObject.hasProperty(j.name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		j.exists = _r$13;
		k.name = arrayIndexToString(new $Int64(0, index1));
		_r$14 = thisObject.hasProperty(k.name); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		k.exists = _r$14;
		/* */ if (j.exists && k.exists) { $s = 3; continue; }
		/* */ if (!j.exists && k.exists) { $s = 4; continue; }
		/* */ if (j.exists && !k.exists) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (j.exists && k.exists) { */ case 3:
			_r$15 = thisObject.get(j.name); /* */ $s = 8; case 8: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			jValue = $clone(_r$15, Value);
			_r$16 = thisObject.get(k.name); /* */ $s = 9; case 9: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			kValue = $clone(_r$16, Value);
			$r = thisObject.put(j.name, kValue, true); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = thisObject.put(k.name, jValue, true); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 7; continue;
		/* } else if (!j.exists && k.exists) { */ case 4:
			_r$17 = thisObject.get(k.name); /* */ $s = 12; case 12: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			value = $clone(_r$17, Value);
			_r$18 = thisObject.delete$(k.name, true); /* */ $s = 13; case 13: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_r$18;
			$r = thisObject.put(j.name, value, true); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 7; continue;
		/* } else if (j.exists && !k.exists) { */ case 5:
			_r$19 = thisObject.get(j.name); /* */ $s = 15; case 15: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			value$1 = $clone(_r$19, Value);
			_r$20 = thisObject.delete$(j.name, true); /* */ $s = 16; case 16: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_r$20;
			$r = thisObject.put(k.name, value$1, true); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 7; continue;
		/* } else { */ case 6:
		/* } */ case 7:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: arraySortSwap }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f.index0 = index0; $f.index1 = index1; $f.j = j; $f.jValue = jValue; $f.k = k; $f.kValue = kValue; $f.thisObject = thisObject; $f.value = value; $f.value$1 = value$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	arraySortQuickPartition = function(thisObject, left, right, pivot, compare) {
		var $ptr, _r$13, compare, cursor, index, left, pivot, right, thisObject, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; compare = $f.compare; cursor = $f.cursor; index = $f.index; left = $f.left; pivot = $f.pivot; right = $f.right; thisObject = $f.thisObject; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = arraySortSwap(thisObject, pivot, right); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		cursor = left;
		index = left;
		/* while (true) { */ case 2:
			/* if (!(index < right)) { break; } */ if(!(index < right)) { $s = 3; continue; }
			_r$13 = sortCompare(thisObject, index, right, compare); /* */ $s = 6; case 6: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ if (_r$13 < 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$13 < 0) { */ case 4:
				$r = arraySortSwap(thisObject, index, cursor); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				cursor = cursor + (1) >>> 0;
			/* } */ case 5:
			index = index + (1) >>> 0;
		/* } */ $s = 2; continue; case 3:
		$r = arraySortSwap(thisObject, cursor, right); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return cursor;
		/* */ } return; } if ($f === undefined) { $f = { $blk: arraySortQuickPartition }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.compare = compare; $f.cursor = cursor; $f.index = index; $f.left = left; $f.pivot = pivot; $f.right = right; $f.thisObject = thisObject; $f.$s = $s; $f.$r = $r; return $f;
	};
	arraySortQuickSort = function(thisObject, left, right, compare) {
		var $ptr, _q, _r$13, compare, left, pivot, right, thisObject, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$13 = $f._r$13; compare = $f.compare; left = $f.left; pivot = $f.pivot; right = $f.right; thisObject = $f.thisObject; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (left < right) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (left < right) { */ case 1:
			pivot = left + (_q = ((right - left >>> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 0;
			_r$13 = arraySortQuickPartition(thisObject, left, right, pivot, compare); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			pivot = _r$13;
			/* */ if (pivot > 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (pivot > 0) { */ case 4:
				$r = arraySortQuickSort(thisObject, left, pivot - 1 >>> 0, compare); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			$r = arraySortQuickSort(thisObject, pivot + 1 >>> 0, right, compare); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: arraySortQuickSort }; } $f.$ptr = $ptr; $f._q = _q; $f._r$13 = _r$13; $f.compare = compare; $f.left = left; $f.pivot = pivot; $f.right = right; $f.thisObject = thisObject; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_sort = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, call, compare, compareValue, length, thisObject, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; compare = $f.compare; compareValue = $f.compareValue; length = $f.length; thisObject = $f.thisObject; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		_r$14 = thisObject.get("length"); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toUint32(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		length = (_r$15 >>> 0);
		compareValue = $clone(call.Argument(0), Value);
		compare = compareValue._object();
		/* */ if (compareValue.IsUndefined()) { $s = 4; continue; }
		/* */ if (!compareValue.isCallable()) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (compareValue.IsUndefined()) { */ case 4:
			$s = 6; continue;
		/* } else if (!compareValue.isCallable()) { */ case 5:
			_r$16 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 7; case 7: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			$panic(_r$16);
		/* } */ case 6:
		/* */ if (length > 1) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (length > 1) { */ case 8:
			$r = arraySortQuickSort(thisObject, 0, length - 1 >>> 0, compare); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		return call.This;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinArray_sort }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.compare = compare; $f.compareValue = compareValue; $f.length = length; $f.thisObject = thisObject; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_isArray = function(call) {
		var $ptr, call;
		call = $clone(call, FunctionCall);
		return toValue_bool(isArray(call.Argument(0)._object()));
	};
	builtinArray_indexOf = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _tmp, _tmp$1, call, index, length, matchValue, name, thisObject, value, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; call = $f.call; index = $f.index; length = $f.length; matchValue = $f.matchValue; name = $f.name; thisObject = $f.thisObject; value = $f.value; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tmp = _r$13;
		_tmp$1 = $clone(call.Argument(0), Value);
		thisObject = _tmp;
		matchValue = $clone(_tmp$1, Value);
		_r$14 = thisObject.get("length"); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toUint32(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		length = new $Int64(0, _r$15);
		/* */ if ((length.$high > 0 || (length.$high === 0 && length.$low > 0))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((length.$high > 0 || (length.$high === 0 && length.$low > 0))) { */ case 4:
			index = new $Int64(0, 0);
			/* */ if (call.ArgumentList.$length > 1) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (call.ArgumentList.$length > 1) { */ case 6:
				_r$16 = call.Argument(1).number(); /* */ $s = 8; case 8: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				index = _r$16.int64;
			/* } */ case 7:
			if ((index.$high < 0 || (index.$high === 0 && index.$low < 0))) {
				index = (x = length, new $Int64(index.$high + x.$high, index.$low + x.$low));
				if ((index.$high < 0 || (index.$high === 0 && index.$low < 0))) {
					index = new $Int64(0, 0);
				}
			} else if ((index.$high > length.$high || (index.$high === length.$high && index.$low >= length.$low))) {
				index = new $Int64(-1, 4294967295);
			}
			/* while (true) { */ case 9:
				/* if (!((index.$high > 0 || (index.$high === 0 && index.$low >= 0)) && (index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { break; } */ if(!((index.$high > 0 || (index.$high === 0 && index.$low >= 0)) && (index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { $s = 10; continue; }
				name = arrayIndexToString(index);
				_r$17 = thisObject.hasProperty(name); /* */ $s = 13; case 13: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				/* */ if (!_r$17) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!_r$17) { */ case 11:
					index = (x$1 = new $Int64(0, 1), new $Int64(index.$high + x$1.$high, index.$low + x$1.$low));
					/* continue; */ $s = 9; continue;
				/* } */ case 12:
				_r$18 = thisObject.get(name); /* */ $s = 14; case 14: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				value = $clone(_r$18, Value);
				_r$19 = strictEqualityComparison(matchValue, value); /* */ $s = 17; case 17: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				/* */ if (_r$19) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (_r$19) { */ case 15:
					return toValue_uint32((index.$low >>> 0));
				/* } */ case 16:
				index = (x$2 = new $Int64(0, 1), new $Int64(index.$high + x$2.$high, index.$low + x$2.$low));
			/* } */ $s = 9; continue; case 10:
		/* } */ case 5:
		return toValue_int(-1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinArray_indexOf }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.call = call; $f.index = index; $f.length = length; $f.matchValue = matchValue; $f.name = name; $f.thisObject = thisObject; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_lastIndexOf = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _tmp, _tmp$1, call, index, length, matchValue, name, thisObject, value, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; call = $f.call; index = $f.index; length = $f.length; matchValue = $f.matchValue; name = $f.name; thisObject = $f.thisObject; value = $f.value; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tmp = _r$13;
		_tmp$1 = $clone(call.Argument(0), Value);
		thisObject = _tmp;
		matchValue = $clone(_tmp$1, Value);
		_r$14 = thisObject.get("length"); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toUint32(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		length = new $Int64(0, _r$15);
		index = new $Int64(length.$high - 0, length.$low - 1);
		/* */ if (call.ArgumentList.$length > 1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (call.ArgumentList.$length > 1) { */ case 4:
			_r$16 = call.Argument(1).number(); /* */ $s = 6; case 6: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			index = _r$16.int64;
		/* } */ case 5:
		if ((0 > index.$high || (0 === index.$high && 0 > index.$low))) {
			index = (x = length, new $Int64(index.$high + x.$high, index.$low + x.$low));
		}
		if ((index.$high > length.$high || (index.$high === length.$high && index.$low > length.$low))) {
			index = new $Int64(length.$high - 0, length.$low - 1);
		} else if ((0 > index.$high || (0 === index.$high && 0 > index.$low))) {
			return toValue_int(-1);
		}
		/* while (true) { */ case 7:
			/* if (!((index.$high > 0 || (index.$high === 0 && index.$low >= 0)))) { break; } */ if(!((index.$high > 0 || (index.$high === 0 && index.$low >= 0)))) { $s = 8; continue; }
			name = arrayIndexToString(index);
			_r$17 = thisObject.hasProperty(name); /* */ $s = 11; case 11: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ if (!_r$17) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!_r$17) { */ case 9:
				index = (x$1 = new $Int64(0, 1), new $Int64(index.$high - x$1.$high, index.$low - x$1.$low));
				/* continue; */ $s = 7; continue;
			/* } */ case 10:
			_r$18 = thisObject.get(name); /* */ $s = 12; case 12: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			value = $clone(_r$18, Value);
			_r$19 = strictEqualityComparison(matchValue, value); /* */ $s = 15; case 15: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			/* */ if (_r$19) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (_r$19) { */ case 13:
				return toValue_uint32((index.$low >>> 0));
			/* } */ case 14:
			index = (x$2 = new $Int64(0, 1), new $Int64(index.$high - x$2.$high, index.$low - x$2.$low));
		/* } */ $s = 7; continue; case 8:
		return toValue_int(-1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinArray_lastIndexOf }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.call = call; $f.index = index; $f.length = length; $f.matchValue = matchValue; $f.name = name; $f.thisObject = thisObject; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_every = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, call, callThis, index, iterator, key, length, this$1, thisObject, value, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; call = $f.call; callThis = $f.callThis; index = $f.index; iterator = $f.iterator; key = $f.key; length = $f.length; this$1 = $f.this$1; thisObject = $f.thisObject; value = $f.value; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		this$1 = $clone(toValue_object(thisObject), Value);
		iterator = $clone(call.Argument(0), Value);
		/* */ if (iterator.isCallable()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (iterator.isCallable()) { */ case 2:
			_r$14 = thisObject.get("length"); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = toUint32(_r$14); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			length = new $Int64(0, _r$15);
			callThis = $clone(call.Argument(1), Value);
			index = new $Int64(0, 0);
			/* while (true) { */ case 6:
				/* if (!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { break; } */ if(!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { $s = 7; continue; }
				key = arrayIndexToString(index);
				_r$16 = thisObject.hasProperty(key); /* */ $s = 10; case 10: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				/* */ if (_r$16) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_r$16) { */ case 8:
					_r$17 = thisObject.get(key); /* */ $s = 11; case 11: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					value = $clone(_r$17, Value);
					_r$18 = iterator.call(call.runtime, callThis, new sliceType$1([new value.constructor.elem(value), (x = toValue_int64(index), new x.constructor.elem(x)), new this$1.constructor.elem(this$1)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					_r$19 = _r$18.bool(); /* */ $s = 15; case 15: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					/* */ if (_r$19) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (_r$19) { */ case 12:
						index = (x$1 = new $Int64(0, 1), new $Int64(index.$high + x$1.$high, index.$low + x$1.$low));
						/* continue; */ $s = 6; continue;
					/* } */ case 13:
					return falseValue;
				/* } */ case 9:
				index = (x$2 = new $Int64(0, 1), new $Int64(index.$high + x$2.$high, index.$low + x$2.$low));
			/* } */ $s = 6; continue; case 7:
			return trueValue;
		/* } */ case 3:
		_r$20 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 16; case 16: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		$panic(_r$20);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: builtinArray_every }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f.call = call; $f.callThis = callThis; $f.index = index; $f.iterator = iterator; $f.key = key; $f.length = length; $f.this$1 = this$1; $f.thisObject = thisObject; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_some = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, call, callThis, index, iterator, key, length, this$1, thisObject, value, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; call = $f.call; callThis = $f.callThis; index = $f.index; iterator = $f.iterator; key = $f.key; length = $f.length; this$1 = $f.this$1; thisObject = $f.thisObject; value = $f.value; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		this$1 = $clone(toValue_object(thisObject), Value);
		iterator = $clone(call.Argument(0), Value);
		/* */ if (iterator.isCallable()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (iterator.isCallable()) { */ case 2:
			_r$14 = thisObject.get("length"); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = toUint32(_r$14); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			length = new $Int64(0, _r$15);
			callThis = $clone(call.Argument(1), Value);
			index = new $Int64(0, 0);
			/* while (true) { */ case 6:
				/* if (!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { break; } */ if(!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { $s = 7; continue; }
				key = arrayIndexToString(index);
				_r$16 = thisObject.hasProperty(key); /* */ $s = 10; case 10: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				/* */ if (_r$16) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_r$16) { */ case 8:
					_r$17 = thisObject.get(key); /* */ $s = 11; case 11: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					value = $clone(_r$17, Value);
					_r$18 = iterator.call(call.runtime, callThis, new sliceType$1([new value.constructor.elem(value), (x = toValue_int64(index), new x.constructor.elem(x)), new this$1.constructor.elem(this$1)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					_r$19 = _r$18.bool(); /* */ $s = 15; case 15: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					/* */ if (_r$19) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (_r$19) { */ case 12:
						return trueValue;
					/* } */ case 13:
				/* } */ case 9:
				index = (x$1 = new $Int64(0, 1), new $Int64(index.$high + x$1.$high, index.$low + x$1.$low));
			/* } */ $s = 6; continue; case 7:
			return falseValue;
		/* } */ case 3:
		_r$20 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 16; case 16: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		$panic(_r$20);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: builtinArray_some }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f.call = call; $f.callThis = callThis; $f.index = index; $f.iterator = iterator; $f.key = key; $f.length = length; $f.this$1 = this$1; $f.thisObject = thisObject; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_forEach = function(call) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, call, callThis, index, iterator, key, length, this$1, thisObject, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; call = $f.call; callThis = $f.callThis; index = $f.index; iterator = $f.iterator; key = $f.key; length = $f.length; this$1 = $f.this$1; thisObject = $f.thisObject; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		this$1 = $clone(toValue_object(thisObject), Value);
		iterator = $clone(call.Argument(0), Value);
		/* */ if (iterator.isCallable()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (iterator.isCallable()) { */ case 2:
			_r$14 = thisObject.get("length"); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = toUint32(_r$14); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			length = new $Int64(0, _r$15);
			callThis = $clone(call.Argument(1), Value);
			index = new $Int64(0, 0);
			/* while (true) { */ case 6:
				/* if (!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { break; } */ if(!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { $s = 7; continue; }
				key = arrayIndexToString(index);
				_r$16 = thisObject.hasProperty(key); /* */ $s = 10; case 10: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				/* */ if (_r$16) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_r$16) { */ case 8:
					_arg = call.runtime;
					_arg$1 = callThis;
					_r$17 = thisObject.get(key); /* */ $s = 11; case 11: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					_arg$2 = (x = _r$17, new x.constructor.elem(x));
					_arg$3 = (x$1 = toValue_int64(index), new x$1.constructor.elem(x$1));
					_arg$4 = new this$1.constructor.elem(this$1);
					_r$18 = iterator.call(_arg, _arg$1, new sliceType$1([_arg$2, _arg$3, _arg$4])); /* */ $s = 12; case 12: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					_r$18;
				/* } */ case 9:
				index = (x$2 = new $Int64(0, 1), new $Int64(index.$high + x$2.$high, index.$low + x$2.$low));
			/* } */ $s = 6; continue; case 7:
			return new Value.ptr(0, $ifaceNil);
		/* } */ case 3:
		_r$19 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 13; case 13: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		$panic(_r$19);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: builtinArray_forEach }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f.call = call; $f.callThis = callThis; $f.index = index; $f.iterator = iterator; $f.key = key; $f.length = length; $f.this$1 = this$1; $f.thisObject = thisObject; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_map = function(call) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, call, callThis, index, iterator, key, length, this$1, thisObject, values, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; call = $f.call; callThis = $f.callThis; index = $f.index; iterator = $f.iterator; key = $f.key; length = $f.length; this$1 = $f.this$1; thisObject = $f.thisObject; values = $f.values; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		this$1 = $clone(toValue_object(thisObject), Value);
		iterator = $clone(call.Argument(0), Value);
		/* */ if (iterator.isCallable()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (iterator.isCallable()) { */ case 2:
			_r$14 = thisObject.get("length"); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = toUint32(_r$14); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			length = new $Int64(0, _r$15);
			callThis = $clone(call.Argument(1), Value);
			values = $makeSlice(sliceType$5, $flatten64(length));
			index = new $Int64(0, 0);
			/* while (true) { */ case 6:
				/* if (!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { break; } */ if(!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { $s = 7; continue; }
				key = arrayIndexToString(index);
				_r$16 = thisObject.hasProperty(key); /* */ $s = 11; case 11: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				/* */ if (_r$16) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_r$16) { */ case 8:
					_arg = call.runtime;
					_arg$1 = callThis;
					_r$17 = thisObject.get(key); /* */ $s = 12; case 12: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					_arg$2 = (x = _r$17, new x.constructor.elem(x));
					_arg$3 = index;
					_arg$4 = new this$1.constructor.elem(this$1);
					_r$18 = iterator.call(_arg, _arg$1, new sliceType$1([_arg$2, _arg$3, _arg$4])); /* */ $s = 13; case 13: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					Value.copy((($flatten64(index) < 0 || $flatten64(index) >= values.$length) ? $throwRuntimeError("index out of range") : values.$array[values.$offset + $flatten64(index)]), _r$18);
					$s = 10; continue;
				/* } else { */ case 9:
					Value.copy((($flatten64(index) < 0 || $flatten64(index) >= values.$length) ? $throwRuntimeError("index out of range") : values.$array[values.$offset + $flatten64(index)]), new Value.ptr(0, $ifaceNil));
				/* } */ case 10:
				index = (x$1 = new $Int64(0, 1), new $Int64(index.$high + x$1.$high, index.$low + x$1.$low));
			/* } */ $s = 6; continue; case 7:
			_r$19 = call.runtime.newArrayOf(values); /* */ $s = 14; case 14: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			_r$20 = toValue_object(_r$19); /* */ $s = 15; case 15: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			/* */ $s = 16; case 16:
			return _r$20;
		/* } */ case 3:
		_r$21 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 17; case 17: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		$panic(_r$21);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: builtinArray_map }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f.call = call; $f.callThis = callThis; $f.index = index; $f.iterator = iterator; $f.key = key; $f.length = length; $f.this$1 = this$1; $f.thisObject = thisObject; $f.values = values; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_filter = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, call, callThis, index, iterator, key, length, this$1, thisObject, value, values, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; call = $f.call; callThis = $f.callThis; index = $f.index; iterator = $f.iterator; key = $f.key; length = $f.length; this$1 = $f.this$1; thisObject = $f.thisObject; value = $f.value; values = $f.values; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		this$1 = $clone(toValue_object(thisObject), Value);
		iterator = $clone(call.Argument(0), Value);
		/* */ if (iterator.isCallable()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (iterator.isCallable()) { */ case 2:
			_r$14 = thisObject.get("length"); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = toUint32(_r$14); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			length = new $Int64(0, _r$15);
			callThis = $clone(call.Argument(1), Value);
			values = $makeSlice(sliceType$5, 0);
			index = new $Int64(0, 0);
			/* while (true) { */ case 6:
				/* if (!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { break; } */ if(!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { $s = 7; continue; }
				key = arrayIndexToString(index);
				_r$16 = thisObject.hasProperty(key); /* */ $s = 10; case 10: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				/* */ if (_r$16) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_r$16) { */ case 8:
					_r$17 = thisObject.get(key); /* */ $s = 11; case 11: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					value = $clone(_r$17, Value);
					_r$18 = iterator.call(call.runtime, callThis, new sliceType$1([new value.constructor.elem(value), index, new this$1.constructor.elem(this$1)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					_r$19 = _r$18.bool(); /* */ $s = 15; case 15: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					/* */ if (_r$19) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (_r$19) { */ case 12:
						values = $append(values, value);
					/* } */ case 13:
				/* } */ case 9:
				index = (x = new $Int64(0, 1), new $Int64(index.$high + x.$high, index.$low + x.$low));
			/* } */ $s = 6; continue; case 7:
			_r$20 = call.runtime.newArrayOf(values); /* */ $s = 16; case 16: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_r$21 = toValue_object(_r$20); /* */ $s = 17; case 17: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			/* */ $s = 18; case 18:
			return _r$21;
		/* } */ case 3:
		_r$22 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 19; case 19: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		$panic(_r$22);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: builtinArray_filter }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f.call = call; $f.callThis = callThis; $f.index = index; $f.iterator = iterator; $f.key = key; $f.length = length; $f.this$1 = this$1; $f.thisObject = thisObject; $f.value = value; $f.values = values; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_reduce = function(call) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, accumulator, call, index, initial, iterator, key, key$1, length, start, this$1, thisObject, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; accumulator = $f.accumulator; call = $f.call; index = $f.index; initial = $f.initial; iterator = $f.iterator; key = $f.key; key$1 = $f.key$1; length = $f.length; start = $f.start; this$1 = $f.this$1; thisObject = $f.thisObject; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		this$1 = $clone(toValue_object(thisObject), Value);
		iterator = $clone(call.Argument(0), Value);
		/* */ if (iterator.isCallable()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (iterator.isCallable()) { */ case 2:
			initial = call.ArgumentList.$length > 1;
			start = $clone(call.Argument(1), Value);
			_r$14 = thisObject.get("length"); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = toUint32(_r$14); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			length = new $Int64(0, _r$15);
			index = new $Int64(0, 0);
			/* */ if ((length.$high > 0 || (length.$high === 0 && length.$low > 0)) || initial) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((length.$high > 0 || (length.$high === 0 && length.$low > 0)) || initial) { */ case 6:
				accumulator = new Value.ptr(0, $ifaceNil);
				/* */ if (!initial) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!initial) { */ case 8:
					/* while (true) { */ case 11:
						/* if (!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { break; } */ if(!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { $s = 12; continue; }
						key = arrayIndexToString(index);
						_r$16 = thisObject.hasProperty(key); /* */ $s = 15; case 15: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						/* */ if (_r$16) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (_r$16) { */ case 13:
							_r$17 = thisObject.get(key); /* */ $s = 16; case 16: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
							Value.copy(accumulator, _r$17);
							index = (x = new $Int64(0, 1), new $Int64(index.$high + x.$high, index.$low + x.$low));
							/* break; */ $s = 12; continue;
						/* } */ case 14:
						index = (x$1 = new $Int64(0, 1), new $Int64(index.$high + x$1.$high, index.$low + x$1.$low));
					/* } */ $s = 11; continue; case 12:
					$s = 10; continue;
				/* } else { */ case 9:
					Value.copy(accumulator, start);
				/* } */ case 10:
				/* while (true) { */ case 17:
					/* if (!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { break; } */ if(!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { $s = 18; continue; }
					key$1 = arrayIndexToString(index);
					_r$18 = thisObject.hasProperty(key$1); /* */ $s = 21; case 21: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					/* */ if (_r$18) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (_r$18) { */ case 19:
						_arg = call.runtime;
						_arg$1 = new Value.ptr(0, $ifaceNil);
						_arg$2 = new accumulator.constructor.elem(accumulator);
						_r$19 = thisObject.get(key$1); /* */ $s = 22; case 22: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
						_arg$3 = (x$2 = _r$19, new x$2.constructor.elem(x$2));
						_arg$4 = new $String(key$1);
						_arg$5 = new this$1.constructor.elem(this$1);
						_r$20 = iterator.call(_arg, _arg$1, new sliceType$1([_arg$2, _arg$3, _arg$4, _arg$5])); /* */ $s = 23; case 23: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
						Value.copy(accumulator, _r$20);
					/* } */ case 20:
					index = (x$3 = new $Int64(0, 1), new $Int64(index.$high + x$3.$high, index.$low + x$3.$low));
				/* } */ $s = 17; continue; case 18:
				return accumulator;
			/* } */ case 7:
		/* } */ case 3:
		_r$21 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 24; case 24: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		$panic(_r$21);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: builtinArray_reduce }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f.accumulator = accumulator; $f.call = call; $f.index = index; $f.initial = initial; $f.iterator = iterator; $f.key = key; $f.key$1 = key$1; $f.length = length; $f.start = start; $f.this$1 = this$1; $f.thisObject = thisObject; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinArray_reduceRight = function(call) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, accumulator, call, index, initial, iterator, key, key$1, length, start, this$1, thisObject, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; accumulator = $f.accumulator; call = $f.call; index = $f.index; initial = $f.initial; iterator = $f.iterator; key = $f.key; key$1 = $f.key$1; length = $f.length; start = $f.start; this$1 = $f.this$1; thisObject = $f.thisObject; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		this$1 = $clone(toValue_object(thisObject), Value);
		iterator = $clone(call.Argument(0), Value);
		/* */ if (iterator.isCallable()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (iterator.isCallable()) { */ case 2:
			initial = call.ArgumentList.$length > 1;
			start = $clone(call.Argument(1), Value);
			_r$14 = thisObject.get("length"); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = toUint32(_r$14); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			length = new $Int64(0, _r$15);
			/* */ if ((length.$high > 0 || (length.$high === 0 && length.$low > 0)) || initial) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((length.$high > 0 || (length.$high === 0 && length.$low > 0)) || initial) { */ case 6:
				index = new $Int64(length.$high - 0, length.$low - 1);
				accumulator = new Value.ptr(0, $ifaceNil);
				/* */ if (!initial) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!initial) { */ case 8:
					/* while (true) { */ case 11:
						/* if (!((index.$high > 0 || (index.$high === 0 && index.$low >= 0)))) { break; } */ if(!((index.$high > 0 || (index.$high === 0 && index.$low >= 0)))) { $s = 12; continue; }
						key = arrayIndexToString(index);
						_r$16 = thisObject.hasProperty(key); /* */ $s = 15; case 15: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						/* */ if (_r$16) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (_r$16) { */ case 13:
							_r$17 = thisObject.get(key); /* */ $s = 16; case 16: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
							Value.copy(accumulator, _r$17);
							index = (x = new $Int64(0, 1), new $Int64(index.$high - x.$high, index.$low - x.$low));
							/* break; */ $s = 12; continue;
						/* } */ case 14:
						index = (x$1 = new $Int64(0, 1), new $Int64(index.$high - x$1.$high, index.$low - x$1.$low));
					/* } */ $s = 11; continue; case 12:
					$s = 10; continue;
				/* } else { */ case 9:
					Value.copy(accumulator, start);
				/* } */ case 10:
				/* while (true) { */ case 17:
					/* if (!((index.$high > 0 || (index.$high === 0 && index.$low >= 0)))) { break; } */ if(!((index.$high > 0 || (index.$high === 0 && index.$low >= 0)))) { $s = 18; continue; }
					key$1 = arrayIndexToString(index);
					_r$18 = thisObject.hasProperty(key$1); /* */ $s = 21; case 21: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					/* */ if (_r$18) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (_r$18) { */ case 19:
						_arg = call.runtime;
						_arg$1 = new Value.ptr(0, $ifaceNil);
						_arg$2 = new accumulator.constructor.elem(accumulator);
						_r$19 = thisObject.get(key$1); /* */ $s = 22; case 22: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
						_arg$3 = (x$2 = _r$19, new x$2.constructor.elem(x$2));
						_arg$4 = new $String(key$1);
						_arg$5 = new this$1.constructor.elem(this$1);
						_r$20 = iterator.call(_arg, _arg$1, new sliceType$1([_arg$2, _arg$3, _arg$4, _arg$5])); /* */ $s = 23; case 23: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
						Value.copy(accumulator, _r$20);
					/* } */ case 20:
					index = (x$3 = new $Int64(0, 1), new $Int64(index.$high - x$3.$high, index.$low - x$3.$low));
				/* } */ $s = 17; continue; case 18:
				return accumulator;
			/* } */ case 7:
		/* } */ case 3:
		_r$21 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 24; case 24: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		$panic(_r$21);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: builtinArray_reduceRight }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f.accumulator = accumulator; $f.call = call; $f.index = index; $f.initial = initial; $f.iterator = iterator; $f.key = key; $f.key$1 = key$1; $f.length = length; $f.start = start; $f.this$1 = this$1; $f.thisObject = thisObject; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinBoolean = function(call) {
		var $ptr, _r$13, _r$14, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).bool(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_bool(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinBoolean }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNewBoolean = function(self, argumentList) {
		var $ptr, _r$13, _r$14, argumentList, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; argumentList = $f.argumentList; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = self.runtime.newBoolean(valueOfArrayIndex(argumentList, 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNewBoolean }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.argumentList = argumentList; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinBoolean_toString = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, call, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		value = $clone(call.This, Value);
		/* */ if (!value.IsBoolean()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!value.IsBoolean()) { */ case 1:
			_r$13 = call.thisClassObject("Boolean"); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = _r$13.primitiveValue(); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			Value.copy(value, _r$14);
		/* } */ case 2:
		_r$15 = value.string(); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_string(_r$15); /* */ $s = 6; case 6: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 7; case 7:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinBoolean_toString }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinBoolean_valueOf = function(call) {
		var $ptr, _r$13, _r$14, call, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		value = $clone(call.This, Value);
		/* */ if (!value.IsBoolean()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!value.IsBoolean()) { */ case 1:
			_r$13 = call.thisClassObject("Boolean"); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = _r$13.primitiveValue(); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			Value.copy(value, _r$14);
		/* } */ case 2:
		return value;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinBoolean_valueOf }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate = function(call) {
		var $ptr, _r$13, _r$14, _r$15, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		date = new _dateObject.ptr(new time.Time.ptr(new $Int64(0, 0), 0, ptrType$5.nil), new $Int64(0, 0), new Value.ptr(0, $ifaceNil), false);
		_r$13 = newDateTime(new sliceType$5([]), time.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		$r = date.Set(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$14 = date.Time().Format("Mon, 02 Jan 2006 15:04:05 MST"); /* */ $s = 3; case 3: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toValue_string(_r$14); /* */ $s = 4; case 4: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$15;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNewDate = function(self, argumentList) {
		var $ptr, _r$13, _r$14, _r$15, argumentList, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; argumentList = $f.argumentList; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = newDateTime(argumentList, time.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = self.runtime.newDate(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toValue_object(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ $s = 4; case 4:
		return _r$15;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNewDate }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.argumentList = argumentList; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_toString = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return toValue_string("Invalid Date");
		}
		_r$15 = date.Time().Local().Format("Mon, 02 Jan 2006 15:04:05 MST"); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_string(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_toString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_toDateString = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return toValue_string("Invalid Date");
		}
		_r$15 = date.Time().Local().Format("Mon, 02 Jan 2006"); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_string(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_toDateString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_toTimeString = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return toValue_string("Invalid Date");
		}
		_r$15 = date.Time().Local().Format("15:04:05 MST"); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_string(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_toTimeString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_toUTCString = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return toValue_string("Invalid Date");
		}
		_r$15 = date.Time().Format("Mon, 02 Jan 2006 15:04:05 MST"); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_string(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_toUTCString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_toISOString = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return toValue_string("Invalid Date");
		}
		_r$15 = date.Time().Format("2006-01-02T15:04:05.000Z"); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_string(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_toISOString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_toJSON = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, call, object, toISOString, value, value$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; call = $f.call; object = $f.object; toISOString = $f.toISOString; value = $f.value; value$1 = $f.value$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		object = _r$13;
		_r$14 = object.DefaultValue(2); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		value = $clone(_r$14, Value);
		_r$15 = value.float64(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		value$1 = _r$15;
		if (math.IsNaN(value$1) || math.IsInf(value$1, 0)) {
			return nullValue;
		}
		_r$16 = object.get("toISOString"); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		toISOString = $clone(_r$16, Value);
		/* */ if (!toISOString.isCallable()) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!toISOString.isCallable()) { */ case 5:
			_r$17 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 7; case 7: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			$panic(_r$17);
		/* } */ case 6:
		_r$18 = toISOString.call(call.runtime, toValue_object(object), new sliceType$1([new sliceType$5([])])); /* */ $s = 8; case 8: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		/* */ $s = 9; case 9:
		return _r$18;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_toJSON }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f.call = call; $f.object = object; $f.toISOString = toISOString; $f.value = value; $f.value$1 = value$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_toGMTString = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return toValue_string("Invalid Date");
		}
		_r$15 = date.Time().Format("Mon, 02 Jan 2006 15:04:05 GMT"); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_string(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_toGMTString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getTime = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		return toValue_int64(date.Epoch());
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getTime }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_setTime = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, object, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; object = $f.object; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		object = _r$13;
		_arg = call.runtime;
		_r$14 = call.thisObject(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_arg$1 = _r$14;
		_r$15 = dateObjectOf(_arg, _arg$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		date = $clone(_r$15, _dateObject);
		_r$16 = call.Argument(0).float64(); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		$r = date.Set(_r$16); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		object.value = new date.constructor.elem(date);
		return date.Value();
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_setTime }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.object = object; $f.$s = $s; $f.$r = $r; return $f;
	};
	_builtinDate_beforeSet = function(call, argumentLimit, timeLocal) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, _r$17, _ref, argumentLimit, baseTime, call, date, ecmaTime$1, index, nm, object, timeLocal, value, valueList, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _ref = $f._ref; argumentLimit = $f.argumentLimit; baseTime = $f.baseTime; call = $f.call; date = $f.date; ecmaTime$1 = $f.ecmaTime$1; index = $f.index; nm = $f.nm; object = $f.object; timeLocal = $f.timeLocal; value = $f.value; valueList = $f.valueList; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		date = [date];
		ecmaTime$1 = [ecmaTime$1];
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		object = _r$13;
		_arg = call.runtime;
		_r$14 = call.thisObject(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_arg$1 = _r$14;
		_r$15 = dateObjectOf(_arg, _arg$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		date[0] = $clone(_r$15, _dateObject);
		if (date[0].isNaN) {
			return [ptrType$4.nil, ptrType$7.nil, ptrType$8.nil, sliceType$6.nil];
		}
		if (argumentLimit > call.ArgumentList.$length) {
			argumentLimit = call.ArgumentList.$length;
		}
		if (argumentLimit === 0) {
			object.value = new invalidDateObject.constructor.elem(invalidDateObject);
			return [ptrType$4.nil, ptrType$7.nil, ptrType$8.nil, sliceType$6.nil];
		}
		valueList = $makeSlice(sliceType$6, argumentLimit);
		index = 0;
		/* while (true) { */ case 4:
			/* if (!(index < argumentLimit)) { break; } */ if(!(index < argumentLimit)) { $s = 5; continue; }
			value = $clone((x = call.ArgumentList, ((index < 0 || index >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + index])), Value);
			_r$16 = value.number(); /* */ $s = 6; case 6: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			nm = $clone(_r$16, _number);
			_ref = nm.kind;
			if (_ref === 0 || _ref === 1) {
			} else {
				object.value = new invalidDateObject.constructor.elem(invalidDateObject);
				return [ptrType$4.nil, ptrType$7.nil, ptrType$8.nil, sliceType$6.nil];
			}
			((index < 0 || index >= valueList.$length) ? $throwRuntimeError("index out of range") : valueList.$array[valueList.$offset + index] = ((x$1 = nm.int64, x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
			index = index + (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		baseTime = $clone(date[0].Time(), time.Time);
		if (timeLocal) {
			time.Time.copy(baseTime, baseTime.Local());
		}
		_r$17 = ecmaTime(baseTime); /* */ $s = 7; case 7: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		ecmaTime$1[0] = $clone(_r$17, _ecmaTime);
		return [object, date[0], ecmaTime$1[0], valueList];
		/* */ } return; } if ($f === undefined) { $f = { $blk: _builtinDate_beforeSet }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._ref = _ref; $f.argumentLimit = argumentLimit; $f.baseTime = baseTime; $f.call = call; $f.date = date; $f.ecmaTime$1 = ecmaTime$1; $f.index = index; $f.nm = nm; $f.object = object; $f.timeLocal = timeLocal; $f.value = value; $f.valueList = valueList; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_parse = function(call) {
		var $ptr, _r$13, _r$14, _r$15, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		date = _r$13;
		_r$14 = dateParse(date); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toValue_float64(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ $s = 4; case 4:
		return _r$15;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_parse }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_UTC = function(call) {
		var $ptr, _r$13, _r$14, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = newDateTime(call.ArgumentList, time.UTC); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_float64(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_UTC }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_now = function(call) {
		var $ptr, _r$13, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		call.ArgumentList = sliceType$5.nil;
		_r$13 = builtinDate_UTC(call); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_now }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_toLocaleString = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return toValue_string("Invalid Date");
		}
		_r$15 = date.Time().Local().Format("2006-01-02 15:04:05"); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_string(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_toLocaleString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_toLocaleDateString = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return toValue_string("Invalid Date");
		}
		_r$15 = date.Time().Local().Format("2006-01-02"); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_string(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_toLocaleDateString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_toLocaleTimeString = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return toValue_string("Invalid Date");
		}
		_r$15 = date.Time().Local().Format("15:04:05"); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_string(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_toLocaleTimeString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_valueOf = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		return date.Value();
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_valueOf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getYear = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		_r$15 = date.Time().Local().Year(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_int(_r$15 - 1900 >> 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getYear }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getFullYear = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		_r$15 = date.Time().Local().Year(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_int(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getFullYear }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getUTCFullYear = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		_r$15 = date.Time().Year(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_int(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getUTCFullYear }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getMonth = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, _r$17, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		_r$15 = date.Time().Local().Month(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = dateFromGoMonth(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$17 = toValue_int(_r$16); /* */ $s = 5; case 5: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$17;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getMonth }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getUTCMonth = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, _r$17, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		_r$15 = date.Time().Month(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = dateFromGoMonth(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$17 = toValue_int(_r$16); /* */ $s = 5; case 5: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$17;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getUTCMonth }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getDate = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		_r$15 = date.Time().Local().Day(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_int(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getDate }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getUTCDate = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		_r$15 = date.Time().Day(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_int(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getUTCDate }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getDay = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, _r$17, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		_r$15 = date.Time().Local().Weekday(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = dateFromGoDay(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$17 = toValue_int(_r$16); /* */ $s = 5; case 5: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$17;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getDay }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getUTCDay = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, _r$17, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		_r$15 = date.Time().Weekday(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = dateFromGoDay(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$17 = toValue_int(_r$16); /* */ $s = 5; case 5: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$17;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getUTCDay }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getHours = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		_r$15 = date.Time().Local().Hour(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_int(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getHours }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getUTCHours = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		_r$15 = date.Time().Hour(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_int(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getUTCHours }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getMinutes = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		_r$15 = date.Time().Local().Minute(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_int(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getMinutes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getUTCMinutes = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		_r$15 = date.Time().Minute(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_int(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getUTCMinutes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getSeconds = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		_r$15 = date.Time().Local().Second(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_int(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getSeconds }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getUTCSeconds = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		_r$15 = date.Time().Second(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_int(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getUTCSeconds }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getMilliseconds = function(call) {
		var $ptr, _arg, _arg$1, _q, _r$13, _r$14, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _q = $f._q; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		return toValue_int((_q = date.Time().Local().Nanosecond() / 1000000, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getMilliseconds }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._q = _q; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getUTCMilliseconds = function(call) {
		var $ptr, _arg, _arg$1, _q, _r$13, _r$14, call, date, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _q = $f._q; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; date = $f.date; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		return toValue_int((_q = date.Time().Nanosecond() / 1000000, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getUTCMilliseconds }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._q = _q; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.date = date; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_getTimezoneOffset = function(call) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, call, date, timeLocal, timeLocalAsUTC, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; call = $f.call; date = $f.date; timeLocal = $f.timeLocal; timeLocalAsUTC = $f.timeLocalAsUTC; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = call.runtime;
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_r$14 = dateObjectOf(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		date = $clone(_r$14, _dateObject);
		if (date.isNaN) {
			return NaNValue();
		}
		timeLocal = $clone(date.Time().Local(), time.Time);
		_r$15 = timeLocal.Year(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_arg$2 = _r$15;
		_r$16 = timeLocal.Month(); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_arg$3 = _r$16;
		_r$17 = timeLocal.Day(); /* */ $s = 5; case 5: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_arg$4 = _r$17;
		_r$18 = timeLocal.Hour(); /* */ $s = 6; case 6: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		_arg$5 = _r$18;
		_r$19 = timeLocal.Minute(); /* */ $s = 7; case 7: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		_arg$6 = _r$19;
		_r$20 = timeLocal.Second(); /* */ $s = 8; case 8: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		_arg$7 = _r$20;
		_arg$8 = timeLocal.Nanosecond();
		_arg$9 = time.UTC;
		_r$21 = time.Date(_arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9); /* */ $s = 9; case 9: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		timeLocalAsUTC = $clone(_r$21, time.Time);
		return toValue_float64(date.Time().Sub(timeLocalAsUTC).Seconds() / 60);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_getTimezoneOffset }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f.call = call; $f.date = date; $f.timeLocal = timeLocal; $f.timeLocalAsUTC = timeLocalAsUTC; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_setMilliseconds = function(call) {
		var $ptr, _r$13, _r$14, _tuple$1, call, date, ecmaTime$1, object, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; call = $f.call; date = $f.date; ecmaTime$1 = $f.ecmaTime$1; object = $f.object; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = _builtinDate_beforeSet(call, 1, true); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		object = _tuple$1[0];
		date = _tuple$1[1];
		ecmaTime$1 = _tuple$1[2];
		value = _tuple$1[3];
		if (ecmaTime$1 === ptrType$8.nil) {
			return NaNValue();
		}
		ecmaTime$1.millisecond = (0 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 0]);
		_r$14 = ecmaTime$1.goTime(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		$r = date.SetTime(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		object.value = (x = date, new x.constructor.elem(x));
		return date.Value();
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_setMilliseconds }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.call = call; $f.date = date; $f.ecmaTime$1 = ecmaTime$1; $f.object = object; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_setUTCMilliseconds = function(call) {
		var $ptr, _r$13, _r$14, _tuple$1, call, date, ecmaTime$1, object, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; call = $f.call; date = $f.date; ecmaTime$1 = $f.ecmaTime$1; object = $f.object; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = _builtinDate_beforeSet(call, 1, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		object = _tuple$1[0];
		date = _tuple$1[1];
		ecmaTime$1 = _tuple$1[2];
		value = _tuple$1[3];
		if (ecmaTime$1 === ptrType$8.nil) {
			return NaNValue();
		}
		ecmaTime$1.millisecond = (0 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 0]);
		_r$14 = ecmaTime$1.goTime(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		$r = date.SetTime(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		object.value = (x = date, new x.constructor.elem(x));
		return date.Value();
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_setUTCMilliseconds }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.call = call; $f.date = date; $f.ecmaTime$1 = ecmaTime$1; $f.object = object; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_setSeconds = function(call) {
		var $ptr, _r$13, _r$14, _tuple$1, call, date, ecmaTime$1, object, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; call = $f.call; date = $f.date; ecmaTime$1 = $f.ecmaTime$1; object = $f.object; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = _builtinDate_beforeSet(call, 2, true); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		object = _tuple$1[0];
		date = _tuple$1[1];
		ecmaTime$1 = _tuple$1[2];
		value = _tuple$1[3];
		if (ecmaTime$1 === ptrType$8.nil) {
			return NaNValue();
		}
		if (value.$length > 1) {
			ecmaTime$1.millisecond = (1 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 1]);
		}
		ecmaTime$1.second = (0 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 0]);
		_r$14 = ecmaTime$1.goTime(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		$r = date.SetTime(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		object.value = (x = date, new x.constructor.elem(x));
		return date.Value();
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_setSeconds }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.call = call; $f.date = date; $f.ecmaTime$1 = ecmaTime$1; $f.object = object; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_setUTCSeconds = function(call) {
		var $ptr, _r$13, _r$14, _tuple$1, call, date, ecmaTime$1, object, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; call = $f.call; date = $f.date; ecmaTime$1 = $f.ecmaTime$1; object = $f.object; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = _builtinDate_beforeSet(call, 2, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		object = _tuple$1[0];
		date = _tuple$1[1];
		ecmaTime$1 = _tuple$1[2];
		value = _tuple$1[3];
		if (ecmaTime$1 === ptrType$8.nil) {
			return NaNValue();
		}
		if (value.$length > 1) {
			ecmaTime$1.millisecond = (1 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 1]);
		}
		ecmaTime$1.second = (0 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 0]);
		_r$14 = ecmaTime$1.goTime(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		$r = date.SetTime(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		object.value = (x = date, new x.constructor.elem(x));
		return date.Value();
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_setUTCSeconds }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.call = call; $f.date = date; $f.ecmaTime$1 = ecmaTime$1; $f.object = object; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_setMinutes = function(call) {
		var $ptr, _r$13, _r$14, _tuple$1, call, date, ecmaTime$1, object, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; call = $f.call; date = $f.date; ecmaTime$1 = $f.ecmaTime$1; object = $f.object; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = _builtinDate_beforeSet(call, 3, true); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		object = _tuple$1[0];
		date = _tuple$1[1];
		ecmaTime$1 = _tuple$1[2];
		value = _tuple$1[3];
		if (ecmaTime$1 === ptrType$8.nil) {
			return NaNValue();
		}
		if (value.$length > 2) {
			ecmaTime$1.millisecond = (2 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 2]);
			ecmaTime$1.second = (1 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 1]);
		} else if (value.$length > 1) {
			ecmaTime$1.second = (1 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 1]);
		}
		ecmaTime$1.minute = (0 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 0]);
		_r$14 = ecmaTime$1.goTime(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		$r = date.SetTime(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		object.value = (x = date, new x.constructor.elem(x));
		return date.Value();
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_setMinutes }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.call = call; $f.date = date; $f.ecmaTime$1 = ecmaTime$1; $f.object = object; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_setUTCMinutes = function(call) {
		var $ptr, _r$13, _r$14, _tuple$1, call, date, ecmaTime$1, object, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; call = $f.call; date = $f.date; ecmaTime$1 = $f.ecmaTime$1; object = $f.object; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = _builtinDate_beforeSet(call, 3, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		object = _tuple$1[0];
		date = _tuple$1[1];
		ecmaTime$1 = _tuple$1[2];
		value = _tuple$1[3];
		if (ecmaTime$1 === ptrType$8.nil) {
			return NaNValue();
		}
		if (value.$length > 2) {
			ecmaTime$1.millisecond = (2 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 2]);
			ecmaTime$1.second = (1 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 1]);
		} else if (value.$length > 1) {
			ecmaTime$1.second = (1 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 1]);
		}
		ecmaTime$1.minute = (0 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 0]);
		_r$14 = ecmaTime$1.goTime(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		$r = date.SetTime(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		object.value = (x = date, new x.constructor.elem(x));
		return date.Value();
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_setUTCMinutes }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.call = call; $f.date = date; $f.ecmaTime$1 = ecmaTime$1; $f.object = object; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_setHours = function(call) {
		var $ptr, _r$13, _r$14, _tuple$1, call, date, ecmaTime$1, object, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; call = $f.call; date = $f.date; ecmaTime$1 = $f.ecmaTime$1; object = $f.object; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = _builtinDate_beforeSet(call, 4, true); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		object = _tuple$1[0];
		date = _tuple$1[1];
		ecmaTime$1 = _tuple$1[2];
		value = _tuple$1[3];
		if (ecmaTime$1 === ptrType$8.nil) {
			return NaNValue();
		}
		if (value.$length > 3) {
			ecmaTime$1.millisecond = (3 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 3]);
			ecmaTime$1.second = (2 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 2]);
			ecmaTime$1.minute = (1 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 1]);
		} else if (value.$length > 2) {
			ecmaTime$1.second = (2 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 2]);
			ecmaTime$1.minute = (1 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 1]);
		} else if (value.$length > 1) {
			ecmaTime$1.minute = (1 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 1]);
		}
		ecmaTime$1.hour = (0 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 0]);
		_r$14 = ecmaTime$1.goTime(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		$r = date.SetTime(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		object.value = (x = date, new x.constructor.elem(x));
		return date.Value();
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_setHours }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.call = call; $f.date = date; $f.ecmaTime$1 = ecmaTime$1; $f.object = object; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_setUTCHours = function(call) {
		var $ptr, _r$13, _r$14, _tuple$1, call, date, ecmaTime$1, object, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; call = $f.call; date = $f.date; ecmaTime$1 = $f.ecmaTime$1; object = $f.object; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = _builtinDate_beforeSet(call, 4, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		object = _tuple$1[0];
		date = _tuple$1[1];
		ecmaTime$1 = _tuple$1[2];
		value = _tuple$1[3];
		if (ecmaTime$1 === ptrType$8.nil) {
			return NaNValue();
		}
		if (value.$length > 3) {
			ecmaTime$1.millisecond = (3 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 3]);
			ecmaTime$1.second = (2 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 2]);
			ecmaTime$1.minute = (1 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 1]);
		} else if (value.$length > 2) {
			ecmaTime$1.second = (2 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 2]);
			ecmaTime$1.minute = (1 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 1]);
		} else if (value.$length > 1) {
			ecmaTime$1.minute = (1 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 1]);
		}
		ecmaTime$1.hour = (0 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 0]);
		_r$14 = ecmaTime$1.goTime(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		$r = date.SetTime(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		object.value = (x = date, new x.constructor.elem(x));
		return date.Value();
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_setUTCHours }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.call = call; $f.date = date; $f.ecmaTime$1 = ecmaTime$1; $f.object = object; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_setDate = function(call) {
		var $ptr, _r$13, _r$14, _tuple$1, call, date, ecmaTime$1, object, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; call = $f.call; date = $f.date; ecmaTime$1 = $f.ecmaTime$1; object = $f.object; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = _builtinDate_beforeSet(call, 1, true); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		object = _tuple$1[0];
		date = _tuple$1[1];
		ecmaTime$1 = _tuple$1[2];
		value = _tuple$1[3];
		if (ecmaTime$1 === ptrType$8.nil) {
			return NaNValue();
		}
		ecmaTime$1.day = (0 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 0]);
		_r$14 = ecmaTime$1.goTime(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		$r = date.SetTime(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		object.value = (x = date, new x.constructor.elem(x));
		return date.Value();
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_setDate }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.call = call; $f.date = date; $f.ecmaTime$1 = ecmaTime$1; $f.object = object; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_setUTCDate = function(call) {
		var $ptr, _r$13, _r$14, _tuple$1, call, date, ecmaTime$1, object, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; call = $f.call; date = $f.date; ecmaTime$1 = $f.ecmaTime$1; object = $f.object; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = _builtinDate_beforeSet(call, 1, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		object = _tuple$1[0];
		date = _tuple$1[1];
		ecmaTime$1 = _tuple$1[2];
		value = _tuple$1[3];
		if (ecmaTime$1 === ptrType$8.nil) {
			return NaNValue();
		}
		ecmaTime$1.day = (0 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 0]);
		_r$14 = ecmaTime$1.goTime(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		$r = date.SetTime(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		object.value = (x = date, new x.constructor.elem(x));
		return date.Value();
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_setUTCDate }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.call = call; $f.date = date; $f.ecmaTime$1 = ecmaTime$1; $f.object = object; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_setMonth = function(call) {
		var $ptr, _r$13, _r$14, _tuple$1, call, date, ecmaTime$1, object, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; call = $f.call; date = $f.date; ecmaTime$1 = $f.ecmaTime$1; object = $f.object; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = _builtinDate_beforeSet(call, 2, true); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		object = _tuple$1[0];
		date = _tuple$1[1];
		ecmaTime$1 = _tuple$1[2];
		value = _tuple$1[3];
		if (ecmaTime$1 === ptrType$8.nil) {
			return NaNValue();
		}
		if (value.$length > 1) {
			ecmaTime$1.day = (1 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 1]);
		}
		ecmaTime$1.month = (0 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 0]);
		_r$14 = ecmaTime$1.goTime(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		$r = date.SetTime(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		object.value = (x = date, new x.constructor.elem(x));
		return date.Value();
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_setMonth }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.call = call; $f.date = date; $f.ecmaTime$1 = ecmaTime$1; $f.object = object; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_setUTCMonth = function(call) {
		var $ptr, _r$13, _r$14, _tuple$1, call, date, ecmaTime$1, object, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; call = $f.call; date = $f.date; ecmaTime$1 = $f.ecmaTime$1; object = $f.object; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = _builtinDate_beforeSet(call, 2, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		object = _tuple$1[0];
		date = _tuple$1[1];
		ecmaTime$1 = _tuple$1[2];
		value = _tuple$1[3];
		if (ecmaTime$1 === ptrType$8.nil) {
			return NaNValue();
		}
		if (value.$length > 1) {
			ecmaTime$1.day = (1 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 1]);
		}
		ecmaTime$1.month = (0 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 0]);
		_r$14 = ecmaTime$1.goTime(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		$r = date.SetTime(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		object.value = (x = date, new x.constructor.elem(x));
		return date.Value();
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_setUTCMonth }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.call = call; $f.date = date; $f.ecmaTime$1 = ecmaTime$1; $f.object = object; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_setYear = function(call) {
		var $ptr, _r$13, _r$14, _tuple$1, call, date, ecmaTime$1, object, value, x, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; call = $f.call; date = $f.date; ecmaTime$1 = $f.ecmaTime$1; object = $f.object; value = $f.value; x = $f.x; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = _builtinDate_beforeSet(call, 1, true); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		object = _tuple$1[0];
		date = _tuple$1[1];
		ecmaTime$1 = _tuple$1[2];
		value = _tuple$1[3];
		if (ecmaTime$1 === ptrType$8.nil) {
			return NaNValue();
		}
		year = (0 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 0]);
		if (0 <= year && year <= 99) {
			year = year + (1900) >> 0;
		}
		ecmaTime$1.year = year;
		_r$14 = ecmaTime$1.goTime(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		$r = date.SetTime(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		object.value = (x = date, new x.constructor.elem(x));
		return date.Value();
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_setYear }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.call = call; $f.date = date; $f.ecmaTime$1 = ecmaTime$1; $f.object = object; $f.value = value; $f.x = x; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_setFullYear = function(call) {
		var $ptr, _r$13, _r$14, _tuple$1, call, date, ecmaTime$1, object, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; call = $f.call; date = $f.date; ecmaTime$1 = $f.ecmaTime$1; object = $f.object; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = _builtinDate_beforeSet(call, 3, true); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		object = _tuple$1[0];
		date = _tuple$1[1];
		ecmaTime$1 = _tuple$1[2];
		value = _tuple$1[3];
		if (ecmaTime$1 === ptrType$8.nil) {
			return NaNValue();
		}
		if (value.$length > 2) {
			ecmaTime$1.day = (2 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 2]);
			ecmaTime$1.month = (1 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 1]);
		} else if (value.$length > 1) {
			ecmaTime$1.month = (1 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 1]);
		}
		ecmaTime$1.year = (0 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 0]);
		_r$14 = ecmaTime$1.goTime(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		$r = date.SetTime(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		object.value = (x = date, new x.constructor.elem(x));
		return date.Value();
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_setFullYear }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.call = call; $f.date = date; $f.ecmaTime$1 = ecmaTime$1; $f.object = object; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinDate_setUTCFullYear = function(call) {
		var $ptr, _r$13, _r$14, _tuple$1, call, date, ecmaTime$1, object, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; call = $f.call; date = $f.date; ecmaTime$1 = $f.ecmaTime$1; object = $f.object; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = _builtinDate_beforeSet(call, 3, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		object = _tuple$1[0];
		date = _tuple$1[1];
		ecmaTime$1 = _tuple$1[2];
		value = _tuple$1[3];
		if (ecmaTime$1 === ptrType$8.nil) {
			return NaNValue();
		}
		if (value.$length > 2) {
			ecmaTime$1.day = (2 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 2]);
			ecmaTime$1.month = (1 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 1]);
		} else if (value.$length > 1) {
			ecmaTime$1.month = (1 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 1]);
		}
		ecmaTime$1.year = (0 >= value.$length ? $throwRuntimeError("index out of range") : value.$array[value.$offset + 0]);
		_r$14 = ecmaTime$1.goTime(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		$r = date.SetTime(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		object.value = (x = date, new x.constructor.elem(x));
		return date.Value();
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinDate_setUTCFullYear }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.call = call; $f.date = date; $f.ecmaTime$1 = ecmaTime$1; $f.object = object; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinError = function(call) {
		var $ptr, _r$13, _r$14, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.runtime.newError("", call.Argument(0)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNewError = function(self, argumentList) {
		var $ptr, _r$13, _r$14, argumentList, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; argumentList = $f.argumentList; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = self.runtime.newError("", valueOfArrayIndex(argumentList, 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNewError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.argumentList = argumentList; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinError_toString = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, call, message, messageValue, name, nameValue, thisObject, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; call = $f.call; message = $f.message; messageValue = $f.messageValue; name = $f.name; nameValue = $f.nameValue; thisObject = $f.thisObject; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		/* */ if (thisObject === ptrType$4.nil) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (thisObject === ptrType$4.nil) { */ case 2:
			_r$14 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			$panic(_r$14);
		/* } */ case 3:
		name = "Error";
		_r$15 = thisObject.get("name"); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		nameValue = $clone(_r$15, Value);
		/* */ if (nameValue.IsDefined()) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (nameValue.IsDefined()) { */ case 6:
			_r$16 = nameValue.string(); /* */ $s = 8; case 8: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			name = _r$16;
		/* } */ case 7:
		message = "";
		_r$17 = thisObject.get("message"); /* */ $s = 9; case 9: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		messageValue = $clone(_r$17, Value);
		/* */ if (messageValue.IsDefined()) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (messageValue.IsDefined()) { */ case 10:
			_r$18 = messageValue.string(); /* */ $s = 12; case 12: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			message = _r$18;
		/* } */ case 11:
		if (name.length === 0) {
			return toValue_string(message);
		}
		if (message.length === 0) {
			return toValue_string(name);
		}
		_r$19 = fmt.Sprintf("%s: %s", new sliceType$1([new $String(name), new $String(message)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		_r$20 = toValue_string(_r$19); /* */ $s = 14; case 14: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		/* */ $s = 15; case 15:
		return _r$20;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinError_toString }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f.call = call; $f.message = message; $f.messageValue = messageValue; $f.name = name; $f.nameValue = nameValue; $f.thisObject = thisObject; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.newEvalError = function(message) {
		var $ptr, _r$13, message, runtime$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; message = $f.message; runtime$1 = $f.runtime$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		message = $clone(message, Value);
		runtime$1 = this;
		_r$13 = runtime$1.newErrorObject("EvalError", message); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self = _r$13;
		self.prototype = runtime$1.global.EvalErrorPrototype;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newEvalError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.message = message; $f.runtime$1 = runtime$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newEvalError = function(message) { return this.$val.newEvalError(message); };
	builtinEvalError = function(call) {
		var $ptr, _r$13, _r$14, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.runtime.newEvalError(call.Argument(0)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinEvalError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNewEvalError = function(self, argumentList) {
		var $ptr, _r$13, _r$14, argumentList, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; argumentList = $f.argumentList; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = self.runtime.newEvalError(valueOfArrayIndex(argumentList, 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNewEvalError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.argumentList = argumentList; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.newTypeError = function(message) {
		var $ptr, _r$13, message, runtime$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; message = $f.message; runtime$1 = $f.runtime$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		message = $clone(message, Value);
		runtime$1 = this;
		_r$13 = runtime$1.newErrorObject("TypeError", message); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self = _r$13;
		self.prototype = runtime$1.global.TypeErrorPrototype;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newTypeError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.message = message; $f.runtime$1 = runtime$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newTypeError = function(message) { return this.$val.newTypeError(message); };
	builtinTypeError = function(call) {
		var $ptr, _r$13, _r$14, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.runtime.newTypeError(call.Argument(0)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinTypeError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNewTypeError = function(self, argumentList) {
		var $ptr, _r$13, _r$14, argumentList, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; argumentList = $f.argumentList; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = self.runtime.newTypeError(valueOfArrayIndex(argumentList, 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNewTypeError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.argumentList = argumentList; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.newRangeError = function(message) {
		var $ptr, _r$13, message, runtime$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; message = $f.message; runtime$1 = $f.runtime$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		message = $clone(message, Value);
		runtime$1 = this;
		_r$13 = runtime$1.newErrorObject("RangeError", message); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self = _r$13;
		self.prototype = runtime$1.global.RangeErrorPrototype;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newRangeError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.message = message; $f.runtime$1 = runtime$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newRangeError = function(message) { return this.$val.newRangeError(message); };
	builtinRangeError = function(call) {
		var $ptr, _r$13, _r$14, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.runtime.newRangeError(call.Argument(0)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinRangeError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNewRangeError = function(self, argumentList) {
		var $ptr, _r$13, _r$14, argumentList, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; argumentList = $f.argumentList; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = self.runtime.newRangeError(valueOfArrayIndex(argumentList, 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNewRangeError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.argumentList = argumentList; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.newURIError = function(message) {
		var $ptr, _r$13, message, runtime$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; message = $f.message; runtime$1 = $f.runtime$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		message = $clone(message, Value);
		runtime$1 = this;
		_r$13 = runtime$1.newErrorObject("URIError", message); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self = _r$13;
		self.prototype = runtime$1.global.URIErrorPrototype;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newURIError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.message = message; $f.runtime$1 = runtime$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newURIError = function(message) { return this.$val.newURIError(message); };
	_runtime.ptr.prototype.newReferenceError = function(message) {
		var $ptr, _r$13, message, runtime$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; message = $f.message; runtime$1 = $f.runtime$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		message = $clone(message, Value);
		runtime$1 = this;
		_r$13 = runtime$1.newErrorObject("ReferenceError", message); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self = _r$13;
		self.prototype = runtime$1.global.ReferenceErrorPrototype;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newReferenceError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.message = message; $f.runtime$1 = runtime$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newReferenceError = function(message) { return this.$val.newReferenceError(message); };
	builtinReferenceError = function(call) {
		var $ptr, _r$13, _r$14, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.runtime.newReferenceError(call.Argument(0)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinReferenceError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNewReferenceError = function(self, argumentList) {
		var $ptr, _r$13, _r$14, argumentList, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; argumentList = $f.argumentList; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = self.runtime.newReferenceError(valueOfArrayIndex(argumentList, 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNewReferenceError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.argumentList = argumentList; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.newSyntaxError = function(message) {
		var $ptr, _r$13, message, runtime$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; message = $f.message; runtime$1 = $f.runtime$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		message = $clone(message, Value);
		runtime$1 = this;
		_r$13 = runtime$1.newErrorObject("SyntaxError", message); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self = _r$13;
		self.prototype = runtime$1.global.SyntaxErrorPrototype;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newSyntaxError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.message = message; $f.runtime$1 = runtime$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newSyntaxError = function(message) { return this.$val.newSyntaxError(message); };
	builtinSyntaxError = function(call) {
		var $ptr, _r$13, _r$14, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.runtime.newSyntaxError(call.Argument(0)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinSyntaxError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNewSyntaxError = function(self, argumentList) {
		var $ptr, _r$13, _r$14, argumentList, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; argumentList = $f.argumentList; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = self.runtime.newSyntaxError(valueOfArrayIndex(argumentList, 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNewSyntaxError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.argumentList = argumentList; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinURIError = function(call) {
		var $ptr, _r$13, _r$14, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.runtime.newURIError(call.Argument(0)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinURIError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNewURIError = function(self, argumentList) {
		var $ptr, _r$13, _r$14, argumentList, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; argumentList = $f.argumentList; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = self.runtime.newURIError(valueOfArrayIndex(argumentList, 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNewURIError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.argumentList = argumentList; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinFunction = function(call) {
		var $ptr, _r$13, _r$14, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = builtinNewFunctionNative(call.runtime, call.ArgumentList); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinFunction }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNewFunction = function(self, argumentList) {
		var $ptr, _r$13, _r$14, argumentList, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; argumentList = $f.argumentList; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = builtinNewFunctionNative(self.runtime, argumentList); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNewFunction }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.argumentList = argumentList; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNewFunctionNative = function(runtime$1, argumentList) {
		var $ptr, _i, _r$13, _r$14, _r$15, _r$16, _r$17, _ref, _tmp, _tmp$1, _tuple$1, argumentList, body, cmpl, cmpl_function, count, err, function$1, parameterList, runtime$1, tmp, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple$1 = $f._tuple$1; argumentList = $f.argumentList; body = $f.body; cmpl = $f.cmpl; cmpl_function = $f.cmpl_function; count = $f.count; err = $f.err; function$1 = $f.function$1; parameterList = $f.parameterList; runtime$1 = $f.runtime$1; tmp = $f.tmp; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = "";
		_tmp$1 = "";
		parameterList = _tmp;
		body = _tmp$1;
		count = argumentList.$length;
		/* */ if (count > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (count > 0) { */ case 1:
			tmp = $makeSlice(sliceType, 0, (count - 1 >> 0));
			_ref = $subslice(argumentList, 0, (count - 1 >> 0));
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				value = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Value);
				_r$13 = value.string(); /* */ $s = 5; case 5: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				tmp = $append(tmp, _r$13);
				_i++;
			/* } */ $s = 3; continue; case 4:
			parameterList = strings.Join(tmp, ",");
			_r$14 = (x = count - 1 >> 0, ((x < 0 || x >= argumentList.$length) ? $throwRuntimeError("index out of range") : argumentList.$array[argumentList.$offset + x])).string(); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			body = _r$14;
		/* } */ case 2:
		_r$15 = parser.ParseFunction(parameterList, body); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_tuple$1 = _r$15;
		function$1 = _tuple$1[0];
		err = _tuple$1[1];
		$r = runtime$1.parseThrow(err); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		cmpl = new _compiler.ptr(ptrType$1.nil, ptrType$9.nil);
		_r$16 = cmpl.parseExpression(function$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		cmpl_function = _r$16;
		_r$17 = runtime$1.newNodeFunction($assertType(cmpl_function, ptrType$10), runtime$1.globalStash); /* */ $s = 10; case 10: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		/* */ $s = 11; case 11:
		return _r$17;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNewFunctionNative }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple$1 = _tuple$1; $f.argumentList = argumentList; $f.body = body; $f.cmpl = cmpl; $f.cmpl_function = cmpl_function; $f.count = count; $f.err = err; $f.function$1 = function$1; $f.parameterList = parameterList; $f.runtime$1 = runtime$1; $f.tmp = tmp; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinFunction_toString = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _ref, call, fn, fn$1, fn$2, object, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _ref = $f._ref; call = $f.call; fn = $f.fn; fn$1 = $f.fn$1; fn$2 = $f.fn$2; object = $f.object; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisClassObject("Function"); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		object = _r$13;
		_ref = object.value;
		/* */ if ($assertType(_ref, _nativeFunctionObject, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, _nodeFunctionObject, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, _bindFunctionObject, true)[1]) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ($assertType(_ref, _nativeFunctionObject, true)[1]) { */ case 2:
			fn = _ref.$val;
			_r$14 = fmt.Sprintf("function %s() { [native code] }", new sliceType$1([new $String(fn.name)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = toValue_string(_r$14); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 8; case 8:
			return _r$15;
		/* } else if ($assertType(_ref, _nodeFunctionObject, true)[1]) { */ case 3:
			fn$1 = _ref.$val;
			return toValue_string(fn$1.node.source);
		/* } else if ($assertType(_ref, _bindFunctionObject, true)[1]) { */ case 4:
			fn$2 = _ref.$val;
			return toValue_string("function () { [native code] }");
		/* } */ case 5:
		_r$16 = call.runtime.panicTypeError(new sliceType$1([new $String("Function.toString()")])); /* */ $s = 9; case 9: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		$panic(_r$16);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: builtinFunction_toString }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._ref = _ref; $f.call = call; $f.fn = fn; $f.fn$1 = fn$1; $f.fn$2 = fn$2; $f.object = object; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinFunction_apply = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _ref, argumentList, arrayObject, call, index, length, this$1, thisObject, valueArray, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _ref = $f._ref; argumentList = $f.argumentList; arrayObject = $f.arrayObject; call = $f.call; index = $f.index; length = $f.length; this$1 = $f.this$1; thisObject = $f.thisObject; valueArray = $f.valueArray; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		/* */ if (!call.This.isCallable()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!call.This.isCallable()) { */ case 1:
			_r$13 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 2:
		this$1 = $clone(call.Argument(0), Value);
		if (this$1.IsUndefined()) {
			Value.copy(this$1, toValue_object(call.runtime.globalObject));
		}
		argumentList = $clone(call.Argument(1), Value);
		_ref = argumentList.kind;
		/* */ if (_ref === 0 || _ref === 1) { $s = 4; continue; }
		/* */ if (_ref === 5) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_ref === 0 || _ref === 1) { */ case 4:
			_r$14 = call.thisObject(); /* */ $s = 8; case 8: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = _r$14.call(this$1, sliceType$5.nil, false, nativeFrame); /* */ $s = 9; case 9: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 10; case 10:
			return _r$15;
		/* } else if (_ref === 5) { */ case 5:
			$s = 7; continue;
		/* } else { */ case 6:
			_r$16 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 11; case 11: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			$panic(_r$16);
		/* } */ case 7:
		arrayObject = argumentList._object();
		_r$17 = call.thisObject(); /* */ $s = 12; case 12: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		thisObject = _r$17;
		_r$18 = arrayObject.get("length"); /* */ $s = 13; case 13: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		_r$19 = toUint32(_r$18); /* */ $s = 14; case 14: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		length = new $Int64(0, _r$19);
		valueArray = $makeSlice(sliceType$5, $flatten64(length));
		index = new $Int64(0, 0);
		/* while (true) { */ case 15:
			/* if (!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { break; } */ if(!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { $s = 16; continue; }
			_r$20 = arrayObject.get(arrayIndexToString(index)); /* */ $s = 17; case 17: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			Value.copy((($flatten64(index) < 0 || $flatten64(index) >= valueArray.$length) ? $throwRuntimeError("index out of range") : valueArray.$array[valueArray.$offset + $flatten64(index)]), _r$20);
			index = (x = new $Int64(0, 1), new $Int64(index.$high + x.$high, index.$low + x.$low));
		/* } */ $s = 15; continue; case 16:
		_r$21 = thisObject.call(this$1, valueArray, false, nativeFrame); /* */ $s = 18; case 18: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		/* */ $s = 19; case 19:
		return _r$21;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinFunction_apply }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._ref = _ref; $f.argumentList = argumentList; $f.arrayObject = arrayObject; $f.call = call; $f.index = index; $f.length = length; $f.this$1 = this$1; $f.thisObject = thisObject; $f.valueArray = valueArray; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinFunction_call = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, call, this$1, thisObject, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; this$1 = $f.this$1; thisObject = $f.thisObject; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		/* */ if (!call.This.isCallable()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!call.This.isCallable()) { */ case 1:
			_r$13 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 2:
		_r$14 = call.thisObject(); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		thisObject = _r$14;
		this$1 = $clone(call.Argument(0), Value);
		if (this$1.IsUndefined()) {
			Value.copy(this$1, toValue_object(call.runtime.globalObject));
		}
		/* */ if (call.ArgumentList.$length >= 1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (call.ArgumentList.$length >= 1) { */ case 5:
			_r$15 = thisObject.call(this$1, $subslice(call.ArgumentList, 1), false, nativeFrame); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 8; case 8:
			return _r$15;
		/* } */ case 6:
		_r$16 = thisObject.call(this$1, sliceType$5.nil, false, nativeFrame); /* */ $s = 9; case 9: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 10; case 10:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinFunction_call }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.this$1 = this$1; $f.thisObject = thisObject; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinFunction_bind = function(call) {
		var $ptr, _r$13, _r$14, _r$15, argumentList, call, target, targetObject, this$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; argumentList = $f.argumentList; call = $f.call; target = $f.target; targetObject = $f.targetObject; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		target = $clone(call.This, Value);
		/* */ if (!target.isCallable()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!target.isCallable()) { */ case 1:
			_r$13 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 2:
		targetObject = target._object();
		this$1 = $clone(call.Argument(0), Value);
		argumentList = call.slice(1);
		if (this$1.IsUndefined()) {
			Value.copy(this$1, toValue_object(call.runtime.globalObject));
		}
		_r$14 = call.runtime.newBoundFunction(targetObject, this$1, argumentList); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toValue_object(_r$14); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$15;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinFunction_bind }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.argumentList = argumentList; $f.call = call; $f.target = target; $f.targetObject = targetObject; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinJSON_parse = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _tuple$1, call, ctx, err, exists, revive, reviver, root, root$1, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _tuple$1 = $f._tuple$1; call = $f.call; ctx = $f.ctx; err = $f.err; exists = $f.exists; revive = $f.revive; reviver = $f.reviver; root = $f.root; root$1 = $f.root$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = [root];
		call = $clone(call, FunctionCall);
		ctx = new _builtinJSON_parseContext.ptr($clone(call, FunctionCall), new Value.ptr(0, $ifaceNil));
		revive = false;
		reviver = $clone(call.Argument(1), Value);
		if (reviver.isCallable()) {
			revive = true;
			Value.copy(ctx.reviver, reviver);
		}
		root[0] = $ifaceNil;
		_r$13 = call.Argument(0).string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = json.Unmarshal(new sliceType$4($stringToBytes(_r$13)), (root.$ptr || (root.$ptr = new ptrType$12(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, root)))); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		err = _r$14;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 3:
			_r$15 = err.Error(); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = call.runtime.panicSyntaxError(new sliceType$1([new $String(_r$15)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			$panic(_r$16);
		/* } */ case 4:
		_r$17 = builtinJSON_parseWalk(ctx, root[0]); /* */ $s = 7; case 7: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_tuple$1 = _r$17;
		value = $clone(_tuple$1[0], Value);
		exists = _tuple$1[1];
		if (!exists) {
			Value.copy(value, new Value.ptr(0, $ifaceNil));
		}
		/* */ if (revive) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (revive) { */ case 8:
			root$1 = ctx.call.runtime.newObject();
			$r = root$1.put("", value, false); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$18 = builtinJSON_reviveWalk(ctx, root$1, ""); /* */ $s = 11; case 11: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			/* */ $s = 12; case 12:
			return _r$18;
		/* } */ case 9:
		return value;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinJSON_parse }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._tuple$1 = _tuple$1; $f.call = call; $f.ctx = ctx; $f.err = err; $f.exists = exists; $f.revive = revive; $f.reviver = reviver; $f.root = root; $f.root$1 = root$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinJSON_reviveWalk = function(ctx, holder, name) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, ctx, holder, index, length, name, name$1, object, value, value$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; ctx = $f.ctx; holder = $f.holder; index = $f.index; length = $f.length; name = $f.name; name$1 = $f.name$1; object = $f.object; value = $f.value; value$1 = $f.value$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ctx = [ctx];
		object = [object];
		ctx[0] = $clone(ctx[0], _builtinJSON_parseContext);
		_r$13 = holder.get(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		value = $clone(_r$13, Value);
		object[0] = value._object();
		/* */ if (!(object[0] === ptrType$4.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(object[0] === ptrType$4.nil)) { */ case 2:
			/* */ if (isArray(object[0])) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (isArray(object[0])) { */ case 4:
				_r$14 = objectLength(object[0]); /* */ $s = 7; case 7: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				length = new $Int64(0, _r$14);
				index = new $Int64(0, 0);
				/* while (true) { */ case 8:
					/* if (!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { break; } */ if(!((index.$high < length.$high || (index.$high === length.$high && index.$low < length.$low)))) { $s = 9; continue; }
					name$1 = arrayIndexToString(index);
					_r$15 = builtinJSON_reviveWalk(ctx[0], object[0], name$1); /* */ $s = 10; case 10: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					value$1 = $clone(_r$15, Value);
					/* */ if (value$1.IsUndefined()) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (value$1.IsUndefined()) { */ case 11:
						_r$16 = object[0].delete$(name$1, false); /* */ $s = 14; case 14: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						_r$16;
						$s = 13; continue;
					/* } else { */ case 12:
						_r$17 = object[0].defineProperty(name$1, value$1, 73, false); /* */ $s = 15; case 15: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						_r$17;
					/* } */ case 13:
					index = (x = new $Int64(0, 1), new $Int64(index.$high + x.$high, index.$low + x.$low));
				/* } */ $s = 8; continue; case 9:
				$s = 6; continue;
			/* } else { */ case 5:
				$r = object[0].enumerate(false, (function(ctx, object) { return function $b(name$2) {
					var $ptr, _r$18, _r$19, _r$20, name$2, value$2, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; name$2 = $f.name$2; value$2 = $f.value$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					_r$18 = builtinJSON_reviveWalk(ctx[0], object[0], name$2); /* */ $s = 1; case 1: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					value$2 = $clone(_r$18, Value);
					/* */ if (value$2.IsUndefined()) { $s = 2; continue; }
					/* */ $s = 3; continue;
					/* if (value$2.IsUndefined()) { */ case 2:
						_r$19 = object[0].delete$(name$2, false); /* */ $s = 5; case 5: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
						_r$19;
						$s = 4; continue;
					/* } else { */ case 3:
						_r$20 = object[0].defineProperty(name$2, value$2, 73, false); /* */ $s = 6; case 6: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
						_r$20;
					/* } */ case 4:
					return true;
					/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f.name$2 = name$2; $f.value$2 = value$2; $f.$s = $s; $f.$r = $r; return $f;
				}; })(ctx, object)); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
		/* } */ case 3:
		_r$18 = ctx[0].reviver.call(ctx[0].call.runtime, toValue_object(holder), new sliceType$1([new $String(name), new value.constructor.elem(value)])); /* */ $s = 17; case 17: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		/* */ $s = 18; case 18:
		return _r$18;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinJSON_reviveWalk }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f.ctx = ctx; $f.holder = holder; $f.index = index; $f.length = length; $f.name = name; $f.name$1 = name$1; $f.object = object; $f.value = value; $f.value$1 = value$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinJSON_parseWalk = function(ctx, rawValue) {
		var $ptr, _entry, _i, _i$1, _keys, _r$13, _r$14, _r$15, _r$16, _ref, _ref$1, _ref$2, _tuple$1, _tuple$2, arrayValue, ctx, exists, exists$1, index, name, object, rawValue, rawValue$1, rawValue$2, value, value$1, value$2, value$3, value$4, value$5, value$6, value$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _keys = $f._keys; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; arrayValue = $f.arrayValue; ctx = $f.ctx; exists = $f.exists; exists$1 = $f.exists$1; index = $f.index; name = $f.name; object = $f.object; rawValue = $f.rawValue; rawValue$1 = $f.rawValue$1; rawValue$2 = $f.rawValue$2; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; value$3 = $f.value$3; value$4 = $f.value$4; value$5 = $f.value$5; value$6 = $f.value$6; value$7 = $f.value$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ctx = $clone(ctx, _builtinJSON_parseContext);
		_ref = rawValue;
		/* */ if (_ref === $ifaceNil) { $s = 1; continue; }
		/* */ if ($assertType(_ref, $Bool, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, $String, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, sliceType$1, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, mapType, true)[1]) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_ref === $ifaceNil) { */ case 1:
			value = _ref;
			return [nullValue, true];
		/* } else if ($assertType(_ref, $Bool, true)[1]) { */ case 2:
			value$1 = _ref.$val;
			return [toValue_bool(value$1), true];
		/* } else if ($assertType(_ref, $String, true)[1]) { */ case 3:
			value$2 = _ref.$val;
			return [toValue_string(value$2), true];
		/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 4:
			value$3 = _ref.$val;
			return [toValue_float64(value$3), true];
		/* } else if ($assertType(_ref, sliceType$1, true)[1]) { */ case 5:
			value$4 = _ref.$val;
			arrayValue = $makeSlice(sliceType$5, value$4.$length);
			_ref$1 = value$4;
			_i = 0;
			/* while (true) { */ case 8:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 9; continue; }
				index = _i;
				rawValue$1 = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				_r$13 = builtinJSON_parseWalk(ctx, rawValue$1); /* */ $s = 10; case 10: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_tuple$1 = _r$13;
				value$5 = $clone(_tuple$1[0], Value);
				exists = _tuple$1[1];
				/* */ if (exists) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (exists) { */ case 11:
					Value.copy(((index < 0 || index >= arrayValue.$length) ? $throwRuntimeError("index out of range") : arrayValue.$array[arrayValue.$offset + index]), value$5);
				/* } */ case 12:
				_i++;
			/* } */ $s = 8; continue; case 9:
			_r$14 = ctx.call.runtime.newArrayOf(arrayValue); /* */ $s = 13; case 13: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = toValue_object(_r$14); /* */ $s = 14; case 14: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 15; case 15:
			return [_r$15, true];
		/* } else if ($assertType(_ref, mapType, true)[1]) { */ case 6:
			value$6 = _ref.$val;
			object = ctx.call.runtime.newObject();
			_ref$2 = value$6;
			_i$1 = 0;
			_keys = $keys(_ref$2);
			/* while (true) { */ case 16:
				/* if (!(_i$1 < _keys.length)) { break; } */ if(!(_i$1 < _keys.length)) { $s = 17; continue; }
				_entry = _ref$2[_keys[_i$1]];
				if (_entry === undefined) {
					_i$1++;
					/* continue; */ $s = 16; continue;
				}
				name = _entry.k;
				rawValue$2 = _entry.v;
				_r$16 = builtinJSON_parseWalk(ctx, rawValue$2); /* */ $s = 18; case 18: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				_tuple$2 = _r$16;
				value$7 = $clone(_tuple$2[0], Value);
				exists$1 = _tuple$2[1];
				/* */ if (exists$1) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (exists$1) { */ case 19:
					$r = object.put(name, value$7, false); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 20:
				_i$1++;
			/* } */ $s = 16; continue; case 17:
			return [toValue_object(object), true];
		/* } */ case 7:
		return [new Value.ptr(0, $ifaceNil), false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinJSON_parseWalk }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._keys = _keys; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.arrayValue = arrayValue; $f.ctx = ctx; $f.exists = exists; $f.exists$1 = exists$1; $f.index = index; $f.name = name; $f.object = object; $f.rawValue = rawValue; $f.rawValue$1 = rawValue$1; $f.rawValue$2 = rawValue$2; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.value$3 = value$3; $f.value$4 = value$4; $f.value$5 = value$5; $f.value$6 = value$6; $f.value$7 = value$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinJSON_stringify = function(call) {
		var $ptr, _entry, _i, _key, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tuple$1, _tuple$2, _tuple$3, call, ctx, err, exists, exists$1, holder, index, length, name, propertyList, replacer, seen, spaceValue, value, value$1, value$2, value$3, value$4, valueJSON, valueJSON1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _key = $f._key; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; call = $f.call; ctx = $f.ctx; err = $f.err; exists = $f.exists; exists$1 = $f.exists$1; holder = $f.holder; index = $f.index; length = $f.length; name = $f.name; propertyList = $f.propertyList; replacer = $f.replacer; seen = $f.seen; spaceValue = $f.spaceValue; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; value$3 = $f.value$3; value$4 = $f.value$4; valueJSON = $f.valueJSON; valueJSON1 = $f.valueJSON1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = [value];
		valueJSON1 = [valueJSON1];
		call = $clone(call, FunctionCall);
		ctx = new _builtinJSON_stringifyContext.ptr($clone(call, FunctionCall), new sliceType$7([ptrType$4.nil]), sliceType.nil, ptrType$13.nil, "");
		replacer = call.Argument(1)._object();
		/* */ if (!(replacer === ptrType$4.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(replacer === ptrType$4.nil)) { */ case 1:
			/* */ if (isArray(replacer)) { $s = 3; continue; }
			/* */ if (replacer.class$1 === "Function") { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (isArray(replacer)) { */ case 3:
				_r$13 = objectLength(replacer); /* */ $s = 6; case 6: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				length = _r$13;
				seen = $makeMap($String.keyFor, []);
				propertyList = $makeSlice(sliceType, length);
				length = 0;
				_ref = propertyList;
				_i = 0;
				/* while (true) { */ case 7:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
					index = _i;
					_r$14 = replacer.get(arrayIndexToString(new $Int64(0, index))); /* */ $s = 9; case 9: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					value$1 = $clone(_r$14, Value);
					_ref$1 = value$1.kind;
					/* */ if (_ref$1 === 5) { $s = 10; continue; }
					/* */ if (_ref$1 === 3) { $s = 11; continue; }
					/* */ if (_ref$1 === 2) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (_ref$1 === 5) { */ case 10:
						_ref$2 = $assertType(value$1.value, ptrType$4).class$1;
						if (_ref$2 === "String") {
						} else if (_ref$2 === "Number") {
						} else {
							_i++;
							/* continue; */ $s = 7; continue;
						}
						$s = 14; continue;
					/* } else if (_ref$1 === 3) { */ case 11:
						$s = 14; continue;
					/* } else if (_ref$1 === 2) { */ case 12:
						$s = 14; continue;
					/* } else { */ case 13:
						_i++;
						/* continue; */ $s = 7; continue;
					/* } */ case 14:
					_r$15 = value$1.string(); /* */ $s = 15; case 15: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					name = _r$15;
					if ((_entry = seen[$String.keyFor(name)], _entry !== undefined ? _entry.v : false)) {
						_i++;
						/* continue; */ $s = 7; continue;
					}
					_key = name; (seen || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
					length = length + (1) >>> 0;
					((index < 0 || index >= propertyList.$length) ? $throwRuntimeError("index out of range") : propertyList.$array[propertyList.$offset + index] = name);
					_i++;
				/* } */ $s = 7; continue; case 8:
				ctx.propertyList = $subslice(propertyList, 0, length);
				$s = 5; continue;
			/* } else if (replacer.class$1 === "Function") { */ case 4:
				value[0] = $clone(toValue_object(replacer), Value);
				ctx.replacerFunction = value[0];
			/* } */ case 5:
		/* } */ case 2:
		_tuple$1 = call.getArgument(2);
		spaceValue = $clone(_tuple$1[0], Value);
		exists = _tuple$1[1];
		/* */ if (exists) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (exists) { */ case 16:
			/* */ if (spaceValue.kind === 5) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (spaceValue.kind === 5) { */ case 18:
				_ref$3 = $assertType(spaceValue.value, ptrType$4).class$1;
				/* */ if (_ref$3 === "String") { $s = 20; continue; }
				/* */ if (_ref$3 === "Number") { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (_ref$3 === "String") { */ case 20:
					_r$16 = spaceValue.string(); /* */ $s = 23; case 23: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					_r$17 = toValue_string(_r$16); /* */ $s = 24; case 24: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					Value.copy(spaceValue, _r$17);
					$s = 22; continue;
				/* } else if (_ref$3 === "Number") { */ case 21:
					_r$18 = spaceValue.numberValue(); /* */ $s = 25; case 25: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					Value.copy(spaceValue, _r$18);
				/* } */ case 22:
			/* } */ case 19:
			_ref$4 = spaceValue.kind;
			/* */ if (_ref$4 === 3) { $s = 26; continue; }
			/* */ if (_ref$4 === 2) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if (_ref$4 === 3) { */ case 26:
				_r$19 = spaceValue.string(); /* */ $s = 29; case 29: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				value$2 = _r$19;
				if (value$2.length > 10) {
					ctx.gap = value$2.substring(0, 10);
				} else {
					ctx.gap = value$2;
				}
				$s = 28; continue;
			/* } else if (_ref$4 === 2) { */ case 27:
				_r$20 = spaceValue.number(); /* */ $s = 30; case 30: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				value$3 = _r$20.int64;
				if ((value$3.$high > 0 || (value$3.$high === 0 && value$3.$low > 10))) {
					value$3 = new $Int64(0, 10);
				} else if ((value$3.$high < 0 || (value$3.$high === 0 && value$3.$low < 0))) {
					value$3 = new $Int64(0, 0);
				}
				ctx.gap = strings.Repeat(" ", ((value$3.$low + ((value$3.$high >> 31) * 4294967296)) >> 0));
			/* } */ case 28:
		/* } */ case 17:
		holder = call.runtime.newObject();
		$r = holder.put("", call.Argument(0), false); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$21 = builtinJSON_stringifyWalk(ctx, "", holder); /* */ $s = 32; case 32: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		_tuple$2 = _r$21;
		value$4 = _tuple$2[0];
		exists$1 = _tuple$2[1];
		if (!exists$1) {
			return new Value.ptr(0, $ifaceNil);
		}
		_r$22 = json.Marshal(value$4); /* */ $s = 33; case 33: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple$3 = _r$22;
		valueJSON = _tuple$3[0];
		err = _tuple$3[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 34; continue; }
		/* */ $s = 35; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 34:
			_r$23 = err.Error(); /* */ $s = 36; case 36: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_r$24 = call.runtime.panicTypeError(new sliceType$1([new $String(_r$23)])); /* */ $s = 37; case 37: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			$panic(_r$24);
		/* } */ case 35:
		/* */ if (!(ctx.gap === "")) { $s = 38; continue; }
		/* */ $s = 39; continue;
		/* if (!(ctx.gap === "")) { */ case 38:
			valueJSON1[0] = new bytes.Buffer.ptr(sliceType$4.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
			_r$25 = json.Indent(valueJSON1[0], valueJSON, "", ctx.gap); /* */ $s = 40; case 40: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			_r$25;
			valueJSON = valueJSON1[0].Bytes();
		/* } */ case 39:
		return toValue_string($bytesToString(valueJSON));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinJSON_stringify }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.call = call; $f.ctx = ctx; $f.err = err; $f.exists = exists; $f.exists$1 = exists$1; $f.holder = holder; $f.index = index; $f.length = length; $f.name = name; $f.propertyList = propertyList; $f.replacer = replacer; $f.seen = seen; $f.spaceValue = spaceValue; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.value$3 = value$3; $f.value$4 = value$4; $f.valueJSON = valueJSON; $f.valueJSON1 = valueJSON1; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinJSON_stringifyWalk = function(ctx, key, holder) {
		var $ptr, _i, _i$1, _i$2, _key, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _tuple$1, _tuple$2, array, ctx, exists, holder, holder$1, index, integer, key, length, marshaler, name, name$1, object, object$1, object$2, toJSON, value, value$1, value$2, value$3, value$4, value$5, value$6, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _key = $f._key; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; array = $f.array; ctx = $f.ctx; exists = $f.exists; holder = $f.holder; holder$1 = $f.holder$1; index = $f.index; integer = $f.integer; key = $f.key; length = $f.length; marshaler = $f.marshaler; name = $f.name; name$1 = $f.name$1; object = $f.object; object$1 = $f.object$1; object$2 = $f.object$2; toJSON = $f.toJSON; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; value$3 = $f.value$3; value$4 = $f.value$4; value$5 = $f.value$5; value$6 = $f.value$6; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		ctx = [ctx];
		holder$1 = [holder$1];
		object = [object];
		ctx[0] = $clone(ctx[0], _builtinJSON_stringifyContext);
		_r$13 = holder.get(key); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		value = $clone(_r$13, Value);
		/* */ if (value.IsObject()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (value.IsObject()) { */ case 2:
			object$1 = value._object();
			_r$14 = object$1.get("toJSON"); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			toJSON = $clone(_r$14, Value);
			/* */ if (toJSON.IsFunction()) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (toJSON.IsFunction()) { */ case 5:
				_r$15 = toJSON.call(ctx[0].call.runtime, value, new sliceType$1([new $String(key)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				Value.copy(value, _r$15);
				$s = 7; continue;
			/* } else { */ case 6:
				/* */ if (!(object$1.objectClass.marshalJSON === $throwNilPointerError)) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (!(object$1.objectClass.marshalJSON === $throwNilPointerError)) { */ case 9:
					_r$16 = object$1.objectClass.marshalJSON(object$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					marshaler = _r$16;
					if (!($interfaceIsEqual(marshaler, $ifaceNil))) {
						return [marshaler, true];
					}
				/* } */ case 10:
			/* } */ case 7:
		/* } */ case 3:
		/* */ if (!(ctx[0].replacerFunction === ptrType$13.nil)) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (!(ctx[0].replacerFunction === ptrType$13.nil)) { */ case 12:
			_r$17 = (ctx[0].replacerFunction).call(ctx[0].call.runtime, toValue_object(holder), new sliceType$1([new $String(key), new value.constructor.elem(value)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			Value.copy(value, _r$17);
		/* } */ case 13:
		/* */ if (value.kind === 5) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (value.kind === 5) { */ case 15:
			_ref = $assertType(value.value, ptrType$4).class$1;
			/* */ if (_ref === "Boolean") { $s = 17; continue; }
			/* */ if (_ref === "String") { $s = 18; continue; }
			/* */ if (_ref === "Number") { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (_ref === "Boolean") { */ case 17:
				Value.copy(value, $assertType(value._object().value, Value));
				$s = 20; continue;
			/* } else if (_ref === "String") { */ case 18:
				_r$18 = value.string(); /* */ $s = 21; case 21: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				_r$19 = toValue_string(_r$18); /* */ $s = 22; case 22: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				Value.copy(value, _r$19);
				$s = 20; continue;
			/* } else if (_ref === "Number") { */ case 19:
				_r$20 = value.numberValue(); /* */ $s = 23; case 23: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				Value.copy(value, _r$20);
			/* } */ case 20:
		/* } */ case 16:
		_ref$1 = value.kind;
		/* */ if (_ref$1 === 4) { $s = 24; continue; }
		/* */ if (_ref$1 === 3) { $s = 25; continue; }
		/* */ if (_ref$1 === 2) { $s = 26; continue; }
		/* */ if (_ref$1 === 1) { $s = 27; continue; }
		/* */ if (_ref$1 === 5) { $s = 28; continue; }
		/* */ $s = 29; continue;
		/* if (_ref$1 === 4) { */ case 24:
			_r$21 = value.bool(); /* */ $s = 30; case 30: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			/* */ $s = 31; case 31:
			return [new $Bool(_r$21), true];
		/* } else if (_ref$1 === 3) { */ case 25:
			_r$22 = value.string(); /* */ $s = 32; case 32: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			/* */ $s = 33; case 33:
			return [new $String(_r$22), true];
		/* } else if (_ref$1 === 2) { */ case 26:
			_r$23 = value.number(); /* */ $s = 34; case 34: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			integer = $clone(_r$23, _number);
			_ref$2 = integer.kind;
			if (_ref$2 === 0) {
				return [integer.int64, true];
			} else if (_ref$2 === 1) {
				return [new $Float64(integer.float64), true];
			} else {
				return [$ifaceNil, true];
			}
			$s = 29; continue;
		/* } else if (_ref$1 === 1) { */ case 27:
			return [$ifaceNil, true];
		/* } else if (_ref$1 === 5) { */ case 28:
			holder$1[0] = value._object();
			value$1 = value._object();
			/* */ if (!(ptrType$4.nil === value$1)) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if (!(ptrType$4.nil === value$1)) { */ case 35:
				_ref$3 = ctx[0].stack;
				_i = 0;
				/* while (true) { */ case 37:
					/* if (!(_i < _ref$3.$length)) { break; } */ if(!(_i < _ref$3.$length)) { $s = 38; continue; }
					object$2 = ((_i < 0 || _i >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i]);
					/* */ if (holder$1[0] === object$2) { $s = 39; continue; }
					/* */ $s = 40; continue;
					/* if (holder$1[0] === object$2) { */ case 39:
						_r$24 = ctx[0].call.runtime.panicTypeError(new sliceType$1([new $String("Converting circular structure to JSON")])); /* */ $s = 41; case 41: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
						$panic(_r$24);
					/* } */ case 40:
					_i++;
				/* } */ $s = 37; continue; case 38:
				ctx[0].stack = $append(ctx[0].stack, value$1);
				$deferred.push([(function(ctx, holder$1, object) { return function() {
					var $ptr;
					ctx[0].stack = $subslice(ctx[0].stack, 0, (ctx[0].stack.$length - 1 >> 0));
				}; })(ctx, holder$1, object), []]);
			/* } */ case 36:
			/* */ if (isArray(holder$1[0])) { $s = 42; continue; }
			/* */ if (!(holder$1[0].class$1 === "Function")) { $s = 43; continue; }
			/* */ $s = 44; continue;
			/* if (isArray(holder$1[0])) { */ case 42:
				length = 0;
				_r$25 = holder$1[0].get("length"); /* */ $s = 45; case 45: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				_ref$4 = _r$25.value;
				/* */ if ($assertType(_ref$4, $Uint32, true)[1]) { $s = 46; continue; }
				/* */ if ($assertType(_ref$4, $Int, true)[1]) { $s = 47; continue; }
				/* */ $s = 48; continue;
				/* if ($assertType(_ref$4, $Uint32, true)[1]) { */ case 46:
					value$2 = _ref$4.$val;
					length = value$2;
					$s = 49; continue;
				/* } else if ($assertType(_ref$4, $Int, true)[1]) { */ case 47:
					value$3 = _ref$4.$val;
					if (value$3 >= 0) {
						length = (value$3 >>> 0);
					}
					$s = 49; continue;
				/* } else { */ case 48:
					value$4 = _ref$4;
					_r$26 = fmt.Sprintf("JSON.stringify: invalid length: %v (%[1]T)", new sliceType$1([value$4])); /* */ $s = 50; case 50: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
					_r$27 = ctx[0].call.runtime.panicTypeError(new sliceType$1([new $String(_r$26)])); /* */ $s = 51; case 51: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					$panic(_r$27);
				/* } */ case 49:
				array = $makeSlice(sliceType$1, length);
				_ref$5 = array;
				_i$1 = 0;
				/* while (true) { */ case 52:
					/* if (!(_i$1 < _ref$5.$length)) { break; } */ if(!(_i$1 < _ref$5.$length)) { $s = 53; continue; }
					index = _i$1;
					name = arrayIndexToString(new $Int64(0, index));
					_r$28 = builtinJSON_stringifyWalk(ctx[0], name, holder$1[0]); /* */ $s = 54; case 54: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
					_tuple$1 = _r$28;
					value$5 = _tuple$1[0];
					((index < 0 || index >= array.$length) ? $throwRuntimeError("index out of range") : array.$array[array.$offset + index] = value$5);
					_i$1++;
				/* } */ $s = 52; continue; case 53:
				return [array, true];
			/* } else if (!(holder$1[0].class$1 === "Function")) { */ case 43:
				object[0] = $makeMap($String.keyFor, []);
				/* */ if (!(ctx[0].propertyList === sliceType.nil)) { $s = 55; continue; }
				/* */ $s = 56; continue;
				/* if (!(ctx[0].propertyList === sliceType.nil)) { */ case 55:
					_ref$6 = ctx[0].propertyList;
					_i$2 = 0;
					/* while (true) { */ case 58:
						/* if (!(_i$2 < _ref$6.$length)) { break; } */ if(!(_i$2 < _ref$6.$length)) { $s = 59; continue; }
						name$1 = ((_i$2 < 0 || _i$2 >= _ref$6.$length) ? $throwRuntimeError("index out of range") : _ref$6.$array[_ref$6.$offset + _i$2]);
						_r$29 = builtinJSON_stringifyWalk(ctx[0], name$1, holder$1[0]); /* */ $s = 60; case 60: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
						_tuple$2 = _r$29;
						value$6 = _tuple$2[0];
						exists = _tuple$2[1];
						if (exists) {
							_key = name$1; (object[0] || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: value$6 };
						}
						_i$2++;
					/* } */ $s = 58; continue; case 59:
					$s = 57; continue;
				/* } else { */ case 56:
					$r = holder$1[0].enumerate(false, (function(ctx, holder$1, object) { return function $b(name$2) {
						var $ptr, _key$1, _r$30, _tuple$3, exists$1, name$2, value$7, $s, $r;
						/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key$1 = $f._key$1; _r$30 = $f._r$30; _tuple$3 = $f._tuple$3; exists$1 = $f.exists$1; name$2 = $f.name$2; value$7 = $f.value$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
						_r$30 = builtinJSON_stringifyWalk(ctx[0], name$2, holder$1[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
						_tuple$3 = _r$30;
						value$7 = _tuple$3[0];
						exists$1 = _tuple$3[1];
						if (exists$1) {
							_key$1 = name$2; (object[0] || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: value$7 };
						}
						return true;
						/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._key$1 = _key$1; $f._r$30 = _r$30; $f._tuple$3 = _tuple$3; $f.exists$1 = exists$1; $f.name$2 = name$2; $f.value$7 = value$7; $f.$s = $s; $f.$r = $r; return $f;
					}; })(ctx, holder$1, object)); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 57:
				return [new mapType(object[0]), true];
			/* } */ case 44:
		/* } */ case 29:
		return [$ifaceNil, false];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [$ifaceNil, false]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: builtinJSON_stringifyWalk }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._key = _key; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.array = array; $f.ctx = ctx; $f.exists = exists; $f.holder = holder; $f.holder$1 = holder$1; $f.index = index; $f.integer = integer; $f.key = key; $f.length = length; $f.marshaler = marshaler; $f.name = name; $f.name$1 = name$1; $f.object = object; $f.object$1 = object$1; $f.object$2 = object$2; $f.toJSON = toJSON; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.value$3 = value$3; $f.value$4 = value$4; $f.value$5 = value$5; $f.value$6 = value$6; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	builtinMath_abs = function(call) {
		var $ptr, _r$13, call, number, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; number = $f.number; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		number = _r$13;
		return toValue_float64(math.Abs(number));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinMath_abs }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.number = number; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinMath_acos = function(call) {
		var $ptr, _r$13, call, number, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; number = $f.number; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		number = _r$13;
		return toValue_float64(math.Acos(number));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinMath_acos }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.number = number; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinMath_asin = function(call) {
		var $ptr, _r$13, call, number, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; number = $f.number; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		number = _r$13;
		return toValue_float64(math.Asin(number));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinMath_asin }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.number = number; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinMath_atan = function(call) {
		var $ptr, _r$13, call, number, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; number = $f.number; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		number = _r$13;
		return toValue_float64(math.Atan(number));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinMath_atan }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.number = number; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinMath_atan2 = function(call) {
		var $ptr, _r$13, _r$14, call, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		y = _r$13;
		if (math.IsNaN(y)) {
			return NaNValue();
		}
		_r$14 = call.Argument(1).float64(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		x = _r$14;
		if (math.IsNaN(x)) {
			return NaNValue();
		}
		return toValue_float64(math.Atan2(y, x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinMath_atan2 }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinMath_cos = function(call) {
		var $ptr, _r$13, call, number, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; number = $f.number; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		number = _r$13;
		return toValue_float64(math.Cos(number));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinMath_cos }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.number = number; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinMath_ceil = function(call) {
		var $ptr, _r$13, call, number, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; number = $f.number; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		number = _r$13;
		return toValue_float64(math.Ceil(number));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinMath_ceil }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.number = number; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinMath_exp = function(call) {
		var $ptr, _r$13, call, number, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; number = $f.number; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		number = _r$13;
		return toValue_float64(math.Exp(number));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinMath_exp }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.number = number; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinMath_floor = function(call) {
		var $ptr, _r$13, call, number, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; number = $f.number; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		number = _r$13;
		return toValue_float64(math.Floor(number));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinMath_floor }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.number = number; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinMath_log = function(call) {
		var $ptr, _r$13, call, number, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; number = $f.number; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		number = _r$13;
		return toValue_float64(math.Log(number));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinMath_log }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.number = number; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinMath_max = function(call) {
		var $ptr, _i, _r$13, _r$14, _r$15, _r$16, _ref, _ref$1, call, result, value, value$1, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _ref = $f._ref; _ref$1 = $f._ref$1; call = $f.call; result = $f.result; value = $f.value; value$1 = $f.value$1; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_ref = call.ArgumentList.$length;
		/* */ if (_ref === 0) { $s = 1; continue; }
		/* */ if (_ref === 1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_ref === 0) { */ case 1:
			return negativeInfinityValue();
		/* } else if (_ref === 1) { */ case 2:
			_r$13 = (x = call.ArgumentList, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).float64(); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = toValue_float64(_r$13); /* */ $s = 5; case 5: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 6; case 6:
			return _r$14;
		/* } */ case 3:
		_r$15 = (x$1 = call.ArgumentList, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])).float64(); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		result = _r$15;
		if (math.IsNaN(result)) {
			return NaNValue();
		}
		_ref$1 = $subslice(call.ArgumentList, 1);
		_i = 0;
		/* while (true) { */ case 8:
			/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 9; continue; }
			value = $clone(((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]), Value);
			_r$16 = value.float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			value$1 = _r$16;
			if (math.IsNaN(value$1)) {
				return NaNValue();
			}
			result = math.Max(result, value$1);
			_i++;
		/* } */ $s = 8; continue; case 9:
		return toValue_float64(result);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinMath_max }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._ref = _ref; $f._ref$1 = _ref$1; $f.call = call; $f.result = result; $f.value = value; $f.value$1 = value$1; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinMath_min = function(call) {
		var $ptr, _i, _r$13, _r$14, _r$15, _r$16, _ref, _ref$1, call, result, value, value$1, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _ref = $f._ref; _ref$1 = $f._ref$1; call = $f.call; result = $f.result; value = $f.value; value$1 = $f.value$1; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_ref = call.ArgumentList.$length;
		/* */ if (_ref === 0) { $s = 1; continue; }
		/* */ if (_ref === 1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_ref === 0) { */ case 1:
			return positiveInfinityValue();
		/* } else if (_ref === 1) { */ case 2:
			_r$13 = (x = call.ArgumentList, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).float64(); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = toValue_float64(_r$13); /* */ $s = 5; case 5: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 6; case 6:
			return _r$14;
		/* } */ case 3:
		_r$15 = (x$1 = call.ArgumentList, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])).float64(); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		result = _r$15;
		if (math.IsNaN(result)) {
			return NaNValue();
		}
		_ref$1 = $subslice(call.ArgumentList, 1);
		_i = 0;
		/* while (true) { */ case 8:
			/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 9; continue; }
			value = $clone(((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]), Value);
			_r$16 = value.float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			value$1 = _r$16;
			if (math.IsNaN(value$1)) {
				return NaNValue();
			}
			result = math.Min(result, value$1);
			_i++;
		/* } */ $s = 8; continue; case 9:
		return toValue_float64(result);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinMath_min }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._ref = _ref; $f._ref$1 = _ref$1; $f.call = call; $f.result = result; $f.value = value; $f.value$1 = value$1; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinMath_pow = function(call) {
		var $ptr, _r$13, _r$14, call, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		x = _r$13;
		_r$14 = call.Argument(1).float64(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		y = _r$14;
		if ((math.Abs(x) === 1) && math.IsInf(y, 0)) {
			return NaNValue();
		}
		return toValue_float64(math.Pow(x, y));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinMath_pow }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinMath_random = function(call) {
		var $ptr, _r$13, _r$14, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = rand.Float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_float64(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinMath_random }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinMath_round = function(call) {
		var $ptr, _r$13, call, number, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; number = $f.number; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		number = _r$13;
		value = math.Floor(number + 0.5);
		if (value === 0) {
			value = math.Copysign(0, number);
		}
		return toValue_float64(value);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinMath_round }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.number = number; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinMath_sin = function(call) {
		var $ptr, _r$13, call, number, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; number = $f.number; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		number = _r$13;
		return toValue_float64(math.Sin(number));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinMath_sin }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.number = number; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinMath_sqrt = function(call) {
		var $ptr, _r$13, call, number, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; number = $f.number; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		number = _r$13;
		return toValue_float64(math.Sqrt(number));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinMath_sqrt }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.number = number; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinMath_tan = function(call) {
		var $ptr, _r$13, call, number, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; number = $f.number; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		number = _r$13;
		return toValue_float64(math.Tan(number));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinMath_tan }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.number = number; $f.$s = $s; $f.$r = $r; return $f;
	};
	numberValueFromNumberArgumentList = function(argumentList) {
		var $ptr, _r$13, argumentList, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; argumentList = $f.argumentList; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (argumentList.$length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argumentList.$length > 0) { */ case 1:
			_r$13 = (0 >= argumentList.$length ? $throwRuntimeError("index out of range") : argumentList.$array[argumentList.$offset + 0]).numberValue(); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r$13;
		/* } */ case 2:
		return toValue_int(0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: numberValueFromNumberArgumentList }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.argumentList = argumentList; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNumber = function(call) {
		var $ptr, _r$13, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = numberValueFromNumberArgumentList(call.ArgumentList); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNumber }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNewNumber = function(self, argumentList) {
		var $ptr, _r$13, _r$14, _r$15, argumentList, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; argumentList = $f.argumentList; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = numberValueFromNumberArgumentList(argumentList); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = self.runtime.newNumber(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toValue_object(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ $s = 4; case 4:
		return _r$15;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNewNumber }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.argumentList = argumentList; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNumber_toString = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, call, integer, radix, radixArgument, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; call = $f.call; integer = $f.integer; radix = $f.radix; radixArgument = $f.radixArgument; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisClassObject("Number"); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = _r$13.primitiveValue(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		value = $clone(_r$14, Value);
		radix = 10;
		radixArgument = $clone(call.Argument(0), Value);
		/* */ if (radixArgument.IsDefined()) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (radixArgument.IsDefined()) { */ case 3:
			_r$15 = toIntegerFloat(radixArgument); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			integer = _r$15;
			/* */ if (integer < 2 || integer > 36) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (integer < 2 || integer > 36) { */ case 6:
				_r$16 = call.runtime.panicRangeError(new sliceType$1([new $String("RangeError: toString() radix must be between 2 and 36")])); /* */ $s = 8; case 8: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				$panic(_r$16);
			/* } */ case 7:
			radix = (integer >> 0);
		/* } */ case 4:
		/* */ if (radix === 10) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (radix === 10) { */ case 9:
			_r$17 = value.string(); /* */ $s = 11; case 11: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_r$18 = toValue_string(_r$17); /* */ $s = 12; case 12: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			/* */ $s = 13; case 13:
			return _r$18;
		/* } */ case 10:
		_r$19 = numberToStringRadix(value, radix); /* */ $s = 14; case 14: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		_r$20 = toValue_string(_r$19); /* */ $s = 15; case 15: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		/* */ $s = 16; case 16:
		return _r$20;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNumber_toString }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f.call = call; $f.integer = integer; $f.radix = radix; $f.radixArgument = radixArgument; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNumber_valueOf = function(call) {
		var $ptr, _r$13, _r$14, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisClassObject("Number"); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = _r$13.primitiveValue(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNumber_valueOf }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNumber_toFixed = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, call, precision, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; call = $f.call; precision = $f.precision; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = toIntegerFloat(call.Argument(0)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		precision = _r$13;
		/* */ if (20 < precision || 0 > precision) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (20 < precision || 0 > precision) { */ case 2:
			_r$14 = call.runtime.panicRangeError(new sliceType$1([new $String("toFixed() precision must be between 0 and 20")])); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			$panic(_r$14);
		/* } */ case 3:
		_r$15 = call.This.IsNaN(); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ if (_r$15) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$15) { */ case 5:
			return toValue_string("NaN");
		/* } */ case 6:
		_r$16 = call.This.float64(); /* */ $s = 8; case 8: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		value = _r$16;
		/* */ if (math.Abs(value) >= 1e+21) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (math.Abs(value) >= 1e+21) { */ case 9:
			_r$17 = floatToString(value, 64); /* */ $s = 11; case 11: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_r$18 = toValue_string(_r$17); /* */ $s = 12; case 12: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			/* */ $s = 13; case 13:
			return _r$18;
		/* } */ case 10:
		_r$19 = call.This.float64(); /* */ $s = 14; case 14: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		_r$20 = strconv.FormatFloat(_r$19, 102, (precision >> 0), 64); /* */ $s = 15; case 15: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		_r$21 = toValue_string(_r$20); /* */ $s = 16; case 16: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		/* */ $s = 17; case 17:
		return _r$21;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNumber_toFixed }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f.call = call; $f.precision = precision; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNumber_toExponential = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, call, precision, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; call = $f.call; precision = $f.precision; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.This.IsNaN(); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ if (_r$13) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$13) { */ case 1:
			return toValue_string("NaN");
		/* } */ case 2:
		precision = -1;
		value = $clone(call.Argument(0), Value);
		/* */ if (value.IsDefined()) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (value.IsDefined()) { */ case 4:
			_r$14 = toIntegerFloat(value); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			precision = _r$14;
			/* */ if (0 > precision) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (0 > precision) { */ case 7:
				_r$15 = call.runtime.panicRangeError(new sliceType$1([new $String("RangeError: toString() radix must be between 2 and 36")])); /* */ $s = 9; case 9: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				$panic(_r$15);
			/* } */ case 8:
		/* } */ case 5:
		_r$16 = call.This.float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$17 = strconv.FormatFloat(_r$16, 101, (precision >> 0), 64); /* */ $s = 11; case 11: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_r$18 = toValue_string(_r$17); /* */ $s = 12; case 12: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		/* */ $s = 13; case 13:
		return _r$18;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNumber_toExponential }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f.call = call; $f.precision = precision; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNumber_toPrecision = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, call, precision, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; call = $f.call; precision = $f.precision; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.This.IsNaN(); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ if (_r$13) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$13) { */ case 1:
			return toValue_string("NaN");
		/* } */ case 2:
		value = $clone(call.Argument(0), Value);
		/* */ if (value.IsUndefined()) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (value.IsUndefined()) { */ case 4:
			_r$14 = call.This.string(); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = toValue_string(_r$14); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 8; case 8:
			return _r$15;
		/* } */ case 5:
		_r$16 = toIntegerFloat(value); /* */ $s = 9; case 9: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		precision = _r$16;
		/* */ if (1 > precision) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (1 > precision) { */ case 10:
			_r$17 = call.runtime.panicRangeError(new sliceType$1([new $String("RangeError: toPrecision() precision must be greater than 1")])); /* */ $s = 12; case 12: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			$panic(_r$17);
		/* } */ case 11:
		_r$18 = call.This.float64(); /* */ $s = 13; case 13: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		_r$19 = strconv.FormatFloat(_r$18, 103, (precision >> 0), 64); /* */ $s = 14; case 14: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		_r$20 = toValue_string(_r$19); /* */ $s = 15; case 15: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		/* */ $s = 16; case 16:
		return _r$20;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNumber_toPrecision }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f.call = call; $f.precision = precision; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNumber_toLocaleString = function(call) {
		var $ptr, _r$13, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = builtinNumber_toString(call); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNumber_toLocaleString }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject = function(call) {
		var $ptr, _r$13, _r$14, _ref, call, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; call = $f.call; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		value = $clone(call.Argument(0), Value);
		_ref = value.kind;
		if (_ref === 0 || _ref === 1) {
			return toValue_object(call.runtime.newObject());
		}
		_r$13 = call.runtime.toObject(value); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinObject }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f.call = call; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNewObject = function(self, argumentList) {
		var $ptr, _r$13, _r$14, _ref, argumentList, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; argumentList = $f.argumentList; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(valueOfArrayIndex(argumentList, 0), Value);
		_ref = value.kind;
		/* */ if (_ref === 1 || _ref === 0) { $s = 1; continue; }
		/* */ if (_ref === 2 || _ref === 3 || _ref === 4) { $s = 2; continue; }
		/* */ if (_ref === 5) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 1 || _ref === 0) { */ case 1:
			$s = 5; continue;
		/* } else if (_ref === 2 || _ref === 3 || _ref === 4) { */ case 2:
			_r$13 = self.runtime.toObject(value); /* */ $s = 6; case 6: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = toValue_object(_r$13); /* */ $s = 7; case 7: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 8; case 8:
			return _r$14;
		/* } else if (_ref === 5) { */ case 3:
			return value;
		/* } else { */ case 4:
		/* } */ case 5:
		return toValue_object(self.runtime.newObject());
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNewObject }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f.argumentList = argumentList; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_valueOf = function(call) {
		var $ptr, _r$13, _r$14, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinObject_valueOf }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_hasOwnProperty = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, call, propertyName, thisObject, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; propertyName = $f.propertyName; thisObject = $f.thisObject; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		propertyName = _r$13;
		_r$14 = call.thisObject(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		thisObject = _r$14;
		_r$15 = thisObject.hasOwnProperty(propertyName); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_bool(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinObject_hasOwnProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.propertyName = propertyName; $f.thisObject = thisObject; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_isPrototypeOf = function(call) {
		var $ptr, _r$13, _r$14, call, prototype, thisObject, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; prototype = $f.prototype; thisObject = $f.thisObject; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		value = $clone(call.Argument(0), Value);
		if (!value.IsObject()) {
			return falseValue;
		}
		_r$13 = call.toObject(value); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		prototype = _r$13.prototype;
		_r$14 = call.thisObject(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		thisObject = _r$14;
		while (true) {
			if (!(!(prototype === ptrType$4.nil))) { break; }
			if (thisObject === prototype) {
				return trueValue;
			}
			prototype = prototype.prototype;
		}
		return falseValue;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinObject_isPrototypeOf }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.prototype = prototype; $f.thisObject = thisObject; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_propertyIsEnumerable = function(call) {
		var $ptr, _r$13, _r$14, _r$15, call, property, propertyName, thisObject, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; call = $f.call; property = $f.property; propertyName = $f.propertyName; thisObject = $f.thisObject; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.Argument(0).string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		propertyName = _r$13;
		_r$14 = call.thisObject(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		thisObject = _r$14;
		_r$15 = thisObject.getOwnProperty(propertyName); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		property = _r$15;
		if (!(property === ptrType$14.nil) && property.enumerable()) {
			return trueValue;
		}
		return falseValue;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinObject_propertyIsEnumerable }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.call = call; $f.property = property; $f.propertyName = propertyName; $f.thisObject = thisObject; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_toString = function(call) {
		var $ptr, _arg, _r$13, _r$14, call, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		result = "";
		/* */ if (call.This.IsUndefined()) { $s = 1; continue; }
		/* */ if (call.This.IsNull()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (call.This.IsUndefined()) { */ case 1:
			result = "[object Undefined]";
			$s = 4; continue;
		/* } else if (call.This.IsNull()) { */ case 2:
			result = "[object Null]";
			$s = 4; continue;
		/* } else { */ case 3:
			_r$13 = call.thisObject(); /* */ $s = 5; case 5: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_arg = new $String(_r$13.class$1);
			_r$14 = fmt.Sprintf("[object %s]", new sliceType$1([_arg])); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			result = _r$14;
		/* } */ case 4:
		return toValue_string(result);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinObject_toString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_toLocaleString = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, call, toString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; toString = $f.toString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = _r$13.get("toString"); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		toString = $clone(_r$14, Value);
		/* */ if (!toString.isCallable()) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!toString.isCallable()) { */ case 3:
			_r$15 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			$panic(_r$15);
		/* } */ case 4:
		_r$16 = toString.call(call.runtime, call.This, new sliceType$1([])); /* */ $s = 6; case 6: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 7; case 7:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinObject_toLocaleString }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.toString = toString; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_getPrototypeOf = function(call) {
		var $ptr, _r$13, call, object, objectValue, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; object = $f.object; objectValue = $f.objectValue; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		objectValue = $clone(call.Argument(0), Value);
		object = objectValue._object();
		/* */ if (object === ptrType$4.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (object === ptrType$4.nil) { */ case 1:
			_r$13 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 2:
		if (object.prototype === ptrType$4.nil) {
			return nullValue;
		}
		return toValue_object(object.prototype);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinObject_getPrototypeOf }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.object = object; $f.objectValue = objectValue; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_getOwnPropertyDescriptor = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, call, descriptor, name, object, objectValue, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; call = $f.call; descriptor = $f.descriptor; name = $f.name; object = $f.object; objectValue = $f.objectValue; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		objectValue = $clone(call.Argument(0), Value);
		object = objectValue._object();
		/* */ if (object === ptrType$4.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (object === ptrType$4.nil) { */ case 1:
			_r$13 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 2:
		_r$14 = call.Argument(1).string(); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		name = _r$14;
		_r$15 = object.getOwnProperty(name); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		descriptor = _r$15;
		if (descriptor === ptrType$14.nil) {
			return new Value.ptr(0, $ifaceNil);
		}
		_r$16 = call.runtime.fromPropertyDescriptor(descriptor); /* */ $s = 6; case 6: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$17 = toValue_object(_r$16); /* */ $s = 7; case 7: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		/* */ $s = 8; case 8:
		return _r$17;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinObject_getOwnPropertyDescriptor }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f.call = call; $f.descriptor = descriptor; $f.name = name; $f.object = object; $f.objectValue = objectValue; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_defineProperty = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, call, descriptor, name, object, objectValue, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; call = $f.call; descriptor = $f.descriptor; name = $f.name; object = $f.object; objectValue = $f.objectValue; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		objectValue = $clone(call.Argument(0), Value);
		object = objectValue._object();
		/* */ if (object === ptrType$4.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (object === ptrType$4.nil) { */ case 1:
			_r$13 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 2:
		_r$14 = call.Argument(1).string(); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		name = _r$14;
		_r$15 = toPropertyDescriptor(call.runtime, call.Argument(2)); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		descriptor = $clone(_r$15, _property);
		_r$16 = object.defineOwnProperty(name, descriptor, true); /* */ $s = 6; case 6: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$16;
		return objectValue;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinObject_defineProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.call = call; $f.descriptor = descriptor; $f.name = name; $f.object = object; $f.objectValue = objectValue; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_defineProperties = function(call) {
		var $ptr, _r$13, _r$14, call, object, objectValue, properties, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; object = $f.object; objectValue = $f.objectValue; properties = $f.properties; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = [call];
		object = [object];
		properties = [properties];
		call[0] = $clone(call[0], FunctionCall);
		objectValue = $clone(call[0].Argument(0), Value);
		object[0] = objectValue._object();
		/* */ if (object[0] === ptrType$4.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (object[0] === ptrType$4.nil) { */ case 1:
			_r$13 = call[0].runtime.panicTypeError(new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 2:
		_r$14 = call[0].runtime.toObject(call[0].Argument(1)); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		properties[0] = _r$14;
		$r = properties[0].enumerate(false, (function(call, object, properties) { return function $b(name) {
			var $ptr, _arg, _arg$1, _r$15, _r$16, _r$17, descriptor, name, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; descriptor = $f.descriptor; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_arg = call[0].runtime;
			_r$15 = properties[0].get(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_arg$1 = _r$15;
			_r$16 = toPropertyDescriptor(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			descriptor = $clone(_r$16, _property);
			_r$17 = object[0].defineOwnProperty(name, descriptor, true); /* */ $s = 3; case 3: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_r$17;
			return true;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f.descriptor = descriptor; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
		}; })(call, object, properties)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return objectValue;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinObject_defineProperties }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.object = object; $f.objectValue = objectValue; $f.properties = properties; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_create = function(call) {
		var $ptr, _r$13, _r$14, call, object, properties, propertiesValue, prototypeValue, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; object = $f.object; properties = $f.properties; propertiesValue = $f.propertiesValue; prototypeValue = $f.prototypeValue; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = [call];
		object = [object];
		properties = [properties];
		call[0] = $clone(call[0], FunctionCall);
		prototypeValue = $clone(call[0].Argument(0), Value);
		/* */ if (!prototypeValue.IsNull() && !prototypeValue.IsObject()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!prototypeValue.IsNull() && !prototypeValue.IsObject()) { */ case 1:
			_r$13 = call[0].runtime.panicTypeError(new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 2:
		object[0] = call[0].runtime.newObject();
		object[0].prototype = prototypeValue._object();
		propertiesValue = $clone(call[0].Argument(1), Value);
		/* */ if (propertiesValue.IsDefined()) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (propertiesValue.IsDefined()) { */ case 4:
			_r$14 = call[0].runtime.toObject(propertiesValue); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			properties[0] = _r$14;
			$r = properties[0].enumerate(false, (function(call, object, properties) { return function $b(name) {
				var $ptr, _arg, _arg$1, _r$15, _r$16, _r$17, descriptor, name, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; descriptor = $f.descriptor; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_arg = call[0].runtime;
				_r$15 = properties[0].get(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_arg$1 = _r$15;
				_r$16 = toPropertyDescriptor(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				descriptor = $clone(_r$16, _property);
				_r$17 = object[0].defineOwnProperty(name, descriptor, true); /* */ $s = 3; case 3: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$17;
				return true;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f.descriptor = descriptor; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
			}; })(call, object, properties)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		return toValue_object(object[0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinObject_create }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.object = object; $f.properties = properties; $f.propertiesValue = propertiesValue; $f.prototypeValue = prototypeValue; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_isExtensible = function(call) {
		var $ptr, _r$13, call, object, object$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; object = $f.object; object$1 = $f.object$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		object = $clone(call.Argument(0), Value);
		object$1 = object._object();
		if (!(object$1 === ptrType$4.nil)) {
			return toValue_bool(object$1.extensible);
		}
		_r$13 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		$panic(_r$13);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: builtinObject_isExtensible }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.object = object; $f.object$1 = object$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_preventExtensions = function(call) {
		var $ptr, _r$13, call, object, object$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; object = $f.object; object$1 = $f.object$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		object = $clone(call.Argument(0), Value);
		object$1 = object._object();
		/* */ if (!(object$1 === ptrType$4.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(object$1 === ptrType$4.nil)) { */ case 1:
			object$1.extensible = false;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$13 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 3:
		return object;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinObject_preventExtensions }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.object = object; $f.object$1 = object$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_isSealed = function(call) {
		var $ptr, _r$13, call, object, object$1, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; object = $f.object; object$1 = $f.object$1; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		object = [object];
		result = [result];
		call = $clone(call, FunctionCall);
		object$1 = $clone(call.Argument(0), Value);
		object[0] = object$1._object();
		/* */ if (!(object[0] === ptrType$4.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(object[0] === ptrType$4.nil)) { */ case 1:
			if (object[0].extensible) {
				return toValue_bool(false);
			}
			result[0] = true;
			$r = object[0].enumerate(true, (function(object, result) { return function $b(name) {
				var $ptr, _r$13, name, property, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; name = $f.name; property = $f.property; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r$13 = object[0].getProperty(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				property = _r$13;
				if (property.configurable()) {
					result[0] = false;
				}
				return true;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.name = name; $f.property = property; $f.$s = $s; $f.$r = $r; return $f;
			}; })(object, result)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return toValue_bool(result[0]);
		/* } */ case 2:
		_r$13 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		$panic(_r$13);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: builtinObject_isSealed }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.object = object; $f.object$1 = object$1; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_seal = function(call) {
		var $ptr, _r$13, call, object, object$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; object = $f.object; object$1 = $f.object$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		object = [object];
		call = $clone(call, FunctionCall);
		object$1 = $clone(call.Argument(0), Value);
		object[0] = object$1._object();
		/* */ if (!(object[0] === ptrType$4.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(object[0] === ptrType$4.nil)) { */ case 1:
			$r = object[0].enumerate(true, (function(object) { return function $b(name) {
				var $ptr, _r$13, _r$14, name, property, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; name = $f.name; property = $f.property; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r$13 = object[0].getOwnProperty(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				property = _r$13;
				/* */ if (!(ptrType$14.nil === property) && property.configurable()) { $s = 2; continue; }
				/* */ $s = 3; continue;
				/* if (!(ptrType$14.nil === property) && property.configurable()) { */ case 2:
					property.configureOff();
					_r$14 = object[0].defineOwnProperty(name, property, true); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_r$14;
				/* } */ case 3:
				return true;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.name = name; $f.property = property; $f.$s = $s; $f.$r = $r; return $f;
			}; })(object)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			object[0].extensible = false;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$13 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 5; case 5: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 3:
		return object$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinObject_seal }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.object = object; $f.object$1 = object$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_isFrozen = function(call) {
		var $ptr, _r$13, call, object, object$1, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; object = $f.object; object$1 = $f.object$1; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		object = [object];
		result = [result];
		call = $clone(call, FunctionCall);
		object$1 = $clone(call.Argument(0), Value);
		object[0] = object$1._object();
		/* */ if (!(object[0] === ptrType$4.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(object[0] === ptrType$4.nil)) { */ case 1:
			if (object[0].extensible) {
				return toValue_bool(false);
			}
			result[0] = true;
			$r = object[0].enumerate(true, (function(object, result) { return function $b(name) {
				var $ptr, _r$13, name, property, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; name = $f.name; property = $f.property; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r$13 = object[0].getProperty(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				property = _r$13;
				if (property.configurable() || property.writable()) {
					result[0] = false;
				}
				return true;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.name = name; $f.property = property; $f.$s = $s; $f.$r = $r; return $f;
			}; })(object, result)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return toValue_bool(result[0]);
		/* } */ case 2:
		_r$13 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		$panic(_r$13);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: builtinObject_isFrozen }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.object = object; $f.object$1 = object$1; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_freeze = function(call) {
		var $ptr, _r$13, call, object, object$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; object = $f.object; object$1 = $f.object$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		object = [object];
		call = $clone(call, FunctionCall);
		object$1 = $clone(call.Argument(0), Value);
		object[0] = object$1._object();
		/* */ if (!(object[0] === ptrType$4.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(object[0] === ptrType$4.nil)) { */ case 1:
			$r = object[0].enumerate(true, (function(object) { return function $b(name) {
				var $ptr, _r$13, _r$14, _tmp, _tmp$1, name, property, update, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; name = $f.name; property = $f.property; update = $f.update; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r$13 = object[0].getOwnProperty(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_tmp = _r$13;
				_tmp$1 = false;
				property = _tmp;
				update = _tmp$1;
				/* */ if (!(ptrType$14.nil === property)) { $s = 2; continue; }
				/* */ $s = 3; continue;
				/* if (!(ptrType$14.nil === property)) { */ case 2:
					if (property.isDataDescriptor() && property.writable()) {
						property.writeOff();
						update = true;
					}
					if (property.configurable()) {
						property.configureOff();
						update = true;
					}
					/* */ if (update) { $s = 4; continue; }
					/* */ $s = 5; continue;
					/* if (update) { */ case 4:
						_r$14 = object[0].defineOwnProperty(name, property, true); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						_r$14;
					/* } */ case 5:
				/* } */ case 3:
				return true;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.name = name; $f.property = property; $f.update = update; $f.$s = $s; $f.$r = $r; return $f;
			}; })(object)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			object[0].extensible = false;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$13 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 5; case 5: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 3:
		return object$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinObject_freeze }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.object = object; $f.object$1 = object$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_keys = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _tmp, _tmp$1, call, keys, object, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; call = $f.call; keys = $f.keys; object = $f.object; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		keys = [keys];
		call = $clone(call, FunctionCall);
		_tmp = call.Argument(0)._object();
		_tmp$1 = sliceType$5.nil;
		object = _tmp;
		keys[0] = _tmp$1;
		/* */ if (!(ptrType$4.nil === object)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(ptrType$4.nil === object)) { */ case 1:
			$r = object.enumerate(false, (function(keys) { return function(name) {
				var $ptr, name;
				keys[0] = $append(keys[0], toValue_string(name));
				return true;
			}; })(keys)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$13 = call.runtime.newArrayOf(keys[0]); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = toValue_object(_r$13); /* */ $s = 5; case 5: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 6; case 6:
			return _r$14;
		/* } */ case 2:
		_r$15 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		$panic(_r$15);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: builtinObject_keys }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.call = call; $f.keys = keys; $f.object = object; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinObject_getOwnPropertyNames = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _tmp, _tmp$1, call, object, propertyNames, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; call = $f.call; object = $f.object; propertyNames = $f.propertyNames; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		object = [object];
		propertyNames = [propertyNames];
		call = $clone(call, FunctionCall);
		_tmp = call.Argument(0)._object();
		_tmp$1 = sliceType$5.nil;
		object[0] = _tmp;
		propertyNames[0] = _tmp$1;
		/* */ if (!(ptrType$4.nil === object[0])) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(ptrType$4.nil === object[0])) { */ case 1:
			$r = object[0].enumerate(true, (function(object, propertyNames) { return function $b(name) {
				var $ptr, _r$13, name, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r$13 = object[0].hasOwnProperty(name); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				/* */ if (_r$13) { $s = 1; continue; }
				/* */ $s = 2; continue;
				/* if (_r$13) { */ case 1:
					propertyNames[0] = $append(propertyNames[0], toValue_string(name));
				/* } */ case 2:
				return true;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
			}; })(object, propertyNames)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$13 = call.runtime.newArrayOf(propertyNames[0]); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = toValue_object(_r$13); /* */ $s = 5; case 5: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 6; case 6:
			return _r$14;
		/* } */ case 2:
		_r$15 = call.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		$panic(_r$15);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: builtinObject_getOwnPropertyNames }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.call = call; $f.object = object; $f.propertyNames = propertyNames; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinRegExp = function(call) {
		var $ptr, _r$13, _r$14, call, flags, object, pattern, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; flags = $f.flags; object = $f.object; pattern = $f.pattern; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		pattern = $clone(call.Argument(0), Value);
		flags = $clone(call.Argument(1), Value);
		object = pattern._object();
		if (!(object === ptrType$4.nil)) {
			if (object.class$1 === "RegExp" && flags.IsUndefined()) {
				return pattern;
			}
		}
		_r$13 = call.runtime.newRegExp(pattern, flags); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinRegExp }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.flags = flags; $f.object = object; $f.pattern = pattern; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNewRegExp = function(self, argumentList) {
		var $ptr, _r$13, _r$14, argumentList, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; argumentList = $f.argumentList; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = self.runtime.newRegExp(valueOfArrayIndex(argumentList, 0), valueOfArrayIndex(argumentList, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_object(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNewRegExp }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.argumentList = argumentList; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinRegExp_toString = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, call, flags, source, thisObject, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; call = $f.call; flags = $f.flags; source = $f.source; thisObject = $f.thisObject; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		_r$14 = thisObject.get("source"); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = _r$14.string(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		source = _r$15;
		flags = new sliceType$4([]);
		_r$16 = thisObject.get("global"); /* */ $s = 6; case 6: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$17 = _r$16.bool(); /* */ $s = 7; case 7: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		/* */ if (_r$17) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$17) { */ case 4:
			flags = $append(flags, 103);
		/* } */ case 5:
		_r$18 = thisObject.get("ignoreCase"); /* */ $s = 10; case 10: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		_r$19 = _r$18.bool(); /* */ $s = 11; case 11: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		/* */ if (_r$19) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (_r$19) { */ case 8:
			flags = $append(flags, 105);
		/* } */ case 9:
		_r$20 = thisObject.get("multiline"); /* */ $s = 14; case 14: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		_r$21 = _r$20.bool(); /* */ $s = 15; case 15: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		/* */ if (_r$21) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (_r$21) { */ case 12:
			flags = $append(flags, 109);
		/* } */ case 13:
		_r$22 = fmt.Sprintf("/%s/%s", new sliceType$1([new $String(source), flags])); /* */ $s = 16; case 16: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$23 = toValue_string(_r$22); /* */ $s = 17; case 17: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		/* */ $s = 18; case 18:
		return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinRegExp_toString }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.call = call; $f.flags = flags; $f.source = source; $f.thisObject = thisObject; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinRegExp_exec = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _tuple$1, call, match, result, target, thisObject, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _tuple$1 = $f._tuple$1; call = $f.call; match = $f.match; result = $f.result; target = $f.target; thisObject = $f.thisObject; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		_r$14 = call.Argument(0).string(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		target = _r$14;
		_r$15 = execRegExp(thisObject, target); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_tuple$1 = _r$15;
		match = _tuple$1[0];
		result = _tuple$1[1];
		if (!match) {
			return nullValue;
		}
		_r$16 = execResultToArray(call.runtime, target, result); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$17 = toValue_object(_r$16); /* */ $s = 5; case 5: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$17;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinRegExp_exec }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._tuple$1 = _tuple$1; $f.call = call; $f.match = match; $f.result = result; $f.target = target; $f.thisObject = thisObject; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinRegExp_test = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _tuple$1, call, match, target, thisObject, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _tuple$1 = $f._tuple$1; call = $f.call; match = $f.match; target = $f.target; thisObject = $f.thisObject; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		_r$14 = call.Argument(0).string(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		target = _r$14;
		_r$15 = execRegExp(thisObject, target); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_tuple$1 = _r$15;
		match = _tuple$1[0];
		return toValue_bool(match);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinRegExp_test }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._tuple$1 = _tuple$1; $f.call = call; $f.match = match; $f.target = target; $f.thisObject = thisObject; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinRegExp_compile = function(call) {
		var $ptr, call;
		call = $clone(call, FunctionCall);
		return new Value.ptr(0, $ifaceNil);
	};
	stringValueFromStringArgumentList = function(argumentList) {
		var $ptr, _r$13, _r$14, argumentList, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; argumentList = $f.argumentList; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (argumentList.$length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argumentList.$length > 0) { */ case 1:
			_r$13 = (0 >= argumentList.$length ? $throwRuntimeError("index out of range") : argumentList.$array[argumentList.$offset + 0]).string(); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = toValue_string(_r$13); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$14;
		/* } */ case 2:
		return toValue_string("");
		/* */ } return; } if ($f === undefined) { $f = { $blk: stringValueFromStringArgumentList }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.argumentList = argumentList; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString = function(call) {
		var $ptr, _r$13, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = stringValueFromStringArgumentList(call.ArgumentList); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinNewString = function(self, argumentList) {
		var $ptr, _r$13, _r$14, _r$15, argumentList, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; argumentList = $f.argumentList; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = stringValueFromStringArgumentList(argumentList); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = self.runtime.newString(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toValue_object(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ $s = 4; case 4:
		return _r$15;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinNewString }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.argumentList = argumentList; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_toString = function(call) {
		var $ptr, _r$13, _r$14, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisClassObject("String"); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = _r$13.primitiveValue(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_toString }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_valueOf = function(call) {
		var $ptr, _r$13, _r$14, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.thisClassObject("String"); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = _r$13.primitiveValue(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_valueOf }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_fromCharCode = function(call) {
		var $ptr, _i, _r$13, _ref, call, chrList, index, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _ref = $f._ref; call = $f.call; chrList = $f.chrList; index = $f.index; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		chrList = $makeSlice(sliceType$2, call.ArgumentList.$length);
		_ref = call.ArgumentList;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			index = _i;
			value = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Value);
			_r$13 = toUint16(value); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			((index < 0 || index >= chrList.$length) ? $throwRuntimeError("index out of range") : chrList.$array[chrList.$offset + index] = _r$13);
			_i++;
		/* } */ $s = 1; continue; case 2:
		return toValue_string16(chrList);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_fromCharCode }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._ref = _ref; $f.call = call; $f.chrList = chrList; $f.index = index; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_charAt = function(call) {
		var $ptr, _r$13, _r$14, call, chr, idx, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; chr = $f.chr; idx = $f.idx; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		$r = checkObjectCoercible(call.runtime, call.This); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$13 = call.Argument(0).number(); /* */ $s = 2; case 2: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		idx = ((x = _r$13.int64, x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
		_r$14 = stringAt(call.This._object().stringValue(), idx); /* */ $s = 3; case 3: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		chr = _r$14;
		if (chr === 65533) {
			return toValue_string("");
		}
		return toValue_string($encodeRune(chr));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_charAt }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.chr = chr; $f.idx = idx; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_charCodeAt = function(call) {
		var $ptr, _r$13, _r$14, call, chr, idx, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; chr = $f.chr; idx = $f.idx; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		$r = checkObjectCoercible(call.runtime, call.This); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$13 = call.Argument(0).number(); /* */ $s = 2; case 2: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		idx = ((x = _r$13.int64, x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
		_r$14 = stringAt(call.This._object().stringValue(), idx); /* */ $s = 3; case 3: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		chr = _r$14;
		if (chr === 65533) {
			return NaNValue();
		}
		return toValue_uint16((chr << 16 >>> 16));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_charCodeAt }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.chr = chr; $f.idx = idx; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_concat = function(call) {
		var $ptr, _i, _r$13, _r$14, _r$15, _r$16, _ref, call, item, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _ref = $f._ref; call = $f.call; item = $f.item; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		$r = checkObjectCoercible(call.runtime, call.This); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		value = new bytes.Buffer.ptr(sliceType$4.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		_r$13 = call.This.string(); /* */ $s = 2; case 2: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = value.WriteString(_r$13); /* */ $s = 3; case 3: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14;
		_ref = call.ArgumentList;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			item = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Value);
			_r$15 = item.string(); /* */ $s = 6; case 6: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = value.WriteString(_r$15); /* */ $s = 7; case 7: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$16;
			_i++;
		/* } */ $s = 4; continue; case 5:
		return toValue_string(value.String());
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_concat }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._ref = _ref; $f.call = call; $f.item = item; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_indexOf = function(call) {
		var $ptr, _r$13, _r$14, _r$15, call, index, start, target, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; call = $f.call; index = $f.index; start = $f.start; target = $f.target; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		$r = checkObjectCoercible(call.runtime, call.This); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$13 = call.This.string(); /* */ $s = 2; case 2: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		value = _r$13;
		_r$14 = call.Argument(0).string(); /* */ $s = 3; case 3: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		target = _r$14;
		if (2 > call.ArgumentList.$length) {
			return toValue_int(strings.Index(value, target));
		}
		_r$15 = toIntegerFloat(call.Argument(1)); /* */ $s = 4; case 4: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		start = _r$15;
		if (0 > start) {
			start = 0;
		} else if (start >= value.length) {
			if (target === "") {
				return toValue_int(value.length);
			}
			return toValue_int(-1);
		}
		index = strings.Index(value.substring((start >> 0)), target);
		if (index >= 0) {
			index = index + ((start >> 0)) >> 0;
		}
		return toValue_int(index);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_indexOf }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.call = call; $f.index = index; $f.start = start; $f.target = target; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_lastIndexOf = function(call) {
		var $ptr, _r$13, _r$14, _r$15, call, end, length, start, target, value, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; call = $f.call; end = $f.end; length = $f.length; start = $f.start; target = $f.target; value = $f.value; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		$r = checkObjectCoercible(call.runtime, call.This); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$13 = call.This.string(); /* */ $s = 2; case 2: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		value = _r$13;
		_r$14 = call.Argument(0).string(); /* */ $s = 3; case 3: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		target = _r$14;
		if (2 > call.ArgumentList.$length || (x = call.ArgumentList, (1 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 1])).IsUndefined()) {
			return toValue_int(strings.LastIndex(value, target));
		}
		length = value.length;
		if (length === 0) {
			return toValue_int(strings.LastIndex(value, target));
		}
		_r$15 = (x$1 = call.ArgumentList, (1 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 1])).number(); /* */ $s = 4; case 4: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		start = $clone(_r$15, _number);
		if (start.kind === 2) {
			return toValue_int(strings.LastIndex(value, target));
		}
		if ((x$2 = start.int64, (0 > x$2.$high || (0 === x$2.$high && 0 > x$2.$low)))) {
			start.int64 = new $Int64(0, 0);
		}
		end = ((x$3 = start.int64, x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0) + target.length >> 0;
		if (end > length) {
			end = length;
		}
		return toValue_int(strings.LastIndex(value.substring(0, end), target));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_lastIndexOf }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.call = call; $f.end = end; $f.length = length; $f.start = start; $f.target = target; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_match = function(call) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _tuple$1, call, global, index, match, matchCount, matcher, matcherValue, result, result$1, target, valueArray, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _tuple$1 = $f._tuple$1; call = $f.call; global = $f.global; index = $f.index; match = $f.match; matchCount = $f.matchCount; matcher = $f.matcher; matcherValue = $f.matcherValue; result = $f.result; result$1 = $f.result$1; target = $f.target; valueArray = $f.valueArray; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		$r = checkObjectCoercible(call.runtime, call.This); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$13 = call.This.string(); /* */ $s = 2; case 2: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		target = _r$13;
		matcherValue = $clone(call.Argument(0), Value);
		matcher = matcherValue._object();
		/* */ if (!matcherValue.IsObject() || !(matcher.class$1 === "RegExp")) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!matcherValue.IsObject() || !(matcher.class$1 === "RegExp")) { */ case 3:
			_r$14 = call.runtime.newRegExp(matcherValue, new Value.ptr(0, $ifaceNil)); /* */ $s = 5; case 5: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			matcher = _r$14;
		/* } */ case 4:
		_r$15 = matcher.get("global"); /* */ $s = 6; case 6: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = _r$15.bool(); /* */ $s = 7; case 7: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		global = _r$16;
		/* */ if (!global) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!global) { */ case 8:
			_r$17 = execRegExp(matcher, target); /* */ $s = 10; case 10: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_tuple$1 = _r$17;
			match = _tuple$1[0];
			result = _tuple$1[1];
			if (!match) {
				return nullValue;
			}
			_r$18 = execResultToArray(call.runtime, target, result); /* */ $s = 11; case 11: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_r$19 = toValue_object(_r$18); /* */ $s = 12; case 12: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			/* */ $s = 13; case 13:
			return _r$19;
		/* } */ case 9:
		_r$20 = matcher.regExpValue().regularExpression.FindAllStringIndex(target, -1); /* */ $s = 14; case 14: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		result$1 = _r$20;
		matchCount = result$1.$length;
		/* */ if (result$1 === sliceType$8.nil) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (result$1 === sliceType$8.nil) { */ case 15:
			$r = matcher.put("lastIndex", toValue_int(0), true); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return new Value.ptr(0, $ifaceNil);
		/* } */ case 16:
		matchCount = result$1.$length;
		valueArray = $makeSlice(sliceType$5, matchCount);
		index = 0;
		while (true) {
			if (!(index < matchCount)) { break; }
			Value.copy(((index < 0 || index >= valueArray.$length) ? $throwRuntimeError("index out of range") : valueArray.$array[valueArray.$offset + index]), toValue_string(target.substring((x = ((index < 0 || index >= result$1.$length) ? $throwRuntimeError("index out of range") : result$1.$array[result$1.$offset + index]), (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), (x$1 = ((index < 0 || index >= result$1.$length) ? $throwRuntimeError("index out of range") : result$1.$array[result$1.$offset + index]), (1 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 1])))));
			index = index + (1) >> 0;
		}
		$r = matcher.put("lastIndex", toValue_int((x$2 = (x$3 = matchCount - 1 >> 0, ((x$3 < 0 || x$3 >= result$1.$length) ? $throwRuntimeError("index out of range") : result$1.$array[result$1.$offset + x$3])), (1 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 1]))), true); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$21 = call.runtime.newArrayOf(valueArray); /* */ $s = 19; case 19: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		_r$22 = toValue_object(_r$21); /* */ $s = 20; case 20: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		/* */ $s = 21; case 21:
		return _r$22;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: builtinString_match }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._tuple$1 = _tuple$1; $f.call = call; $f.global = global; $f.index = index; $f.match = match; $f.matchCount = matchCount; $f.matcher = matcher; $f.matcherValue = matcherValue; $f.result = result; $f.result$1 = result$1; $f.target = target; $f.valueArray = valueArray; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_findAndReplaceString = function(input, lastIndex, match, target, replaceValue) {
		var $ptr, _q, _r$13, input, lastIndex, match, matchCount, output, replaceValue, replacement, target, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$13 = $f._r$13; input = $f.input; lastIndex = $f.lastIndex; match = $f.match; matchCount = $f.matchCount; output = $f.output; replaceValue = $f.replaceValue; replacement = $f.replacement; target = $f.target; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		match = [match];
		matchCount = [matchCount];
		target = [target];
		output = sliceType$4.nil;
		matchCount[0] = (_q = match[0].$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		output = input;
		if (!(((0 >= match[0].$length ? $throwRuntimeError("index out of range") : match[0].$array[match[0].$offset + 0]) === lastIndex))) {
			output = $appendSlice(output, $subslice(target[0], lastIndex, (0 >= match[0].$length ? $throwRuntimeError("index out of range") : match[0].$array[match[0].$offset + 0])));
		}
		_r$13 = builtinString_replace_Regexp.ReplaceAllFunc(replaceValue, (function(match, matchCount, target) { return function(part) {
			var $ptr, _ref, _tuple$1, error, matchNumber, matchNumberParse, offset, part, x;
			_ref = (1 >= part.$length ? $throwRuntimeError("index out of range") : part.$array[part.$offset + 1]);
			if (_ref === 36) {
				return new sliceType$4([36]);
			} else if (_ref === 38) {
				return $subslice(target[0], (0 >= match[0].$length ? $throwRuntimeError("index out of range") : match[0].$array[match[0].$offset + 0]), (1 >= match[0].$length ? $throwRuntimeError("index out of range") : match[0].$array[match[0].$offset + 1]));
			} else if (_ref === 96) {
				return $subslice(target[0], 0, (0 >= match[0].$length ? $throwRuntimeError("index out of range") : match[0].$array[match[0].$offset + 0]));
			} else if (_ref === 39) {
				return $subslice(target[0], (1 >= match[0].$length ? $throwRuntimeError("index out of range") : match[0].$array[match[0].$offset + 1]), target[0].$length);
			}
			_tuple$1 = strconv.ParseInt($bytesToString($subslice(part, 1)), 10, 64);
			matchNumberParse = _tuple$1[0];
			error = _tuple$1[1];
			matchNumber = ((matchNumberParse.$low + ((matchNumberParse.$high >> 31) * 4294967296)) >> 0);
			if (!($interfaceIsEqual(error, $ifaceNil)) || matchNumber >= matchCount[0]) {
				return new sliceType$4([]);
			}
			offset = $imul(2, matchNumber);
			if (!((((offset < 0 || offset >= match[0].$length) ? $throwRuntimeError("index out of range") : match[0].$array[match[0].$offset + offset]) === -1))) {
				return $subslice(target[0], ((offset < 0 || offset >= match[0].$length) ? $throwRuntimeError("index out of range") : match[0].$array[match[0].$offset + offset]), (x = offset + 1 >> 0, ((x < 0 || x >= match[0].$length) ? $throwRuntimeError("index out of range") : match[0].$array[match[0].$offset + x])));
			}
			return new sliceType$4([]);
		}; })(match, matchCount, target)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		replacement = _r$13;
		output = $appendSlice(output, replacement);
		output = output;
		return output;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_findAndReplaceString }; } $f.$ptr = $ptr; $f._q = _q; $f._r$13 = _r$13; $f.input = input; $f.lastIndex = lastIndex; $f.match = match; $f.matchCount = matchCount; $f.output = output; $f.replaceValue = replaceValue; $f.replacement = replacement; $f.target = target; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_replace = function(call) {
		var $ptr, _i, _i$1, _q, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _ref, _ref$1, argumentList, call, find, found, global, index, lastIndex, match, match$1, matchCount, offset, regExp, replace, replace$1, replaceValue, replacement, result, search, searchObject, searchValue, target, target$1, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _q = $f._q; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _ref = $f._ref; _ref$1 = $f._ref$1; argumentList = $f.argumentList; call = $f.call; find = $f.find; found = $f.found; global = $f.global; index = $f.index; lastIndex = $f.lastIndex; match = $f.match; match$1 = $f.match$1; matchCount = $f.matchCount; offset = $f.offset; regExp = $f.regExp; replace = $f.replace; replace$1 = $f.replace$1; replaceValue = $f.replaceValue; replacement = $f.replacement; result = $f.result; search = $f.search; searchObject = $f.searchObject; searchValue = $f.searchValue; target = $f.target; target$1 = $f.target$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		$r = checkObjectCoercible(call.runtime, call.This); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$13 = call.This.string(); /* */ $s = 2; case 2: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		target = new sliceType$4($stringToBytes(_r$13));
		searchValue = $clone(call.Argument(0), Value);
		searchObject = searchValue._object();
		search = ptrType$2.nil;
		global = false;
		find = 1;
		/* */ if (searchValue.IsObject() && searchObject.class$1 === "RegExp") { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (searchValue.IsObject() && searchObject.class$1 === "RegExp") { */ case 3:
			regExp = $clone(searchObject.regExpValue(), _regExpObject);
			search = regExp.regularExpression;
			if (regExp.global) {
				find = -1;
			}
			$s = 5; continue;
		/* } else { */ case 4:
			_r$14 = searchValue.string(); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = regexp.QuoteMeta(_r$14); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = regexp.MustCompile(_r$15); /* */ $s = 8; case 8: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			search = _r$16;
		/* } */ case 5:
		_r$17 = search.FindAllSubmatchIndex(target, find); /* */ $s = 9; case 9: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		found = _r$17;
		if (found === sliceType$8.nil) {
			return toValue_string($bytesToString(target));
		}
		lastIndex = 0;
		result = new sliceType$4([]);
		replaceValue = $clone(call.Argument(1), Value);
		/* */ if (replaceValue.isCallable()) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (replaceValue.isCallable()) { */ case 10:
			target$1 = $bytesToString(target);
			replace = replaceValue._object();
			_ref = found;
			_i = 0;
			/* while (true) { */ case 13:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 14; continue; }
				match = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (!(((0 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 0]) === lastIndex))) {
					result = $appendSlice(result, target$1.substring(lastIndex, (0 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 0])));
				}
				matchCount = (_q = match.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				argumentList = $makeSlice(sliceType$5, (matchCount + 2 >> 0));
				index = 0;
				while (true) {
					if (!(index < matchCount)) { break; }
					offset = $imul(2, index);
					if (!((((offset < 0 || offset >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + offset]) === -1))) {
						Value.copy(((index < 0 || index >= argumentList.$length) ? $throwRuntimeError("index out of range") : argumentList.$array[argumentList.$offset + index]), toValue_string(target$1.substring(((offset < 0 || offset >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + offset]), (x = offset + 1 >> 0, ((x < 0 || x >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + x])))));
					} else {
						Value.copy(((index < 0 || index >= argumentList.$length) ? $throwRuntimeError("index out of range") : argumentList.$array[argumentList.$offset + index]), new Value.ptr(0, $ifaceNil));
					}
					index = index + (1) >> 0;
				}
				Value.copy((x$1 = matchCount + 0 >> 0, ((x$1 < 0 || x$1 >= argumentList.$length) ? $throwRuntimeError("index out of range") : argumentList.$array[argumentList.$offset + x$1])), toValue_int((0 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 0])));
				Value.copy((x$2 = matchCount + 1 >> 0, ((x$2 < 0 || x$2 >= argumentList.$length) ? $throwRuntimeError("index out of range") : argumentList.$array[argumentList.$offset + x$2])), toValue_string(target$1));
				_r$18 = replace.call(new Value.ptr(0, $ifaceNil), argumentList, false, nativeFrame); /* */ $s = 15; case 15: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				_r$19 = _r$18.string(); /* */ $s = 16; case 16: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				replacement = _r$19;
				result = $appendSlice(result, new sliceType$4($stringToBytes(replacement)));
				lastIndex = (1 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 1]);
				_i++;
			/* } */ $s = 13; continue; case 14:
			$s = 12; continue;
		/* } else { */ case 11:
			_r$20 = replaceValue.string(); /* */ $s = 17; case 17: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			replace$1 = new sliceType$4($stringToBytes(_r$20));
			_ref$1 = found;
			_i$1 = 0;
			/* while (true) { */ case 18:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 19; continue; }
				match$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				_r$21 = builtinString_findAndReplaceString(result, lastIndex, match$1, target, replace$1); /* */ $s = 20; case 20: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				result = _r$21;
				lastIndex = (1 >= match$1.$length ? $throwRuntimeError("index out of range") : match$1.$array[match$1.$offset + 1]);
				_i$1++;
			/* } */ $s = 18; continue; case 19:
		/* } */ case 12:
		if (!((lastIndex === target.$length))) {
			result = $appendSlice(result, $subslice(target, lastIndex));
		}
		/* */ if (global && !(searchObject === ptrType$4.nil)) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (global && !(searchObject === ptrType$4.nil)) { */ case 21:
			$r = searchObject.put("lastIndex", toValue_int(lastIndex), true); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 22:
		return toValue_string($bytesToString(result));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: builtinString_replace }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._q = _q; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._ref = _ref; $f._ref$1 = _ref$1; $f.argumentList = argumentList; $f.call = call; $f.find = find; $f.found = found; $f.global = global; $f.index = index; $f.lastIndex = lastIndex; $f.match = match; $f.match$1 = match$1; $f.matchCount = matchCount; $f.offset = offset; $f.regExp = regExp; $f.replace = replace; $f.replace$1 = replace$1; $f.replaceValue = replaceValue; $f.replacement = replacement; $f.result = result; $f.search = search; $f.searchObject = searchObject; $f.searchValue = searchValue; $f.target = target; $f.target$1 = target$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_search = function(call) {
		var $ptr, _r$13, _r$14, _r$15, call, result, search, searchValue, target, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; call = $f.call; result = $f.result; search = $f.search; searchValue = $f.searchValue; target = $f.target; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		$r = checkObjectCoercible(call.runtime, call.This); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$13 = call.This.string(); /* */ $s = 2; case 2: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		target = _r$13;
		searchValue = $clone(call.Argument(0), Value);
		search = searchValue._object();
		/* */ if (!searchValue.IsObject() || !(search.class$1 === "RegExp")) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!searchValue.IsObject() || !(search.class$1 === "RegExp")) { */ case 3:
			_r$14 = call.runtime.newRegExp(searchValue, new Value.ptr(0, $ifaceNil)); /* */ $s = 5; case 5: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			search = _r$14;
		/* } */ case 4:
		_r$15 = search.regExpValue().regularExpression.FindStringIndex(target); /* */ $s = 6; case 6: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		result = _r$15;
		if (result === sliceType$6.nil) {
			return toValue_int(-1);
		}
		return toValue_int((0 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 0]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_search }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.call = call; $f.result = result; $f.search = search; $f.searchValue = searchValue; $f.target = target; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_split = function(call) {
		var $ptr, _i, _i$1, _q, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _ref, _ref$1, call, captureCount, excess, found, index, index$1, lastIndex, limit, limitValue, match, offset, result, search, separator, separatorValue, split, splitLimit, target, targetLength, value, value$1, valueArray, valueArray$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _q = $f._q; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _ref = $f._ref; _ref$1 = $f._ref$1; call = $f.call; captureCount = $f.captureCount; excess = $f.excess; found = $f.found; index = $f.index; index$1 = $f.index$1; lastIndex = $f.lastIndex; limit = $f.limit; limitValue = $f.limitValue; match = $f.match; offset = $f.offset; result = $f.result; search = $f.search; separator = $f.separator; separatorValue = $f.separatorValue; split = $f.split; splitLimit = $f.splitLimit; target = $f.target; targetLength = $f.targetLength; value = $f.value; value$1 = $f.value$1; valueArray = $f.valueArray; valueArray$1 = $f.valueArray$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		$r = checkObjectCoercible(call.runtime, call.This); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$13 = call.This.string(); /* */ $s = 2; case 2: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		target = _r$13;
		separatorValue = $clone(call.Argument(0), Value);
		limitValue = $clone(call.Argument(1), Value);
		limit = -1;
		/* */ if (limitValue.IsDefined()) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (limitValue.IsDefined()) { */ case 3:
			_r$14 = toUint32(limitValue); /* */ $s = 5; case 5: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			limit = (_r$14 >> 0);
		/* } */ case 4:
		/* */ if (limit === 0) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (limit === 0) { */ case 6:
			_r$15 = call.runtime.newArray(0); /* */ $s = 8; case 8: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = toValue_object(_r$15); /* */ $s = 9; case 9: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ $s = 10; case 10:
			return _r$16;
		/* } */ case 7:
		/* */ if (separatorValue.IsUndefined()) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (separatorValue.IsUndefined()) { */ case 11:
			_r$17 = call.runtime.newArrayOf(new sliceType$5([$clone(toValue_string(target), Value)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_r$18 = toValue_object(_r$17); /* */ $s = 14; case 14: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			/* */ $s = 15; case 15:
			return _r$18;
		/* } */ case 12:
		/* */ if (separatorValue.isRegExp()) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (separatorValue.isRegExp()) { */ case 16:
			targetLength = target.length;
			search = separatorValue._object().regExpValue().regularExpression;
			valueArray = new sliceType$5([]);
			_r$19 = search.FindAllStringSubmatchIndex(target, -1); /* */ $s = 19; case 19: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			result = _r$19;
			lastIndex = 0;
			found = 0;
			_ref = result;
			_i = 0;
			/* while (true) { */ case 20:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 21; continue; }
				match = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				/* */ if ((0 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 0]) === (1 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 1])) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if ((0 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 0]) === (1 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 1])) { */ case 22:
					if (((0 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 0]) === 0) || ((0 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 0]) === targetLength)) {
						_i++;
						/* continue; */ $s = 20; continue;
					}
				/* } */ case 23:
				if (!((lastIndex === (0 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 0])))) {
					valueArray = $append(valueArray, toValue_string(target.substring(lastIndex, (0 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 0]))));
					found = found + (1) >> 0;
				} else if (lastIndex === (0 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 0])) {
					if (!((lastIndex === -1))) {
						valueArray = $append(valueArray, toValue_string(""));
						found = found + (1) >> 0;
					}
				}
				lastIndex = (1 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 1]);
				/* */ if (found === limit) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (found === limit) { */ case 24:
					/* goto RETURN */ $s = 26; continue;
				/* } */ case 25:
				captureCount = (_q = match.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				index = 1;
				/* while (true) { */ case 27:
					/* if (!(index < captureCount)) { break; } */ if(!(index < captureCount)) { $s = 28; continue; }
					offset = $imul(index, 2);
					value = new Value.ptr(0, $ifaceNil);
					if (!((((offset < 0 || offset >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + offset]) === -1))) {
						Value.copy(value, toValue_string(target.substring(((offset < 0 || offset >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + offset]), (x = offset + 1 >> 0, ((x < 0 || x >= match.$length) ? $throwRuntimeError("index out of range") : match.$array[match.$offset + x])))));
					}
					valueArray = $append(valueArray, value);
					found = found + (1) >> 0;
					/* */ if (found === limit) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if (found === limit) { */ case 29:
						/* goto RETURN */ $s = 26; continue;
					/* } */ case 30:
					index = index + (1) >> 0;
				/* } */ $s = 27; continue; case 28:
				_i++;
			/* } */ $s = 20; continue; case 21:
			if (!((found === limit))) {
				if (!((lastIndex === targetLength))) {
					valueArray = $append(valueArray, toValue_string(target.substring(lastIndex, targetLength)));
				} else {
					valueArray = $append(valueArray, toValue_string(""));
				}
			}
			/* RETURN: */ case 26:
			_r$20 = call.runtime.newArrayOf(valueArray); /* */ $s = 31; case 31: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_r$21 = toValue_object(_r$20); /* */ $s = 32; case 32: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			/* */ $s = 33; case 33:
			return _r$21;
			$s = 18; continue;
		/* } else { */ case 17:
			_r$22 = separatorValue.string(); /* */ $s = 34; case 34: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			separator = _r$22;
			splitLimit = limit;
			excess = false;
			if (limit > 0) {
				splitLimit = limit + 1 >> 0;
				excess = true;
			}
			split = strings.SplitN(target, separator, splitLimit);
			if (excess && split.$length > limit) {
				split = $subslice(split, 0, limit);
			}
			valueArray$1 = $makeSlice(sliceType$5, split.$length);
			_ref$1 = split;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				index$1 = _i$1;
				value$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				Value.copy(((index$1 < 0 || index$1 >= valueArray$1.$length) ? $throwRuntimeError("index out of range") : valueArray$1.$array[valueArray$1.$offset + index$1]), toValue_string(value$1));
				_i$1++;
			}
			_r$23 = call.runtime.newArrayOf(valueArray$1); /* */ $s = 35; case 35: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_r$24 = toValue_object(_r$23); /* */ $s = 36; case 36: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			/* */ $s = 37; case 37:
			return _r$24;
		/* } */ case 18:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: builtinString_split }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._q = _q; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._ref = _ref; $f._ref$1 = _ref$1; $f.call = call; $f.captureCount = captureCount; $f.excess = excess; $f.found = found; $f.index = index; $f.index$1 = index$1; $f.lastIndex = lastIndex; $f.limit = limit; $f.limitValue = limitValue; $f.match = match; $f.offset = offset; $f.result = result; $f.search = search; $f.separator = separator; $f.separatorValue = separatorValue; $f.split = split; $f.splitLimit = splitLimit; $f.target = target; $f.targetLength = targetLength; $f.value = value; $f.value$1 = value$1; $f.valueArray = valueArray; $f.valueArray$1 = valueArray$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_slice = function(call) {
		var $ptr, _r$13, _r$14, _tuple$1, call, end, length, start, target, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; call = $f.call; end = $f.end; length = $f.length; start = $f.start; target = $f.target; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		$r = checkObjectCoercible(call.runtime, call.This); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$13 = call.This.string(); /* */ $s = 2; case 2: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		target = _r$13;
		length = new $Int64(0, target.length);
		_r$14 = rangeStartEnd(call.ArgumentList, length, false); /* */ $s = 3; case 3: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_tuple$1 = _r$14;
		start = _tuple$1[0];
		end = _tuple$1[1];
		if ((x = new $Int64(end.$high - start.$high, end.$low - start.$low), (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			return toValue_string("");
		}
		return toValue_string(target.substring($flatten64(start), $flatten64(end)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_slice }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.call = call; $f.end = end; $f.length = length; $f.start = start; $f.target = target; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_substring = function(call) {
		var $ptr, _r$13, _r$14, _tmp, _tmp$1, _tuple$1, call, end, length, start, target, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple$1 = $f._tuple$1; call = $f.call; end = $f.end; length = $f.length; start = $f.start; target = $f.target; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		$r = checkObjectCoercible(call.runtime, call.This); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$13 = call.This.string(); /* */ $s = 2; case 2: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		target = _r$13;
		length = new $Int64(0, target.length);
		_r$14 = rangeStartEnd(call.ArgumentList, length, true); /* */ $s = 3; case 3: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_tuple$1 = _r$14;
		start = _tuple$1[0];
		end = _tuple$1[1];
		if ((start.$high > end.$high || (start.$high === end.$high && start.$low > end.$low))) {
			_tmp = end;
			_tmp$1 = start;
			start = _tmp;
			end = _tmp$1;
		}
		return toValue_string(target.substring($flatten64(start), $flatten64(end)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_substring }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple$1 = _tuple$1; $f.call = call; $f.end = end; $f.length = length; $f.start = start; $f.target = target; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_substr = function(call) {
		var $ptr, _r$13, _r$14, _tuple$1, call, length, size, start, target, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; call = $f.call; length = $f.length; size = $f.size; start = $f.start; target = $f.target; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = call.This.string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		target = _r$13;
		size = new $Int64(0, target.length);
		_r$14 = rangeStartLength(call.ArgumentList, size); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_tuple$1 = _r$14;
		start = _tuple$1[0];
		length = _tuple$1[1];
		if ((start.$high > size.$high || (start.$high === size.$high && start.$low >= size.$low))) {
			return toValue_string("");
		}
		if ((length.$high < 0 || (length.$high === 0 && length.$low <= 0))) {
			return toValue_string("");
		}
		if ((x = new $Int64(start.$high + length.$high, start.$low + length.$low), (x.$high > size.$high || (x.$high === size.$high && x.$low >= size.$low)))) {
			length = new $Int64(size.$high - start.$high, size.$low - start.$low);
		}
		return toValue_string(target.substring($flatten64(start), $flatten64(new $Int64(start.$high + length.$high, start.$low + length.$low))));
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_substr }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.call = call; $f.length = length; $f.size = size; $f.start = start; $f.target = target; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_toLowerCase = function(call) {
		var $ptr, _r$13, _r$14, _r$15, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		$r = checkObjectCoercible(call.runtime, call.This); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$13 = call.This.string(); /* */ $s = 2; case 2: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = strings.ToLower(_r$13); /* */ $s = 3; case 3: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toValue_string(_r$14); /* */ $s = 4; case 4: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$15;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_toLowerCase }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_toUpperCase = function(call) {
		var $ptr, _r$13, _r$14, _r$15, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		$r = checkObjectCoercible(call.runtime, call.This); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$13 = call.This.string(); /* */ $s = 2; case 2: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = strings.ToUpper(_r$13); /* */ $s = 3; case 3: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toValue_string(_r$14); /* */ $s = 4; case 4: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$15;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_toUpperCase }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_trim = function(call) {
		var $ptr, _r$13, _r$14, _r$15, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		$r = checkObjectCoercible(call.runtime, call.This); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$13 = call.This.string(); /* */ $s = 2; case 2: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = strings.Trim(_r$13, "\t\n\v\f\r \xC2\xA0\xE1\x9A\x80\xE1\xA0\x8E\xE2\x80\x80\xE2\x80\x81\xE2\x80\x82\xE2\x80\x83\xE2\x80\x84\xE2\x80\x85\xE2\x80\x86\xE2\x80\x87\xE2\x80\x88\xE2\x80\x89\xE2\x80\x8A\xE2\x80\xA8\xE2\x80\xA9\xE2\x80\xAF\xE2\x81\x9F\xE3\x80\x80\xEF\xBB\xBF"); /* */ $s = 3; case 3: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toValue(new $String(_r$14)); /* */ $s = 4; case 4: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$15;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_trim }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_trimLeft = function(call) {
		var $ptr, _r$13, _r$14, _r$15, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		$r = checkObjectCoercible(call.runtime, call.This); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$13 = call.This.string(); /* */ $s = 2; case 2: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = strings.TrimLeft(_r$13, "\t\n\v\f\r \xC2\xA0\xE1\x9A\x80\xE1\xA0\x8E\xE2\x80\x80\xE2\x80\x81\xE2\x80\x82\xE2\x80\x83\xE2\x80\x84\xE2\x80\x85\xE2\x80\x86\xE2\x80\x87\xE2\x80\x88\xE2\x80\x89\xE2\x80\x8A\xE2\x80\xA8\xE2\x80\xA9\xE2\x80\xAF\xE2\x81\x9F\xE3\x80\x80\xEF\xBB\xBF"); /* */ $s = 3; case 3: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toValue(new $String(_r$14)); /* */ $s = 4; case 4: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$15;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_trimLeft }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_trimRight = function(call) {
		var $ptr, _r$13, _r$14, _r$15, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		$r = checkObjectCoercible(call.runtime, call.This); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$13 = call.This.string(); /* */ $s = 2; case 2: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = strings.TrimRight(_r$13, "\t\n\v\f\r \xC2\xA0\xE1\x9A\x80\xE1\xA0\x8E\xE2\x80\x80\xE2\x80\x81\xE2\x80\x82\xE2\x80\x83\xE2\x80\x84\xE2\x80\x85\xE2\x80\x86\xE2\x80\x87\xE2\x80\x88\xE2\x80\x89\xE2\x80\x8A\xE2\x80\xA8\xE2\x80\xA9\xE2\x80\xAF\xE2\x81\x9F\xE3\x80\x80\xEF\xBB\xBF"); /* */ $s = 3; case 3: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = toValue(new $String(_r$14)); /* */ $s = 4; case 4: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$15;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_trimRight }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_localeCompare = function(call) {
		var $ptr, _r$13, _r$14, call, that, this$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; that = $f.that; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		$r = checkObjectCoercible(call.runtime, call.This); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$13 = call.This.string(); /* */ $s = 2; case 2: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		this$1 = _r$13;
		_r$14 = call.Argument(0).string(); /* */ $s = 3; case 3: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		that = _r$14;
		if (this$1 < that) {
			return toValue_int(-1);
		} else if (this$1 === that) {
			return toValue_int(0);
		}
		return toValue_int(1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_localeCompare }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.that = that; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_toLocaleLowerCase = function(call) {
		var $ptr, _r$13, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = builtinString_toLowerCase(call); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_toLocaleLowerCase }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinString_toLocaleUpperCase = function(call) {
		var $ptr, _r$13, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_r$13 = builtinString_toUpperCase(call); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinString_toLocaleUpperCase }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.clone = function() {
		var $ptr, _entry, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, clone, globalObject, in$1, out, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$45 = $f._r$45; clone = $f.clone; globalObject = $f.globalObject; in$1 = $f.in$1; out = $f.out; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		in$1 = this;
		$r = in$1.lck.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(in$1.lck, "Unlock"), []]);
		out = new _runtime.ptr(new _global.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil), ptrType$4.nil, ptrType$15.nil, ptrType$16.nil, ptrType$11.nil, ptrType$4.nil, $throwNilPointerError, sliceType.nil, new sync.Mutex.ptr(0, 0));
		clone = new _clone.ptr(out, {}, {}, {}, {});
		_r$13 = clone.object(in$1.globalObject); /* */ $s = 2; case 2: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		globalObject = _r$13;
		out.globalStash = out.newObjectStash(globalObject, $ifaceNil);
		out.globalObject = globalObject;
		_r$14 = clone.object(in$1.global.Object); /* */ $s = 3; case 3: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = clone.object(in$1.global.Function); /* */ $s = 4; case 4: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = clone.object(in$1.global.Array); /* */ $s = 5; case 5: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$17 = clone.object(in$1.global.String); /* */ $s = 6; case 6: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_r$18 = clone.object(in$1.global.Boolean); /* */ $s = 7; case 7: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		_r$19 = clone.object(in$1.global.Number); /* */ $s = 8; case 8: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		_r$20 = clone.object(in$1.global.Math); /* */ $s = 9; case 9: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		_r$21 = clone.object(in$1.global.Date); /* */ $s = 10; case 10: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		_r$22 = clone.object(in$1.global.RegExp); /* */ $s = 11; case 11: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$23 = clone.object(in$1.global.Error); /* */ $s = 12; case 12: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_r$24 = clone.object(in$1.global.EvalError); /* */ $s = 13; case 13: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_r$25 = clone.object(in$1.global.TypeError); /* */ $s = 14; case 14: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		_r$26 = clone.object(in$1.global.RangeError); /* */ $s = 15; case 15: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
		_r$27 = clone.object(in$1.global.ReferenceError); /* */ $s = 16; case 16: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
		_r$28 = clone.object(in$1.global.SyntaxError); /* */ $s = 17; case 17: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
		_r$29 = clone.object(in$1.global.URIError); /* */ $s = 18; case 18: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
		_r$30 = clone.object(in$1.global.JSON); /* */ $s = 19; case 19: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
		_r$31 = clone.object(in$1.global.ObjectPrototype); /* */ $s = 20; case 20: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_r$32 = clone.object(in$1.global.FunctionPrototype); /* */ $s = 21; case 21: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		_r$33 = clone.object(in$1.global.ArrayPrototype); /* */ $s = 22; case 22: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		_r$34 = clone.object(in$1.global.StringPrototype); /* */ $s = 23; case 23: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
		_r$35 = clone.object(in$1.global.BooleanPrototype); /* */ $s = 24; case 24: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
		_r$36 = clone.object(in$1.global.NumberPrototype); /* */ $s = 25; case 25: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
		_r$37 = clone.object(in$1.global.DatePrototype); /* */ $s = 26; case 26: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
		_r$38 = clone.object(in$1.global.RegExpPrototype); /* */ $s = 27; case 27: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
		_r$39 = clone.object(in$1.global.ErrorPrototype); /* */ $s = 28; case 28: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
		_r$40 = clone.object(in$1.global.EvalErrorPrototype); /* */ $s = 29; case 29: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
		_r$41 = clone.object(in$1.global.TypeErrorPrototype); /* */ $s = 30; case 30: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
		_r$42 = clone.object(in$1.global.RangeErrorPrototype); /* */ $s = 31; case 31: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
		_r$43 = clone.object(in$1.global.ReferenceErrorPrototype); /* */ $s = 32; case 32: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
		_r$44 = clone.object(in$1.global.SyntaxErrorPrototype); /* */ $s = 33; case 33: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
		_r$45 = clone.object(in$1.global.URIErrorPrototype); /* */ $s = 34; case 34: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
		_global.copy(out.global, new _global.ptr(_r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45));
		out.eval$5 = $assertType($assertType((_entry = out.globalObject.property[$String.keyFor("eval")], _entry !== undefined ? _entry.v : new _property.ptr($ifaceNil, 0)).value, Value).value, ptrType$4);
		out.globalObject.prototype = out.global.ObjectPrototype;
		clone.runtime = ptrType$3.nil;
		clone._object = false;
		clone._objectStash = false;
		clone._dclStash = false;
		clone._fnStash = false;
		return out;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$3.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.clone }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$45 = _r$45; $f.clone = clone; $f.globalObject = globalObject; $f.in$1 = in$1; $f.out = out; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	_runtime.prototype.clone = function() { return this.$val.clone(); };
	_clone.ptr.prototype.object = function(in$1) {
		var $ptr, _entry, _key, _r$13, _tuple$1, clone, exists, in$1, out, out$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r$13 = $f._r$13; _tuple$1 = $f._tuple$1; clone = $f.clone; exists = $f.exists; in$1 = $f.in$1; out = $f.out; out$1 = $f.out$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		clone = this;
		_tuple$1 = (_entry = clone._object[ptrType$4.keyFor(in$1)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		out = _tuple$1[0];
		exists = _tuple$1[1];
		if (exists) {
			return out;
		}
		out$1 = new _object.ptr(ptrType$3.nil, "", ptrType.nil, $ifaceNil, ptrType$4.nil, false, false, sliceType.nil);
		_key = in$1; (clone._object || $throwRuntimeError("assignment to entry in nil map"))[ptrType$4.keyFor(_key)] = { k: _key, v: out$1 };
		_r$13 = in$1.objectClass.clone(in$1, out$1, clone); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _clone.ptr.prototype.object }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r$13 = _r$13; $f._tuple$1 = _tuple$1; $f.clone = clone; $f.exists = exists; $f.in$1 = in$1; $f.out = out; $f.out$1 = out$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_clone.prototype.object = function(in$1) { return this.$val.object(in$1); };
	_clone.ptr.prototype.dclStash = function(in$1) {
		var $ptr, _entry, _key, _tuple$1, clone, exists, in$1, out, out$1;
		clone = this;
		_tuple$1 = (_entry = clone._dclStash[ptrType$17.keyFor(in$1)], _entry !== undefined ? [_entry.v, true] : [ptrType$17.nil, false]);
		out = _tuple$1[0];
		exists = _tuple$1[1];
		if (exists) {
			return [out, true];
		}
		out$1 = new _dclStash.ptr(ptrType$3.nil, $ifaceNil, false);
		_key = in$1; (clone._dclStash || $throwRuntimeError("assignment to entry in nil map"))[ptrType$17.keyFor(_key)] = { k: _key, v: out$1 };
		return [out$1, false];
	};
	_clone.prototype.dclStash = function(in$1) { return this.$val.dclStash(in$1); };
	_clone.ptr.prototype.objectStash = function(in$1) {
		var $ptr, _entry, _key, _tuple$1, clone, exists, in$1, out, out$1;
		clone = this;
		_tuple$1 = (_entry = clone._objectStash[ptrType$15.keyFor(in$1)], _entry !== undefined ? [_entry.v, true] : [ptrType$15.nil, false]);
		out = _tuple$1[0];
		exists = _tuple$1[1];
		if (exists) {
			return [out, true];
		}
		out$1 = new _objectStash.ptr(ptrType$3.nil, $ifaceNil, ptrType$4.nil);
		_key = in$1; (clone._objectStash || $throwRuntimeError("assignment to entry in nil map"))[ptrType$15.keyFor(_key)] = { k: _key, v: out$1 };
		return [out$1, false];
	};
	_clone.prototype.objectStash = function(in$1) { return this.$val.objectStash(in$1); };
	_clone.ptr.prototype.fnStash = function(in$1) {
		var $ptr, _entry, _key, _tuple$1, clone, exists, in$1, out, out$1;
		clone = this;
		_tuple$1 = (_entry = clone._fnStash[ptrType$18.keyFor(in$1)], _entry !== undefined ? [_entry.v, true] : [ptrType$18.nil, false]);
		out = _tuple$1[0];
		exists = _tuple$1[1];
		if (exists) {
			return [out, true];
		}
		out$1 = new _fnStash.ptr(new _dclStash.ptr(ptrType$3.nil, $ifaceNil, false), ptrType$4.nil, false);
		_key = in$1; (clone._fnStash || $throwRuntimeError("assignment to entry in nil map"))[ptrType$18.keyFor(_key)] = { k: _key, v: out$1 };
		return [out$1, false];
	};
	_clone.prototype.fnStash = function(in$1) { return this.$val.fnStash(in$1); };
	_clone.ptr.prototype.value = function(in$1) {
		var $ptr, _r$13, _ref, clone, in$1, out, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _ref = $f._ref; clone = $f.clone; in$1 = $f.in$1; out = $f.out; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		in$1 = $clone(in$1, Value);
		clone = this;
		out = $clone(in$1, Value);
		_ref = in$1.value;
		/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, ptrType$4, true)[1]) { */ case 1:
			value = _ref.$val;
			_r$13 = clone.object(value); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			out.value = _r$13;
		/* } */ case 2:
		return out;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _clone.ptr.prototype.value }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._ref = _ref; $f.clone = clone; $f.in$1 = in$1; $f.out = out; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_clone.prototype.value = function(in$1) { return this.$val.value(in$1); };
	_clone.ptr.prototype.valueArray = function(in$1) {
		var $ptr, _i, _r$13, _ref, clone, in$1, index, out, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _ref = $f._ref; clone = $f.clone; in$1 = $f.in$1; index = $f.index; out = $f.out; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		clone = this;
		out = $makeSlice(sliceType$5, in$1.$length);
		_ref = in$1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			index = _i;
			value = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Value);
			_r$13 = clone.value(value); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			Value.copy(((index < 0 || index >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + index]), _r$13);
			_i++;
		/* } */ $s = 1; continue; case 2:
		return out;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _clone.ptr.prototype.valueArray }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._ref = _ref; $f.clone = clone; $f.in$1 = in$1; $f.index = index; $f.out = out; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_clone.prototype.valueArray = function(in$1) { return this.$val.valueArray(in$1); };
	_clone.ptr.prototype.stash = function(in$1) {
		var $ptr, _r$13, clone, in$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; clone = $f.clone; in$1 = $f.in$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		clone = this;
		if ($interfaceIsEqual(in$1, $ifaceNil)) {
			return $ifaceNil;
		}
		_r$13 = in$1.clone(clone); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _clone.ptr.prototype.stash }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.clone = clone; $f.in$1 = in$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_clone.prototype.stash = function(in$1) { return this.$val.stash(in$1); };
	_clone.ptr.prototype.property = function(in$1) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _ref, clone, in$1, out, p, value, value$1, value$2, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _ref = $f._ref; clone = $f.clone; in$1 = $f.in$1; out = $f.out; p = $f.p; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		in$1 = $clone(in$1, _property);
		clone = this;
		out = $clone(in$1, _property);
		_ref = in$1.value;
		/* */ if ($assertType(_ref, Value, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, _propertyGetSet, true)[1]) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($assertType(_ref, Value, true)[1]) { */ case 1:
			value = _ref.$val;
			_r$13 = clone.value(value); /* */ $s = 5; case 5: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			out.value = (x = _r$13, new x.constructor.elem(x));
			$s = 4; continue;
		/* } else if ($assertType(_ref, _propertyGetSet, true)[1]) { */ case 2:
			value$1 = _ref.$val;
			p = arrayType$2.zero();
			/* */ if (!(value$1[0] === ptrType$4.nil)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(value$1[0] === ptrType$4.nil)) { */ case 6:
				_r$14 = clone.object(value$1[0]); /* */ $s = 8; case 8: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				p[0] = _r$14;
			/* } */ case 7:
			/* */ if (!(value$1[1] === ptrType$4.nil)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!(value$1[1] === ptrType$4.nil)) { */ case 9:
				_r$15 = clone.object(value$1[1]); /* */ $s = 11; case 11: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				p[1] = _r$15;
			/* } */ case 10:
			out.value = new _propertyGetSet(p);
			$s = 4; continue;
		/* } else { */ case 3:
			value$2 = _ref;
			_r$16 = fmt.Errorf("in.value.(Value) != true; in.value is %T", new sliceType$1([in$1.value])); /* */ $s = 12; case 12: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			$panic(_r$16);
		/* } */ case 4:
		return out;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _clone.ptr.prototype.property }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._ref = _ref; $f.clone = clone; $f.in$1 = in$1; $f.out = out; $f.p = p; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_clone.prototype.property = function(in$1) { return this.$val.property(in$1); };
	_clone.ptr.prototype.dclProperty = function(in$1) {
		var $ptr, _r$13, clone, in$1, out, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; clone = $f.clone; in$1 = $f.in$1; out = $f.out; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		in$1 = $clone(in$1, _dclProperty);
		clone = this;
		out = $clone(in$1, _dclProperty);
		_r$13 = clone.value(in$1.value); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		Value.copy(out.value, _r$13);
		return out;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _clone.ptr.prototype.dclProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.clone = clone; $f.in$1 = in$1; $f.out = out; $f.$s = $s; $f.$r = $r; return $f;
	};
	_clone.prototype.dclProperty = function(in$1) { return this.$val.dclProperty(in$1); };
	_compiler.ptr.prototype.parse = function() {
		var $ptr, _r$13, cmpl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; cmpl = $f.cmpl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cmpl = this;
		if (!(cmpl.program === ptrType$9.nil)) {
			cmpl.file = cmpl.program.File;
		}
		_r$13 = cmpl._parse(cmpl.program); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _compiler.ptr.prototype.parse }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.cmpl = cmpl; $f.$s = $s; $f.$r = $r; return $f;
	};
	_compiler.prototype.parse = function() { return this.$val.parse(); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeProgram = function(node, eval$1) {
		var $ptr, _r$13, eval$1, node, self, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; eval$1 = $f.eval$1; node = $f.node; self = $f.self; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		self = [self];
		self[0] = this;
		/* */ if (!eval$1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!eval$1) { */ case 1:
			self[0].enterGlobalScope();
			$deferred.push([(function(self) { return function() {
				var $ptr;
				self[0].leaveScope();
			}; })(self), []]);
		/* } */ case 2:
		$r = self[0].cmpl_functionDeclaration(node.functionList); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = self[0].cmpl_variableDeclaration(node.varList); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		self[0].scope.frame.file = node.file;
		_r$13 = self[0].cmpl_evaluate_nodeStatementList(node.body); /* */ $s = 5; case 5: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$13;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return new Value.ptr(0, $ifaceNil); } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeProgram }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.eval$1 = eval$1; $f.node = node; $f.self = self; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	_runtime.prototype.cmpl_evaluate_nodeProgram = function(node, eval$1) { return this.$val.cmpl_evaluate_nodeProgram(node, eval$1); };
	_runtime.ptr.prototype.cmpl_call_nodeFunction = function(function$1, stash, node, this$1, argumentList) {
		var $ptr, _i, _i$1, _r$13, _r$14, _r$15, _r$16, _ref, _ref$1, argumentList, arguments$1, argumentsFound, function$1, index, index$1, indexAsString, indexOfParameterName, name, node, result, self, stash, this$1, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _ref = $f._ref; _ref$1 = $f._ref$1; argumentList = $f.argumentList; arguments$1 = $f.arguments$1; argumentsFound = $f.argumentsFound; function$1 = $f.function$1; index = $f.index; index$1 = $f.index$1; indexAsString = $f.indexAsString; indexOfParameterName = $f.indexOfParameterName; name = $f.name; node = $f.node; result = $f.result; self = $f.self; stash = $f.stash; this$1 = $f.this$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		this$1 = $clone(this$1, Value);
		self = this;
		indexOfParameterName = $makeSlice(sliceType, argumentList.$length);
		argumentsFound = false;
		_ref = node.parameterList;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			index = _i;
			name = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (name === "arguments") {
				argumentsFound = true;
			}
			value = new Value.ptr(0, $ifaceNil);
			if (index < argumentList.$length) {
				Value.copy(value, ((index < 0 || index >= argumentList.$length) ? $throwRuntimeError("index out of range") : argumentList.$array[argumentList.$offset + index]));
				((index < 0 || index >= indexOfParameterName.$length) ? $throwRuntimeError("index out of range") : indexOfParameterName.$array[indexOfParameterName.$offset + index] = name);
			}
			$r = self.scope.lexical.setValue(name, value, false); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!argumentsFound) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!argumentsFound) { */ case 4:
			_r$13 = self.newArgumentsObject(indexOfParameterName, stash, argumentList.$length); /* */ $s = 6; case 6: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			arguments$1 = _r$13;
			_r$14 = arguments$1.defineProperty("callee", toValue_object(function$1), 65, false); /* */ $s = 7; case 7: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$14;
			stash.arguments$1 = arguments$1;
			$r = self.scope.lexical.setValue("arguments", toValue_object(arguments$1), false); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_ref$1 = argumentList;
			_i$1 = 0;
			/* while (true) { */ case 9:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 10; continue; }
				index$1 = _i$1;
				/* */ if (index$1 < node.parameterList.$length) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (index$1 < node.parameterList.$length) { */ case 11:
					_i$1++;
					/* continue; */ $s = 9; continue;
				/* } */ case 12:
				indexAsString = strconv.FormatInt(new $Int64(0, index$1), 10);
				_r$15 = arguments$1.defineProperty(indexAsString, ((index$1 < 0 || index$1 >= argumentList.$length) ? $throwRuntimeError("index out of range") : argumentList.$array[argumentList.$offset + index$1]), 73, false); /* */ $s = 13; case 13: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$15;
				_i$1++;
			/* } */ $s = 9; continue; case 10:
		/* } */ case 5:
		$r = self.cmpl_functionDeclaration(node.functionList); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = self.cmpl_variableDeclaration(node.varList); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$16 = self.cmpl_evaluate_nodeStatement(node.body); /* */ $s = 16; case 16: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		result = $clone(_r$16, Value);
		if (result.kind === 7) {
			return result;
		}
		return new Value.ptr(0, $ifaceNil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_call_nodeFunction }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._ref = _ref; $f._ref$1 = _ref$1; $f.argumentList = argumentList; $f.arguments$1 = arguments$1; $f.argumentsFound = argumentsFound; $f.function$1 = function$1; $f.index = index; $f.index$1 = index$1; $f.indexAsString = indexAsString; $f.indexOfParameterName = indexOfParameterName; $f.name = name; $f.node = node; $f.result = result; $f.self = self; $f.stash = stash; $f.this$1 = this$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_call_nodeFunction = function(function$1, stash, node, this$1, argumentList) { return this.$val.cmpl_call_nodeFunction(function$1, stash, node, this$1, argumentList); };
	_runtime.ptr.prototype.cmpl_functionDeclaration = function(list) {
		var $ptr, _i, _r$13, _r$14, _ref, eval$1, executionContext, function$1, list, name, self, stash, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; eval$1 = $f.eval$1; executionContext = $f.executionContext; function$1 = $f.function$1; list = $f.list; name = $f.name; self = $f.self; stash = $f.stash; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		executionContext = self.scope;
		eval$1 = executionContext.eval$3;
		stash = executionContext.variable;
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			function$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			name = function$1.name;
			_r$13 = self.cmpl_evaluate_nodeExpression(function$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			value = $clone(_r$13, Value);
			_r$14 = stash.hasBinding(name); /* */ $s = 7; case 7: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ if (!_r$14) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!_r$14) { */ case 4:
				$r = stash.createBinding(name, eval$1, value); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else { */ case 5:
				$r = stash.setBinding(name, value, false); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_functionDeclaration }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f.eval$1 = eval$1; $f.executionContext = executionContext; $f.function$1 = function$1; $f.list = list; $f.name = name; $f.self = self; $f.stash = stash; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_functionDeclaration = function(list) { return this.$val.cmpl_functionDeclaration(list); };
	_runtime.ptr.prototype.cmpl_variableDeclaration = function(list) {
		var $ptr, _i, _r$13, _ref, eval$1, executionContext, list, name, self, stash, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _ref = $f._ref; eval$1 = $f.eval$1; executionContext = $f.executionContext; list = $f.list; name = $f.name; self = $f.self; stash = $f.stash; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		executionContext = self.scope;
		eval$1 = executionContext.eval$3;
		stash = executionContext.variable;
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			name = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$13 = stash.hasBinding(name); /* */ $s = 5; case 5: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ if (!_r$13) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r$13) { */ case 3:
				$r = stash.createBinding(name, eval$1, new Value.ptr(0, $ifaceNil)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_variableDeclaration }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._ref = _ref; $f.eval$1 = eval$1; $f.executionContext = executionContext; $f.list = list; $f.name = name; $f.self = self; $f.stash = stash; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_variableDeclaration = function(list) { return this.$val.cmpl_variableDeclaration(list); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeExpression = function(node) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _ref, _selection, local, name, node, node$1, node$10, node$11, node$12, node$13, node$14, node$15, node$16, node$17, node$2, node$3, node$4, node$5, node$6, node$7, node$8, node$9, reference, self, value, value$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _ref = $f._ref; _selection = $f._selection; local = $f.local; name = $f.name; node = $f.node; node$1 = $f.node$1; node$10 = $f.node$10; node$11 = $f.node$11; node$12 = $f.node$12; node$13 = $f.node$13; node$14 = $f.node$14; node$15 = $f.node$15; node$16 = $f.node$16; node$17 = $f.node$17; node$2 = $f.node$2; node$3 = $f.node$3; node$4 = $f.node$4; node$5 = $f.node$5; node$6 = $f.node$6; node$7 = $f.node$7; node$8 = $f.node$8; node$9 = $f.node$9; reference = $f.reference; self = $f.self; value = $f.value; value$1 = $f.value$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (!(self.otto.Interrupt === $chanNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(self.otto.Interrupt === $chanNil)) { */ case 1:
			$r = runtime.Gosched(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_selection = $select([[self.otto.Interrupt], []]);
			/* */ if (_selection[0] === 0) { $s = 4; continue; }
			/* */ if (_selection[0] === 1) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_selection[0] === 0) { */ case 4:
				value = _selection[1][0];
				$r = value(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else if (_selection[0] === 1) { */ case 5:
			/* } */ case 6:
		/* } */ case 2:
		_ref = node;
		/* */ if ($assertType(_ref, ptrType$19, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$20, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, ptrType$21, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ptrType$22, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref, ptrType$23, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref, ptrType$24, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref, ptrType$25, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref, ptrType$26, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, ptrType$27, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, ptrType$28, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, ptrType$29, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, ptrType$30, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, ptrType$31, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, ptrType$32, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, ptrType$33, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, ptrType$34, true)[1]) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if ($assertType(_ref, ptrType$19, true)[1]) { */ case 8:
			node$1 = _ref.$val;
			_r$13 = self.cmpl_evaluate_nodeArrayLiteral(node$1); /* */ $s = 26; case 26: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 27; case 27:
			return _r$13;
		/* } else if ($assertType(_ref, ptrType$20, true)[1]) { */ case 9:
			node$2 = _ref.$val;
			_r$14 = self.cmpl_evaluate_nodeAssignExpression(node$2); /* */ $s = 28; case 28: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 29; case 29:
			return _r$14;
		/* } else if ($assertType(_ref, ptrType$21, true)[1]) { */ case 10:
			node$3 = _ref.$val;
			/* */ if (node$3.comparison) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (node$3.comparison) { */ case 30:
				_r$15 = self.cmpl_evaluate_nodeBinaryExpression_comparison(node$3); /* */ $s = 33; case 33: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				/* */ $s = 34; case 34:
				return _r$15;
			/* } else { */ case 31:
				_r$16 = self.cmpl_evaluate_nodeBinaryExpression(node$3); /* */ $s = 35; case 35: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				/* */ $s = 36; case 36:
				return _r$16;
			/* } */ case 32:
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$22, true)[1]) { */ case 11:
			node$4 = _ref.$val;
			_r$17 = self.cmpl_evaluate_nodeBracketExpression(node$4); /* */ $s = 37; case 37: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ $s = 38; case 38:
			return _r$17;
		/* } else if ($assertType(_ref, ptrType$23, true)[1]) { */ case 12:
			node$5 = _ref.$val;
			_r$18 = self.cmpl_evaluate_nodeCallExpression(node$5, sliceType$1.nil); /* */ $s = 39; case 39: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			/* */ $s = 40; case 40:
			return _r$18;
		/* } else if ($assertType(_ref, ptrType$24, true)[1]) { */ case 13:
			node$6 = _ref.$val;
			_r$19 = self.cmpl_evaluate_nodeConditionalExpression(node$6); /* */ $s = 41; case 41: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			/* */ $s = 42; case 42:
			return _r$19;
		/* } else if ($assertType(_ref, ptrType$25, true)[1]) { */ case 14:
			node$7 = _ref.$val;
			_r$20 = self.cmpl_evaluate_nodeDotExpression(node$7); /* */ $s = 43; case 43: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			/* */ $s = 44; case 44:
			return _r$20;
		/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 15:
			node$8 = _ref.$val;
			local = self.scope.lexical;
			if (!(node$8.name === "")) {
				local = self.newDeclarationStash(local);
			}
			_r$21 = self.newNodeFunction(node$8, local); /* */ $s = 45; case 45: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			_r$22 = toValue_object(_r$21); /* */ $s = 46; case 46: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			value$1 = $clone(_r$22, Value);
			/* */ if (!(node$8.name === "")) { $s = 47; continue; }
			/* */ $s = 48; continue;
			/* if (!(node$8.name === "")) { */ case 47:
				$r = local.createBinding(node$8.name, false, value$1); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 48:
			return value$1;
		/* } else if ($assertType(_ref, ptrType$26, true)[1]) { */ case 16:
			node$9 = _ref.$val;
			name = node$9.name;
			_r$23 = getIdentifierReference(self, self.scope.lexical, name, false, (node$9.idx >> 0)); /* */ $s = 50; case 50: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			reference = _r$23;
			/* */ if ($interfaceIsEqual(reference, $ifaceNil)) { $s = 51; continue; }
			/* */ $s = 52; continue;
			/* if ($interfaceIsEqual(reference, $ifaceNil)) { */ case 51:
				_r$24 = hereBeDragons(new sliceType$1([new $String("referenceError == nil: " + name)])); /* */ $s = 53; case 53: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				$panic(new $String(_r$24));
			/* } */ case 52:
			_r$25 = toValue(reference); /* */ $s = 54; case 54: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			/* */ $s = 55; case 55:
			return _r$25;
		/* } else if ($assertType(_ref, ptrType$27, true)[1]) { */ case 17:
			node$10 = _ref.$val;
			return node$10.value;
		/* } else if ($assertType(_ref, ptrType$28, true)[1]) { */ case 18:
			node$11 = _ref.$val;
			_r$26 = self.cmpl_evaluate_nodeNewExpression(node$11); /* */ $s = 56; case 56: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			/* */ $s = 57; case 57:
			return _r$26;
		/* } else if ($assertType(_ref, ptrType$29, true)[1]) { */ case 19:
			node$12 = _ref.$val;
			_r$27 = self.cmpl_evaluate_nodeObjectLiteral(node$12); /* */ $s = 58; case 58: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			/* */ $s = 59; case 59:
			return _r$27;
		/* } else if ($assertType(_ref, ptrType$30, true)[1]) { */ case 20:
			node$13 = _ref.$val;
			_r$28 = self._newRegExp(node$13.pattern, node$13.flags); /* */ $s = 60; case 60: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			_r$29 = toValue_object(_r$28); /* */ $s = 61; case 61: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
			/* */ $s = 62; case 62:
			return _r$29;
		/* } else if ($assertType(_ref, ptrType$31, true)[1]) { */ case 21:
			node$14 = _ref.$val;
			_r$30 = self.cmpl_evaluate_nodeSequenceExpression(node$14); /* */ $s = 63; case 63: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
			/* */ $s = 64; case 64:
			return _r$30;
		/* } else if ($assertType(_ref, ptrType$32, true)[1]) { */ case 22:
			node$15 = _ref.$val;
			return toValue_object(self.scope.this$2);
		/* } else if ($assertType(_ref, ptrType$33, true)[1]) { */ case 23:
			node$16 = _ref.$val;
			_r$31 = self.cmpl_evaluate_nodeUnaryExpression(node$16); /* */ $s = 65; case 65: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			/* */ $s = 66; case 66:
			return _r$31;
		/* } else if ($assertType(_ref, ptrType$34, true)[1]) { */ case 24:
			node$17 = _ref.$val;
			_r$32 = self.cmpl_evaluate_nodeVariableExpression(node$17); /* */ $s = 67; case 67: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			/* */ $s = 68; case 68:
			return _r$32;
		/* } */ case 25:
		_r$33 = fmt.Errorf("Here be dragons: evaluate_nodeExpression(%T)", new sliceType$1([node])); /* */ $s = 69; case 69: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		$panic(_r$33);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeExpression }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._ref = _ref; $f._selection = _selection; $f.local = local; $f.name = name; $f.node = node; $f.node$1 = node$1; $f.node$10 = node$10; $f.node$11 = node$11; $f.node$12 = node$12; $f.node$13 = node$13; $f.node$14 = node$14; $f.node$15 = node$15; $f.node$16 = node$16; $f.node$17 = node$17; $f.node$2 = node$2; $f.node$3 = node$3; $f.node$4 = node$4; $f.node$5 = node$5; $f.node$6 = node$6; $f.node$7 = node$7; $f.node$8 = node$8; $f.node$9 = node$9; $f.reference = reference; $f.self = self; $f.value = value; $f.value$1 = value$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeExpression = function(node) { return this.$val.cmpl_evaluate_nodeExpression(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeArrayLiteral = function(node) {
		var $ptr, _i, _r$13, _r$14, _r$15, _ref, node, node$1, result, self, valueArray, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _ref = $f._ref; node = $f.node; node$1 = $f.node$1; result = $f.result; self = $f.self; valueArray = $f.valueArray; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		valueArray = new sliceType$5([]);
		_ref = node.value;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			node$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if ($interfaceIsEqual(node$1, $ifaceNil)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($interfaceIsEqual(node$1, $ifaceNil)) { */ case 3:
				valueArray = $append(valueArray, emptyValue);
				$s = 5; continue;
			/* } else { */ case 4:
				_r$13 = self.cmpl_evaluate_nodeExpression(node$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$14 = _r$13.resolve(); /* */ $s = 7; case 7: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				valueArray = $append(valueArray, _r$14);
			/* } */ case 5:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$15 = self.newArrayOf(valueArray); /* */ $s = 8; case 8: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		result = _r$15;
		return toValue_object(result);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeArrayLiteral }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._ref = _ref; $f.node = node; $f.node$1 = node$1; $f.result = result; $f.self = self; $f.valueArray = valueArray; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeArrayLiteral = function(node) { return this.$val.cmpl_evaluate_nodeArrayLiteral(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeAssignExpression = function(node) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, left, node, result, right, rightValue, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; left = $f.left; node = $f.node; result = $f.result; right = $f.right; rightValue = $f.rightValue; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.cmpl_evaluate_nodeExpression(node.left); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		left = $clone(_r$13, Value);
		_r$14 = self.cmpl_evaluate_nodeExpression(node.right); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		right = $clone(_r$14, Value);
		_r$15 = right.resolve(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		rightValue = $clone(_r$15, Value);
		result = $clone(rightValue, Value);
		/* */ if (!((node.operator === 42))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((node.operator === 42))) { */ case 4:
			_r$16 = self.calculateBinaryExpression(node.operator, left, rightValue); /* */ $s = 6; case 6: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			Value.copy(result, _r$16);
		/* } */ case 5:
		$r = self.putValue(left.reference(), result); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeAssignExpression }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.left = left; $f.node = node; $f.result = result; $f.right = right; $f.rightValue = rightValue; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeAssignExpression = function(node) { return this.$val.cmpl_evaluate_nodeAssignExpression(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeBinaryExpression = function(node) {
		var $ptr, _arg, _arg$1, _arg$2, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _ref, left, leftValue, node, right, right$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _ref = $f._ref; left = $f.left; leftValue = $f.leftValue; node = $f.node; right = $f.right; right$1 = $f.right$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.cmpl_evaluate_nodeExpression(node.left); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		left = $clone(_r$13, Value);
		_r$14 = left.resolve(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		leftValue = $clone(_r$14, Value);
		_ref = node.operator;
		/* */ if (_ref === 34) { $s = 3; continue; }
		/* */ if (_ref === 35) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_ref === 34) { */ case 3:
			_r$15 = leftValue.bool(); /* */ $s = 8; case 8: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ if (!_r$15) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!_r$15) { */ case 6:
				return leftValue;
			/* } */ case 7:
			_r$16 = self.cmpl_evaluate_nodeExpression(node.right); /* */ $s = 9; case 9: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			right = $clone(_r$16, Value);
			_r$17 = right.resolve(); /* */ $s = 10; case 10: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ $s = 11; case 11:
			return _r$17;
		/* } else if (_ref === 35) { */ case 4:
			_r$18 = leftValue.bool(); /* */ $s = 14; case 14: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			/* */ if (_r$18) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_r$18) { */ case 12:
				return leftValue;
			/* } */ case 13:
			_r$19 = self.cmpl_evaluate_nodeExpression(node.right); /* */ $s = 15; case 15: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			right$1 = $clone(_r$19, Value);
			_r$20 = right$1.resolve(); /* */ $s = 16; case 16: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			/* */ $s = 17; case 17:
			return _r$20;
		/* } */ case 5:
		_arg = node.operator;
		_arg$1 = leftValue;
		_r$21 = self.cmpl_evaluate_nodeExpression(node.right); /* */ $s = 18; case 18: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		_arg$2 = _r$21;
		_r$22 = self.calculateBinaryExpression(_arg, _arg$1, _arg$2); /* */ $s = 19; case 19: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		/* */ $s = 20; case 20:
		return _r$22;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeBinaryExpression }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._ref = _ref; $f.left = left; $f.leftValue = leftValue; $f.node = node; $f.right = right; $f.right$1 = right$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeBinaryExpression = function(node) { return this.$val.cmpl_evaluate_nodeBinaryExpression(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeBinaryExpression_comparison = function(node) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, left, node, right, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; left = $f.left; node = $f.node; right = $f.right; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.cmpl_evaluate_nodeExpression(node.left); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = _r$13.resolve(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		left = $clone(_r$14, Value);
		_r$15 = self.cmpl_evaluate_nodeExpression(node.right); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = _r$15.resolve(); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		right = $clone(_r$16, Value);
		_r$17 = self.calculateComparison(node.operator, left, right); /* */ $s = 5; case 5: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_r$18 = toValue_bool(_r$17); /* */ $s = 6; case 6: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		/* */ $s = 7; case 7:
		return _r$18;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeBinaryExpression_comparison }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f.left = left; $f.node = node; $f.right = right; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeBinaryExpression_comparison = function(node) { return this.$val.cmpl_evaluate_nodeBinaryExpression_comparison(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeBracketExpression = function(node) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _tuple$1, err, member, memberValue, node, object, self, target, targetValue, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _tuple$1 = $f._tuple$1; err = $f.err; member = $f.member; memberValue = $f.memberValue; node = $f.node; object = $f.object; self = $f.self; target = $f.target; targetValue = $f.targetValue; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.cmpl_evaluate_nodeExpression(node.left); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		target = $clone(_r$13, Value);
		_r$14 = target.resolve(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		targetValue = $clone(_r$14, Value);
		_r$15 = self.cmpl_evaluate_nodeExpression(node.member); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		member = $clone(_r$15, Value);
		_r$16 = member.resolve(); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		memberValue = $clone(_r$16, Value);
		_r$17 = self.objectCoerce(targetValue); /* */ $s = 5; case 5: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_tuple$1 = _r$17;
		object = _tuple$1[0];
		err = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 6:
			_r$18 = memberValue.string(); /* */ $s = 8; case 8: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_arg = new $String(_r$18);
			_r$19 = err.Error(); /* */ $s = 9; case 9: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$19);
			_arg$2 = new _at((node.idx >> 0));
			_r$20 = self.panicTypeError(new sliceType$1([new $String("Cannot access member '%s' of %s"), _arg, _arg$1, _arg$2])); /* */ $s = 10; case 10: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			$panic(_r$20);
		/* } */ case 7:
		_arg$3 = self;
		_arg$4 = object;
		_r$21 = memberValue.string(); /* */ $s = 11; case 11: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		_arg$5 = _r$21;
		_arg$6 = (node.idx >> 0);
		_r$22 = newPropertyReference(_arg$3, _arg$4, _arg$5, false, _arg$6); /* */ $s = 12; case 12: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$23 = toValue(_r$22); /* */ $s = 13; case 13: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		/* */ $s = 14; case 14:
		return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeBracketExpression }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._tuple$1 = _tuple$1; $f.err = err; $f.member = member; $f.memberValue = memberValue; $f.node = node; $f.object = object; $f.self = self; $f.target = target; $f.targetValue = targetValue; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeBracketExpression = function(node) { return this.$val.cmpl_evaluate_nodeBracketExpression(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeCallExpression = function(node, withArgumentList) {
		var $ptr, _i, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _ref, _ref$1, _ref$2, argumentList, argumentNode, at, callee, callee$1, callee$2, callee$3, eval$1, frame, name, node, object, rf, rf$1, rf$2, rf$3, rt, self, this$1, vl, withArgumentList, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; argumentList = $f.argumentList; argumentNode = $f.argumentNode; at = $f.at; callee = $f.callee; callee$1 = $f.callee$1; callee$2 = $f.callee$2; callee$3 = $f.callee$3; eval$1 = $f.eval$1; frame = $f.frame; name = $f.name; node = $f.node; object = $f.object; rf = $f.rf; rf$1 = $f.rf$1; rf$2 = $f.rf$2; rf$3 = $f.rf$3; rt = $f.rt; self = $f.self; this$1 = $f.this$1; vl = $f.vl; withArgumentList = $f.withArgumentList; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		rt = self;
		this$1 = new Value.ptr(0, $ifaceNil);
		_r$13 = self.cmpl_evaluate_nodeExpression(node.callee); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		callee = $clone(_r$13, Value);
		argumentList = new sliceType$5([]);
		/* */ if (!(withArgumentList === sliceType$1.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(withArgumentList === sliceType$1.nil)) { */ case 2:
			_r$14 = self.toValueArray(withArgumentList); /* */ $s = 5; case 5: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			argumentList = _r$14;
			$s = 4; continue;
		/* } else { */ case 3:
			_ref = node.argumentList;
			_i = 0;
			/* while (true) { */ case 6:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
				argumentNode = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_r$15 = self.cmpl_evaluate_nodeExpression(argumentNode); /* */ $s = 8; case 8: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$16 = _r$15.resolve(); /* */ $s = 9; case 9: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				argumentList = $append(argumentList, _r$16);
				_i++;
			/* } */ $s = 6; continue; case 7:
		/* } */ case 4:
		rf = callee.reference();
		_r$17 = callee.resolve(); /* */ $s = 10; case 10: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		vl = $clone(_r$17, Value);
		eval$1 = false;
		name = "";
		/* */ if (!($interfaceIsEqual(rf, $ifaceNil))) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (!($interfaceIsEqual(rf, $ifaceNil))) { */ case 11:
			_ref$1 = rf;
			/* */ if ($assertType(_ref$1, ptrType$35, true)[1]) { $s = 13; continue; }
			/* */ if ($assertType(_ref$1, ptrType$36, true)[1]) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if ($assertType(_ref$1, ptrType$35, true)[1]) { */ case 13:
				rf$1 = _ref$1.$val;
				name = rf$1.name;
				object = rf$1.base;
				Value.copy(this$1, toValue_object(object));
				eval$1 = rf$1.name === "eval";
				$s = 16; continue;
			/* } else if ($assertType(_ref$1, ptrType$36, true)[1]) { */ case 14:
				rf$2 = _ref$1.$val;
				name = rf$2.name;
				eval$1 = rf$2.name === "eval";
				$s = 16; continue;
			/* } else { */ case 15:
				rf$3 = _ref$1;
				_r$18 = rt.panicTypeError(new sliceType$1([new $String("Here be dragons")])); /* */ $s = 17; case 17: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				$panic(_r$18);
			/* } */ case 16:
		/* } */ case 12:
		at = -1;
		_ref$2 = node.callee;
		if ($assertType(_ref$2, ptrType$26, true)[1]) {
			callee$1 = _ref$2.$val;
			at = (callee$1.idx >> 0);
		} else if ($assertType(_ref$2, ptrType$25, true)[1]) {
			callee$2 = _ref$2.$val;
			at = (callee$2.idx >> 0);
		} else if ($assertType(_ref$2, ptrType$22, true)[1]) {
			callee$3 = _ref$2.$val;
			at = (callee$3.idx >> 0);
		}
		frame = new _frame.ptr(self.scope.frame.file, 0, name);
		/* */ if (!vl.IsFunction()) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (!vl.IsFunction()) { */ case 18:
			/* */ if (name === "") { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (name === "") { */ case 20:
				_r$19 = rt.panicTypeError(new sliceType$1([new $String("%v is not a function"), new vl.constructor.elem(vl), new _at(at)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				$panic(_r$19);
			/* } */ case 21:
			_r$20 = rt.panicTypeError(new sliceType$1([new $String("'%s' is not a function"), new $String(name), new _at(at)])); /* */ $s = 23; case 23: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			$panic(_r$20);
		/* } */ case 19:
		self.scope.frame.offset = (at >> 0);
		_r$21 = vl._object().call(this$1, argumentList, eval$1, frame); /* */ $s = 24; case 24: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		/* */ $s = 25; case 25:
		return _r$21;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeCallExpression }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.argumentList = argumentList; $f.argumentNode = argumentNode; $f.at = at; $f.callee = callee; $f.callee$1 = callee$1; $f.callee$2 = callee$2; $f.callee$3 = callee$3; $f.eval$1 = eval$1; $f.frame = frame; $f.name = name; $f.node = node; $f.object = object; $f.rf = rf; $f.rf$1 = rf$1; $f.rf$2 = rf$2; $f.rf$3 = rf$3; $f.rt = rt; $f.self = self; $f.this$1 = this$1; $f.vl = vl; $f.withArgumentList = withArgumentList; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeCallExpression = function(node, withArgumentList) { return this.$val.cmpl_evaluate_nodeCallExpression(node, withArgumentList); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeConditionalExpression = function(node) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, node, self, test, testValue, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; node = $f.node; self = $f.self; test = $f.test; testValue = $f.testValue; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.cmpl_evaluate_nodeExpression(node.test); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		test = $clone(_r$13, Value);
		_r$14 = test.resolve(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		testValue = $clone(_r$14, Value);
		_r$15 = testValue.bool(); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ if (_r$15) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_r$15) { */ case 3:
			_r$16 = self.cmpl_evaluate_nodeExpression(node.consequent); /* */ $s = 6; case 6: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ $s = 7; case 7:
			return _r$16;
		/* } */ case 4:
		_r$17 = self.cmpl_evaluate_nodeExpression(node.alternate); /* */ $s = 8; case 8: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		/* */ $s = 9; case 9:
		return _r$17;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeConditionalExpression }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f.node = node; $f.self = self; $f.test = test; $f.testValue = testValue; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeConditionalExpression = function(node) { return this.$val.cmpl_evaluate_nodeConditionalExpression(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeDotExpression = function(node) {
		var $ptr, _arg, _arg$1, _arg$2, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _tuple$1, err, node, object, self, target, targetValue, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _tuple$1 = $f._tuple$1; err = $f.err; node = $f.node; object = $f.object; self = $f.self; target = $f.target; targetValue = $f.targetValue; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.cmpl_evaluate_nodeExpression(node.left); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		target = $clone(_r$13, Value);
		_r$14 = target.resolve(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		targetValue = $clone(_r$14, Value);
		_r$15 = self.objectCoerce(targetValue); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_tuple$1 = _r$15;
		object = _tuple$1[0];
		err = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
			_arg = new $String(node.identifier);
			_r$16 = err.Error(); /* */ $s = 6; case 6: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$16);
			_arg$2 = new _at((node.idx >> 0));
			_r$17 = self.panicTypeError(new sliceType$1([new $String("Cannot access member '%s' of %s"), _arg, _arg$1, _arg$2])); /* */ $s = 7; case 7: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			$panic(_r$17);
		/* } */ case 5:
		_r$18 = toValue(newPropertyReference(self, object, node.identifier, false, (node.idx >> 0))); /* */ $s = 8; case 8: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		/* */ $s = 9; case 9:
		return _r$18;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeDotExpression }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._tuple$1 = _tuple$1; $f.err = err; $f.node = node; $f.object = object; $f.self = self; $f.target = target; $f.targetValue = targetValue; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeDotExpression = function(node) { return this.$val.cmpl_evaluate_nodeDotExpression(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeNewExpression = function(node) {
		var $ptr, _i, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _ref, _ref$1, _ref$2, argumentList, argumentNode, at, callee, callee$1, callee$2, callee$3, name, node, rf, rf$1, rf$2, rf$3, rt, self, vl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; argumentList = $f.argumentList; argumentNode = $f.argumentNode; at = $f.at; callee = $f.callee; callee$1 = $f.callee$1; callee$2 = $f.callee$2; callee$3 = $f.callee$3; name = $f.name; node = $f.node; rf = $f.rf; rf$1 = $f.rf$1; rf$2 = $f.rf$2; rf$3 = $f.rf$3; rt = $f.rt; self = $f.self; vl = $f.vl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		rt = self;
		_r$13 = self.cmpl_evaluate_nodeExpression(node.callee); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		callee = $clone(_r$13, Value);
		argumentList = new sliceType$5([]);
		_ref = node.argumentList;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			argumentNode = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$14 = self.cmpl_evaluate_nodeExpression(argumentNode); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = _r$14.resolve(); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			argumentList = $append(argumentList, _r$15);
			_i++;
		/* } */ $s = 2; continue; case 3:
		rf = callee.reference();
		_r$16 = callee.resolve(); /* */ $s = 6; case 6: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		vl = $clone(_r$16, Value);
		name = "";
		/* */ if (!($interfaceIsEqual(rf, $ifaceNil))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!($interfaceIsEqual(rf, $ifaceNil))) { */ case 7:
			_ref$1 = rf;
			/* */ if ($assertType(_ref$1, ptrType$35, true)[1]) { $s = 9; continue; }
			/* */ if ($assertType(_ref$1, ptrType$36, true)[1]) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if ($assertType(_ref$1, ptrType$35, true)[1]) { */ case 9:
				rf$1 = _ref$1.$val;
				name = rf$1.name;
				$s = 12; continue;
			/* } else if ($assertType(_ref$1, ptrType$36, true)[1]) { */ case 10:
				rf$2 = _ref$1.$val;
				name = rf$2.name;
				$s = 12; continue;
			/* } else { */ case 11:
				rf$3 = _ref$1;
				_r$17 = rt.panicTypeError(new sliceType$1([new $String("Here be dragons")])); /* */ $s = 13; case 13: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				$panic(_r$17);
			/* } */ case 12:
		/* } */ case 8:
		at = -1;
		_ref$2 = node.callee;
		if ($assertType(_ref$2, ptrType$26, true)[1]) {
			callee$1 = _ref$2.$val;
			at = (callee$1.idx >> 0);
		} else if ($assertType(_ref$2, ptrType$25, true)[1]) {
			callee$2 = _ref$2.$val;
			at = (callee$2.idx >> 0);
		} else if ($assertType(_ref$2, ptrType$22, true)[1]) {
			callee$3 = _ref$2.$val;
			at = (callee$3.idx >> 0);
		}
		/* */ if (!vl.IsFunction()) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (!vl.IsFunction()) { */ case 14:
			/* */ if (name === "") { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (name === "") { */ case 16:
				_r$18 = rt.panicTypeError(new sliceType$1([new $String("%v is not a function"), new vl.constructor.elem(vl), new _at(at)])); /* */ $s = 18; case 18: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				$panic(_r$18);
			/* } */ case 17:
			_r$19 = rt.panicTypeError(new sliceType$1([new $String("'%s' is not a function"), new $String(name), new _at(at)])); /* */ $s = 19; case 19: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			$panic(_r$19);
		/* } */ case 15:
		self.scope.frame.offset = (at >> 0);
		_r$20 = vl._object().construct(argumentList); /* */ $s = 20; case 20: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		/* */ $s = 21; case 21:
		return _r$20;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeNewExpression }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.argumentList = argumentList; $f.argumentNode = argumentNode; $f.at = at; $f.callee = callee; $f.callee$1 = callee$1; $f.callee$2 = callee$2; $f.callee$3 = callee$3; $f.name = name; $f.node = node; $f.rf = rf; $f.rf$1 = rf$1; $f.rf$2 = rf$2; $f.rf$3 = rf$3; $f.rt = rt; $f.self = self; $f.vl = vl; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeNewExpression = function(node) { return this.$val.cmpl_evaluate_nodeNewExpression(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeObjectLiteral = function(node) {
		var $ptr, _arg, _arg$1, _i, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _ref, _ref$1, descriptor, descriptor$1, getter, node, property, result, self, setter, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _ref = $f._ref; _ref$1 = $f._ref$1; descriptor = $f.descriptor; descriptor$1 = $f.descriptor$1; getter = $f.getter; node = $f.node; property = $f.property; result = $f.result; self = $f.self; setter = $f.setter; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		result = self.newObject();
		_ref = node.value;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			property = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), _nodeProperty);
			_ref$1 = property.kind;
			/* */ if (_ref$1 === "value") { $s = 3; continue; }
			/* */ if (_ref$1 === "get") { $s = 4; continue; }
			/* */ if (_ref$1 === "set") { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_ref$1 === "value") { */ case 3:
				_arg = property.key;
				_r$13 = self.cmpl_evaluate_nodeExpression(property.value); /* */ $s = 8; case 8: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$14 = _r$13.resolve(); /* */ $s = 9; case 9: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_arg$1 = _r$14;
				_r$15 = result.defineProperty(_arg, _arg$1, 73, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$15;
				$s = 7; continue;
			/* } else if (_ref$1 === "get") { */ case 4:
				_r$16 = self.newNodeFunction($assertType(property.value, ptrType$10), self.scope.lexical); /* */ $s = 11; case 11: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				getter = _r$16;
				descriptor = new _property.ptr($ifaceNil, 0);
				descriptor.mode = 137;
				descriptor.value = new _propertyGetSet($toNativeArray($kindPtr, [getter, ptrType$4.nil]));
				_r$17 = result.defineOwnProperty(property.key, descriptor, false); /* */ $s = 12; case 12: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$17;
				$s = 7; continue;
			/* } else if (_ref$1 === "set") { */ case 5:
				_r$18 = self.newNodeFunction($assertType(property.value, ptrType$10), self.scope.lexical); /* */ $s = 13; case 13: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				setter = _r$18;
				descriptor$1 = new _property.ptr($ifaceNil, 0);
				descriptor$1.mode = 137;
				descriptor$1.value = new _propertyGetSet($toNativeArray($kindPtr, [ptrType$4.nil, setter]));
				_r$19 = result.defineOwnProperty(property.key, descriptor$1, false); /* */ $s = 14; case 14: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				_r$19;
				$s = 7; continue;
			/* } else { */ case 6:
				_r$20 = fmt.Errorf("Here be dragons: evaluate_nodeObjectLiteral: invalid property.Kind: %v", new sliceType$1([new $String(property.kind)])); /* */ $s = 15; case 15: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				$panic(_r$20);
			/* } */ case 7:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return toValue_object(result);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeObjectLiteral }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._ref = _ref; $f._ref$1 = _ref$1; $f.descriptor = descriptor; $f.descriptor$1 = descriptor$1; $f.getter = getter; $f.node = node; $f.property = property; $f.result = result; $f.self = self; $f.setter = setter; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeObjectLiteral = function(node) { return this.$val.cmpl_evaluate_nodeObjectLiteral(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeSequenceExpression = function(node) {
		var $ptr, _i, _r$13, _r$14, _ref, node, node$1, result, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; node = $f.node; node$1 = $f.node$1; result = $f.result; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		result = new Value.ptr(0, $ifaceNil);
		_ref = node.sequence;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			node$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$13 = self.cmpl_evaluate_nodeExpression(node$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			Value.copy(result, _r$13);
			_r$14 = result.resolve(); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			Value.copy(result, _r$14);
			_i++;
		/* } */ $s = 1; continue; case 2:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeSequenceExpression }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f.node = node; $f.node$1 = node$1; $f.result = result; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeSequenceExpression = function(node) { return this.$val.cmpl_evaluate_nodeSequenceExpression(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeUnaryExpression = function(node) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _ref, _ref$1, _ref$2, _v, integerValue, newValue, newValue$1, newValue$2, newValue$3, node, oldValue, oldValue$1, reference, self, sign, target, targetValue, targetValue$1, targetValue$2, targetValue$3, targetValue$4, targetValue$5, targetValue$6, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _v = $f._v; integerValue = $f.integerValue; newValue = $f.newValue; newValue$1 = $f.newValue$1; newValue$2 = $f.newValue$2; newValue$3 = $f.newValue$3; node = $f.node; oldValue = $f.oldValue; oldValue$1 = $f.oldValue$1; reference = $f.reference; self = $f.self; sign = $f.sign; target = $f.target; targetValue = $f.targetValue; targetValue$1 = $f.targetValue$1; targetValue$2 = $f.targetValue$2; targetValue$3 = $f.targetValue$3; targetValue$4 = $f.targetValue$4; targetValue$5 = $f.targetValue$5; targetValue$6 = $f.targetValue$6; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.cmpl_evaluate_nodeExpression(node.operand); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		target = $clone(_r$13, Value);
		_ref = node.operator;
		/* */ if (_ref === 78 || _ref === 79) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_ref === 78 || _ref === 79) { */ case 2:
			if (!(target.kind === 8)) { _v = false; $s = 6; continue s; }
			_r$14 = target.reference().invalid(); /* */ $s = 7; case 7: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_v = _r$14; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				if (node.operator === 78) {
					return toValue_string("undefined");
				}
				return trueValue;
			/* } */ case 5:
		/* } */ case 3:
		_ref$1 = node.operator;
		/* */ if (_ref$1 === 43) { $s = 8; continue; }
		/* */ if (_ref$1 === 44) { $s = 9; continue; }
		/* */ if (_ref$1 === 10) { $s = 10; continue; }
		/* */ if (_ref$1 === 11) { $s = 11; continue; }
		/* */ if (_ref$1 === 36) { $s = 12; continue; }
		/* */ if (_ref$1 === 37) { $s = 13; continue; }
		/* */ if (_ref$1 === 71) { $s = 14; continue; }
		/* */ if (_ref$1 === 79) { $s = 15; continue; }
		/* */ if (_ref$1 === 78) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (_ref$1 === 43) { */ case 8:
			_r$15 = target.resolve(); /* */ $s = 18; case 18: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			targetValue = $clone(_r$15, Value);
			_r$16 = targetValue.bool(); /* */ $s = 21; case 21: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ if (_r$16) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (_r$16) { */ case 19:
				return falseValue;
			/* } */ case 20:
			return trueValue;
		/* } else if (_ref$1 === 44) { */ case 9:
			_r$17 = target.resolve(); /* */ $s = 22; case 22: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			targetValue$1 = $clone(_r$17, Value);
			_r$18 = toInt32(targetValue$1); /* */ $s = 23; case 23: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			integerValue = _r$18;
			return toValue_int32(~integerValue >> 0);
		/* } else if (_ref$1 === 10) { */ case 10:
			_r$19 = target.resolve(); /* */ $s = 24; case 24: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			targetValue$2 = $clone(_r$19, Value);
			_r$20 = targetValue$2.float64(); /* */ $s = 25; case 25: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_r$21 = toValue_float64(_r$20); /* */ $s = 26; case 26: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			/* */ $s = 27; case 27:
			return _r$21;
		/* } else if (_ref$1 === 11) { */ case 11:
			_r$22 = target.resolve(); /* */ $s = 28; case 28: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			targetValue$3 = $clone(_r$22, Value);
			_r$23 = targetValue$3.float64(); /* */ $s = 29; case 29: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			value = _r$23;
			sign = -1;
			if (math.Signbit(value)) {
				sign = 1;
			}
			return toValue_float64(math.Copysign(value, sign));
		/* } else if (_ref$1 === 36) { */ case 12:
			_r$24 = target.resolve(); /* */ $s = 30; case 30: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			targetValue$4 = $clone(_r$24, Value);
			/* */ if (node.postfix) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (node.postfix) { */ case 31:
				_r$25 = targetValue$4.float64(); /* */ $s = 34; case 34: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				oldValue = _r$25;
				newValue = $clone(toValue_float64(1 + oldValue), Value);
				$r = self.putValue(target.reference(), newValue); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return toValue_float64(oldValue);
			/* } else { */ case 32:
				_r$26 = targetValue$4.float64(); /* */ $s = 36; case 36: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				_r$27 = toValue_float64(1 + _r$26); /* */ $s = 37; case 37: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				newValue$1 = $clone(_r$27, Value);
				$r = self.putValue(target.reference(), newValue$1); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return newValue$1;
			/* } */ case 33:
			$s = 17; continue;
		/* } else if (_ref$1 === 37) { */ case 13:
			_r$28 = target.resolve(); /* */ $s = 39; case 39: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			targetValue$5 = $clone(_r$28, Value);
			/* */ if (node.postfix) { $s = 40; continue; }
			/* */ $s = 41; continue;
			/* if (node.postfix) { */ case 40:
				_r$29 = targetValue$5.float64(); /* */ $s = 43; case 43: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				oldValue$1 = _r$29;
				newValue$2 = $clone(toValue_float64(-1 + oldValue$1), Value);
				$r = self.putValue(target.reference(), newValue$2); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return toValue_float64(oldValue$1);
			/* } else { */ case 41:
				_r$30 = targetValue$5.float64(); /* */ $s = 45; case 45: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				_r$31 = toValue_float64(-1 + _r$30); /* */ $s = 46; case 46: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				newValue$3 = $clone(_r$31, Value);
				$r = self.putValue(target.reference(), newValue$3); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return newValue$3;
			/* } */ case 42:
			$s = 17; continue;
		/* } else if (_ref$1 === 71) { */ case 14:
			_r$32 = target.resolve(); /* */ $s = 48; case 48: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			_r$32;
			return new Value.ptr(0, $ifaceNil);
		/* } else if (_ref$1 === 79) { */ case 15:
			reference = target.reference();
			if ($interfaceIsEqual(reference, $ifaceNil)) {
				return trueValue;
			}
			_r$33 = target.reference().delete$(); /* */ $s = 49; case 49: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			_r$34 = toValue_bool(_r$33); /* */ $s = 50; case 50: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
			/* */ $s = 51; case 51:
			return _r$34;
		/* } else if (_ref$1 === 78) { */ case 16:
			_r$35 = target.resolve(); /* */ $s = 52; case 52: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
			targetValue$6 = $clone(_r$35, Value);
			_ref$2 = targetValue$6.kind;
			if (_ref$2 === 0) {
				return toValue_string("undefined");
			} else if (_ref$2 === 1) {
				return toValue_string("object");
			} else if (_ref$2 === 4) {
				return toValue_string("boolean");
			} else if (_ref$2 === 2) {
				return toValue_string("number");
			} else if (_ref$2 === 3) {
				return toValue_string("string");
			} else if (_ref$2 === 5) {
				if (targetValue$6._object().isCall()) {
					return toValue_string("function");
				}
				return toValue_string("object");
			} else {
			}
		/* } */ case 17:
		_r$36 = hereBeDragons(new sliceType$1([])); /* */ $s = 53; case 53: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
		$panic(new $String(_r$36));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeUnaryExpression }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._v = _v; $f.integerValue = integerValue; $f.newValue = newValue; $f.newValue$1 = newValue$1; $f.newValue$2 = newValue$2; $f.newValue$3 = newValue$3; $f.node = node; $f.oldValue = oldValue; $f.oldValue$1 = oldValue$1; $f.reference = reference; $f.self = self; $f.sign = sign; $f.target = target; $f.targetValue = targetValue; $f.targetValue$1 = targetValue$1; $f.targetValue$2 = targetValue$2; $f.targetValue$3 = targetValue$3; $f.targetValue$4 = targetValue$4; $f.targetValue$5 = targetValue$5; $f.targetValue$6 = targetValue$6; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeUnaryExpression = function(node) { return this.$val.cmpl_evaluate_nodeUnaryExpression(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeVariableExpression = function(node) {
		var $ptr, _r$13, _r$14, _r$15, left, node, right, rightValue, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; left = $f.left; node = $f.node; right = $f.right; rightValue = $f.rightValue; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (!($interfaceIsEqual(node.initializer, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(node.initializer, $ifaceNil))) { */ case 1:
			_r$13 = getIdentifierReference(self, self.scope.lexical, node.name, false, (node.idx >> 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			left = _r$13;
			_r$14 = self.cmpl_evaluate_nodeExpression(node.initializer); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			right = $clone(_r$14, Value);
			_r$15 = right.resolve(); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			rightValue = $clone(_r$15, Value);
			$r = self.putValue(left, rightValue); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		return toValue_string(node.name);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeVariableExpression }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.left = left; $f.node = node; $f.right = right; $f.rightValue = rightValue; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeVariableExpression = function(node) { return this.$val.cmpl_evaluate_nodeVariableExpression(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeStatement = function(node) {
		var $ptr, _i, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _selection, labels, node, node$1, node$10, node$11, node$12, node$13, node$14, node$15, node$16, node$17, node$2, node$3, node$4, node$5, node$6, node$7, node$8, node$9, self, target, value, value$1, value$2, variable, x, x$1, x$2, x$3, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _selection = $f._selection; labels = $f.labels; node = $f.node; node$1 = $f.node$1; node$10 = $f.node$10; node$11 = $f.node$11; node$12 = $f.node$12; node$13 = $f.node$13; node$14 = $f.node$14; node$15 = $f.node$15; node$16 = $f.node$16; node$17 = $f.node$17; node$2 = $f.node$2; node$3 = $f.node$3; node$4 = $f.node$4; node$5 = $f.node$5; node$6 = $f.node$6; node$7 = $f.node$7; node$8 = $f.node$8; node$9 = $f.node$9; self = $f.self; target = $f.target; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; variable = $f.variable; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		self = [self];
		self[0] = this;
		/* */ if (!(self[0].otto.Interrupt === $chanNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(self[0].otto.Interrupt === $chanNil)) { */ case 1:
			$r = runtime.Gosched(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_selection = $select([[self[0].otto.Interrupt], []]);
			/* */ if (_selection[0] === 0) { $s = 4; continue; }
			/* */ if (_selection[0] === 1) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_selection[0] === 0) { */ case 4:
				value = _selection[1][0];
				$r = value(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else if (_selection[0] === 1) { */ case 5:
			/* } */ case 6:
		/* } */ case 2:
		_ref = node;
		/* */ if ($assertType(_ref, ptrType$37, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$38, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, ptrType$39, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ptrType$40, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref, ptrType$41, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref, ptrType$42, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref, ptrType$43, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref, ptrType$44, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref, ptrType$45, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, ptrType$46, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, ptrType$47, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, ptrType$48, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, ptrType$49, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, ptrType$50, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, ptrType$51, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, ptrType$52, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, ptrType$53, true)[1]) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if ($assertType(_ref, ptrType$37, true)[1]) { */ case 8:
			node$1 = _ref.$val;
			labels = self[0].labels;
			self[0].labels = sliceType.nil;
			_r$13 = self[0].cmpl_evaluate_nodeStatementList(node$1.list); /* */ $s = 26; case 26: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			value$1 = $clone(_r$13, Value);
			_ref$1 = value$1.kind;
			if (_ref$1 === 7) {
				_ref$2 = value$1.evaluateBreak(labels);
				if (_ref$2 === 2) {
					return emptyValue;
				}
			}
			return value$1;
		/* } else if ($assertType(_ref, ptrType$38, true)[1]) { */ case 9:
			node$2 = _ref.$val;
			target = node$2.label;
			_ref$3 = node$2.branch;
			/* */ if (_ref$3 === 74) { $s = 27; continue; }
			/* */ if (_ref$3 === 84) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (_ref$3 === 74) { */ case 27:
				_r$14 = toValue((x = newBreakResult(target), new x.constructor.elem(x))); /* */ $s = 30; case 30: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				/* */ $s = 31; case 31:
				return _r$14;
			/* } else if (_ref$3 === 84) { */ case 28:
				_r$15 = toValue((x$1 = newContinueResult(target), new x$1.constructor.elem(x$1))); /* */ $s = 32; case 32: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				/* */ $s = 33; case 33:
				return _r$15;
			/* } */ case 29:
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$39, true)[1]) { */ case 10:
			node$3 = _ref.$val;
			/* */ if (!(self[0].debugger$6 === $throwNilPointerError)) { $s = 34; continue; }
			/* */ $s = 35; continue;
			/* if (!(self[0].debugger$6 === $throwNilPointerError)) { */ case 34:
				$r = self[0].debugger$6(self[0].otto); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 35:
			return emptyValue;
		/* } else if ($assertType(_ref, ptrType$40, true)[1]) { */ case 11:
			node$4 = _ref.$val;
			_r$16 = self[0].cmpl_evaluate_nodeDoWhileStatement(node$4); /* */ $s = 37; case 37: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ $s = 38; case 38:
			return _r$16;
		/* } else if ($assertType(_ref, ptrType$41, true)[1]) { */ case 12:
			node$5 = _ref.$val;
			return emptyValue;
		/* } else if ($assertType(_ref, ptrType$42, true)[1]) { */ case 13:
			node$6 = _ref.$val;
			_r$17 = self[0].cmpl_evaluate_nodeExpression(node$6.expression); /* */ $s = 39; case 39: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ $s = 40; case 40:
			return _r$17;
		/* } else if ($assertType(_ref, ptrType$43, true)[1]) { */ case 14:
			node$7 = _ref.$val;
			_r$18 = self[0].cmpl_evaluate_nodeForInStatement(node$7); /* */ $s = 41; case 41: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			/* */ $s = 42; case 42:
			return _r$18;
		/* } else if ($assertType(_ref, ptrType$44, true)[1]) { */ case 15:
			node$8 = _ref.$val;
			_r$19 = self[0].cmpl_evaluate_nodeForStatement(node$8); /* */ $s = 43; case 43: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			/* */ $s = 44; case 44:
			return _r$19;
		/* } else if ($assertType(_ref, ptrType$45, true)[1]) { */ case 16:
			node$9 = _ref.$val;
			_r$20 = self[0].cmpl_evaluate_nodeIfStatement(node$9); /* */ $s = 45; case 45: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			/* */ $s = 46; case 46:
			return _r$20;
		/* } else if ($assertType(_ref, ptrType$46, true)[1]) { */ case 17:
			node$10 = _ref.$val;
			self[0].labels = $append(self[0].labels, node$10.label);
			$deferred.push([(function(self) { return function() {
				var $ptr;
				if (self[0].labels.$length > 0) {
					self[0].labels = $subslice(self[0].labels, 0, (self[0].labels.$length - 1 >> 0));
				} else {
					self[0].labels = sliceType.nil;
				}
			}; })(self), []]);
			_r$21 = self[0].cmpl_evaluate_nodeStatement(node$10.statement); /* */ $s = 47; case 47: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			/* */ $s = 48; case 48:
			return _r$21;
		/* } else if ($assertType(_ref, ptrType$47, true)[1]) { */ case 18:
			node$11 = _ref.$val;
			/* */ if (!($interfaceIsEqual(node$11.argument, $ifaceNil))) { $s = 49; continue; }
			/* */ $s = 50; continue;
			/* if (!($interfaceIsEqual(node$11.argument, $ifaceNil))) { */ case 49:
				_r$22 = self[0].cmpl_evaluate_nodeExpression(node$11.argument); /* */ $s = 51; case 51: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				_r$23 = _r$22.resolve(); /* */ $s = 52; case 52: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				_r$24 = newReturnResult(_r$23); /* */ $s = 53; case 53: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				_r$25 = toValue((x$2 = _r$24, new x$2.constructor.elem(x$2))); /* */ $s = 54; case 54: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				/* */ $s = 55; case 55:
				return _r$25;
			/* } */ case 50:
			_r$26 = toValue((x$3 = newReturnResult(new Value.ptr(0, $ifaceNil)), new x$3.constructor.elem(x$3))); /* */ $s = 56; case 56: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			/* */ $s = 57; case 57:
			return _r$26;
		/* } else if ($assertType(_ref, ptrType$48, true)[1]) { */ case 19:
			node$12 = _ref.$val;
			_r$27 = self[0].cmpl_evaluate_nodeSwitchStatement(node$12); /* */ $s = 58; case 58: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			/* */ $s = 59; case 59:
			return _r$27;
		/* } else if ($assertType(_ref, ptrType$49, true)[1]) { */ case 20:
			node$13 = _ref.$val;
			_r$28 = self[0].cmpl_evaluate_nodeExpression(node$13.argument); /* */ $s = 60; case 60: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			_r$29 = _r$28.resolve(); /* */ $s = 61; case 61: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
			value$2 = $clone(_r$29, Value);
			$panic(newException(new value$2.constructor.elem(value$2)));
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$50, true)[1]) { */ case 21:
			node$14 = _ref.$val;
			_r$30 = self[0].cmpl_evaluate_nodeTryStatement(node$14); /* */ $s = 62; case 62: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
			/* */ $s = 63; case 63:
			return _r$30;
		/* } else if ($assertType(_ref, ptrType$51, true)[1]) { */ case 22:
			node$15 = _ref.$val;
			_ref$4 = node$15.list;
			_i = 0;
			/* while (true) { */ case 64:
				/* if (!(_i < _ref$4.$length)) { break; } */ if(!(_i < _ref$4.$length)) { $s = 65; continue; }
				variable = ((_i < 0 || _i >= _ref$4.$length) ? $throwRuntimeError("index out of range") : _ref$4.$array[_ref$4.$offset + _i]);
				_r$31 = self[0].cmpl_evaluate_nodeVariableExpression($assertType(variable, ptrType$34)); /* */ $s = 66; case 66: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				_r$31;
				_i++;
			/* } */ $s = 64; continue; case 65:
			return emptyValue;
		/* } else if ($assertType(_ref, ptrType$52, true)[1]) { */ case 23:
			node$16 = _ref.$val;
			_r$32 = self[0].cmpl_evaluate_nodeWhileStatement(node$16); /* */ $s = 67; case 67: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			/* */ $s = 68; case 68:
			return _r$32;
		/* } else if ($assertType(_ref, ptrType$53, true)[1]) { */ case 24:
			node$17 = _ref.$val;
			_r$33 = self[0].cmpl_evaluate_nodeWithStatement(node$17); /* */ $s = 69; case 69: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			/* */ $s = 70; case 70:
			return _r$33;
		/* } */ case 25:
		_r$34 = fmt.Errorf("Here be dragons: evaluate_nodeStatement(%T)", new sliceType$1([node])); /* */ $s = 71; case 71: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
		$panic(_r$34);
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; return new Value.ptr(0, $ifaceNil); } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeStatement }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._selection = _selection; $f.labels = labels; $f.node = node; $f.node$1 = node$1; $f.node$10 = node$10; $f.node$11 = node$11; $f.node$12 = node$12; $f.node$13 = node$13; $f.node$14 = node$14; $f.node$15 = node$15; $f.node$16 = node$16; $f.node$17 = node$17; $f.node$2 = node$2; $f.node$3 = node$3; $f.node$4 = node$4; $f.node$5 = node$5; $f.node$6 = node$6; $f.node$7 = node$7; $f.node$8 = node$8; $f.node$9 = node$9; $f.self = self; $f.target = target; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.variable = variable; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	_runtime.prototype.cmpl_evaluate_nodeStatement = function(node) { return this.$val.cmpl_evaluate_nodeStatement(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeStatementList = function(list) {
		var $ptr, _i, _r$13, _r$14, _ref, _ref$1, list, node, result, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; _ref$1 = $f._ref$1; list = $f.list; node = $f.node; result = $f.result; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		result = new Value.ptr(0, $ifaceNil);
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			node = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$13 = self.cmpl_evaluate_nodeStatement(node); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			value = $clone(_r$13, Value);
			_ref$1 = value.kind;
			/* */ if (_ref$1 === 7) { $s = 4; continue; }
			/* */ if (_ref$1 === 6) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_ref$1 === 7) { */ case 4:
				return value;
			/* } else if (_ref$1 === 6) { */ case 5:
				$s = 7; continue;
			/* } else { */ case 6:
				_r$14 = value.resolve(); /* */ $s = 8; case 8: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				Value.copy(result, _r$14);
			/* } */ case 7:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeStatementList }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f._ref$1 = _ref$1; $f.list = list; $f.node = node; $f.result = result; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeStatementList = function(list) { return this.$val.cmpl_evaluate_nodeStatementList(list); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeDoWhileStatement = function(node) {
		var $ptr, _i, _r$13, _r$14, _r$15, _r$16, _ref, _ref$1, _ref$2, labels, node, node$1, result, self, test, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; labels = $f.labels; node = $f.node; node$1 = $f.node$1; result = $f.result; self = $f.self; test = $f.test; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		labels = $append(self.labels, "");
		self.labels = sliceType.nil;
		test = node.test;
		result = $clone(emptyValue, Value);
		/* while (true) { */ case 1:
			_ref = node.body;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				node$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_r$13 = self.cmpl_evaluate_nodeStatement(node$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				value = $clone(_r$13, Value);
				_ref$1 = value.kind;
				/* */ if (_ref$1 === 7) { $s = 6; continue; }
				/* */ if (_ref$1 === 6) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_ref$1 === 7) { */ case 6:
					_ref$2 = value.evaluateBreakContinue(labels);
					/* */ if (_ref$2 === 1) { $s = 10; continue; }
					/* */ if (_ref$2 === 2) { $s = 11; continue; }
					/* */ if (_ref$2 === 3) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (_ref$2 === 1) { */ case 10:
						return value;
					/* } else if (_ref$2 === 2) { */ case 11:
						/* break resultBreak; */ $s = 2; continue s;
						$s = 13; continue;
					/* } else if (_ref$2 === 3) { */ case 12:
						/* goto resultContinue */ $s = 14; continue;
					/* } */ case 13:
					$s = 9; continue;
				/* } else if (_ref$1 === 6) { */ case 7:
					$s = 9; continue;
				/* } else { */ case 8:
					Value.copy(result, value);
				/* } */ case 9:
				_i++;
			/* } */ $s = 3; continue; case 4:
			/* resultContinue: */ case 14:
			_r$14 = self.cmpl_evaluate_nodeExpression(test); /* */ $s = 17; case 17: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = _r$14.resolve(); /* */ $s = 18; case 18: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = _r$15.bool(); /* */ $s = 19; case 19: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ if (!_r$16) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (!_r$16) { */ case 15:
				/* break; */ $s = 2; continue;
			/* } */ case 16:
		/* } */ $s = 1; continue; case 2:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeDoWhileStatement }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.labels = labels; $f.node = node; $f.node$1 = node$1; $f.result = result; $f.self = self; $f.test = test; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeDoWhileStatement = function(node) { return this.$val.cmpl_evaluate_nodeDoWhileStatement(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeForInStatement = function(node) {
		var $ptr, _r$13, _r$14, _r$15, _ref, body, enumerateValue, into, labels, node, object, result, self, source, sourceObject, sourceValue, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _ref = $f._ref; body = $f.body; enumerateValue = $f.enumerateValue; into = $f.into; labels = $f.labels; node = $f.node; object = $f.object; result = $f.result; self = $f.self; source = $f.source; sourceObject = $f.sourceObject; sourceValue = $f.sourceValue; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		body = [body];
		into = [into];
		labels = [labels];
		object = [object];
		self = [self];
		self[0] = this;
		labels[0] = $append(self[0].labels, "");
		self[0].labels = sliceType.nil;
		_r$13 = self[0].cmpl_evaluate_nodeExpression(node.source); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		source = $clone(_r$13, Value);
		_r$14 = source.resolve(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		sourceValue = $clone(_r$14, Value);
		_ref = sourceValue.kind;
		if (_ref === 0 || _ref === 1) {
			return emptyValue;
		}
		_r$15 = self[0].toObject(sourceValue); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		sourceObject = _r$15;
		into[0] = node.into;
		body[0] = node.body;
		result = $clone(emptyValue, Value);
		object[0] = sourceObject;
		/* while (true) { */ case 4:
			/* if (!(!(object[0] === ptrType$4.nil))) { break; } */ if(!(!(object[0] === ptrType$4.nil))) { $s = 5; continue; }
			enumerateValue = [enumerateValue];
			enumerateValue[0] = $clone(emptyValue, Value);
			$r = object[0].enumerate(false, (function(body, enumerateValue, into, labels, object, self) { return function $b(name) {
				var $ptr, _i, _r$16, _r$17, _r$18, _r$19, _r$20, _ref$1, _ref$2, _ref$3, identifier, into$1, name, node$1, value, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; identifier = $f.identifier; into$1 = $f.into$1; name = $f.name; node$1 = $f.node$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r$16 = self[0].cmpl_evaluate_nodeExpression(into[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				into$1 = $clone(_r$16, Value);
				/* */ if ($interfaceIsEqual(into$1.reference(), $ifaceNil)) { $s = 2; continue; }
				/* */ $s = 3; continue;
				/* if ($interfaceIsEqual(into$1.reference(), $ifaceNil)) { */ case 2:
					_r$17 = into$1.string(); /* */ $s = 4; case 4: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					identifier = _r$17;
					_r$18 = getIdentifierReference(self[0], self[0].scope.lexical, identifier, false, -1); /* */ $s = 5; case 5: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					_r$19 = toValue(_r$18); /* */ $s = 6; case 6: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					Value.copy(into$1, _r$19);
				/* } */ case 3:
				$r = self[0].putValue(into$1.reference(), toValue_string(name)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_ref$1 = body[0];
				_i = 0;
				/* while (true) { */ case 8:
					/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 9; continue; }
					node$1 = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
					_r$20 = self[0].cmpl_evaluate_nodeStatement(node$1); /* */ $s = 10; case 10: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
					value = $clone(_r$20, Value);
					_ref$2 = value.kind;
					if (_ref$2 === 7) {
						_ref$3 = value.evaluateBreakContinue(labels[0]);
						if (_ref$3 === 1) {
							Value.copy(enumerateValue[0], value);
							return false;
						} else if (_ref$3 === 2) {
							object[0] = ptrType$4.nil;
							return false;
						} else if (_ref$3 === 3) {
							return true;
						}
					} else if (_ref$2 === 6) {
					} else {
						Value.copy(enumerateValue[0], value);
					}
					_i++;
				/* } */ $s = 8; continue; case 9:
				return true;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._i = _i; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f.identifier = identifier; $f.into$1 = into$1; $f.name = name; $f.node$1 = node$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
			}; })(body, enumerateValue, into, labels, object, self)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (object[0] === ptrType$4.nil) {
				/* break; */ $s = 5; continue;
			}
			object[0] = object[0].prototype;
			if (!enumerateValue[0].isEmpty()) {
				Value.copy(result, enumerateValue[0]);
			}
		/* } */ $s = 4; continue; case 5:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeForInStatement }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._ref = _ref; $f.body = body; $f.enumerateValue = enumerateValue; $f.into = into; $f.labels = labels; $f.node = node; $f.object = object; $f.result = result; $f.self = self; $f.source = source; $f.sourceObject = sourceObject; $f.sourceValue = sourceValue; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeForInStatement = function(node) { return this.$val.cmpl_evaluate_nodeForInStatement(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeForStatement = function(node) {
		var $ptr, _i, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _ref, _ref$1, _ref$2, body, initialResult, initializer, labels, node, node$1, result, self, test, testResult, testResultValue, update, updateResult, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; body = $f.body; initialResult = $f.initialResult; initializer = $f.initializer; labels = $f.labels; node = $f.node; node$1 = $f.node$1; result = $f.result; self = $f.self; test = $f.test; testResult = $f.testResult; testResultValue = $f.testResultValue; update = $f.update; updateResult = $f.updateResult; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		labels = $append(self.labels, "");
		self.labels = sliceType.nil;
		initializer = node.initializer;
		test = node.test;
		update = node.update;
		body = node.body;
		/* */ if (!($interfaceIsEqual(initializer, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(initializer, $ifaceNil))) { */ case 1:
			_r$13 = self.cmpl_evaluate_nodeExpression(initializer); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			initialResult = $clone(_r$13, Value);
			_r$14 = initialResult.resolve(); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$14;
		/* } */ case 2:
		result = $clone(emptyValue, Value);
		/* while (true) { */ case 5:
			/* */ if (!($interfaceIsEqual(test, $ifaceNil))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!($interfaceIsEqual(test, $ifaceNil))) { */ case 7:
				_r$15 = self.cmpl_evaluate_nodeExpression(test); /* */ $s = 9; case 9: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				testResult = $clone(_r$15, Value);
				_r$16 = testResult.resolve(); /* */ $s = 10; case 10: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				testResultValue = $clone(_r$16, Value);
				_r$17 = testResultValue.bool(); /* */ $s = 13; case 13: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				/* */ if (_r$17 === false) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (_r$17 === false) { */ case 11:
					/* break; */ $s = 6; continue;
				/* } */ case 12:
			/* } */ case 8:
			_ref = body;
			_i = 0;
			/* while (true) { */ case 14:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 15; continue; }
				node$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_r$18 = self.cmpl_evaluate_nodeStatement(node$1); /* */ $s = 16; case 16: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				value = $clone(_r$18, Value);
				_ref$1 = value.kind;
				/* */ if (_ref$1 === 7) { $s = 17; continue; }
				/* */ if (_ref$1 === 6) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (_ref$1 === 7) { */ case 17:
					_ref$2 = value.evaluateBreakContinue(labels);
					/* */ if (_ref$2 === 1) { $s = 21; continue; }
					/* */ if (_ref$2 === 2) { $s = 22; continue; }
					/* */ if (_ref$2 === 3) { $s = 23; continue; }
					/* */ $s = 24; continue;
					/* if (_ref$2 === 1) { */ case 21:
						return value;
					/* } else if (_ref$2 === 2) { */ case 22:
						/* break resultBreak; */ $s = 6; continue s;
						$s = 24; continue;
					/* } else if (_ref$2 === 3) { */ case 23:
						/* goto resultContinue */ $s = 25; continue;
					/* } */ case 24:
					$s = 20; continue;
				/* } else if (_ref$1 === 6) { */ case 18:
					$s = 20; continue;
				/* } else { */ case 19:
					Value.copy(result, value);
				/* } */ case 20:
				_i++;
			/* } */ $s = 14; continue; case 15:
			/* resultContinue: */ case 25:
			/* */ if (!($interfaceIsEqual(update, $ifaceNil))) { $s = 26; continue; }
			/* */ $s = 27; continue;
			/* if (!($interfaceIsEqual(update, $ifaceNil))) { */ case 26:
				_r$19 = self.cmpl_evaluate_nodeExpression(update); /* */ $s = 28; case 28: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				updateResult = $clone(_r$19, Value);
				_r$20 = updateResult.resolve(); /* */ $s = 29; case 29: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				_r$20;
			/* } */ case 27:
		/* } */ $s = 5; continue; case 6:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeForStatement }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.body = body; $f.initialResult = initialResult; $f.initializer = initializer; $f.labels = labels; $f.node = node; $f.node$1 = node$1; $f.result = result; $f.self = self; $f.test = test; $f.testResult = testResult; $f.testResultValue = testResultValue; $f.update = update; $f.updateResult = updateResult; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeForStatement = function(node) { return this.$val.cmpl_evaluate_nodeForStatement(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeIfStatement = function(node) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, node, self, test, testValue, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; node = $f.node; self = $f.self; test = $f.test; testValue = $f.testValue; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.cmpl_evaluate_nodeExpression(node.test); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		test = $clone(_r$13, Value);
		_r$14 = test.resolve(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		testValue = $clone(_r$14, Value);
		_r$15 = testValue.bool(); /* */ $s = 6; case 6: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ if (_r$15) { $s = 3; continue; }
		/* */ if (!($interfaceIsEqual(node.alternate, $ifaceNil))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$15) { */ case 3:
			_r$16 = self.cmpl_evaluate_nodeStatement(node.consequent); /* */ $s = 7; case 7: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ $s = 8; case 8:
			return _r$16;
		/* } else if (!($interfaceIsEqual(node.alternate, $ifaceNil))) { */ case 4:
			_r$17 = self.cmpl_evaluate_nodeStatement(node.alternate); /* */ $s = 9; case 9: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ $s = 10; case 10:
			return _r$17;
		/* } */ case 5:
		return emptyValue;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeIfStatement }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f.node = node; $f.self = self; $f.test = test; $f.testValue = testValue; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeIfStatement = function(node) { return this.$val.cmpl_evaluate_nodeIfStatement(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeSwitchStatement = function(node) {
		var $ptr, _arg, _arg$1, _i, _i$1, _i$2, _r$13, _r$14, _r$15, _r$16, _ref, _ref$1, _ref$2, _ref$3, _ref$4, clause, clause$1, discriminantResult, index, labels, node, result, self, statement, target, test, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; clause = $f.clause; clause$1 = $f.clause$1; discriminantResult = $f.discriminantResult; index = $f.index; labels = $f.labels; node = $f.node; result = $f.result; self = $f.self; statement = $f.statement; target = $f.target; test = $f.test; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		labels = $append(self.labels, "");
		self.labels = sliceType.nil;
		_r$13 = self.cmpl_evaluate_nodeExpression(node.discriminant); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		discriminantResult = $clone(_r$13, Value);
		target = node.default_;
		_ref = node.body;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			index = _i;
			clause = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			test = clause.test;
			/* */ if (!($interfaceIsEqual(test, $ifaceNil))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(test, $ifaceNil))) { */ case 4:
				_arg = discriminantResult;
				_r$14 = self.cmpl_evaluate_nodeExpression(test); /* */ $s = 8; case 8: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_arg$1 = _r$14;
				_r$15 = self.calculateComparison(39, _arg, _arg$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				/* */ if (_r$15) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_r$15) { */ case 6:
					target = index;
					/* break; */ $s = 3; continue;
				/* } */ case 7:
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		result = $clone(emptyValue, Value);
		/* */ if (!((target === -1))) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (!((target === -1))) { */ case 10:
			_ref$1 = $subslice(node.body, target);
			_i$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 13; continue; }
				clause$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				_ref$2 = clause$1.consequent;
				_i$2 = 0;
				/* while (true) { */ case 14:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 15; continue; }
					statement = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
					_r$16 = self.cmpl_evaluate_nodeStatement(statement); /* */ $s = 16; case 16: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					value = $clone(_r$16, Value);
					_ref$3 = value.kind;
					if (_ref$3 === 7) {
						_ref$4 = value.evaluateBreak(labels);
						if (_ref$4 === 1) {
							return value;
						} else if (_ref$4 === 2) {
							return emptyValue;
						}
					} else if (_ref$3 === 6) {
					} else {
						Value.copy(result, value);
					}
					_i$2++;
				/* } */ $s = 14; continue; case 15:
				_i$1++;
			/* } */ $s = 12; continue; case 13:
		/* } */ case 11:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeSwitchStatement }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f.clause = clause; $f.clause$1 = clause$1; $f.discriminantResult = discriminantResult; $f.index = index; $f.labels = labels; $f.node = node; $f.result = result; $f.self = self; $f.statement = statement; $f.target = target; $f.test = test; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeSwitchStatement = function(node) { return this.$val.cmpl_evaluate_nodeSwitchStatement(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeTryStatement = function(node) {
		var $ptr, _r$13, _r$14, _r$15, _tuple$1, _tuple$2, exception, finallyValue, node, outer, self, tryCatchValue, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; exception = $f.exception; finallyValue = $f.finallyValue; node = $f.node; outer = $f.outer; self = $f.self; tryCatchValue = $f.tryCatchValue; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		node = [node];
		outer = [outer];
		self = [self];
		self[0] = this;
		_r$13 = self[0].tryCatchEvaluate((function(node, outer, self) { return function $b() {
			var $ptr, _r$13, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$13 = self[0].cmpl_evaluate_nodeStatement(node[0].body); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 2; case 2:
			return _r$13;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.$s = $s; $f.$r = $r; return $f;
		}; })(node, outer, self)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		tryCatchValue = $clone(_tuple$1[0], Value);
		exception = _tuple$1[1];
		/* */ if (exception && !(node[0].catch$1 === ptrType$54.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (exception && !(node[0].catch$1 === ptrType$54.nil)) { */ case 2:
			outer[0] = self[0].scope.lexical;
			self[0].scope.lexical = self[0].newDeclarationStash(outer[0]);
			$deferred.push([(function(node, outer, self) { return function() {
				var $ptr;
				self[0].scope.lexical = outer[0];
			}; })(node, outer, self), []]);
			$r = self[0].scope.lexical.setValue(node[0].catch$1.parameter, tryCatchValue, false); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$14 = self[0].tryCatchEvaluate((function(node, outer, self) { return function $b() {
				var $ptr, _r$14, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$14 = $f._r$14; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r$14 = self[0].cmpl_evaluate_nodeStatement(node[0].catch$1.body); /* */ $s = 1; case 1: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				/* */ $s = 2; case 2:
				return _r$14;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$14 = _r$14; $f.$s = $s; $f.$r = $r; return $f;
			}; })(node, outer, self)); /* */ $s = 5; case 5: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_tuple$2 = _r$14;
			Value.copy(tryCatchValue, _tuple$2[0]);
			exception = _tuple$2[1];
		/* } */ case 3:
		/* */ if (!($interfaceIsEqual(node[0].finally$2, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(node[0].finally$2, $ifaceNil))) { */ case 6:
			_r$15 = self[0].cmpl_evaluate_nodeStatement(node[0].finally$2); /* */ $s = 8; case 8: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			finallyValue = $clone(_r$15, Value);
			if (finallyValue.kind === 7) {
				return finallyValue;
			}
		/* } */ case 7:
		if (exception) {
			$panic(newException(new tryCatchValue.constructor.elem(tryCatchValue)));
		}
		return tryCatchValue;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return new Value.ptr(0, $ifaceNil); } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeTryStatement }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.exception = exception; $f.finallyValue = finallyValue; $f.node = node; $f.outer = outer; $f.self = self; $f.tryCatchValue = tryCatchValue; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	_runtime.prototype.cmpl_evaluate_nodeTryStatement = function(node) { return this.$val.cmpl_evaluate_nodeTryStatement(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeWhileStatement = function(node) {
		var $ptr, _i, _r$13, _r$14, _r$15, _r$16, _ref, _ref$1, _ref$2, body, labels, node, node$1, result, self, test, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; body = $f.body; labels = $f.labels; node = $f.node; node$1 = $f.node$1; result = $f.result; self = $f.self; test = $f.test; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		test = node.test;
		body = node.body;
		labels = $append(self.labels, "");
		self.labels = sliceType.nil;
		result = $clone(emptyValue, Value);
		/* while (true) { */ case 1:
			_r$13 = self.cmpl_evaluate_nodeExpression(test); /* */ $s = 5; case 5: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = _r$13.resolve(); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = _r$14.bool(); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ if (!_r$15) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r$15) { */ case 3:
				/* break; */ $s = 2; continue;
			/* } */ case 4:
			_ref = body;
			_i = 0;
			/* while (true) { */ case 8:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 9; continue; }
				node$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_r$16 = self.cmpl_evaluate_nodeStatement(node$1); /* */ $s = 10; case 10: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				value = $clone(_r$16, Value);
				_ref$1 = value.kind;
				if (_ref$1 === 7) {
					_ref$2 = value.evaluateBreakContinue(labels);
					if (_ref$2 === 1) {
						return value;
					} else if (_ref$2 === 2) {
						/* break resultBreakContinue; */ $s = 2; continue s;
					} else if (_ref$2 === 3) {
						/* continue resultBreakContinue; */ $s = 1; continue s;
					}
				} else if (_ref$1 === 6) {
				} else {
					Value.copy(result, value);
				}
				_i++;
			/* } */ $s = 8; continue; case 9:
		/* } */ $s = 1; continue; case 2:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeWhileStatement }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.body = body; $f.labels = labels; $f.node = node; $f.node$1 = node$1; $f.result = result; $f.self = self; $f.test = test; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_evaluate_nodeWhileStatement = function(node) { return this.$val.cmpl_evaluate_nodeWhileStatement(node); };
	_runtime.ptr.prototype.cmpl_evaluate_nodeWithStatement = function(node) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, lexical, node, object, outer, self, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; lexical = $f.lexical; node = $f.node; object = $f.object; outer = $f.outer; self = $f.self; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		outer = [outer];
		self = [self];
		self[0] = this;
		_r$13 = self[0].cmpl_evaluate_nodeExpression(node.object); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		object = $clone(_r$13, Value);
		outer[0] = self[0].scope.lexical;
		_r$14 = object.resolve(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = self[0].toObject(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = self[0].newObjectStash(_r$15, outer[0]); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		lexical = _r$16;
		self[0].scope.lexical = lexical;
		$deferred.push([(function(outer, self) { return function() {
			var $ptr;
			self[0].scope.lexical = outer[0];
		}; })(outer, self), []]);
		_r$17 = self[0].cmpl_evaluate_nodeStatement(node.body); /* */ $s = 5; case 5: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$17;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return new Value.ptr(0, $ifaceNil); } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_evaluate_nodeWithStatement }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f.lexical = lexical; $f.node = node; $f.object = object; $f.outer = outer; $f.self = self; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	_runtime.prototype.cmpl_evaluate_nodeWithStatement = function(node) { return this.$val.cmpl_evaluate_nodeWithStatement(node); };
	_compiler.ptr.prototype.parseExpression = function(in$1) {
		var $ptr, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _i$6, _i$7, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _ref$7, _ref$8, _ref$9, cmpl, i, i$1, i$2, i$3, i$4, i$5, in$1, in$10, in$11, in$12, in$13, in$14, in$15, in$16, in$17, in$18, in$19, in$2, in$20, in$21, in$3, in$4, in$5, in$6, in$7, in$8, in$9, list, name, out, out$1, out$2, out$3, out$4, out$5, value, value$1, value$10, value$2, value$3, value$4, value$5, value$6, value$7, value$8, value$9, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _i$6 = $f._i$6; _i$7 = $f._i$7; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _ref$7 = $f._ref$7; _ref$8 = $f._ref$8; _ref$9 = $f._ref$9; cmpl = $f.cmpl; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; i$5 = $f.i$5; in$1 = $f.in$1; in$10 = $f.in$10; in$11 = $f.in$11; in$12 = $f.in$12; in$13 = $f.in$13; in$14 = $f.in$14; in$15 = $f.in$15; in$16 = $f.in$16; in$17 = $f.in$17; in$18 = $f.in$18; in$19 = $f.in$19; in$2 = $f.in$2; in$20 = $f.in$20; in$21 = $f.in$21; in$3 = $f.in$3; in$4 = $f.in$4; in$5 = $f.in$5; in$6 = $f.in$6; in$7 = $f.in$7; in$8 = $f.in$8; in$9 = $f.in$9; list = $f.list; name = $f.name; out = $f.out; out$1 = $f.out$1; out$2 = $f.out$2; out$3 = $f.out$3; out$4 = $f.out$4; out$5 = $f.out$5; value = $f.value; value$1 = $f.value$1; value$10 = $f.value$10; value$2 = $f.value$2; value$3 = $f.value$3; value$4 = $f.value$4; value$5 = $f.value$5; value$6 = $f.value$6; value$7 = $f.value$7; value$8 = $f.value$8; value$9 = $f.value$9; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cmpl = this;
		if ($interfaceIsEqual(in$1, $ifaceNil)) {
			return $ifaceNil;
		}
		_ref = in$1;
		/* */ if ($assertType(_ref, ptrType$55, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$56, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$57, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$58, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$59, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$60, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$61, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$62, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$63, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, ptrType$64, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ptrType$65, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref, ptrType$66, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref, ptrType$67, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref, ptrType$68, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref, ptrType$69, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref, ptrType$70, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, ptrType$71, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, ptrType$72, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, ptrType$73, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, ptrType$74, true)[1]) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if ($assertType(_ref, ptrType$55, true)[1]) { */ case 1:
			in$2 = _ref.$val;
			out = new _nodeArrayLiteral.ptr($makeSlice(sliceType$9, in$2.Value.$length));
			_ref$1 = in$2.Value;
			_i = 0;
			/* while (true) { */ case 22:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 23; continue; }
				i = _i;
				value = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				_r$13 = cmpl.parseExpression(value); /* */ $s = 24; case 24: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				(x = out.value, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = _r$13));
				_i++;
			/* } */ $s = 22; continue; case 23:
			return out;
		/* } else if ($assertType(_ref, ptrType$56, true)[1]) { */ case 2:
			in$3 = _ref.$val;
			_r$14 = cmpl.parseExpression(in$3.Left); /* */ $s = 25; case 25: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = cmpl.parseExpression(in$3.Right); /* */ $s = 26; case 26: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 27; case 27:
			return new _nodeAssignExpression.ptr(in$3.Operator, _r$14, _r$15);
		/* } else if ($assertType(_ref, ptrType$57, true)[1]) { */ case 3:
			in$4 = _ref.$val;
			_r$16 = cmpl.parseExpression(in$4.Left); /* */ $s = 28; case 28: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$17 = cmpl.parseExpression(in$4.Right); /* */ $s = 29; case 29: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ $s = 30; case 30:
			return new _nodeBinaryExpression.ptr(in$4.Operator, _r$16, _r$17, in$4.Comparison);
		/* } else if ($assertType(_ref, ptrType$58, true)[1]) { */ case 4:
			in$5 = _ref.$val;
			if (in$5.Value) {
				return trueLiteral;
			}
			return falseLiteral;
		/* } else if ($assertType(_ref, ptrType$59, true)[1]) { */ case 5:
			in$6 = _ref.$val;
			_r$18 = in$6.Left.Idx0(); /* */ $s = 31; case 31: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_r$19 = cmpl.parseExpression(in$6.Left); /* */ $s = 32; case 32: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			_r$20 = cmpl.parseExpression(in$6.Member); /* */ $s = 33; case 33: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			/* */ $s = 34; case 34:
			return new _nodeBracketExpression.ptr(_r$18, _r$19, _r$20);
		/* } else if ($assertType(_ref, ptrType$60, true)[1]) { */ case 6:
			in$7 = _ref.$val;
			_r$21 = cmpl.parseExpression(in$7.Callee); /* */ $s = 35; case 35: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			out$1 = new _nodeCallExpression.ptr(_r$21, $makeSlice(sliceType$9, in$7.ArgumentList.$length));
			_ref$2 = in$7.ArgumentList;
			_i$1 = 0;
			/* while (true) { */ case 36:
				/* if (!(_i$1 < _ref$2.$length)) { break; } */ if(!(_i$1 < _ref$2.$length)) { $s = 37; continue; }
				i$1 = _i$1;
				value$1 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]);
				_r$22 = cmpl.parseExpression(value$1); /* */ $s = 38; case 38: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				(x$1 = out$1.argumentList, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1] = _r$22));
				_i$1++;
			/* } */ $s = 36; continue; case 37:
			return out$1;
		/* } else if ($assertType(_ref, ptrType$61, true)[1]) { */ case 7:
			in$8 = _ref.$val;
			_r$23 = cmpl.parseExpression(in$8.Test); /* */ $s = 39; case 39: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_r$24 = cmpl.parseExpression(in$8.Consequent); /* */ $s = 40; case 40: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			_r$25 = cmpl.parseExpression(in$8.Alternate); /* */ $s = 41; case 41: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			/* */ $s = 42; case 42:
			return new _nodeConditionalExpression.ptr(_r$23, _r$24, _r$25);
		/* } else if ($assertType(_ref, ptrType$62, true)[1]) { */ case 8:
			in$9 = _ref.$val;
			_r$26 = in$9.Left.Idx0(); /* */ $s = 43; case 43: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			_r$27 = cmpl.parseExpression(in$9.Left); /* */ $s = 44; case 44: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			/* */ $s = 45; case 45:
			return new _nodeDotExpression.ptr(_r$26, _r$27, in$9.Identifier.Name);
		/* } else if ($assertType(_ref, ptrType$63, true)[1]) { */ case 9:
			in$10 = _ref.$val;
			name = "";
			if (!(in$10.Name === ptrType$64.nil)) {
				name = in$10.Name.Name;
			}
			_r$28 = cmpl.parseStatement(in$10.Body); /* */ $s = 46; case 46: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			out$2 = new _nodeFunctionLiteral.ptr(name, _r$28, in$10.Source, sliceType.nil, sliceType.nil, sliceType$10.nil, cmpl.file);
			if (!(in$10.ParameterList === ptrType$75.nil)) {
				list = in$10.ParameterList.List;
				out$2.parameterList = $makeSlice(sliceType, list.$length);
				_ref$3 = list;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$3.$length)) { break; }
					i$2 = _i$2;
					value$2 = ((_i$2 < 0 || _i$2 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$2]);
					(x$2 = out$2.parameterList, ((i$2 < 0 || i$2 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$2] = value$2.Name));
					_i$2++;
				}
			}
			_ref$4 = in$10.DeclarationList;
			_i$3 = 0;
			/* while (true) { */ case 47:
				/* if (!(_i$3 < _ref$4.$length)) { break; } */ if(!(_i$3 < _ref$4.$length)) { $s = 48; continue; }
				value$3 = ((_i$3 < 0 || _i$3 >= _ref$4.$length) ? $throwRuntimeError("index out of range") : _ref$4.$array[_ref$4.$offset + _i$3]);
				_ref$5 = value$3;
				/* */ if ($assertType(_ref$5, ptrType$76, true)[1]) { $s = 49; continue; }
				/* */ if ($assertType(_ref$5, ptrType$77, true)[1]) { $s = 50; continue; }
				/* */ $s = 51; continue;
				/* if ($assertType(_ref$5, ptrType$76, true)[1]) { */ case 49:
					value$4 = _ref$5.$val;
					_r$29 = cmpl.parseExpression(value$4.Function); /* */ $s = 53; case 53: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					out$2.functionList = $append(out$2.functionList, $assertType(_r$29, ptrType$10));
					$s = 52; continue;
				/* } else if ($assertType(_ref$5, ptrType$77, true)[1]) { */ case 50:
					value$5 = _ref$5.$val;
					_ref$6 = value$5.List;
					_i$4 = 0;
					while (true) {
						if (!(_i$4 < _ref$6.$length)) { break; }
						value$6 = ((_i$4 < 0 || _i$4 >= _ref$6.$length) ? $throwRuntimeError("index out of range") : _ref$6.$array[_ref$6.$offset + _i$4]);
						out$2.varList = $append(out$2.varList, value$6.Name);
						_i$4++;
					}
					$s = 52; continue;
				/* } else { */ case 51:
					value$7 = _ref$5;
					_r$30 = fmt.Errorf("Here be dragons: parseProgram.declaration(%T)", new sliceType$1([value$7])); /* */ $s = 54; case 54: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
					$panic(_r$30);
				/* } */ case 52:
				_i$3++;
			/* } */ $s = 47; continue; case 48:
			return out$2;
		/* } else if ($assertType(_ref, ptrType$64, true)[1]) { */ case 10:
			in$11 = _ref.$val;
			return new _nodeIdentifier.ptr(in$11.Idx, in$11.Name);
		/* } else if ($assertType(_ref, ptrType$65, true)[1]) { */ case 11:
			in$12 = _ref.$val;
			_r$31 = cmpl.parseExpression(in$12.Callee); /* */ $s = 55; case 55: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			out$3 = new _nodeNewExpression.ptr(_r$31, $makeSlice(sliceType$9, in$12.ArgumentList.$length));
			_ref$7 = in$12.ArgumentList;
			_i$5 = 0;
			/* while (true) { */ case 56:
				/* if (!(_i$5 < _ref$7.$length)) { break; } */ if(!(_i$5 < _ref$7.$length)) { $s = 57; continue; }
				i$3 = _i$5;
				value$8 = ((_i$5 < 0 || _i$5 >= _ref$7.$length) ? $throwRuntimeError("index out of range") : _ref$7.$array[_ref$7.$offset + _i$5]);
				_r$32 = cmpl.parseExpression(value$8); /* */ $s = 58; case 58: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				(x$3 = out$3.argumentList, ((i$3 < 0 || i$3 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i$3] = _r$32));
				_i$5++;
			/* } */ $s = 56; continue; case 57:
			return out$3;
		/* } else if ($assertType(_ref, ptrType$66, true)[1]) { */ case 12:
			in$13 = _ref.$val;
			return nullLiteral;
		/* } else if ($assertType(_ref, ptrType$67, true)[1]) { */ case 13:
			in$14 = _ref.$val;
			_r$33 = toValue(in$14.Value); /* */ $s = 59; case 59: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			/* */ $s = 60; case 60:
			return new _nodeLiteral.ptr($clone(_r$33, Value));
		/* } else if ($assertType(_ref, ptrType$68, true)[1]) { */ case 14:
			in$15 = _ref.$val;
			out$4 = new _nodeObjectLiteral.ptr($makeSlice(sliceType$11, in$15.Value.$length));
			_ref$8 = in$15.Value;
			_i$6 = 0;
			/* while (true) { */ case 61:
				/* if (!(_i$6 < _ref$8.$length)) { break; } */ if(!(_i$6 < _ref$8.$length)) { $s = 62; continue; }
				i$4 = _i$6;
				value$9 = $clone(((_i$6 < 0 || _i$6 >= _ref$8.$length) ? $throwRuntimeError("index out of range") : _ref$8.$array[_ref$8.$offset + _i$6]), ast.Property);
				_r$34 = cmpl.parseExpression(value$9.Value); /* */ $s = 63; case 63: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
				_nodeProperty.copy((x$4 = out$4.value, ((i$4 < 0 || i$4 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + i$4])), new _nodeProperty.ptr(value$9.Key, value$9.Kind, _r$34));
				_i$6++;
			/* } */ $s = 61; continue; case 62:
			return out$4;
		/* } else if ($assertType(_ref, ptrType$69, true)[1]) { */ case 15:
			in$16 = _ref.$val;
			return new _nodeRegExpLiteral.ptr(in$16.Flags, in$16.Pattern, ptrType$2.nil);
		/* } else if ($assertType(_ref, ptrType$70, true)[1]) { */ case 16:
			in$17 = _ref.$val;
			out$5 = new _nodeSequenceExpression.ptr($makeSlice(sliceType$9, in$17.Sequence.$length));
			_ref$9 = in$17.Sequence;
			_i$7 = 0;
			/* while (true) { */ case 64:
				/* if (!(_i$7 < _ref$9.$length)) { break; } */ if(!(_i$7 < _ref$9.$length)) { $s = 65; continue; }
				i$5 = _i$7;
				value$10 = ((_i$7 < 0 || _i$7 >= _ref$9.$length) ? $throwRuntimeError("index out of range") : _ref$9.$array[_ref$9.$offset + _i$7]);
				_r$35 = cmpl.parseExpression(value$10); /* */ $s = 66; case 66: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
				(x$5 = out$5.sequence, ((i$5 < 0 || i$5 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + i$5] = _r$35));
				_i$7++;
			/* } */ $s = 64; continue; case 65:
			return out$5;
		/* } else if ($assertType(_ref, ptrType$71, true)[1]) { */ case 17:
			in$18 = _ref.$val;
			return new _nodeLiteral.ptr($clone(toValue_string(in$18.Value), Value));
		/* } else if ($assertType(_ref, ptrType$72, true)[1]) { */ case 18:
			in$19 = _ref.$val;
			return new _nodeThisExpression.ptr();
		/* } else if ($assertType(_ref, ptrType$73, true)[1]) { */ case 19:
			in$20 = _ref.$val;
			_r$36 = cmpl.parseExpression(in$20.Operand); /* */ $s = 67; case 67: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
			/* */ $s = 68; case 68:
			return new _nodeUnaryExpression.ptr(in$20.Operator, _r$36, in$20.Postfix);
		/* } else if ($assertType(_ref, ptrType$74, true)[1]) { */ case 20:
			in$21 = _ref.$val;
			_r$37 = cmpl.parseExpression(in$21.Initializer); /* */ $s = 69; case 69: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
			/* */ $s = 70; case 70:
			return new _nodeVariableExpression.ptr(in$21.Idx0(), in$21.Name, _r$37);
		/* } */ case 21:
		_r$38 = fmt.Errorf("Here be dragons: cmpl.parseExpression(%T)", new sliceType$1([in$1])); /* */ $s = 71; case 71: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
		$panic(_r$38);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _compiler.ptr.prototype.parseExpression }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._i$6 = _i$6; $f._i$7 = _i$7; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._ref$7 = _ref$7; $f._ref$8 = _ref$8; $f._ref$9 = _ref$9; $f.cmpl = cmpl; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.i$5 = i$5; $f.in$1 = in$1; $f.in$10 = in$10; $f.in$11 = in$11; $f.in$12 = in$12; $f.in$13 = in$13; $f.in$14 = in$14; $f.in$15 = in$15; $f.in$16 = in$16; $f.in$17 = in$17; $f.in$18 = in$18; $f.in$19 = in$19; $f.in$2 = in$2; $f.in$20 = in$20; $f.in$21 = in$21; $f.in$3 = in$3; $f.in$4 = in$4; $f.in$5 = in$5; $f.in$6 = in$6; $f.in$7 = in$7; $f.in$8 = in$8; $f.in$9 = in$9; $f.list = list; $f.name = name; $f.out = out; $f.out$1 = out$1; $f.out$2 = out$2; $f.out$3 = out$3; $f.out$4 = out$4; $f.out$5 = out$5; $f.value = value; $f.value$1 = value$1; $f.value$10 = value$10; $f.value$2 = value$2; $f.value$3 = value$3; $f.value$4 = value$4; $f.value$5 = value$5; $f.value$6 = value$6; $f.value$7 = value$7; $f.value$8 = value$8; $f.value$9 = value$9; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	_compiler.prototype.parseExpression = function(in$1) { return this.$val.parseExpression(in$1); };
	_compiler.ptr.prototype.parseStatement = function(in$1) {
		var $ptr, _i, _i$1, _i$2, _i$3, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tuple$1, _tuple$2, _tuple$3, _tuple$4, block, block$1, block$2, block$3, body, body$1, body$2, body$3, clause, cmpl, i, i$1, i$2, in$1, in$10, in$11, in$12, in$13, in$14, in$15, in$16, in$17, in$18, in$2, in$3, in$4, in$5, in$6, in$7, in$8, in$9, j, ok, ok$1, ok$2, ok$3, out, out$1, out$2, out$3, out$4, out$5, out$6, out$7, out$8, value, value$1, value$2, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$40 = $f._r$40; _r$41 = $f._r$41; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; block = $f.block; block$1 = $f.block$1; block$2 = $f.block$2; block$3 = $f.block$3; body = $f.body; body$1 = $f.body$1; body$2 = $f.body$2; body$3 = $f.body$3; clause = $f.clause; cmpl = $f.cmpl; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; in$1 = $f.in$1; in$10 = $f.in$10; in$11 = $f.in$11; in$12 = $f.in$12; in$13 = $f.in$13; in$14 = $f.in$14; in$15 = $f.in$15; in$16 = $f.in$16; in$17 = $f.in$17; in$18 = $f.in$18; in$2 = $f.in$2; in$3 = $f.in$3; in$4 = $f.in$4; in$5 = $f.in$5; in$6 = $f.in$6; in$7 = $f.in$7; in$8 = $f.in$8; in$9 = $f.in$9; j = $f.j; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; out = $f.out; out$1 = $f.out$1; out$2 = $f.out$2; out$3 = $f.out$3; out$4 = $f.out$4; out$5 = $f.out$5; out$6 = $f.out$6; out$7 = $f.out$7; out$8 = $f.out$8; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cmpl = this;
		if ($interfaceIsEqual(in$1, $ifaceNil)) {
			return $ifaceNil;
		}
		_ref = in$1;
		/* */ if ($assertType(_ref, ptrType$78, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$79, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$80, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$81, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$82, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$83, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$84, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$85, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$86, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, ptrType$87, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ptrType$88, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref, ptrType$89, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref, ptrType$90, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref, ptrType$91, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref, ptrType$92, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref, ptrType$93, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, ptrType$94, true)[1]) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if ($assertType(_ref, ptrType$78, true)[1]) { */ case 1:
			in$2 = _ref.$val;
			out = new _nodeBlockStatement.ptr($makeSlice(sliceType$12, in$2.List.$length));
			_ref$1 = in$2.List;
			_i = 0;
			/* while (true) { */ case 19:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 20; continue; }
				i = _i;
				value = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				_r$13 = cmpl.parseStatement(value); /* */ $s = 21; case 21: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				(x = out.list, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = _r$13));
				_i++;
			/* } */ $s = 19; continue; case 20:
			return out;
		/* } else if ($assertType(_ref, ptrType$79, true)[1]) { */ case 2:
			in$3 = _ref.$val;
			out$1 = new _nodeBranchStatement.ptr(in$3.Token, "");
			if (!(in$3.Label === ptrType$64.nil)) {
				out$1.label = in$3.Label.Name;
			}
			return out$1;
		/* } else if ($assertType(_ref, ptrType$80, true)[1]) { */ case 3:
			in$4 = _ref.$val;
			return new _nodeDebuggerStatement.ptr();
		/* } else if ($assertType(_ref, ptrType$81, true)[1]) { */ case 4:
			in$5 = _ref.$val;
			_r$14 = cmpl.parseExpression(in$5.Test); /* */ $s = 22; case 22: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			out$2 = new _nodeDoWhileStatement.ptr(_r$14, sliceType$12.nil);
			_r$15 = cmpl.parseStatement(in$5.Body); /* */ $s = 23; case 23: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			body = _r$15;
			_tuple$1 = $assertType(body, ptrType$37, true);
			block = _tuple$1[0];
			ok = _tuple$1[1];
			if (ok) {
				out$2.body = block.list;
			} else {
				out$2.body = $append(out$2.body, body);
			}
			return out$2;
		/* } else if ($assertType(_ref, ptrType$82, true)[1]) { */ case 5:
			in$6 = _ref.$val;
			return emptyStatement;
		/* } else if ($assertType(_ref, ptrType$83, true)[1]) { */ case 6:
			in$7 = _ref.$val;
			_r$16 = cmpl.parseExpression(in$7.Expression); /* */ $s = 24; case 24: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ $s = 25; case 25:
			return new _nodeExpressionStatement.ptr(_r$16);
		/* } else if ($assertType(_ref, ptrType$84, true)[1]) { */ case 7:
			in$8 = _ref.$val;
			_r$17 = cmpl.parseExpression(in$8.Into); /* */ $s = 26; case 26: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_r$18 = cmpl.parseExpression(in$8.Source); /* */ $s = 27; case 27: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			out$3 = new _nodeForInStatement.ptr(_r$17, _r$18, sliceType$12.nil);
			_r$19 = cmpl.parseStatement(in$8.Body); /* */ $s = 28; case 28: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			body$1 = _r$19;
			_tuple$2 = $assertType(body$1, ptrType$37, true);
			block$1 = _tuple$2[0];
			ok$1 = _tuple$2[1];
			if (ok$1) {
				out$3.body = block$1.list;
			} else {
				out$3.body = $append(out$3.body, body$1);
			}
			return out$3;
		/* } else if ($assertType(_ref, ptrType$85, true)[1]) { */ case 8:
			in$9 = _ref.$val;
			_r$20 = cmpl.parseExpression(in$9.Initializer); /* */ $s = 29; case 29: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_r$21 = cmpl.parseExpression(in$9.Update); /* */ $s = 30; case 30: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			_r$22 = cmpl.parseExpression(in$9.Test); /* */ $s = 31; case 31: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			out$4 = new _nodeForStatement.ptr(_r$20, _r$21, _r$22, sliceType$12.nil);
			_r$23 = cmpl.parseStatement(in$9.Body); /* */ $s = 32; case 32: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			body$2 = _r$23;
			_tuple$3 = $assertType(body$2, ptrType$37, true);
			block$2 = _tuple$3[0];
			ok$2 = _tuple$3[1];
			if (ok$2) {
				out$4.body = block$2.list;
			} else {
				out$4.body = $append(out$4.body, body$2);
			}
			return out$4;
		/* } else if ($assertType(_ref, ptrType$86, true)[1]) { */ case 9:
			in$10 = _ref.$val;
			_r$24 = cmpl.parseExpression(in$10.Test); /* */ $s = 33; case 33: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			_r$25 = cmpl.parseStatement(in$10.Consequent); /* */ $s = 34; case 34: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			_r$26 = cmpl.parseStatement(in$10.Alternate); /* */ $s = 35; case 35: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			/* */ $s = 36; case 36:
			return new _nodeIfStatement.ptr(_r$24, _r$25, _r$26);
		/* } else if ($assertType(_ref, ptrType$87, true)[1]) { */ case 10:
			in$11 = _ref.$val;
			_r$27 = cmpl.parseStatement(in$11.Statement); /* */ $s = 37; case 37: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			/* */ $s = 38; case 38:
			return new _nodeLabelledStatement.ptr(in$11.Label.Name, _r$27);
		/* } else if ($assertType(_ref, ptrType$88, true)[1]) { */ case 11:
			in$12 = _ref.$val;
			_r$28 = cmpl.parseExpression(in$12.Argument); /* */ $s = 39; case 39: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			/* */ $s = 40; case 40:
			return new _nodeReturnStatement.ptr(_r$28);
		/* } else if ($assertType(_ref, ptrType$89, true)[1]) { */ case 12:
			in$13 = _ref.$val;
			_r$29 = cmpl.parseExpression(in$13.Discriminant); /* */ $s = 41; case 41: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
			out$5 = new _nodeSwitchStatement.ptr(_r$29, in$13.Default, $makeSlice(sliceType$13, in$13.Body.$length));
			_ref$2 = in$13.Body;
			_i$1 = 0;
			/* while (true) { */ case 42:
				/* if (!(_i$1 < _ref$2.$length)) { break; } */ if(!(_i$1 < _ref$2.$length)) { $s = 43; continue; }
				i$1 = _i$1;
				clause = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]);
				_r$30 = cmpl.parseExpression(clause.Test); /* */ $s = 44; case 44: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				(x$1 = out$5.body, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1] = new _nodeCaseStatement.ptr(_r$30, $makeSlice(sliceType$12, clause.Consequent.$length))));
				_ref$3 = clause.Consequent;
				_i$2 = 0;
				/* while (true) { */ case 45:
					/* if (!(_i$2 < _ref$3.$length)) { break; } */ if(!(_i$2 < _ref$3.$length)) { $s = 46; continue; }
					j = _i$2;
					value$1 = ((_i$2 < 0 || _i$2 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$2]);
					_r$31 = cmpl.parseStatement(value$1); /* */ $s = 47; case 47: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
					(x$2 = (x$3 = out$5.body, ((i$1 < 0 || i$1 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i$1])).consequent, ((j < 0 || j >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + j] = _r$31));
					_i$2++;
				/* } */ $s = 45; continue; case 46:
				_i$1++;
			/* } */ $s = 42; continue; case 43:
			return out$5;
		/* } else if ($assertType(_ref, ptrType$90, true)[1]) { */ case 13:
			in$14 = _ref.$val;
			_r$32 = cmpl.parseExpression(in$14.Argument); /* */ $s = 48; case 48: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			/* */ $s = 49; case 49:
			return new _nodeThrowStatement.ptr(_r$32);
		/* } else if ($assertType(_ref, ptrType$91, true)[1]) { */ case 14:
			in$15 = _ref.$val;
			_r$33 = cmpl.parseStatement(in$15.Body); /* */ $s = 50; case 50: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			_r$34 = cmpl.parseStatement(in$15.Finally); /* */ $s = 51; case 51: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
			out$6 = new _nodeTryStatement.ptr(_r$33, ptrType$54.nil, _r$34);
			/* */ if (!(in$15.Catch === ptrType$96.nil)) { $s = 52; continue; }
			/* */ $s = 53; continue;
			/* if (!(in$15.Catch === ptrType$96.nil)) { */ case 52:
				_r$35 = cmpl.parseStatement(in$15.Catch.Body); /* */ $s = 54; case 54: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
				out$6.catch$1 = new _nodeCatchStatement.ptr(in$15.Catch.Parameter.Name, _r$35);
			/* } */ case 53:
			return out$6;
		/* } else if ($assertType(_ref, ptrType$92, true)[1]) { */ case 15:
			in$16 = _ref.$val;
			out$7 = new _nodeVariableStatement.ptr($makeSlice(sliceType$9, in$16.List.$length));
			_ref$4 = in$16.List;
			_i$3 = 0;
			/* while (true) { */ case 55:
				/* if (!(_i$3 < _ref$4.$length)) { break; } */ if(!(_i$3 < _ref$4.$length)) { $s = 56; continue; }
				i$2 = _i$3;
				value$2 = ((_i$3 < 0 || _i$3 >= _ref$4.$length) ? $throwRuntimeError("index out of range") : _ref$4.$array[_ref$4.$offset + _i$3]);
				_r$36 = cmpl.parseExpression(value$2); /* */ $s = 57; case 57: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
				(x$4 = out$7.list, ((i$2 < 0 || i$2 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + i$2] = _r$36));
				_i$3++;
			/* } */ $s = 55; continue; case 56:
			return out$7;
		/* } else if ($assertType(_ref, ptrType$93, true)[1]) { */ case 16:
			in$17 = _ref.$val;
			_r$37 = cmpl.parseExpression(in$17.Test); /* */ $s = 58; case 58: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
			out$8 = new _nodeWhileStatement.ptr(_r$37, sliceType$12.nil);
			_r$38 = cmpl.parseStatement(in$17.Body); /* */ $s = 59; case 59: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
			body$3 = _r$38;
			_tuple$4 = $assertType(body$3, ptrType$37, true);
			block$3 = _tuple$4[0];
			ok$3 = _tuple$4[1];
			if (ok$3) {
				out$8.body = block$3.list;
			} else {
				out$8.body = $append(out$8.body, body$3);
			}
			return out$8;
		/* } else if ($assertType(_ref, ptrType$94, true)[1]) { */ case 17:
			in$18 = _ref.$val;
			_r$39 = cmpl.parseExpression(in$18.Object); /* */ $s = 60; case 60: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
			_r$40 = cmpl.parseStatement(in$18.Body); /* */ $s = 61; case 61: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
			/* */ $s = 62; case 62:
			return new _nodeWithStatement.ptr(_r$39, _r$40);
		/* } */ case 18:
		_r$41 = fmt.Errorf("Here be dragons: cmpl.parseStatement(%T)", new sliceType$1([in$1])); /* */ $s = 63; case 63: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
		$panic(_r$41);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _compiler.ptr.prototype.parseStatement }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.block = block; $f.block$1 = block$1; $f.block$2 = block$2; $f.block$3 = block$3; $f.body = body; $f.body$1 = body$1; $f.body$2 = body$2; $f.body$3 = body$3; $f.clause = clause; $f.cmpl = cmpl; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.in$1 = in$1; $f.in$10 = in$10; $f.in$11 = in$11; $f.in$12 = in$12; $f.in$13 = in$13; $f.in$14 = in$14; $f.in$15 = in$15; $f.in$16 = in$16; $f.in$17 = in$17; $f.in$18 = in$18; $f.in$2 = in$2; $f.in$3 = in$3; $f.in$4 = in$4; $f.in$5 = in$5; $f.in$6 = in$6; $f.in$7 = in$7; $f.in$8 = in$8; $f.in$9 = in$9; $f.j = j; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.out = out; $f.out$1 = out$1; $f.out$2 = out$2; $f.out$3 = out$3; $f.out$4 = out$4; $f.out$5 = out$5; $f.out$6 = out$6; $f.out$7 = out$7; $f.out$8 = out$8; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	_compiler.prototype.parseStatement = function(in$1) { return this.$val.parseStatement(in$1); };
	cmpl_parse = function(in$1) {
		var $ptr, _r$13, cmpl, in$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; cmpl = $f.cmpl; in$1 = $f.in$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cmpl = new _compiler.ptr(ptrType$1.nil, in$1);
		_r$13 = cmpl.parse(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cmpl_parse }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.cmpl = cmpl; $f.in$1 = in$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_compiler.ptr.prototype._parse = function(in$1) {
		var $ptr, _i, _i$1, _i$2, _r$13, _r$14, _r$15, _ref, _ref$1, _ref$2, _ref$3, cmpl, i, in$1, out, value, value$1, value$2, value$3, value$4, value$5, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; cmpl = $f.cmpl; i = $f.i; in$1 = $f.in$1; out = $f.out; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; value$3 = $f.value$3; value$4 = $f.value$4; value$5 = $f.value$5; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cmpl = this;
		out = new _nodeProgram.ptr($makeSlice(sliceType$12, in$1.Body.$length), sliceType.nil, sliceType$10.nil, sliceType$14.nil, in$1.File);
		_ref = in$1.Body;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			value = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$13 = cmpl.parseStatement(value); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			(x = out.body, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = _r$13));
			_i++;
		/* } */ $s = 1; continue; case 2:
		_ref$1 = in$1.DeclarationList;
		_i$1 = 0;
		/* while (true) { */ case 4:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 5; continue; }
			value$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			_ref$2 = value$1;
			/* */ if ($assertType(_ref$2, ptrType$76, true)[1]) { $s = 6; continue; }
			/* */ if ($assertType(_ref$2, ptrType$77, true)[1]) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ($assertType(_ref$2, ptrType$76, true)[1]) { */ case 6:
				value$2 = _ref$2.$val;
				_r$14 = cmpl.parseExpression(value$2.Function); /* */ $s = 10; case 10: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				out.functionList = $append(out.functionList, $assertType(_r$14, ptrType$10));
				$s = 9; continue;
			/* } else if ($assertType(_ref$2, ptrType$77, true)[1]) { */ case 7:
				value$3 = _ref$2.$val;
				_ref$3 = value$3.List;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$3.$length)) { break; }
					value$4 = ((_i$2 < 0 || _i$2 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$2]);
					out.varList = $append(out.varList, value$4.Name);
					_i$2++;
				}
				$s = 9; continue;
			/* } else { */ case 8:
				value$5 = _ref$2;
				_r$15 = fmt.Errorf("Here be dragons: cmpl.parseProgram.DeclarationList(%T)", new sliceType$1([value$5])); /* */ $s = 11; case 11: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				$panic(_r$15);
			/* } */ case 9:
			_i$1++;
		/* } */ $s = 4; continue; case 5:
		return out;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _compiler.ptr.prototype._parse }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f.cmpl = cmpl; $f.i = i; $f.in$1 = in$1; $f.out = out; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.value$3 = value$3; $f.value$4 = value$4; $f.value$5 = value$5; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_compiler.prototype._parse = function(in$1) { return this.$val._parse(in$1); };
	formatForConsole = function(argumentList) {
		var $ptr, _i, _r$13, _ref, argument, argumentList, output, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _ref = $f._ref; argument = $f.argument; argumentList = $f.argumentList; output = $f.output; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		output = new sliceType([]);
		_ref = argumentList;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argument = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Value);
			_r$13 = fmt.Sprintf("%v", new sliceType$1([new argument.constructor.elem(argument)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			output = $append(output, _r$13);
			_i++;
		/* } */ $s = 1; continue; case 2:
		return strings.Join(output, " ");
		/* */ } return; } if ($f === undefined) { $f = { $blk: formatForConsole }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._ref = _ref; $f.argument = argument; $f.argumentList = argumentList; $f.output = output; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinConsole_log = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = os.Stdout;
		_r$13 = formatForConsole(call.ArgumentList); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = new $String(_r$13);
		_r$14 = fmt.Fprintln(_arg, new sliceType$1([_arg$1])); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14;
		return new Value.ptr(0, $ifaceNil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinConsole_log }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinConsole_error = function(call) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, call, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; call = $f.call; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = $clone(call, FunctionCall);
		_arg = os.Stdout;
		_r$13 = formatForConsole(call.ArgumentList); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = new $String(_r$13);
		_r$14 = fmt.Fprintln(_arg, new sliceType$1([_arg$1])); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14;
		return new Value.ptr(0, $ifaceNil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: builtinConsole_error }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.call = call; $f.$s = $s; $f.$r = $r; return $f;
	};
	builtinConsole_dir = function(call) {
		var $ptr, call;
		call = $clone(call, FunctionCall);
		return new Value.ptr(0, $ifaceNil);
	};
	builtinConsole_time = function(call) {
		var $ptr, call;
		call = $clone(call, FunctionCall);
		return new Value.ptr(0, $ifaceNil);
	};
	builtinConsole_timeEnd = function(call) {
		var $ptr, call;
		call = $clone(call, FunctionCall);
		return new Value.ptr(0, $ifaceNil);
	};
	builtinConsole_trace = function(call) {
		var $ptr, call;
		call = $clone(call, FunctionCall);
		return new Value.ptr(0, $ifaceNil);
	};
	builtinConsole_assert = function(call) {
		var $ptr, call;
		call = $clone(call, FunctionCall);
		return new Value.ptr(0, $ifaceNil);
	};
	_runtime.ptr.prototype.newConsole = function() {
		var $ptr, runtime$1;
		runtime$1 = this;
		return newConsoleObject(runtime$1);
	};
	_runtime.prototype.newConsole = function() { return this.$val.newConsole(); };
	newException = function(value) {
		var $ptr, value;
		return new _exception.ptr(value);
	};
	_exception.ptr.prototype.eject = function() {
		var $ptr, self, value;
		self = this;
		value = self.value;
		self.value = $ifaceNil;
		return value;
	};
	_exception.prototype.eject = function() { return this.$val.eject(); };
	_frame.ptr.prototype.location = function() {
		var $ptr, _r$13, _r$14, _tuple$1, column, fr, line, path, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; column = $f.column; fr = $f.fr; line = $f.line; path = $f.path; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fr = $clone(this, _frame);
		if (fr.file === ptrType$1.nil) {
			return "<unknown>";
		}
		path = fr.file.Name();
		_tuple$1 = _position(fr.file, fr.offset);
		line = _tuple$1[0];
		column = _tuple$1[1];
		if (path === "") {
			path = "<anonymous>";
		}
		_r$13 = fmt.Sprintf("%s:%d:%d", new sliceType$1([new $String(path), new $Int(line), new $Int(column)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		str = _r$13;
		/* */ if (!(fr.callee === "")) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(fr.callee === "")) { */ case 2:
			_r$14 = fmt.Sprintf("%s (%s)", new sliceType$1([new $String(fr.callee), new $String(str)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			str = _r$14;
		/* } */ case 3:
		return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _frame.ptr.prototype.location }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.column = column; $f.fr = fr; $f.line = line; $f.path = path; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	_frame.prototype.location = function() { return this.$val.location(); };
	_position = function(file$1, offset) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, column, column$1, file$1, index, line, line$1, offset, offset$1, src;
		line = 0;
		column = 0;
		offset$1 = offset - file$1.Base() >> 0;
		if (offset$1 < 0) {
			_tmp = -offset$1;
			_tmp$1 = -1;
			line = _tmp;
			column = _tmp$1;
			return [line, column];
		}
		src = file$1.Source();
		if (offset$1 >= src.length) {
			_tmp$2 = -offset$1;
			_tmp$3 = -src.length;
			line = _tmp$2;
			column = _tmp$3;
			return [line, column];
		}
		src = src.substring(0, offset$1);
		line$1 = 1 + strings.Count(src, "\n") >> 0;
		column$1 = 0;
		index = strings.LastIndex(src, "\n");
		if (index >= 0) {
			column$1 = offset$1 - index >> 0;
		} else {
			column$1 = 1 + src.length >> 0;
		}
		_tmp$4 = line$1;
		_tmp$5 = column$1;
		line = _tmp$4;
		column = _tmp$5;
		return [line, column];
	};
	Error.ptr.prototype.Error = function() {
		var $ptr, _r$13, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $clone(this, Error);
		if (err._error.name.length === 0) {
			return err._error.message;
		}
		if (err._error.message.length === 0) {
			return err._error.name;
		}
		_r$13 = fmt.Sprintf("%s: %s", new sliceType$1([new $String(err._error.name), new $String(err._error.message)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Error.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.String = function() {
		var $ptr, _i, _r$13, _r$14, _ref, err, frame, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; err = $f.err; frame = $f.frame; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $clone(this, Error);
		_r$13 = err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		str = _r$13 + "\n";
		_ref = err._error.trace;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			frame = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), _frame);
			_r$14 = frame.location(); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			str = str + ("    at " + _r$14 + "\n");
			_i++;
		/* } */ $s = 2; continue; case 3:
		return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Error.ptr.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f.err = err; $f.frame = frame; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	Error.prototype.String = function() { return this.$val.String(); };
	_error.ptr.prototype.describe = function(format, in$1) {
		var $ptr, _r$13, err, format, in$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; err = $f.err; format = $f.format; in$1 = $f.in$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $clone(this, _error);
		_r$13 = fmt.Sprintf(format, in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _error.ptr.prototype.describe }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.err = err; $f.format = format; $f.in$1 = in$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_error.prototype.describe = function(format, in$1) { return this.$val.describe(format, in$1); };
	_error.ptr.prototype.messageValue = function() {
		var $ptr, self;
		self = $clone(this, _error);
		if (self.message === "") {
			return new Value.ptr(0, $ifaceNil);
		}
		return toValue_string(self.message);
	};
	_error.prototype.messageValue = function() { return this.$val.messageValue(); };
	_runtime.ptr.prototype.typeErrorResult = function(throw$1) {
		var $ptr, _r$13, rt, throw$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; rt = $f.rt; throw$1 = $f.throw$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rt = this;
		/* */ if (throw$1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (throw$1) { */ case 1:
			_r$13 = rt.panicTypeError(new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 2:
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.typeErrorResult }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.rt = rt; $f.throw$1 = throw$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.typeErrorResult = function(throw$1) { return this.$val.typeErrorResult(throw$1); };
	newError = function(rt, name, in$1) {
		var $ptr, _r$13, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple$1, at, description, err, frame, in$1, length, limit, name, ok, rt, scope, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple$1 = $f._tuple$1; at = $f.at; description = $f.description; err = $f.err; frame = $f.frame; in$1 = $f.in$1; length = $f.length; limit = $f.limit; name = $f.name; ok = $f.ok; rt = $f.rt; scope = $f.scope; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = new _error.ptr(name, "", sliceType$15.nil, -1);
		description = "";
		length = in$1.$length;
		if (!(rt === ptrType$3.nil)) {
			scope = rt.scope;
			frame = $clone(scope.frame, _frame);
			if (length > 0) {
				_tuple$1 = $assertType((x = length - 1 >> 0, ((x < 0 || x >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + x])), _at, true);
				at = _tuple$1[0];
				ok = _tuple$1[1];
				if (ok) {
					in$1 = $subslice(in$1, 0, (length - 1 >> 0));
					if (!(scope === ptrType$16.nil)) {
						frame.offset = (at >> 0);
					}
					length = length - (1) >> 0;
				}
				if (length > 0) {
					_tmp = $assertType((0 >= in$1.$length ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + 0]), $String);
					_tmp$1 = $subslice(in$1, 1);
					description = _tmp;
					in$1 = _tmp$1;
				}
			}
			limit = 10;
			err.trace = $append(err.trace, frame);
			if (!(scope === ptrType$16.nil)) {
				while (true) {
					if (!(limit > 0)) { break; }
					scope = scope.outer;
					if (scope === ptrType$16.nil) {
						break;
					}
					if (scope.frame.offset >= 0) {
						err.trace = $append(err.trace, scope.frame);
					}
					limit = limit - (1) >> 0;
				}
			}
		} else {
			if (length > 0) {
				_tmp$2 = $assertType((0 >= in$1.$length ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + 0]), $String);
				_tmp$3 = $subslice(in$1, 1);
				description = _tmp$2;
				in$1 = _tmp$3;
			}
		}
		_r$13 = err.describe(description, in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		err.message = _r$13;
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple$1 = _tuple$1; $f.at = at; $f.description = description; $f.err = err; $f.frame = frame; $f.in$1 = in$1; $f.length = length; $f.limit = limit; $f.name = name; $f.ok = ok; $f.rt = rt; $f.scope = scope; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.panicTypeError = function(argumentList) {
		var $ptr, _r$13, argumentList, rt, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; argumentList = $f.argumentList; rt = $f.rt; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rt = this;
		_r$13 = newError(rt, "TypeError", argumentList); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return new _exception.ptr((x = _r$13, new x.constructor.elem(x)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.panicTypeError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.argumentList = argumentList; $f.rt = rt; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.panicTypeError = function(argumentList) { return this.$val.panicTypeError(argumentList); };
	_runtime.ptr.prototype.panicReferenceError = function(argumentList) {
		var $ptr, _r$13, argumentList, rt, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; argumentList = $f.argumentList; rt = $f.rt; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rt = this;
		_r$13 = newError(rt, "ReferenceError", argumentList); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return new _exception.ptr((x = _r$13, new x.constructor.elem(x)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.panicReferenceError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.argumentList = argumentList; $f.rt = rt; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.panicReferenceError = function(argumentList) { return this.$val.panicReferenceError(argumentList); };
	_runtime.ptr.prototype.panicURIError = function(argumentList) {
		var $ptr, _r$13, argumentList, rt, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; argumentList = $f.argumentList; rt = $f.rt; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rt = this;
		_r$13 = newError(rt, "URIError", argumentList); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return new _exception.ptr((x = _r$13, new x.constructor.elem(x)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.panicURIError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.argumentList = argumentList; $f.rt = rt; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.panicURIError = function(argumentList) { return this.$val.panicURIError(argumentList); };
	_runtime.ptr.prototype.panicSyntaxError = function(argumentList) {
		var $ptr, _r$13, argumentList, rt, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; argumentList = $f.argumentList; rt = $f.rt; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rt = this;
		_r$13 = newError(rt, "SyntaxError", argumentList); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return new _exception.ptr((x = _r$13, new x.constructor.elem(x)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.panicSyntaxError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.argumentList = argumentList; $f.rt = rt; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.panicSyntaxError = function(argumentList) { return this.$val.panicSyntaxError(argumentList); };
	_runtime.ptr.prototype.panicRangeError = function(argumentList) {
		var $ptr, _r$13, argumentList, rt, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; argumentList = $f.argumentList; rt = $f.rt; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rt = this;
		_r$13 = newError(rt, "RangeError", argumentList); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return new _exception.ptr((x = _r$13, new x.constructor.elem(x)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.panicRangeError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.argumentList = argumentList; $f.rt = rt; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.panicRangeError = function(argumentList) { return this.$val.panicRangeError(argumentList); };
	catchPanic = function(function$1) {
		var $ptr, err, function$1, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; err = $f.err; function$1 = $f.function$1; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		err[0] = $ifaceNil;
		$deferred.push([(function(err) { return function $b() {
			var $ptr, _r$13, _r$14, _ref, _ref$1, _tuple$1, caught, caught$1, caught$2, exception, ok, vl, vl$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple$1 = $f._tuple$1; caught = $f.caught; caught$1 = $f.caught$1; caught$2 = $f.caught$2; exception = $f.exception; ok = $f.ok; vl = $f.vl; vl$1 = $f.vl$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			caught = $recover();
			/* */ if (!($interfaceIsEqual(caught, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(caught, $ifaceNil))) { */ case 1:
				_tuple$1 = $assertType(caught, ptrType$97, true);
				exception = _tuple$1[0];
				ok = _tuple$1[1];
				if (ok) {
					caught = exception.eject();
				}
				_ref = caught;
				/* */ if ($assertType(_ref, _error, true)[1]) { $s = 3; continue; }
				/* */ if ($assertType(_ref, Value, true)[1]) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if ($assertType(_ref, _error, true)[1]) { */ case 3:
					caught$1 = _ref.$val;
					err[0] = new Error.ptr($clone(caught$1, _error));
					return;
				/* } else if ($assertType(_ref, Value, true)[1]) { */ case 4:
					caught$2 = _ref.$val;
					vl = caught$2._object();
					if (!(vl === ptrType$4.nil)) {
						_ref$1 = vl.value;
						if ($assertType(_ref$1, _error, true)[1]) {
							vl$1 = _ref$1.$val;
							err[0] = new Error.ptr($clone(vl$1, _error));
							return;
						}
					}
					_r$13 = caught$2.string(); /* */ $s = 6; case 6: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_r$14 = errors.New(_r$13); /* */ $s = 7; case 7: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					err[0] = _r$14;
					return;
				/* } */ case 5:
				$panic(caught);
			/* } */ case 2:
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple$1 = _tuple$1; $f.caught = caught; $f.caught$1 = caught$1; $f.caught$2 = caught$2; $f.exception = exception; $f.ok = ok; $f.vl = vl; $f.vl$1 = vl$1; $f.$s = $s; $f.$r = $r; return $f;
		}; })(err), []]);
		$r = function$1(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		err[0] = $ifaceNil;
		return err[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: catchPanic }; } $f.$ptr = $ptr; $f.err = err; $f.function$1 = function$1; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	_runtime.ptr.prototype.evaluateDivide = function(left, right) {
		var $ptr, left, right, self;
		self = this;
		if (math.IsNaN(left) || math.IsNaN(right)) {
			return NaNValue();
		}
		if (math.IsInf(left, 0) && math.IsInf(right, 0)) {
			return NaNValue();
		}
		if ((left === 0) && (right === 0)) {
			return NaNValue();
		}
		if (math.IsInf(left, 0)) {
			if (math.Signbit(left) === math.Signbit(right)) {
				return positiveInfinityValue();
			} else {
				return negativeInfinityValue();
			}
		}
		if (math.IsInf(right, 0)) {
			if (math.Signbit(left) === math.Signbit(right)) {
				return positiveZeroValue();
			} else {
				return negativeZeroValue();
			}
		}
		if (right === 0) {
			if (math.Signbit(left) === math.Signbit(right)) {
				return positiveInfinityValue();
			} else {
				return negativeInfinityValue();
			}
		}
		return toValue_float64(left / right);
	};
	_runtime.prototype.evaluateDivide = function(left, right) { return this.$val.evaluateDivide(left, right); };
	_runtime.ptr.prototype.calculateBinaryExpression = function(operator, left, right) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$50, _r$51, _r$52, _r$53, _r$54, _r$55, _r$56, _r$57, _r$58, _r$59, _r$60, _r$61, _r$62, _r$63, _r$64, _r$65, _r$66, _r$67, _r$68, _r$69, _r$70, _r$71, _r$72, _r$73, _r$74, _r$75, _r$76, _r$77, _r$78, _r$79, _r$80, _r$81, _r$82, _ref, left, left$1, left$2, leftValue, operator, right, rightValue, rightValue$1, rightValue$10, rightValue$11, rightValue$12, rightValue$2, rightValue$3, rightValue$4, rightValue$5, rightValue$6, rightValue$7, rightValue$8, rightValue$9, self, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$45 = $f._r$45; _r$46 = $f._r$46; _r$47 = $f._r$47; _r$48 = $f._r$48; _r$49 = $f._r$49; _r$50 = $f._r$50; _r$51 = $f._r$51; _r$52 = $f._r$52; _r$53 = $f._r$53; _r$54 = $f._r$54; _r$55 = $f._r$55; _r$56 = $f._r$56; _r$57 = $f._r$57; _r$58 = $f._r$58; _r$59 = $f._r$59; _r$60 = $f._r$60; _r$61 = $f._r$61; _r$62 = $f._r$62; _r$63 = $f._r$63; _r$64 = $f._r$64; _r$65 = $f._r$65; _r$66 = $f._r$66; _r$67 = $f._r$67; _r$68 = $f._r$68; _r$69 = $f._r$69; _r$70 = $f._r$70; _r$71 = $f._r$71; _r$72 = $f._r$72; _r$73 = $f._r$73; _r$74 = $f._r$74; _r$75 = $f._r$75; _r$76 = $f._r$76; _r$77 = $f._r$77; _r$78 = $f._r$78; _r$79 = $f._r$79; _r$80 = $f._r$80; _r$81 = $f._r$81; _r$82 = $f._r$82; _ref = $f._ref; left = $f.left; left$1 = $f.left$1; left$2 = $f.left$2; leftValue = $f.leftValue; operator = $f.operator; right = $f.right; rightValue = $f.rightValue; rightValue$1 = $f.rightValue$1; rightValue$10 = $f.rightValue$10; rightValue$11 = $f.rightValue$11; rightValue$12 = $f.rightValue$12; rightValue$2 = $f.rightValue$2; rightValue$3 = $f.rightValue$3; rightValue$4 = $f.rightValue$4; rightValue$5 = $f.rightValue$5; rightValue$6 = $f.rightValue$6; rightValue$7 = $f.rightValue$7; rightValue$8 = $f.rightValue$8; rightValue$9 = $f.rightValue$9; self = $f.self; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		right = $clone(right, Value);
		left = $clone(left, Value);
		self = this;
		_r$13 = left.resolve(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		leftValue = $clone(_r$13, Value);
		_ref = operator;
		/* */ if (_ref === 10) { $s = 2; continue; }
		/* */ if (_ref === 11) { $s = 3; continue; }
		/* */ if (_ref === 12) { $s = 4; continue; }
		/* */ if (_ref === 13) { $s = 5; continue; }
		/* */ if (_ref === 14) { $s = 6; continue; }
		/* */ if (_ref === 34) { $s = 7; continue; }
		/* */ if (_ref === 35) { $s = 8; continue; }
		/* */ if (_ref === 15) { $s = 9; continue; }
		/* */ if (_ref === 16) { $s = 10; continue; }
		/* */ if (_ref === 17) { $s = 11; continue; }
		/* */ if (_ref === 18) { $s = 12; continue; }
		/* */ if (_ref === 19) { $s = 13; continue; }
		/* */ if (_ref === 20) { $s = 14; continue; }
		/* */ if (_ref === 86) { $s = 15; continue; }
		/* */ if (_ref === 62) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (_ref === 10) { */ case 2:
			_r$14 = toPrimitive(leftValue); /* */ $s = 18; case 18: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			Value.copy(leftValue, _r$14);
			_r$15 = right.resolve(); /* */ $s = 19; case 19: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			rightValue = $clone(_r$15, Value);
			_r$16 = toPrimitive(rightValue); /* */ $s = 20; case 20: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			Value.copy(rightValue, _r$16);
			/* */ if (leftValue.IsString() || rightValue.IsString()) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (leftValue.IsString() || rightValue.IsString()) { */ case 21:
				_r$17 = leftValue.string(); /* */ $s = 24; case 24: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$18 = rightValue.string(); /* */ $s = 25; case 25: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				_r$19 = strings.Join(new sliceType([_r$17, _r$18]), ""); /* */ $s = 26; case 26: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				_r$20 = toValue_string(_r$19); /* */ $s = 27; case 27: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				/* */ $s = 28; case 28:
				return _r$20;
			/* } else { */ case 22:
				_r$21 = leftValue.float64(); /* */ $s = 29; case 29: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				_r$22 = rightValue.float64(); /* */ $s = 30; case 30: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				_r$23 = toValue_float64(_r$21 + _r$22); /* */ $s = 31; case 31: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				/* */ $s = 32; case 32:
				return _r$23;
			/* } */ case 23:
			$s = 17; continue;
		/* } else if (_ref === 11) { */ case 3:
			_r$24 = right.resolve(); /* */ $s = 33; case 33: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			rightValue$1 = $clone(_r$24, Value);
			_r$25 = leftValue.float64(); /* */ $s = 34; case 34: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			_r$26 = rightValue$1.float64(); /* */ $s = 35; case 35: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			_r$27 = toValue_float64(_r$25 - _r$26); /* */ $s = 36; case 36: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			/* */ $s = 37; case 37:
			return _r$27;
		/* } else if (_ref === 12) { */ case 4:
			_r$28 = right.resolve(); /* */ $s = 38; case 38: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			rightValue$2 = $clone(_r$28, Value);
			_r$29 = leftValue.float64(); /* */ $s = 39; case 39: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
			_r$30 = rightValue$2.float64(); /* */ $s = 40; case 40: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
			_r$31 = toValue_float64(_r$29 * _r$30); /* */ $s = 41; case 41: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			/* */ $s = 42; case 42:
			return _r$31;
		/* } else if (_ref === 13) { */ case 5:
			_r$32 = right.resolve(); /* */ $s = 43; case 43: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			rightValue$3 = $clone(_r$32, Value);
			_r$33 = leftValue.float64(); /* */ $s = 44; case 44: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			_arg = _r$33;
			_r$34 = rightValue$3.float64(); /* */ $s = 45; case 45: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
			_arg$1 = _r$34;
			_r$35 = self.evaluateDivide(_arg, _arg$1); /* */ $s = 46; case 46: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
			/* */ $s = 47; case 47:
			return _r$35;
		/* } else if (_ref === 14) { */ case 6:
			_r$36 = right.resolve(); /* */ $s = 48; case 48: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
			rightValue$4 = $clone(_r$36, Value);
			_r$37 = leftValue.float64(); /* */ $s = 49; case 49: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
			_arg$2 = _r$37;
			_r$38 = rightValue$4.float64(); /* */ $s = 50; case 50: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
			_arg$3 = _r$38;
			_r$39 = math.Mod(_arg$2, _arg$3); /* */ $s = 51; case 51: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
			_r$40 = toValue_float64(_r$39); /* */ $s = 52; case 52: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
			/* */ $s = 53; case 53:
			return _r$40;
		/* } else if (_ref === 34) { */ case 7:
			_r$41 = leftValue.bool(); /* */ $s = 54; case 54: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
			left$1 = _r$41;
			if (!left$1) {
				return falseValue;
			}
			_r$42 = right.resolve(); /* */ $s = 55; case 55: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
			_r$43 = _r$42.bool(); /* */ $s = 56; case 56: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
			_r$44 = toValue_bool(_r$43); /* */ $s = 57; case 57: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
			/* */ $s = 58; case 58:
			return _r$44;
		/* } else if (_ref === 35) { */ case 8:
			_r$45 = leftValue.bool(); /* */ $s = 59; case 59: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
			left$2 = _r$45;
			if (left$2) {
				return trueValue;
			}
			_r$46 = right.resolve(); /* */ $s = 60; case 60: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
			_r$47 = _r$46.bool(); /* */ $s = 61; case 61: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
			_r$48 = toValue_bool(_r$47); /* */ $s = 62; case 62: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
			/* */ $s = 63; case 63:
			return _r$48;
		/* } else if (_ref === 15) { */ case 9:
			_r$49 = right.resolve(); /* */ $s = 64; case 64: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
			rightValue$5 = $clone(_r$49, Value);
			_r$50 = toInt32(leftValue); /* */ $s = 65; case 65: if($c) { $c = false; _r$50 = _r$50.$blk(); } if (_r$50 && _r$50.$blk !== undefined) { break s; }
			_r$51 = toInt32(rightValue$5); /* */ $s = 66; case 66: if($c) { $c = false; _r$51 = _r$51.$blk(); } if (_r$51 && _r$51.$blk !== undefined) { break s; }
			_r$52 = toValue_int32(_r$50 & _r$51); /* */ $s = 67; case 67: if($c) { $c = false; _r$52 = _r$52.$blk(); } if (_r$52 && _r$52.$blk !== undefined) { break s; }
			/* */ $s = 68; case 68:
			return _r$52;
		/* } else if (_ref === 16) { */ case 10:
			_r$53 = right.resolve(); /* */ $s = 69; case 69: if($c) { $c = false; _r$53 = _r$53.$blk(); } if (_r$53 && _r$53.$blk !== undefined) { break s; }
			rightValue$6 = $clone(_r$53, Value);
			_r$54 = toInt32(leftValue); /* */ $s = 70; case 70: if($c) { $c = false; _r$54 = _r$54.$blk(); } if (_r$54 && _r$54.$blk !== undefined) { break s; }
			_r$55 = toInt32(rightValue$6); /* */ $s = 71; case 71: if($c) { $c = false; _r$55 = _r$55.$blk(); } if (_r$55 && _r$55.$blk !== undefined) { break s; }
			_r$56 = toValue_int32(_r$54 | _r$55); /* */ $s = 72; case 72: if($c) { $c = false; _r$56 = _r$56.$blk(); } if (_r$56 && _r$56.$blk !== undefined) { break s; }
			/* */ $s = 73; case 73:
			return _r$56;
		/* } else if (_ref === 17) { */ case 11:
			_r$57 = right.resolve(); /* */ $s = 74; case 74: if($c) { $c = false; _r$57 = _r$57.$blk(); } if (_r$57 && _r$57.$blk !== undefined) { break s; }
			rightValue$7 = $clone(_r$57, Value);
			_r$58 = toInt32(leftValue); /* */ $s = 75; case 75: if($c) { $c = false; _r$58 = _r$58.$blk(); } if (_r$58 && _r$58.$blk !== undefined) { break s; }
			_r$59 = toInt32(rightValue$7); /* */ $s = 76; case 76: if($c) { $c = false; _r$59 = _r$59.$blk(); } if (_r$59 && _r$59.$blk !== undefined) { break s; }
			_r$60 = toValue_int32((_r$58 ^ _r$59) >> 0); /* */ $s = 77; case 77: if($c) { $c = false; _r$60 = _r$60.$blk(); } if (_r$60 && _r$60.$blk !== undefined) { break s; }
			/* */ $s = 78; case 78:
			return _r$60;
		/* } else if (_ref === 18) { */ case 12:
			_r$61 = right.resolve(); /* */ $s = 79; case 79: if($c) { $c = false; _r$61 = _r$61.$blk(); } if (_r$61 && _r$61.$blk !== undefined) { break s; }
			rightValue$8 = $clone(_r$61, Value);
			_r$62 = toUint32(rightValue$8); /* */ $s = 80; case 80: if($c) { $c = false; _r$62 = _r$62.$blk(); } if (_r$62 && _r$62.$blk !== undefined) { break s; }
			_r$63 = toInt32(leftValue); /* */ $s = 81; case 81: if($c) { $c = false; _r$63 = _r$63.$blk(); } if (_r$63 && _r$63.$blk !== undefined) { break s; }
			_r$64 = toValue_int32((y = (((_r$62 & 31) >>> 0)), y < 32 ? (_r$63 << y) : 0) >> 0); /* */ $s = 82; case 82: if($c) { $c = false; _r$64 = _r$64.$blk(); } if (_r$64 && _r$64.$blk !== undefined) { break s; }
			/* */ $s = 83; case 83:
			return _r$64;
		/* } else if (_ref === 19) { */ case 13:
			_r$65 = right.resolve(); /* */ $s = 84; case 84: if($c) { $c = false; _r$65 = _r$65.$blk(); } if (_r$65 && _r$65.$blk !== undefined) { break s; }
			rightValue$9 = $clone(_r$65, Value);
			_r$66 = toInt32(leftValue); /* */ $s = 85; case 85: if($c) { $c = false; _r$66 = _r$66.$blk(); } if (_r$66 && _r$66.$blk !== undefined) { break s; }
			_r$67 = toUint32(rightValue$9); /* */ $s = 86; case 86: if($c) { $c = false; _r$67 = _r$67.$blk(); } if (_r$67 && _r$67.$blk !== undefined) { break s; }
			_r$68 = toValue_int32((_r$66 >> $min((((_r$67 & 31) >>> 0)), 31)) >> 0); /* */ $s = 87; case 87: if($c) { $c = false; _r$68 = _r$68.$blk(); } if (_r$68 && _r$68.$blk !== undefined) { break s; }
			/* */ $s = 88; case 88:
			return _r$68;
		/* } else if (_ref === 20) { */ case 14:
			_r$69 = right.resolve(); /* */ $s = 89; case 89: if($c) { $c = false; _r$69 = _r$69.$blk(); } if (_r$69 && _r$69.$blk !== undefined) { break s; }
			rightValue$10 = $clone(_r$69, Value);
			_r$70 = toUint32(rightValue$10); /* */ $s = 90; case 90: if($c) { $c = false; _r$70 = _r$70.$blk(); } if (_r$70 && _r$70.$blk !== undefined) { break s; }
			_r$71 = toUint32(leftValue); /* */ $s = 91; case 91: if($c) { $c = false; _r$71 = _r$71.$blk(); } if (_r$71 && _r$71.$blk !== undefined) { break s; }
			_r$72 = toValue_uint32((y$1 = (((_r$70 & 31) >>> 0)), y$1 < 32 ? (_r$71 >>> y$1) : 0) >>> 0); /* */ $s = 92; case 92: if($c) { $c = false; _r$72 = _r$72.$blk(); } if (_r$72 && _r$72.$blk !== undefined) { break s; }
			/* */ $s = 93; case 93:
			return _r$72;
		/* } else if (_ref === 86) { */ case 15:
			_r$73 = right.resolve(); /* */ $s = 94; case 94: if($c) { $c = false; _r$73 = _r$73.$blk(); } if (_r$73 && _r$73.$blk !== undefined) { break s; }
			rightValue$11 = $clone(_r$73, Value);
			/* */ if (!rightValue$11.IsObject()) { $s = 95; continue; }
			/* */ $s = 96; continue;
			/* if (!rightValue$11.IsObject()) { */ case 95:
				_r$74 = self.panicTypeError(new sliceType$1([new $String("Expecting a function in instanceof check, but got: %v"), new rightValue$11.constructor.elem(rightValue$11)])); /* */ $s = 97; case 97: if($c) { $c = false; _r$74 = _r$74.$blk(); } if (_r$74 && _r$74.$blk !== undefined) { break s; }
				$panic(_r$74);
			/* } */ case 96:
			_r$75 = rightValue$11._object().hasInstance(leftValue); /* */ $s = 98; case 98: if($c) { $c = false; _r$75 = _r$75.$blk(); } if (_r$75 && _r$75.$blk !== undefined) { break s; }
			_r$76 = toValue_bool(_r$75); /* */ $s = 99; case 99: if($c) { $c = false; _r$76 = _r$76.$blk(); } if (_r$76 && _r$76.$blk !== undefined) { break s; }
			/* */ $s = 100; case 100:
			return _r$76;
		/* } else if (_ref === 62) { */ case 16:
			_r$77 = right.resolve(); /* */ $s = 101; case 101: if($c) { $c = false; _r$77 = _r$77.$blk(); } if (_r$77 && _r$77.$blk !== undefined) { break s; }
			rightValue$12 = $clone(_r$77, Value);
			/* */ if (!rightValue$12.IsObject()) { $s = 102; continue; }
			/* */ $s = 103; continue;
			/* if (!rightValue$12.IsObject()) { */ case 102:
				_r$78 = self.panicTypeError(new sliceType$1([])); /* */ $s = 104; case 104: if($c) { $c = false; _r$78 = _r$78.$blk(); } if (_r$78 && _r$78.$blk !== undefined) { break s; }
				$panic(_r$78);
			/* } */ case 103:
			_r$79 = leftValue.string(); /* */ $s = 105; case 105: if($c) { $c = false; _r$79 = _r$79.$blk(); } if (_r$79 && _r$79.$blk !== undefined) { break s; }
			_r$80 = rightValue$12._object().hasProperty(_r$79); /* */ $s = 106; case 106: if($c) { $c = false; _r$80 = _r$80.$blk(); } if (_r$80 && _r$80.$blk !== undefined) { break s; }
			_r$81 = toValue_bool(_r$80); /* */ $s = 107; case 107: if($c) { $c = false; _r$81 = _r$81.$blk(); } if (_r$81 && _r$81.$blk !== undefined) { break s; }
			/* */ $s = 108; case 108:
			return _r$81;
		/* } */ case 17:
		_r$82 = hereBeDragons(new sliceType$1([new token.Token(operator)])); /* */ $s = 109; case 109: if($c) { $c = false; _r$82 = _r$82.$blk(); } if (_r$82 && _r$82.$blk !== undefined) { break s; }
		$panic(new $String(_r$82));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.calculateBinaryExpression }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$45 = _r$45; $f._r$46 = _r$46; $f._r$47 = _r$47; $f._r$48 = _r$48; $f._r$49 = _r$49; $f._r$50 = _r$50; $f._r$51 = _r$51; $f._r$52 = _r$52; $f._r$53 = _r$53; $f._r$54 = _r$54; $f._r$55 = _r$55; $f._r$56 = _r$56; $f._r$57 = _r$57; $f._r$58 = _r$58; $f._r$59 = _r$59; $f._r$60 = _r$60; $f._r$61 = _r$61; $f._r$62 = _r$62; $f._r$63 = _r$63; $f._r$64 = _r$64; $f._r$65 = _r$65; $f._r$66 = _r$66; $f._r$67 = _r$67; $f._r$68 = _r$68; $f._r$69 = _r$69; $f._r$70 = _r$70; $f._r$71 = _r$71; $f._r$72 = _r$72; $f._r$73 = _r$73; $f._r$74 = _r$74; $f._r$75 = _r$75; $f._r$76 = _r$76; $f._r$77 = _r$77; $f._r$78 = _r$78; $f._r$79 = _r$79; $f._r$80 = _r$80; $f._r$81 = _r$81; $f._r$82 = _r$82; $f._ref = _ref; $f.left = left; $f.left$1 = left$1; $f.left$2 = left$2; $f.leftValue = leftValue; $f.operator = operator; $f.right = right; $f.rightValue = rightValue; $f.rightValue$1 = rightValue$1; $f.rightValue$10 = rightValue$10; $f.rightValue$11 = rightValue$11; $f.rightValue$12 = rightValue$12; $f.rightValue$2 = rightValue$2; $f.rightValue$3 = rightValue$3; $f.rightValue$4 = rightValue$4; $f.rightValue$5 = rightValue$5; $f.rightValue$6 = rightValue$6; $f.rightValue$7 = rightValue$7; $f.rightValue$8 = rightValue$8; $f.rightValue$9 = rightValue$9; $f.self = self; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.calculateBinaryExpression = function(operator, left, right) { return this.$val.calculateBinaryExpression(operator, left, right); };
	valueKindDispatchKey = function(left, right) {
		var $ptr, left, right;
		return (((left >> 0) << 2 >> 0)) + (right >> 0) >> 0;
	};
	makeEqualDispatch = function() {
		var $ptr, _r$13, _r$14, _r$15, _r$16, key, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; key = $f.key; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		key = valueKindDispatchKey;
		_r$13 = key(2, 5); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = key(3, 5); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = key(5, 2); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = key(5, 3); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return $makeMap($Int.keyFor, [{ k: _r$13, v: (function $b(x, y) {
			var $ptr, _r$14, _r$15, x, y, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$14 = $f._r$14; _r$15 = $f._r$15; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			y = $clone(y, Value);
			x = $clone(x, Value);
			_r$14 = x.float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = y.float64(); /* */ $s = 2; case 2: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 3; case 3:
			return _r$14 === _r$15;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
		}) }, { k: _r$14, v: (function $b(x, y) {
			var $ptr, _r$15, _r$16, x, y, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$15 = $f._r$15; _r$16 = $f._r$16; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			y = $clone(y, Value);
			x = $clone(x, Value);
			_r$15 = x.float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = y.float64(); /* */ $s = 2; case 2: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ $s = 3; case 3:
			return _r$15 === _r$16;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
		}) }, { k: _r$15, v: (function $b(x, y) {
			var $ptr, _r$16, _r$17, x, y, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$16 = $f._r$16; _r$17 = $f._r$17; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			y = $clone(y, Value);
			x = $clone(x, Value);
			_r$16 = x.float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$17 = y.float64(); /* */ $s = 2; case 2: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ $s = 3; case 3:
			return _r$16 === _r$17;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$16 = _r$16; $f._r$17 = _r$17; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
		}) }, { k: _r$16, v: (function $b(x, y) {
			var $ptr, _r$17, _r$18, x, y, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$17 = $f._r$17; _r$18 = $f._r$18; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			y = $clone(y, Value);
			x = $clone(x, Value);
			_r$17 = x.float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_r$18 = y.float64(); /* */ $s = 2; case 2: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			/* */ $s = 3; case 3:
			return _r$17 === _r$18;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$17 = _r$17; $f._r$18 = _r$18; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
		}) }]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeEqualDispatch }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.key = key; $f.$s = $s; $f.$r = $r; return $f;
	};
	calculateLessThan = function(left, right, leftFirst) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _tmp, _tmp$1, _tmp$2, _tmp$3, left, leftFirst, result, right, x, x$1, x$2, y, y$1, y$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; left = $f.left; leftFirst = $f.leftFirst; result = $f.result; right = $f.right; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		right = $clone(right, Value);
		left = $clone(left, Value);
		x = new Value.ptr(0, $ifaceNil);
		y = $clone(x, Value);
		/* */ if (leftFirst) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (leftFirst) { */ case 1:
			_r$13 = toNumberPrimitive(left); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			Value.copy(x, _r$13);
			_r$14 = toNumberPrimitive(right); /* */ $s = 5; case 5: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			Value.copy(y, _r$14);
			$s = 3; continue;
		/* } else { */ case 2:
			_r$15 = toNumberPrimitive(right); /* */ $s = 6; case 6: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			Value.copy(y, _r$15);
			_r$16 = toNumberPrimitive(left); /* */ $s = 7; case 7: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			Value.copy(x, _r$16);
		/* } */ case 3:
		result = false;
		/* */ if (!((x.kind === 3)) || !((y.kind === 3))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!((x.kind === 3)) || !((y.kind === 3))) { */ case 8:
			_r$17 = x.float64(); /* */ $s = 11; case 11: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_tmp = _r$17;
			_r$18 = y.float64(); /* */ $s = 12; case 12: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_tmp$1 = _r$18;
			x$1 = _tmp;
			y$1 = _tmp$1;
			if (math.IsNaN(x$1) || math.IsNaN(y$1)) {
				return 2;
			}
			result = x$1 < y$1;
			$s = 10; continue;
		/* } else { */ case 9:
			_r$19 = x.string(); /* */ $s = 13; case 13: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			_tmp$2 = _r$19;
			_r$20 = y.string(); /* */ $s = 14; case 14: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_tmp$3 = _r$20;
			x$2 = _tmp$2;
			y$2 = _tmp$3;
			result = x$2 < y$2;
		/* } */ case 10:
		if (result) {
			return 1;
		}
		return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: calculateLessThan }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.left = left; $f.leftFirst = leftFirst; $f.result = result; $f.right = right; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.calculateComparison = function(comparator, left, right) {
		var $ptr, _arg, _arg$1, _arg$10, _arg$11, _arg$12, _arg$13, _arg$14, _arg$15, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _entry, _entry$1, _entry$2, _entry$3, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$50, _r$51, _r$52, _ref, _ref$1, comparator, kindEqualKind, left, negate, result, right, self, x, x$1, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$12 = $f._arg$12; _arg$13 = $f._arg$13; _arg$14 = $f._arg$14; _arg$15 = $f._arg$15; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$45 = $f._r$45; _r$46 = $f._r$46; _r$47 = $f._r$47; _r$48 = $f._r$48; _r$49 = $f._r$49; _r$50 = $f._r$50; _r$51 = $f._r$51; _r$52 = $f._r$52; _ref = $f._ref; _ref$1 = $f._ref$1; comparator = $f.comparator; kindEqualKind = $f.kindEqualKind; left = $f.left; negate = $f.negate; result = $f.result; right = $f.right; self = $f.self; x = $f.x; x$1 = $f.x$1; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		right = $clone(right, Value);
		left = $clone(left, Value);
		self = this;
		_r$13 = left.resolve(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		x = $clone(_r$13, Value);
		_r$14 = right.resolve(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		y = $clone(_r$14, Value);
		kindEqualKind = false;
		result = true;
		negate = false;
		_ref = comparator;
		/* */ if (_ref === 40) { $s = 3; continue; }
		/* */ if (_ref === 41) { $s = 4; continue; }
		/* */ if (_ref === 47) { $s = 5; continue; }
		/* */ if (_ref === 48) { $s = 6; continue; }
		/* */ if (_ref === 46) { $s = 7; continue; }
		/* */ if (_ref === 39) { $s = 8; continue; }
		/* */ if (_ref === 45) { $s = 9; continue; }
		/* */ if (_ref === 38) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (_ref === 40) { */ case 3:
			_r$15 = calculateLessThan(x, y, true); /* */ $s = 13; case 13: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			result = (_entry = lessThanTable[0][_lessThanResult.keyFor(_r$15)], _entry !== undefined ? _entry.v : false);
			$s = 12; continue;
		/* } else if (_ref === 41) { */ case 4:
			_r$16 = calculateLessThan(y, x, false); /* */ $s = 14; case 14: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			result = (_entry$1 = lessThanTable[1][_lessThanResult.keyFor(_r$16)], _entry$1 !== undefined ? _entry$1.v : false);
			$s = 12; continue;
		/* } else if (_ref === 47) { */ case 5:
			_r$17 = calculateLessThan(y, x, false); /* */ $s = 15; case 15: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			result = (_entry$2 = lessThanTable[2][_lessThanResult.keyFor(_r$17)], _entry$2 !== undefined ? _entry$2.v : false);
			$s = 12; continue;
		/* } else if (_ref === 48) { */ case 6:
			_r$18 = calculateLessThan(x, y, true); /* */ $s = 16; case 16: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			result = (_entry$3 = lessThanTable[3][_lessThanResult.keyFor(_r$18)], _entry$3 !== undefined ? _entry$3.v : false);
			$s = 12; continue;
		/* } else if (_ref === 46) { */ case 7:
			negate = true;
			if (!((x.kind === y.kind))) {
				result = false;
			} else {
				kindEqualKind = true;
			}
			$s = 12; continue;
		/* } else if (_ref === 39) { */ case 8:
			if (!((x.kind === y.kind))) {
				result = false;
			} else {
				kindEqualKind = true;
			}
			$s = 12; continue;
		/* } else if (_ref === 45) { */ case 9:
			negate = true;
			/* */ if (x.kind === y.kind) { $s = 17; continue; }
			/* */ if (x.kind <= 1 && y.kind <= 1) { $s = 18; continue; }
			/* */ if (x.kind <= 1 || y.kind <= 1) { $s = 19; continue; }
			/* */ if (x.kind <= 3 && y.kind <= 3) { $s = 20; continue; }
			/* */ if (x.kind === 4) { $s = 21; continue; }
			/* */ if (y.kind === 4) { $s = 22; continue; }
			/* */ if (x.kind === 5) { $s = 23; continue; }
			/* */ if (y.kind === 5) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (x.kind === y.kind) { */ case 17:
				kindEqualKind = true;
				$s = 26; continue;
			/* } else if (x.kind <= 1 && y.kind <= 1) { */ case 18:
				result = true;
				$s = 26; continue;
			/* } else if (x.kind <= 1 || y.kind <= 1) { */ case 19:
				result = false;
				$s = 26; continue;
			/* } else if (x.kind <= 3 && y.kind <= 3) { */ case 20:
				_r$19 = x.float64(); /* */ $s = 27; case 27: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				_r$20 = y.float64(); /* */ $s = 28; case 28: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				result = _r$19 === _r$20;
				$s = 26; continue;
			/* } else if (x.kind === 4) { */ case 21:
				_r$21 = x.float64(); /* */ $s = 29; case 29: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				_r$22 = toValue_float64(_r$21); /* */ $s = 30; case 30: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				_arg = _r$22;
				_arg$1 = y;
				_r$23 = self.calculateComparison(38, _arg, _arg$1); /* */ $s = 31; case 31: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				result = _r$23;
				$s = 26; continue;
			/* } else if (y.kind === 4) { */ case 22:
				_arg$2 = x;
				_r$24 = y.float64(); /* */ $s = 32; case 32: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				_r$25 = toValue_float64(_r$24); /* */ $s = 33; case 33: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				_arg$3 = _r$25;
				_r$26 = self.calculateComparison(38, _arg$2, _arg$3); /* */ $s = 34; case 34: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				result = _r$26;
				$s = 26; continue;
			/* } else if (x.kind === 5) { */ case 23:
				_r$27 = toPrimitive(x); /* */ $s = 35; case 35: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				_arg$4 = _r$27;
				_arg$5 = y;
				_r$28 = self.calculateComparison(38, _arg$4, _arg$5); /* */ $s = 36; case 36: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				result = _r$28;
				$s = 26; continue;
			/* } else if (y.kind === 5) { */ case 24:
				_arg$6 = x;
				_r$29 = toPrimitive(y); /* */ $s = 37; case 37: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				_arg$7 = _r$29;
				_r$30 = self.calculateComparison(38, _arg$6, _arg$7); /* */ $s = 38; case 38: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				result = _r$30;
				$s = 26; continue;
			/* } else { */ case 25:
				_r$31 = hereBeDragons(new sliceType$1([new $String("Unable to test for equality: %v ==? %v"), new x.constructor.elem(x), new y.constructor.elem(y)])); /* */ $s = 39; case 39: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				$panic(new $String(_r$31));
			/* } */ case 26:
			$s = 12; continue;
		/* } else if (_ref === 38) { */ case 10:
			/* */ if (x.kind === y.kind) { $s = 40; continue; }
			/* */ if (x.kind <= 1 && y.kind <= 1) { $s = 41; continue; }
			/* */ if (x.kind <= 1 || y.kind <= 1) { $s = 42; continue; }
			/* */ if (x.kind <= 3 && y.kind <= 3) { $s = 43; continue; }
			/* */ if (x.kind === 4) { $s = 44; continue; }
			/* */ if (y.kind === 4) { $s = 45; continue; }
			/* */ if (x.kind === 5) { $s = 46; continue; }
			/* */ if (y.kind === 5) { $s = 47; continue; }
			/* */ $s = 48; continue;
			/* if (x.kind === y.kind) { */ case 40:
				kindEqualKind = true;
				$s = 49; continue;
			/* } else if (x.kind <= 1 && y.kind <= 1) { */ case 41:
				result = true;
				$s = 49; continue;
			/* } else if (x.kind <= 1 || y.kind <= 1) { */ case 42:
				result = false;
				$s = 49; continue;
			/* } else if (x.kind <= 3 && y.kind <= 3) { */ case 43:
				_r$32 = x.float64(); /* */ $s = 50; case 50: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				_r$33 = y.float64(); /* */ $s = 51; case 51: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
				result = _r$32 === _r$33;
				$s = 49; continue;
			/* } else if (x.kind === 4) { */ case 44:
				_r$34 = x.float64(); /* */ $s = 52; case 52: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
				_r$35 = toValue_float64(_r$34); /* */ $s = 53; case 53: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
				_arg$8 = _r$35;
				_arg$9 = y;
				_r$36 = self.calculateComparison(38, _arg$8, _arg$9); /* */ $s = 54; case 54: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
				result = _r$36;
				$s = 49; continue;
			/* } else if (y.kind === 4) { */ case 45:
				_arg$10 = x;
				_r$37 = y.float64(); /* */ $s = 55; case 55: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
				_r$38 = toValue_float64(_r$37); /* */ $s = 56; case 56: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
				_arg$11 = _r$38;
				_r$39 = self.calculateComparison(38, _arg$10, _arg$11); /* */ $s = 57; case 57: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
				result = _r$39;
				$s = 49; continue;
			/* } else if (x.kind === 5) { */ case 46:
				_r$40 = toPrimitive(x); /* */ $s = 58; case 58: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
				_arg$12 = _r$40;
				_arg$13 = y;
				_r$41 = self.calculateComparison(38, _arg$12, _arg$13); /* */ $s = 59; case 59: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
				result = _r$41;
				$s = 49; continue;
			/* } else if (y.kind === 5) { */ case 47:
				_arg$14 = x;
				_r$42 = toPrimitive(y); /* */ $s = 60; case 60: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
				_arg$15 = _r$42;
				_r$43 = self.calculateComparison(38, _arg$14, _arg$15); /* */ $s = 61; case 61: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
				result = _r$43;
				$s = 49; continue;
			/* } else { */ case 48:
				_r$44 = hereBeDragons(new sliceType$1([new $String("Unable to test for equality: %v ==? %v"), new x.constructor.elem(x), new y.constructor.elem(y)])); /* */ $s = 62; case 62: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
				$panic(new $String(_r$44));
			/* } */ case 49:
			$s = 12; continue;
		/* } else { */ case 11:
			_r$45 = fmt.Errorf("Unknown comparator %s", new sliceType$1([new $String(new token.Token(comparator).String())])); /* */ $s = 63; case 63: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
			$panic(_r$45);
		/* } */ case 12:
		/* */ if (kindEqualKind) { $s = 64; continue; }
		/* */ $s = 65; continue;
		/* if (kindEqualKind) { */ case 64:
			_ref$1 = x.kind;
			/* */ if (_ref$1 === 0 || _ref$1 === 1) { $s = 66; continue; }
			/* */ if (_ref$1 === 2) { $s = 67; continue; }
			/* */ if (_ref$1 === 3) { $s = 68; continue; }
			/* */ if (_ref$1 === 4) { $s = 69; continue; }
			/* */ if (_ref$1 === 5) { $s = 70; continue; }
			/* */ $s = 71; continue;
			/* if (_ref$1 === 0 || _ref$1 === 1) { */ case 66:
				result = true;
				$s = 72; continue;
			/* } else if (_ref$1 === 2) { */ case 67:
				_r$46 = x.float64(); /* */ $s = 73; case 73: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
				x$1 = _r$46;
				_r$47 = y.float64(); /* */ $s = 74; case 74: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
				y$1 = _r$47;
				if (math.IsNaN(x$1) || math.IsNaN(y$1)) {
					result = false;
				} else {
					result = x$1 === y$1;
				}
				$s = 72; continue;
			/* } else if (_ref$1 === 3) { */ case 68:
				_r$48 = x.string(); /* */ $s = 75; case 75: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
				_r$49 = y.string(); /* */ $s = 76; case 76: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
				result = _r$48 === _r$49;
				$s = 72; continue;
			/* } else if (_ref$1 === 4) { */ case 69:
				_r$50 = x.bool(); /* */ $s = 77; case 77: if($c) { $c = false; _r$50 = _r$50.$blk(); } if (_r$50 && _r$50.$blk !== undefined) { break s; }
				_r$51 = y.bool(); /* */ $s = 78; case 78: if($c) { $c = false; _r$51 = _r$51.$blk(); } if (_r$51 && _r$51.$blk !== undefined) { break s; }
				result = _r$50 === _r$51;
				$s = 72; continue;
			/* } else if (_ref$1 === 5) { */ case 70:
				result = x._object() === y._object();
				$s = 72; continue;
			/* } else { */ case 71:
				/* goto ERROR */ $s = 79; continue;
			/* } */ case 72:
		/* } */ case 65:
		if (negate) {
			result = !result;
		}
		return result;
		/* ERROR: */ case 79:
		_r$52 = hereBeDragons(new sliceType$1([new $String("%v (%v) %s %v (%v)"), new x.constructor.elem(x), new _valueKind(x.kind), new token.Token(comparator), new y.constructor.elem(y), new _valueKind(y.kind)])); /* */ $s = 80; case 80: if($c) { $c = false; _r$52 = _r$52.$blk(); } if (_r$52 && _r$52.$blk !== undefined) { break s; }
		$panic(new $String(_r$52));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.calculateComparison }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$12 = _arg$12; $f._arg$13 = _arg$13; $f._arg$14 = _arg$14; $f._arg$15 = _arg$15; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$45 = _r$45; $f._r$46 = _r$46; $f._r$47 = _r$47; $f._r$48 = _r$48; $f._r$49 = _r$49; $f._r$50 = _r$50; $f._r$51 = _r$51; $f._r$52 = _r$52; $f._ref = _ref; $f._ref$1 = _ref$1; $f.comparator = comparator; $f.kindEqualKind = kindEqualKind; $f.left = left; $f.negate = negate; $f.result = result; $f.right = right; $f.self = self; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.calculateComparison = function(comparator, left, right) { return this.$val.calculateComparison(comparator, left, right); };
	newContext = function() {
		var $ptr, _entry, self;
		self = new _runtime.ptr(new _global.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil), ptrType$4.nil, ptrType$15.nil, ptrType$16.nil, ptrType$11.nil, ptrType$4.nil, $throwNilPointerError, sliceType.nil, new sync.Mutex.ptr(0, 0));
		self.globalStash = self.newObjectStash(ptrType$4.nil, $ifaceNil);
		self.globalObject = self.globalStash.object;
		_newContext(self);
		self.eval$5 = $assertType($assertType((_entry = self.globalObject.property[$String.keyFor("eval")], _entry !== undefined ? _entry.v : new _property.ptr($ifaceNil, 0)).value, Value).value, ptrType$4);
		self.globalObject.prototype = self.global.ObjectPrototype;
		return self;
	};
	_runtime.ptr.prototype.newBaseObject = function() {
		var $ptr, runtime$1, self;
		runtime$1 = this;
		self = newObject(runtime$1, "");
		return self;
	};
	_runtime.prototype.newBaseObject = function() { return this.$val.newBaseObject(); };
	_runtime.ptr.prototype.newClassObject = function(class$1) {
		var $ptr, class$1, runtime$1;
		runtime$1 = this;
		return newObject(runtime$1, class$1);
	};
	_runtime.prototype.newClassObject = function(class$1) { return this.$val.newClassObject(class$1); };
	_runtime.ptr.prototype.newPrimitiveObject = function(class$1, value) {
		var $ptr, class$1, runtime$1, self, value;
		value = $clone(value, Value);
		runtime$1 = this;
		self = runtime$1.newClassObject(class$1);
		self.value = new value.constructor.elem(value);
		return self;
	};
	_runtime.prototype.newPrimitiveObject = function(class$1, value) { return this.$val.newPrimitiveObject(class$1, value); };
	_object.ptr.prototype.primitiveValue = function() {
		var $ptr, _r$13, _r$14, _ref, self, value, value$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; self = $f.self; value = $f.value; value$1 = $f.value$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_ref = self.value;
		/* */ if ($assertType(_ref, Value, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, _stringObject, true)[1]) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($assertType(_ref, Value, true)[1]) { */ case 1:
			value = _ref.$val;
			return value;
		/* } else if ($assertType(_ref, _stringObject, true)[1]) { */ case 2:
			value$1 = _ref;
			_r$13 = value$1.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = toValue_string(_r$13); /* */ $s = 5; case 5: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 6; case 6:
			return _r$14;
		/* } */ case 3:
		return new Value.ptr(0, $ifaceNil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _object.ptr.prototype.primitiveValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f.self = self; $f.value = value; $f.value$1 = value$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_object.prototype.primitiveValue = function() { return this.$val.primitiveValue(); };
	_runtime.ptr.prototype.newObject = function() {
		var $ptr, runtime$1, self;
		runtime$1 = this;
		self = runtime$1.newClassObject("Object");
		self.prototype = runtime$1.global.ObjectPrototype;
		return self;
	};
	_runtime.prototype.newObject = function() { return this.$val.newObject(); };
	_runtime.ptr.prototype.newArray = function(length) {
		var $ptr, _r$13, length, runtime$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; length = $f.length; runtime$1 = $f.runtime$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		runtime$1 = this;
		_r$13 = runtime$1.newArrayObject(length); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self = _r$13;
		self.prototype = runtime$1.global.ArrayPrototype;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newArray }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.length = length; $f.runtime$1 = runtime$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newArray = function(length) { return this.$val.newArray(length); };
	_runtime.ptr.prototype.newArrayOf = function(valueArray) {
		var $ptr, _i, _r$13, _r$14, _ref, index, runtime$1, self, value, valueArray, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; index = $f.index; runtime$1 = $f.runtime$1; self = $f.self; value = $f.value; valueArray = $f.valueArray; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		runtime$1 = this;
		_r$13 = runtime$1.newArray((valueArray.$length >>> 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self = _r$13;
		_ref = valueArray;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			index = _i;
			value = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Value);
			/* */ if (value.isEmpty()) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (value.isEmpty()) { */ case 4:
				_i++;
				/* continue; */ $s = 2; continue;
			/* } */ case 5:
			_r$14 = self.defineProperty(strconv.FormatInt(new $Int64(0, index), 10), value, 73, false); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$14;
			_i++;
		/* } */ $s = 2; continue; case 3:
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newArrayOf }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f.index = index; $f.runtime$1 = runtime$1; $f.self = self; $f.value = value; $f.valueArray = valueArray; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newArrayOf = function(valueArray) { return this.$val.newArrayOf(valueArray); };
	_runtime.ptr.prototype.newString = function(value) {
		var $ptr, _r$13, runtime$1, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; runtime$1 = $f.runtime$1; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		runtime$1 = this;
		_r$13 = runtime$1.newStringObject(value); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self = _r$13;
		self.prototype = runtime$1.global.StringPrototype;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newString }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.runtime$1 = runtime$1; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newString = function(value) { return this.$val.newString(value); };
	_runtime.ptr.prototype.newBoolean = function(value) {
		var $ptr, _r$13, runtime$1, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; runtime$1 = $f.runtime$1; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		runtime$1 = this;
		_r$13 = runtime$1.newBooleanObject(value); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self = _r$13;
		self.prototype = runtime$1.global.BooleanPrototype;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newBoolean }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.runtime$1 = runtime$1; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newBoolean = function(value) { return this.$val.newBoolean(value); };
	_runtime.ptr.prototype.newNumber = function(value) {
		var $ptr, _r$13, runtime$1, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; runtime$1 = $f.runtime$1; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		runtime$1 = this;
		_r$13 = runtime$1.newNumberObject(value); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self = _r$13;
		self.prototype = runtime$1.global.NumberPrototype;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newNumber }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.runtime$1 = runtime$1; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newNumber = function(value) { return this.$val.newNumber(value); };
	_runtime.ptr.prototype.newRegExp = function(patternValue, flagsValue) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, flags, flagsValue, object, pattern, patternValue, regExp, runtime$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; flags = $f.flags; flagsValue = $f.flagsValue; object = $f.object; pattern = $f.pattern; patternValue = $f.patternValue; regExp = $f.regExp; runtime$1 = $f.runtime$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		flagsValue = $clone(flagsValue, Value);
		patternValue = $clone(patternValue, Value);
		runtime$1 = this;
		pattern = "";
		flags = "";
		object = patternValue._object();
		/* */ if (!(object === ptrType$4.nil) && object.class$1 === "RegExp") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(object === ptrType$4.nil) && object.class$1 === "RegExp") { */ case 1:
			/* */ if (flagsValue.IsDefined()) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (flagsValue.IsDefined()) { */ case 4:
				_r$13 = runtime$1.panicTypeError(new sliceType$1([new $String("Cannot supply flags when constructing one RegExp from another")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				$panic(_r$13);
			/* } */ case 5:
			regExp = $clone(object.regExpValue(), _regExpObject);
			pattern = regExp.source;
			flags = regExp.flags;
			$s = 3; continue;
		/* } else { */ case 2:
			/* */ if (patternValue.IsDefined()) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (patternValue.IsDefined()) { */ case 7:
				_r$14 = patternValue.string(); /* */ $s = 9; case 9: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				pattern = _r$14;
			/* } */ case 8:
			/* */ if (flagsValue.IsDefined()) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (flagsValue.IsDefined()) { */ case 10:
				_r$15 = flagsValue.string(); /* */ $s = 12; case 12: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				flags = _r$15;
			/* } */ case 11:
		/* } */ case 3:
		_r$16 = runtime$1._newRegExp(pattern, flags); /* */ $s = 13; case 13: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 14; case 14:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newRegExp }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.flags = flags; $f.flagsValue = flagsValue; $f.object = object; $f.pattern = pattern; $f.patternValue = patternValue; $f.regExp = regExp; $f.runtime$1 = runtime$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newRegExp = function(patternValue, flagsValue) { return this.$val.newRegExp(patternValue, flagsValue); };
	_runtime.ptr.prototype._newRegExp = function(pattern, flags) {
		var $ptr, _r$13, flags, pattern, runtime$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; flags = $f.flags; pattern = $f.pattern; runtime$1 = $f.runtime$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		runtime$1 = this;
		_r$13 = runtime$1.newRegExpObject(pattern, flags); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self = _r$13;
		self.prototype = runtime$1.global.RegExpPrototype;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype._newRegExp }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.flags = flags; $f.pattern = pattern; $f.runtime$1 = runtime$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype._newRegExp = function(pattern, flags) { return this.$val._newRegExp(pattern, flags); };
	_runtime.ptr.prototype.newDate = function(epoch) {
		var $ptr, _r$13, epoch, runtime$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; epoch = $f.epoch; runtime$1 = $f.runtime$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		runtime$1 = this;
		_r$13 = runtime$1.newDateObject(epoch); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self = _r$13;
		self.prototype = runtime$1.global.DatePrototype;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newDate }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.epoch = epoch; $f.runtime$1 = runtime$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newDate = function(epoch) { return this.$val.newDate(epoch); };
	_runtime.ptr.prototype.newError = function(name, message) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _ref, message, name, runtime$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _ref = $f._ref; message = $f.message; name = $f.name; runtime$1 = $f.runtime$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		message = $clone(message, Value);
		runtime$1 = this;
		self = ptrType$4.nil;
		_ref = name;
		/* */ if (_ref === "EvalError") { $s = 1; continue; }
		/* */ if (_ref === "TypeError") { $s = 2; continue; }
		/* */ if (_ref === "RangeError") { $s = 3; continue; }
		/* */ if (_ref === "ReferenceError") { $s = 4; continue; }
		/* */ if (_ref === "SyntaxError") { $s = 5; continue; }
		/* */ if (_ref === "URIError") { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_ref === "EvalError") { */ case 1:
			_r$13 = runtime$1.newEvalError(message); /* */ $s = 8; case 8: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 9; case 9:
			return _r$13;
		/* } else if (_ref === "TypeError") { */ case 2:
			_r$14 = runtime$1.newTypeError(message); /* */ $s = 10; case 10: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 11; case 11:
			return _r$14;
		/* } else if (_ref === "RangeError") { */ case 3:
			_r$15 = runtime$1.newRangeError(message); /* */ $s = 12; case 12: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 13; case 13:
			return _r$15;
		/* } else if (_ref === "ReferenceError") { */ case 4:
			_r$16 = runtime$1.newReferenceError(message); /* */ $s = 14; case 14: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ $s = 15; case 15:
			return _r$16;
		/* } else if (_ref === "SyntaxError") { */ case 5:
			_r$17 = runtime$1.newSyntaxError(message); /* */ $s = 16; case 16: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ $s = 17; case 17:
			return _r$17;
		/* } else if (_ref === "URIError") { */ case 6:
			_r$18 = runtime$1.newURIError(message); /* */ $s = 18; case 18: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			/* */ $s = 19; case 19:
			return _r$18;
		/* } */ case 7:
		_r$19 = runtime$1.newErrorObject(name, message); /* */ $s = 20; case 20: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		self = _r$19;
		self.prototype = runtime$1.global.ErrorPrototype;
		/* */ if (!(name === "")) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (!(name === "")) { */ case 21:
			_r$20 = self.defineProperty("name", toValue_string(name), 73, false); /* */ $s = 23; case 23: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_r$20;
		/* } */ case 22:
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newError }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._ref = _ref; $f.message = message; $f.name = name; $f.runtime$1 = runtime$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newError = function(name, message) { return this.$val.newError(name, message); };
	_runtime.ptr.prototype.newNativeFunction = function(name, _nativeFunction$1) {
		var $ptr, _nativeFunction$1, _r$13, _r$14, _r$15, name, prototype, runtime$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _nativeFunction$1 = $f._nativeFunction$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; name = $f.name; prototype = $f.prototype; runtime$1 = $f.runtime$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		runtime$1 = this;
		_r$13 = runtime$1.newNativeFunctionObject(name, _nativeFunction$1, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self = _r$13;
		self.prototype = runtime$1.global.FunctionPrototype;
		prototype = runtime$1.newObject();
		_r$14 = self.defineProperty("prototype", toValue_object(prototype), 64, false); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14;
		_r$15 = prototype.defineProperty("constructor", toValue_object(self), 64, false); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$15;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newNativeFunction }; } $f.$ptr = $ptr; $f._nativeFunction$1 = _nativeFunction$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.name = name; $f.prototype = prototype; $f.runtime$1 = runtime$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newNativeFunction = function(name, _nativeFunction$1) { return this.$val.newNativeFunction(name, _nativeFunction$1); };
	_runtime.ptr.prototype.newNodeFunction = function(node, scopeEnvironment) {
		var $ptr, _r$13, _r$14, _r$15, node, prototype, runtime$1, scopeEnvironment, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; node = $f.node; prototype = $f.prototype; runtime$1 = $f.runtime$1; scopeEnvironment = $f.scopeEnvironment; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		runtime$1 = this;
		_r$13 = runtime$1.newNodeFunctionObject(node, scopeEnvironment); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self = _r$13;
		self.prototype = runtime$1.global.FunctionPrototype;
		prototype = runtime$1.newObject();
		_r$14 = self.defineProperty("prototype", toValue_object(prototype), 64, false); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14;
		_r$15 = prototype.defineProperty("constructor", toValue_object(self), 65, false); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$15;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newNodeFunction }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.node = node; $f.prototype = prototype; $f.runtime$1 = runtime$1; $f.scopeEnvironment = scopeEnvironment; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newNodeFunction = function(node, scopeEnvironment) { return this.$val.newNodeFunction(node, scopeEnvironment); };
	_runtime.ptr.prototype.newBoundFunction = function(target, this$1, argumentList) {
		var $ptr, _r$13, _r$14, _r$15, argumentList, prototype, runtime$1, self, target, this$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; argumentList = $f.argumentList; prototype = $f.prototype; runtime$1 = $f.runtime$1; self = $f.self; target = $f.target; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		this$1 = $clone(this$1, Value);
		runtime$1 = this;
		_r$13 = runtime$1.newBoundFunctionObject(target, this$1, argumentList); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self = _r$13;
		self.prototype = runtime$1.global.FunctionPrototype;
		prototype = runtime$1.newObject();
		_r$14 = self.defineProperty("prototype", toValue_object(prototype), 64, false); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14;
		_r$15 = prototype.defineProperty("constructor", toValue_object(self), 64, false); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$15;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newBoundFunction }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.argumentList = argumentList; $f.prototype = prototype; $f.runtime$1 = runtime$1; $f.self = self; $f.target = target; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newBoundFunction = function(target, this$1, argumentList) { return this.$val.newBoundFunction(target, this$1, argumentList); };
	_newContext = function(runtime$1) {
		var $ptr, Function, UTC_function, _key, _key$1, _key$10, _key$11, _key$12, _key$13, _key$14, _key$2, _key$3, _key$4, _key$5, _key$6, _key$7, _key$8, _key$9, abs_function, acos_function, apply_function, asin_function, atan2_function, atan_function, bind_function, call_function, ceil_function, charAt_function, charCodeAt_function, compile_function, concat_function, concat_function$1, cos_function, create_function, decodeURIComponent_function, decodeURI_function, defineProperties_function, defineProperty_function, encodeURIComponent_function, encodeURI_function, escape_function, eval_function, every_function, exec_function, exp_function, filter_function, floor_function, forEach_function, freeze_function, fromCharCode_function, getDate_function, getDay_function, getFullYear_function, getHours_function, getMilliseconds_function, getMinutes_function, getMonth_function, getOwnPropertyDescriptor_function, getOwnPropertyNames_function, getPrototypeOf_function, getSeconds_function, getTime_function, getTimezoneOffset_function, getUTCDate_function, getUTCDay_function, getUTCFullYear_function, getUTCHours_function, getUTCMilliseconds_function, getUTCMinutes_function, getUTCMonth_function, getUTCSeconds_function, getYear_function, hasOwnProperty_function, indexOf_function, indexOf_function$1, isArray_function, isExtensible_function, isFinite_function, isFrozen_function, isNaN_function, isPrototypeOf_function, isSealed_function, join_function, keys_function, lastIndexOf_function, lastIndexOf_function$1, localeCompare_function, log_function, map_function, match_function, max_function, min_function, now_function, parseFloat_function, parseInt_function, parse_function, parse_function$1, pop_function, pow_function, preventExtensions_function, propertyIsEnumerable_function, push_function, random_function, reduceRight_function, reduce_function, replace_function, reverse_function, round_function, runtime$1, seal_function, search_function, setDate_function, setFullYear_function, setHours_function, setMilliseconds_function, setMinutes_function, setMonth_function, setSeconds_function, setTime_function, setUTCDate_function, setUTCFullYear_function, setUTCHours_function, setUTCMilliseconds_function, setUTCMinutes_function, setUTCMonth_function, setUTCSeconds_function, setYear_function, shift_function, sin_function, slice_function, slice_function$1, some_function, sort_function, splice_function, split_function, sqrt_function, stringify_function, substr_function, substring_function, tan_function, test_function, toDateString_function, toExponential_function, toFixed_function, toGMTString_function, toISOString_function, toJSON_function, toLocaleDateString_function, toLocaleLowerCase_function, toLocaleString_function, toLocaleString_function$1, toLocaleString_function$2, toLocaleString_function$3, toLocaleTimeString_function, toLocaleUpperCase_function, toLowerCase_function, toPrecision_function, toString_function, toString_function$1, toString_function$2, toString_function$3, toString_function$4, toString_function$5, toString_function$6, toString_function$7, toString_function$8, toTimeString_function, toUTCString_function, toUpperCase_function, trimLeft_function, trimRight_function, trim_function, unescape_function, unshift_function, valueOf_function, valueOf_function$1, valueOf_function$2, valueOf_function$3, valueOf_function$4, x, x$1, x$10, x$100, x$101, x$102, x$103, x$104, x$105, x$106, x$107, x$108, x$109, x$11, x$110, x$111, x$112, x$113, x$114, x$115, x$116, x$117, x$118, x$119, x$12, x$120, x$121, x$122, x$123, x$124, x$125, x$126, x$127, x$128, x$129, x$13, x$130, x$131, x$132, x$133, x$134, x$135, x$136, x$137, x$138, x$139, x$14, x$140, x$141, x$142, x$143, x$144, x$145, x$146, x$147, x$148, x$149, x$15, x$150, x$151, x$152, x$153, x$154, x$155, x$156, x$157, x$158, x$159, x$16, x$160, x$161, x$162, x$163, x$164, x$165, x$166, x$167, x$168, x$169, x$17, x$170, x$171, x$172, x$173, x$174, x$175, x$176, x$177, x$178, x$179, x$18, x$180, x$181, x$182, x$183, x$184, x$185, x$186, x$187, x$188, x$189, x$19, x$190, x$191, x$192, x$193, x$194, x$195, x$196, x$197, x$198, x$199, x$2, x$20, x$200, x$201, x$202, x$203, x$204, x$205, x$206, x$207, x$208, x$209, x$21, x$210, x$211, x$212, x$213, x$214, x$215, x$216, x$217, x$218, x$219, x$22, x$220, x$221, x$222, x$223, x$224, x$225, x$226, x$227, x$228, x$229, x$23, x$230, x$231, x$232, x$233, x$234, x$235, x$236, x$237, x$238, x$239, x$24, x$240, x$241, x$242, x$243, x$244, x$245, x$246, x$247, x$248, x$249, x$25, x$250, x$251, x$252, x$253, x$254, x$255, x$256, x$257, x$258, x$259, x$26, x$260, x$261, x$262, x$263, x$264, x$265, x$266, x$267, x$268, x$269, x$27, x$270, x$271, x$272, x$273, x$274, x$275, x$276, x$277, x$278, x$279, x$28, x$280, x$281, x$282, x$283, x$284, x$285, x$286, x$287, x$288, x$289, x$29, x$290, x$291, x$292, x$293, x$294, x$295, x$296, x$297, x$298, x$299, x$3, x$30, x$300, x$301, x$302, x$303, x$304, x$305, x$306, x$307, x$308, x$309, x$31, x$310, x$311, x$312, x$313, x$314, x$315, x$316, x$317, x$318, x$319, x$32, x$320, x$321, x$322, x$323, x$324, x$325, x$326, x$327, x$328, x$329, x$33, x$330, x$331, x$332, x$333, x$334, x$335, x$336, x$337, x$338, x$339, x$34, x$340, x$341, x$342, x$343, x$344, x$345, x$346, x$347, x$348, x$349, x$35, x$350, x$351, x$352, x$353, x$354, x$355, x$356, x$357, x$358, x$359, x$36, x$360, x$361, x$362, x$363, x$364, x$365, x$366, x$367, x$368, x$369, x$37, x$370, x$371, x$372, x$373, x$374, x$375, x$376, x$377, x$378, x$379, x$38, x$380, x$381, x$382, x$383, x$384, x$385, x$386, x$387, x$388, x$389, x$39, x$390, x$391, x$392, x$393, x$394, x$395, x$396, x$397, x$398, x$399, x$4, x$40, x$400, x$401, x$402, x$403, x$404, x$405, x$406, x$407, x$408, x$409, x$41, x$410, x$411, x$412, x$413, x$414, x$415, x$416, x$417, x$418, x$419, x$42, x$420, x$421, x$422, x$423, x$424, x$425, x$426, x$427, x$428, x$429, x$43, x$430, x$431, x$432, x$433, x$434, x$435, x$436, x$437, x$438, x$439, x$44, x$440, x$441, x$442, x$443, x$444, x$445, x$446, x$447, x$448, x$449, x$45, x$450, x$451, x$452, x$453, x$454, x$455, x$456, x$457, x$458, x$459, x$46, x$460, x$461, x$462, x$463, x$464, x$465, x$466, x$467, x$468, x$469, x$47, x$470, x$471, x$472, x$473, x$474, x$475, x$476, x$477, x$478, x$479, x$48, x$480, x$481, x$482, x$483, x$484, x$485, x$486, x$487, x$488, x$489, x$49, x$490, x$491, x$492, x$493, x$494, x$495, x$496, x$497, x$498, x$499, x$5, x$50, x$500, x$501, x$502, x$503, x$504, x$505, x$506, x$507, x$508, x$509, x$51, x$510, x$511, x$512, x$513, x$514, x$515, x$516, x$517, x$518, x$519, x$52, x$520, x$521, x$522, x$523, x$524, x$525, x$526, x$527, x$528, x$529, x$53, x$530, x$531, x$532, x$533, x$534, x$535, x$536, x$537, x$538, x$539, x$54, x$540, x$541, x$542, x$543, x$544, x$545, x$546, x$547, x$548, x$549, x$55, x$550, x$551, x$552, x$553, x$554, x$555, x$556, x$557, x$558, x$559, x$56, x$560, x$561, x$562, x$563, x$564, x$565, x$566, x$567, x$568, x$569, x$57, x$570, x$571, x$572, x$573, x$574, x$575, x$576, x$577, x$578, x$579, x$58, x$580, x$581, x$582, x$583, x$584, x$585, x$586, x$587, x$588, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$8, x$80, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$9, x$90, x$91, x$92, x$93, x$94, x$95, x$96, x$97, x$98, x$99;
		runtime$1.global.ObjectPrototype = new _object.ptr(runtime$1, "Object", _classObject, prototypeValueObject, ptrType$4.nil, true, false, sliceType.nil);
		runtime$1.global.FunctionPrototype = new _object.ptr(runtime$1, "Function", _classObject, new prototypeValueFunction.constructor.elem(prototypeValueFunction), runtime$1.global.ObjectPrototype, true, false, sliceType.nil);
		valueOf_function = new _object.ptr(runtime$1, "Function", _classObject, (x$1 = new _nativeFunctionObject.ptr("valueOf", builtinObject_valueOf, $throwNilPointerError), new x$1.constructor.elem(x$1)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x = new Value.ptr(2, new $Int(0)), new x.constructor.elem(x)), 0) }]), new sliceType(["length"]));
		toString_function = new _object.ptr(runtime$1, "Function", _classObject, (x$3 = new _nativeFunctionObject.ptr("toString", builtinObject_toString, $throwNilPointerError), new x$3.constructor.elem(x$3)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$2 = new Value.ptr(2, new $Int(0)), new x$2.constructor.elem(x$2)), 0) }]), new sliceType(["length"]));
		toLocaleString_function = new _object.ptr(runtime$1, "Function", _classObject, (x$5 = new _nativeFunctionObject.ptr("toLocaleString", builtinObject_toLocaleString, $throwNilPointerError), new x$5.constructor.elem(x$5)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$4 = new Value.ptr(2, new $Int(0)), new x$4.constructor.elem(x$4)), 0) }]), new sliceType(["length"]));
		hasOwnProperty_function = new _object.ptr(runtime$1, "Function", _classObject, (x$7 = new _nativeFunctionObject.ptr("hasOwnProperty", builtinObject_hasOwnProperty, $throwNilPointerError), new x$7.constructor.elem(x$7)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$6 = new Value.ptr(2, new $Int(1)), new x$6.constructor.elem(x$6)), 0) }]), new sliceType(["length"]));
		isPrototypeOf_function = new _object.ptr(runtime$1, "Function", _classObject, (x$9 = new _nativeFunctionObject.ptr("isPrototypeOf", builtinObject_isPrototypeOf, $throwNilPointerError), new x$9.constructor.elem(x$9)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$8 = new Value.ptr(2, new $Int(1)), new x$8.constructor.elem(x$8)), 0) }]), new sliceType(["length"]));
		propertyIsEnumerable_function = new _object.ptr(runtime$1, "Function", _classObject, (x$11 = new _nativeFunctionObject.ptr("propertyIsEnumerable", builtinObject_propertyIsEnumerable, $throwNilPointerError), new x$11.constructor.elem(x$11)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$10 = new Value.ptr(2, new $Int(1)), new x$10.constructor.elem(x$10)), 0) }]), new sliceType(["length"]));
		runtime$1.global.ObjectPrototype.property = $makeMap($String.keyFor, [{ k: "valueOf", v: new _property.ptr((x$12 = new Value.ptr(5, valueOf_function), new x$12.constructor.elem(x$12)), 65) }, { k: "toString", v: new _property.ptr((x$13 = new Value.ptr(5, toString_function), new x$13.constructor.elem(x$13)), 65) }, { k: "toLocaleString", v: new _property.ptr((x$14 = new Value.ptr(5, toLocaleString_function), new x$14.constructor.elem(x$14)), 65) }, { k: "hasOwnProperty", v: new _property.ptr((x$15 = new Value.ptr(5, hasOwnProperty_function), new x$15.constructor.elem(x$15)), 65) }, { k: "isPrototypeOf", v: new _property.ptr((x$16 = new Value.ptr(5, isPrototypeOf_function), new x$16.constructor.elem(x$16)), 65) }, { k: "propertyIsEnumerable", v: new _property.ptr((x$17 = new Value.ptr(5, propertyIsEnumerable_function), new x$17.constructor.elem(x$17)), 65) }, { k: "constructor", v: new _property.ptr((x$18 = new Value.ptr(0, $ifaceNil), new x$18.constructor.elem(x$18)), 65) }]);
		runtime$1.global.ObjectPrototype.propertyOrder = new sliceType(["valueOf", "toString", "toLocaleString", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"]);
		toString_function$1 = new _object.ptr(runtime$1, "Function", _classObject, (x$20 = new _nativeFunctionObject.ptr("toString", builtinFunction_toString, $throwNilPointerError), new x$20.constructor.elem(x$20)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$19 = new Value.ptr(2, new $Int(0)), new x$19.constructor.elem(x$19)), 0) }]), new sliceType(["length"]));
		apply_function = new _object.ptr(runtime$1, "Function", _classObject, (x$22 = new _nativeFunctionObject.ptr("apply", builtinFunction_apply, $throwNilPointerError), new x$22.constructor.elem(x$22)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$21 = new Value.ptr(2, new $Int(2)), new x$21.constructor.elem(x$21)), 0) }]), new sliceType(["length"]));
		call_function = new _object.ptr(runtime$1, "Function", _classObject, (x$24 = new _nativeFunctionObject.ptr("call", builtinFunction_call, $throwNilPointerError), new x$24.constructor.elem(x$24)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$23 = new Value.ptr(2, new $Int(1)), new x$23.constructor.elem(x$23)), 0) }]), new sliceType(["length"]));
		bind_function = new _object.ptr(runtime$1, "Function", _classObject, (x$26 = new _nativeFunctionObject.ptr("bind", builtinFunction_bind, $throwNilPointerError), new x$26.constructor.elem(x$26)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$25 = new Value.ptr(2, new $Int(1)), new x$25.constructor.elem(x$25)), 0) }]), new sliceType(["length"]));
		runtime$1.global.FunctionPrototype.property = $makeMap($String.keyFor, [{ k: "toString", v: new _property.ptr((x$27 = new Value.ptr(5, toString_function$1), new x$27.constructor.elem(x$27)), 65) }, { k: "apply", v: new _property.ptr((x$28 = new Value.ptr(5, apply_function), new x$28.constructor.elem(x$28)), 65) }, { k: "call", v: new _property.ptr((x$29 = new Value.ptr(5, call_function), new x$29.constructor.elem(x$29)), 65) }, { k: "bind", v: new _property.ptr((x$30 = new Value.ptr(5, bind_function), new x$30.constructor.elem(x$30)), 65) }, { k: "constructor", v: new _property.ptr((x$31 = new Value.ptr(0, $ifaceNil), new x$31.constructor.elem(x$31)), 65) }, { k: "length", v: new _property.ptr((x$32 = new Value.ptr(2, new $Int(0)), new x$32.constructor.elem(x$32)), 0) }]);
		runtime$1.global.FunctionPrototype.propertyOrder = new sliceType(["toString", "apply", "call", "bind", "constructor", "length"]);
		getPrototypeOf_function = new _object.ptr(runtime$1, "Function", _classObject, (x$34 = new _nativeFunctionObject.ptr("getPrototypeOf", builtinObject_getPrototypeOf, $throwNilPointerError), new x$34.constructor.elem(x$34)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$33 = new Value.ptr(2, new $Int(1)), new x$33.constructor.elem(x$33)), 0) }]), new sliceType(["length"]));
		getOwnPropertyDescriptor_function = new _object.ptr(runtime$1, "Function", _classObject, (x$36 = new _nativeFunctionObject.ptr("getOwnPropertyDescriptor", builtinObject_getOwnPropertyDescriptor, $throwNilPointerError), new x$36.constructor.elem(x$36)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$35 = new Value.ptr(2, new $Int(2)), new x$35.constructor.elem(x$35)), 0) }]), new sliceType(["length"]));
		defineProperty_function = new _object.ptr(runtime$1, "Function", _classObject, (x$38 = new _nativeFunctionObject.ptr("defineProperty", builtinObject_defineProperty, $throwNilPointerError), new x$38.constructor.elem(x$38)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$37 = new Value.ptr(2, new $Int(3)), new x$37.constructor.elem(x$37)), 0) }]), new sliceType(["length"]));
		defineProperties_function = new _object.ptr(runtime$1, "Function", _classObject, (x$40 = new _nativeFunctionObject.ptr("defineProperties", builtinObject_defineProperties, $throwNilPointerError), new x$40.constructor.elem(x$40)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$39 = new Value.ptr(2, new $Int(2)), new x$39.constructor.elem(x$39)), 0) }]), new sliceType(["length"]));
		create_function = new _object.ptr(runtime$1, "Function", _classObject, (x$42 = new _nativeFunctionObject.ptr("create", builtinObject_create, $throwNilPointerError), new x$42.constructor.elem(x$42)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$41 = new Value.ptr(2, new $Int(2)), new x$41.constructor.elem(x$41)), 0) }]), new sliceType(["length"]));
		isExtensible_function = new _object.ptr(runtime$1, "Function", _classObject, (x$44 = new _nativeFunctionObject.ptr("isExtensible", builtinObject_isExtensible, $throwNilPointerError), new x$44.constructor.elem(x$44)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$43 = new Value.ptr(2, new $Int(1)), new x$43.constructor.elem(x$43)), 0) }]), new sliceType(["length"]));
		preventExtensions_function = new _object.ptr(runtime$1, "Function", _classObject, (x$46 = new _nativeFunctionObject.ptr("preventExtensions", builtinObject_preventExtensions, $throwNilPointerError), new x$46.constructor.elem(x$46)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$45 = new Value.ptr(2, new $Int(1)), new x$45.constructor.elem(x$45)), 0) }]), new sliceType(["length"]));
		isSealed_function = new _object.ptr(runtime$1, "Function", _classObject, (x$48 = new _nativeFunctionObject.ptr("isSealed", builtinObject_isSealed, $throwNilPointerError), new x$48.constructor.elem(x$48)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$47 = new Value.ptr(2, new $Int(1)), new x$47.constructor.elem(x$47)), 0) }]), new sliceType(["length"]));
		seal_function = new _object.ptr(runtime$1, "Function", _classObject, (x$50 = new _nativeFunctionObject.ptr("seal", builtinObject_seal, $throwNilPointerError), new x$50.constructor.elem(x$50)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$49 = new Value.ptr(2, new $Int(1)), new x$49.constructor.elem(x$49)), 0) }]), new sliceType(["length"]));
		isFrozen_function = new _object.ptr(runtime$1, "Function", _classObject, (x$52 = new _nativeFunctionObject.ptr("isFrozen", builtinObject_isFrozen, $throwNilPointerError), new x$52.constructor.elem(x$52)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$51 = new Value.ptr(2, new $Int(1)), new x$51.constructor.elem(x$51)), 0) }]), new sliceType(["length"]));
		freeze_function = new _object.ptr(runtime$1, "Function", _classObject, (x$54 = new _nativeFunctionObject.ptr("freeze", builtinObject_freeze, $throwNilPointerError), new x$54.constructor.elem(x$54)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$53 = new Value.ptr(2, new $Int(1)), new x$53.constructor.elem(x$53)), 0) }]), new sliceType(["length"]));
		keys_function = new _object.ptr(runtime$1, "Function", _classObject, (x$56 = new _nativeFunctionObject.ptr("keys", builtinObject_keys, $throwNilPointerError), new x$56.constructor.elem(x$56)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$55 = new Value.ptr(2, new $Int(1)), new x$55.constructor.elem(x$55)), 0) }]), new sliceType(["length"]));
		getOwnPropertyNames_function = new _object.ptr(runtime$1, "Function", _classObject, (x$58 = new _nativeFunctionObject.ptr("getOwnPropertyNames", builtinObject_getOwnPropertyNames, $throwNilPointerError), new x$58.constructor.elem(x$58)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$57 = new Value.ptr(2, new $Int(1)), new x$57.constructor.elem(x$57)), 0) }]), new sliceType(["length"]));
		runtime$1.global.Object = new _object.ptr(runtime$1, "Function", _classObject, (x$59 = new _nativeFunctionObject.ptr("Object", builtinObject, builtinNewObject), new x$59.constructor.elem(x$59)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$60 = new Value.ptr(2, new $Int(1)), new x$60.constructor.elem(x$60)), 0) }, { k: "prototype", v: new _property.ptr((x$61 = new Value.ptr(5, runtime$1.global.ObjectPrototype), new x$61.constructor.elem(x$61)), 0) }, { k: "getPrototypeOf", v: new _property.ptr((x$62 = new Value.ptr(5, getPrototypeOf_function), new x$62.constructor.elem(x$62)), 65) }, { k: "getOwnPropertyDescriptor", v: new _property.ptr((x$63 = new Value.ptr(5, getOwnPropertyDescriptor_function), new x$63.constructor.elem(x$63)), 65) }, { k: "defineProperty", v: new _property.ptr((x$64 = new Value.ptr(5, defineProperty_function), new x$64.constructor.elem(x$64)), 65) }, { k: "defineProperties", v: new _property.ptr((x$65 = new Value.ptr(5, defineProperties_function), new x$65.constructor.elem(x$65)), 65) }, { k: "create", v: new _property.ptr((x$66 = new Value.ptr(5, create_function), new x$66.constructor.elem(x$66)), 65) }, { k: "isExtensible", v: new _property.ptr((x$67 = new Value.ptr(5, isExtensible_function), new x$67.constructor.elem(x$67)), 65) }, { k: "preventExtensions", v: new _property.ptr((x$68 = new Value.ptr(5, preventExtensions_function), new x$68.constructor.elem(x$68)), 65) }, { k: "isSealed", v: new _property.ptr((x$69 = new Value.ptr(5, isSealed_function), new x$69.constructor.elem(x$69)), 65) }, { k: "seal", v: new _property.ptr((x$70 = new Value.ptr(5, seal_function), new x$70.constructor.elem(x$70)), 65) }, { k: "isFrozen", v: new _property.ptr((x$71 = new Value.ptr(5, isFrozen_function), new x$71.constructor.elem(x$71)), 65) }, { k: "freeze", v: new _property.ptr((x$72 = new Value.ptr(5, freeze_function), new x$72.constructor.elem(x$72)), 65) }, { k: "keys", v: new _property.ptr((x$73 = new Value.ptr(5, keys_function), new x$73.constructor.elem(x$73)), 65) }, { k: "getOwnPropertyNames", v: new _property.ptr((x$74 = new Value.ptr(5, getOwnPropertyNames_function), new x$74.constructor.elem(x$74)), 65) }]), new sliceType(["length", "prototype", "getPrototypeOf", "getOwnPropertyDescriptor", "defineProperty", "defineProperties", "create", "isExtensible", "preventExtensions", "isSealed", "seal", "isFrozen", "freeze", "keys", "getOwnPropertyNames"]));
		_key = "constructor"; (runtime$1.global.ObjectPrototype.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new _property.ptr((x$75 = new Value.ptr(5, runtime$1.global.Object), new x$75.constructor.elem(x$75)), 65) };
		Function = new _object.ptr(runtime$1, "Function", _classObject, (x$76 = new _nativeFunctionObject.ptr("Function", builtinFunction, builtinNewFunction), new x$76.constructor.elem(x$76)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$77 = new Value.ptr(2, new $Int(1)), new x$77.constructor.elem(x$77)), 0) }, { k: "prototype", v: new _property.ptr((x$78 = new Value.ptr(5, runtime$1.global.FunctionPrototype), new x$78.constructor.elem(x$78)), 0) }]), new sliceType(["length", "prototype"]));
		runtime$1.global.Function = Function;
		_key$1 = "constructor"; (runtime$1.global.FunctionPrototype.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: new _property.ptr((x$79 = new Value.ptr(5, runtime$1.global.Function), new x$79.constructor.elem(x$79)), 65) };
		toString_function$2 = new _object.ptr(runtime$1, "Function", _classObject, (x$81 = new _nativeFunctionObject.ptr("toString", builtinArray_toString, $throwNilPointerError), new x$81.constructor.elem(x$81)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$80 = new Value.ptr(2, new $Int(0)), new x$80.constructor.elem(x$80)), 0) }]), new sliceType(["length"]));
		toLocaleString_function$1 = new _object.ptr(runtime$1, "Function", _classObject, (x$83 = new _nativeFunctionObject.ptr("toLocaleString", builtinArray_toLocaleString, $throwNilPointerError), new x$83.constructor.elem(x$83)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$82 = new Value.ptr(2, new $Int(0)), new x$82.constructor.elem(x$82)), 0) }]), new sliceType(["length"]));
		concat_function = new _object.ptr(runtime$1, "Function", _classObject, (x$85 = new _nativeFunctionObject.ptr("concat", builtinArray_concat, $throwNilPointerError), new x$85.constructor.elem(x$85)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$84 = new Value.ptr(2, new $Int(1)), new x$84.constructor.elem(x$84)), 0) }]), new sliceType(["length"]));
		join_function = new _object.ptr(runtime$1, "Function", _classObject, (x$87 = new _nativeFunctionObject.ptr("join", builtinArray_join, $throwNilPointerError), new x$87.constructor.elem(x$87)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$86 = new Value.ptr(2, new $Int(1)), new x$86.constructor.elem(x$86)), 0) }]), new sliceType(["length"]));
		splice_function = new _object.ptr(runtime$1, "Function", _classObject, (x$89 = new _nativeFunctionObject.ptr("splice", builtinArray_splice, $throwNilPointerError), new x$89.constructor.elem(x$89)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$88 = new Value.ptr(2, new $Int(2)), new x$88.constructor.elem(x$88)), 0) }]), new sliceType(["length"]));
		shift_function = new _object.ptr(runtime$1, "Function", _classObject, (x$91 = new _nativeFunctionObject.ptr("shift", builtinArray_shift, $throwNilPointerError), new x$91.constructor.elem(x$91)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$90 = new Value.ptr(2, new $Int(0)), new x$90.constructor.elem(x$90)), 0) }]), new sliceType(["length"]));
		pop_function = new _object.ptr(runtime$1, "Function", _classObject, (x$93 = new _nativeFunctionObject.ptr("pop", builtinArray_pop, $throwNilPointerError), new x$93.constructor.elem(x$93)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$92 = new Value.ptr(2, new $Int(0)), new x$92.constructor.elem(x$92)), 0) }]), new sliceType(["length"]));
		push_function = new _object.ptr(runtime$1, "Function", _classObject, (x$95 = new _nativeFunctionObject.ptr("push", builtinArray_push, $throwNilPointerError), new x$95.constructor.elem(x$95)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$94 = new Value.ptr(2, new $Int(1)), new x$94.constructor.elem(x$94)), 0) }]), new sliceType(["length"]));
		slice_function = new _object.ptr(runtime$1, "Function", _classObject, (x$97 = new _nativeFunctionObject.ptr("slice", builtinArray_slice, $throwNilPointerError), new x$97.constructor.elem(x$97)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$96 = new Value.ptr(2, new $Int(2)), new x$96.constructor.elem(x$96)), 0) }]), new sliceType(["length"]));
		unshift_function = new _object.ptr(runtime$1, "Function", _classObject, (x$99 = new _nativeFunctionObject.ptr("unshift", builtinArray_unshift, $throwNilPointerError), new x$99.constructor.elem(x$99)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$98 = new Value.ptr(2, new $Int(1)), new x$98.constructor.elem(x$98)), 0) }]), new sliceType(["length"]));
		reverse_function = new _object.ptr(runtime$1, "Function", _classObject, (x$101 = new _nativeFunctionObject.ptr("reverse", builtinArray_reverse, $throwNilPointerError), new x$101.constructor.elem(x$101)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$100 = new Value.ptr(2, new $Int(0)), new x$100.constructor.elem(x$100)), 0) }]), new sliceType(["length"]));
		sort_function = new _object.ptr(runtime$1, "Function", _classObject, (x$103 = new _nativeFunctionObject.ptr("sort", builtinArray_sort, $throwNilPointerError), new x$103.constructor.elem(x$103)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$102 = new Value.ptr(2, new $Int(1)), new x$102.constructor.elem(x$102)), 0) }]), new sliceType(["length"]));
		indexOf_function = new _object.ptr(runtime$1, "Function", _classObject, (x$105 = new _nativeFunctionObject.ptr("indexOf", builtinArray_indexOf, $throwNilPointerError), new x$105.constructor.elem(x$105)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$104 = new Value.ptr(2, new $Int(1)), new x$104.constructor.elem(x$104)), 0) }]), new sliceType(["length"]));
		lastIndexOf_function = new _object.ptr(runtime$1, "Function", _classObject, (x$107 = new _nativeFunctionObject.ptr("lastIndexOf", builtinArray_lastIndexOf, $throwNilPointerError), new x$107.constructor.elem(x$107)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$106 = new Value.ptr(2, new $Int(1)), new x$106.constructor.elem(x$106)), 0) }]), new sliceType(["length"]));
		every_function = new _object.ptr(runtime$1, "Function", _classObject, (x$109 = new _nativeFunctionObject.ptr("every", builtinArray_every, $throwNilPointerError), new x$109.constructor.elem(x$109)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$108 = new Value.ptr(2, new $Int(1)), new x$108.constructor.elem(x$108)), 0) }]), new sliceType(["length"]));
		some_function = new _object.ptr(runtime$1, "Function", _classObject, (x$111 = new _nativeFunctionObject.ptr("some", builtinArray_some, $throwNilPointerError), new x$111.constructor.elem(x$111)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$110 = new Value.ptr(2, new $Int(1)), new x$110.constructor.elem(x$110)), 0) }]), new sliceType(["length"]));
		forEach_function = new _object.ptr(runtime$1, "Function", _classObject, (x$113 = new _nativeFunctionObject.ptr("forEach", builtinArray_forEach, $throwNilPointerError), new x$113.constructor.elem(x$113)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$112 = new Value.ptr(2, new $Int(1)), new x$112.constructor.elem(x$112)), 0) }]), new sliceType(["length"]));
		map_function = new _object.ptr(runtime$1, "Function", _classObject, (x$115 = new _nativeFunctionObject.ptr("map", builtinArray_map, $throwNilPointerError), new x$115.constructor.elem(x$115)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$114 = new Value.ptr(2, new $Int(1)), new x$114.constructor.elem(x$114)), 0) }]), new sliceType(["length"]));
		filter_function = new _object.ptr(runtime$1, "Function", _classObject, (x$117 = new _nativeFunctionObject.ptr("filter", builtinArray_filter, $throwNilPointerError), new x$117.constructor.elem(x$117)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$116 = new Value.ptr(2, new $Int(1)), new x$116.constructor.elem(x$116)), 0) }]), new sliceType(["length"]));
		reduce_function = new _object.ptr(runtime$1, "Function", _classObject, (x$119 = new _nativeFunctionObject.ptr("reduce", builtinArray_reduce, $throwNilPointerError), new x$119.constructor.elem(x$119)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$118 = new Value.ptr(2, new $Int(1)), new x$118.constructor.elem(x$118)), 0) }]), new sliceType(["length"]));
		reduceRight_function = new _object.ptr(runtime$1, "Function", _classObject, (x$121 = new _nativeFunctionObject.ptr("reduceRight", builtinArray_reduceRight, $throwNilPointerError), new x$121.constructor.elem(x$121)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$120 = new Value.ptr(2, new $Int(1)), new x$120.constructor.elem(x$120)), 0) }]), new sliceType(["length"]));
		isArray_function = new _object.ptr(runtime$1, "Function", _classObject, (x$123 = new _nativeFunctionObject.ptr("isArray", builtinArray_isArray, $throwNilPointerError), new x$123.constructor.elem(x$123)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$122 = new Value.ptr(2, new $Int(1)), new x$122.constructor.elem(x$122)), 0) }]), new sliceType(["length"]));
		runtime$1.global.ArrayPrototype = new _object.ptr(runtime$1, "Array", _classArray, $ifaceNil, runtime$1.global.ObjectPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$124 = new Value.ptr(2, new $Uint32(0)), new x$124.constructor.elem(x$124)), 64) }, { k: "toString", v: new _property.ptr((x$125 = new Value.ptr(5, toString_function$2), new x$125.constructor.elem(x$125)), 65) }, { k: "toLocaleString", v: new _property.ptr((x$126 = new Value.ptr(5, toLocaleString_function$1), new x$126.constructor.elem(x$126)), 65) }, { k: "concat", v: new _property.ptr((x$127 = new Value.ptr(5, concat_function), new x$127.constructor.elem(x$127)), 65) }, { k: "join", v: new _property.ptr((x$128 = new Value.ptr(5, join_function), new x$128.constructor.elem(x$128)), 65) }, { k: "splice", v: new _property.ptr((x$129 = new Value.ptr(5, splice_function), new x$129.constructor.elem(x$129)), 65) }, { k: "shift", v: new _property.ptr((x$130 = new Value.ptr(5, shift_function), new x$130.constructor.elem(x$130)), 65) }, { k: "pop", v: new _property.ptr((x$131 = new Value.ptr(5, pop_function), new x$131.constructor.elem(x$131)), 65) }, { k: "push", v: new _property.ptr((x$132 = new Value.ptr(5, push_function), new x$132.constructor.elem(x$132)), 65) }, { k: "slice", v: new _property.ptr((x$133 = new Value.ptr(5, slice_function), new x$133.constructor.elem(x$133)), 65) }, { k: "unshift", v: new _property.ptr((x$134 = new Value.ptr(5, unshift_function), new x$134.constructor.elem(x$134)), 65) }, { k: "reverse", v: new _property.ptr((x$135 = new Value.ptr(5, reverse_function), new x$135.constructor.elem(x$135)), 65) }, { k: "sort", v: new _property.ptr((x$136 = new Value.ptr(5, sort_function), new x$136.constructor.elem(x$136)), 65) }, { k: "indexOf", v: new _property.ptr((x$137 = new Value.ptr(5, indexOf_function), new x$137.constructor.elem(x$137)), 65) }, { k: "lastIndexOf", v: new _property.ptr((x$138 = new Value.ptr(5, lastIndexOf_function), new x$138.constructor.elem(x$138)), 65) }, { k: "every", v: new _property.ptr((x$139 = new Value.ptr(5, every_function), new x$139.constructor.elem(x$139)), 65) }, { k: "some", v: new _property.ptr((x$140 = new Value.ptr(5, some_function), new x$140.constructor.elem(x$140)), 65) }, { k: "forEach", v: new _property.ptr((x$141 = new Value.ptr(5, forEach_function), new x$141.constructor.elem(x$141)), 65) }, { k: "map", v: new _property.ptr((x$142 = new Value.ptr(5, map_function), new x$142.constructor.elem(x$142)), 65) }, { k: "filter", v: new _property.ptr((x$143 = new Value.ptr(5, filter_function), new x$143.constructor.elem(x$143)), 65) }, { k: "reduce", v: new _property.ptr((x$144 = new Value.ptr(5, reduce_function), new x$144.constructor.elem(x$144)), 65) }, { k: "reduceRight", v: new _property.ptr((x$145 = new Value.ptr(5, reduceRight_function), new x$145.constructor.elem(x$145)), 65) }]), new sliceType(["length", "toString", "toLocaleString", "concat", "join", "splice", "shift", "pop", "push", "slice", "unshift", "reverse", "sort", "indexOf", "lastIndexOf", "every", "some", "forEach", "map", "filter", "reduce", "reduceRight"]));
		runtime$1.global.Array = new _object.ptr(runtime$1, "Function", _classObject, (x$146 = new _nativeFunctionObject.ptr("Array", builtinArray, builtinNewArray), new x$146.constructor.elem(x$146)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$147 = new Value.ptr(2, new $Int(1)), new x$147.constructor.elem(x$147)), 0) }, { k: "prototype", v: new _property.ptr((x$148 = new Value.ptr(5, runtime$1.global.ArrayPrototype), new x$148.constructor.elem(x$148)), 0) }, { k: "isArray", v: new _property.ptr((x$149 = new Value.ptr(5, isArray_function), new x$149.constructor.elem(x$149)), 65) }]), new sliceType(["length", "prototype", "isArray"]));
		_key$2 = "constructor"; (runtime$1.global.ArrayPrototype.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: new _property.ptr((x$150 = new Value.ptr(5, runtime$1.global.Array), new x$150.constructor.elem(x$150)), 65) };
		toString_function$3 = new _object.ptr(runtime$1, "Function", _classObject, (x$152 = new _nativeFunctionObject.ptr("toString", builtinString_toString, $throwNilPointerError), new x$152.constructor.elem(x$152)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$151 = new Value.ptr(2, new $Int(0)), new x$151.constructor.elem(x$151)), 0) }]), new sliceType(["length"]));
		valueOf_function$1 = new _object.ptr(runtime$1, "Function", _classObject, (x$154 = new _nativeFunctionObject.ptr("valueOf", builtinString_valueOf, $throwNilPointerError), new x$154.constructor.elem(x$154)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$153 = new Value.ptr(2, new $Int(0)), new x$153.constructor.elem(x$153)), 0) }]), new sliceType(["length"]));
		charAt_function = new _object.ptr(runtime$1, "Function", _classObject, (x$156 = new _nativeFunctionObject.ptr("charAt", builtinString_charAt, $throwNilPointerError), new x$156.constructor.elem(x$156)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$155 = new Value.ptr(2, new $Int(1)), new x$155.constructor.elem(x$155)), 0) }]), new sliceType(["length"]));
		charCodeAt_function = new _object.ptr(runtime$1, "Function", _classObject, (x$158 = new _nativeFunctionObject.ptr("charCodeAt", builtinString_charCodeAt, $throwNilPointerError), new x$158.constructor.elem(x$158)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$157 = new Value.ptr(2, new $Int(1)), new x$157.constructor.elem(x$157)), 0) }]), new sliceType(["length"]));
		concat_function$1 = new _object.ptr(runtime$1, "Function", _classObject, (x$160 = new _nativeFunctionObject.ptr("concat", builtinString_concat, $throwNilPointerError), new x$160.constructor.elem(x$160)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$159 = new Value.ptr(2, new $Int(1)), new x$159.constructor.elem(x$159)), 0) }]), new sliceType(["length"]));
		indexOf_function$1 = new _object.ptr(runtime$1, "Function", _classObject, (x$162 = new _nativeFunctionObject.ptr("indexOf", builtinString_indexOf, $throwNilPointerError), new x$162.constructor.elem(x$162)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$161 = new Value.ptr(2, new $Int(1)), new x$161.constructor.elem(x$161)), 0) }]), new sliceType(["length"]));
		lastIndexOf_function$1 = new _object.ptr(runtime$1, "Function", _classObject, (x$164 = new _nativeFunctionObject.ptr("lastIndexOf", builtinString_lastIndexOf, $throwNilPointerError), new x$164.constructor.elem(x$164)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$163 = new Value.ptr(2, new $Int(1)), new x$163.constructor.elem(x$163)), 0) }]), new sliceType(["length"]));
		match_function = new _object.ptr(runtime$1, "Function", _classObject, (x$166 = new _nativeFunctionObject.ptr("match", builtinString_match, $throwNilPointerError), new x$166.constructor.elem(x$166)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$165 = new Value.ptr(2, new $Int(1)), new x$165.constructor.elem(x$165)), 0) }]), new sliceType(["length"]));
		replace_function = new _object.ptr(runtime$1, "Function", _classObject, (x$168 = new _nativeFunctionObject.ptr("replace", builtinString_replace, $throwNilPointerError), new x$168.constructor.elem(x$168)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$167 = new Value.ptr(2, new $Int(2)), new x$167.constructor.elem(x$167)), 0) }]), new sliceType(["length"]));
		search_function = new _object.ptr(runtime$1, "Function", _classObject, (x$170 = new _nativeFunctionObject.ptr("search", builtinString_search, $throwNilPointerError), new x$170.constructor.elem(x$170)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$169 = new Value.ptr(2, new $Int(1)), new x$169.constructor.elem(x$169)), 0) }]), new sliceType(["length"]));
		split_function = new _object.ptr(runtime$1, "Function", _classObject, (x$172 = new _nativeFunctionObject.ptr("split", builtinString_split, $throwNilPointerError), new x$172.constructor.elem(x$172)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$171 = new Value.ptr(2, new $Int(2)), new x$171.constructor.elem(x$171)), 0) }]), new sliceType(["length"]));
		slice_function$1 = new _object.ptr(runtime$1, "Function", _classObject, (x$174 = new _nativeFunctionObject.ptr("slice", builtinString_slice, $throwNilPointerError), new x$174.constructor.elem(x$174)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$173 = new Value.ptr(2, new $Int(2)), new x$173.constructor.elem(x$173)), 0) }]), new sliceType(["length"]));
		substring_function = new _object.ptr(runtime$1, "Function", _classObject, (x$176 = new _nativeFunctionObject.ptr("substring", builtinString_substring, $throwNilPointerError), new x$176.constructor.elem(x$176)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$175 = new Value.ptr(2, new $Int(2)), new x$175.constructor.elem(x$175)), 0) }]), new sliceType(["length"]));
		toLowerCase_function = new _object.ptr(runtime$1, "Function", _classObject, (x$178 = new _nativeFunctionObject.ptr("toLowerCase", builtinString_toLowerCase, $throwNilPointerError), new x$178.constructor.elem(x$178)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$177 = new Value.ptr(2, new $Int(0)), new x$177.constructor.elem(x$177)), 0) }]), new sliceType(["length"]));
		toUpperCase_function = new _object.ptr(runtime$1, "Function", _classObject, (x$180 = new _nativeFunctionObject.ptr("toUpperCase", builtinString_toUpperCase, $throwNilPointerError), new x$180.constructor.elem(x$180)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$179 = new Value.ptr(2, new $Int(0)), new x$179.constructor.elem(x$179)), 0) }]), new sliceType(["length"]));
		substr_function = new _object.ptr(runtime$1, "Function", _classObject, (x$182 = new _nativeFunctionObject.ptr("substr", builtinString_substr, $throwNilPointerError), new x$182.constructor.elem(x$182)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$181 = new Value.ptr(2, new $Int(2)), new x$181.constructor.elem(x$181)), 0) }]), new sliceType(["length"]));
		trim_function = new _object.ptr(runtime$1, "Function", _classObject, (x$184 = new _nativeFunctionObject.ptr("trim", builtinString_trim, $throwNilPointerError), new x$184.constructor.elem(x$184)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$183 = new Value.ptr(2, new $Int(0)), new x$183.constructor.elem(x$183)), 0) }]), new sliceType(["length"]));
		trimLeft_function = new _object.ptr(runtime$1, "Function", _classObject, (x$186 = new _nativeFunctionObject.ptr("trimLeft", builtinString_trimLeft, $throwNilPointerError), new x$186.constructor.elem(x$186)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$185 = new Value.ptr(2, new $Int(0)), new x$185.constructor.elem(x$185)), 0) }]), new sliceType(["length"]));
		trimRight_function = new _object.ptr(runtime$1, "Function", _classObject, (x$188 = new _nativeFunctionObject.ptr("trimRight", builtinString_trimRight, $throwNilPointerError), new x$188.constructor.elem(x$188)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$187 = new Value.ptr(2, new $Int(0)), new x$187.constructor.elem(x$187)), 0) }]), new sliceType(["length"]));
		localeCompare_function = new _object.ptr(runtime$1, "Function", _classObject, (x$190 = new _nativeFunctionObject.ptr("localeCompare", builtinString_localeCompare, $throwNilPointerError), new x$190.constructor.elem(x$190)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$189 = new Value.ptr(2, new $Int(1)), new x$189.constructor.elem(x$189)), 0) }]), new sliceType(["length"]));
		toLocaleLowerCase_function = new _object.ptr(runtime$1, "Function", _classObject, (x$192 = new _nativeFunctionObject.ptr("toLocaleLowerCase", builtinString_toLocaleLowerCase, $throwNilPointerError), new x$192.constructor.elem(x$192)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$191 = new Value.ptr(2, new $Int(0)), new x$191.constructor.elem(x$191)), 0) }]), new sliceType(["length"]));
		toLocaleUpperCase_function = new _object.ptr(runtime$1, "Function", _classObject, (x$194 = new _nativeFunctionObject.ptr("toLocaleUpperCase", builtinString_toLocaleUpperCase, $throwNilPointerError), new x$194.constructor.elem(x$194)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$193 = new Value.ptr(2, new $Int(0)), new x$193.constructor.elem(x$193)), 0) }]), new sliceType(["length"]));
		fromCharCode_function = new _object.ptr(runtime$1, "Function", _classObject, (x$196 = new _nativeFunctionObject.ptr("fromCharCode", builtinString_fromCharCode, $throwNilPointerError), new x$196.constructor.elem(x$196)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$195 = new Value.ptr(2, new $Int(1)), new x$195.constructor.elem(x$195)), 0) }]), new sliceType(["length"]));
		runtime$1.global.StringPrototype = new _object.ptr(runtime$1, "String", _classString, new _stringASCII(prototypeValueString), runtime$1.global.ObjectPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$197 = new Value.ptr(2, new $Int(0)), new x$197.constructor.elem(x$197)), 0) }, { k: "toString", v: new _property.ptr((x$198 = new Value.ptr(5, toString_function$3), new x$198.constructor.elem(x$198)), 65) }, { k: "valueOf", v: new _property.ptr((x$199 = new Value.ptr(5, valueOf_function$1), new x$199.constructor.elem(x$199)), 65) }, { k: "charAt", v: new _property.ptr((x$200 = new Value.ptr(5, charAt_function), new x$200.constructor.elem(x$200)), 65) }, { k: "charCodeAt", v: new _property.ptr((x$201 = new Value.ptr(5, charCodeAt_function), new x$201.constructor.elem(x$201)), 65) }, { k: "concat", v: new _property.ptr((x$202 = new Value.ptr(5, concat_function$1), new x$202.constructor.elem(x$202)), 65) }, { k: "indexOf", v: new _property.ptr((x$203 = new Value.ptr(5, indexOf_function$1), new x$203.constructor.elem(x$203)), 65) }, { k: "lastIndexOf", v: new _property.ptr((x$204 = new Value.ptr(5, lastIndexOf_function$1), new x$204.constructor.elem(x$204)), 65) }, { k: "match", v: new _property.ptr((x$205 = new Value.ptr(5, match_function), new x$205.constructor.elem(x$205)), 65) }, { k: "replace", v: new _property.ptr((x$206 = new Value.ptr(5, replace_function), new x$206.constructor.elem(x$206)), 65) }, { k: "search", v: new _property.ptr((x$207 = new Value.ptr(5, search_function), new x$207.constructor.elem(x$207)), 65) }, { k: "split", v: new _property.ptr((x$208 = new Value.ptr(5, split_function), new x$208.constructor.elem(x$208)), 65) }, { k: "slice", v: new _property.ptr((x$209 = new Value.ptr(5, slice_function$1), new x$209.constructor.elem(x$209)), 65) }, { k: "substring", v: new _property.ptr((x$210 = new Value.ptr(5, substring_function), new x$210.constructor.elem(x$210)), 65) }, { k: "toLowerCase", v: new _property.ptr((x$211 = new Value.ptr(5, toLowerCase_function), new x$211.constructor.elem(x$211)), 65) }, { k: "toUpperCase", v: new _property.ptr((x$212 = new Value.ptr(5, toUpperCase_function), new x$212.constructor.elem(x$212)), 65) }, { k: "substr", v: new _property.ptr((x$213 = new Value.ptr(5, substr_function), new x$213.constructor.elem(x$213)), 65) }, { k: "trim", v: new _property.ptr((x$214 = new Value.ptr(5, trim_function), new x$214.constructor.elem(x$214)), 65) }, { k: "trimLeft", v: new _property.ptr((x$215 = new Value.ptr(5, trimLeft_function), new x$215.constructor.elem(x$215)), 65) }, { k: "trimRight", v: new _property.ptr((x$216 = new Value.ptr(5, trimRight_function), new x$216.constructor.elem(x$216)), 65) }, { k: "localeCompare", v: new _property.ptr((x$217 = new Value.ptr(5, localeCompare_function), new x$217.constructor.elem(x$217)), 65) }, { k: "toLocaleLowerCase", v: new _property.ptr((x$218 = new Value.ptr(5, toLocaleLowerCase_function), new x$218.constructor.elem(x$218)), 65) }, { k: "toLocaleUpperCase", v: new _property.ptr((x$219 = new Value.ptr(5, toLocaleUpperCase_function), new x$219.constructor.elem(x$219)), 65) }]), new sliceType(["length", "toString", "valueOf", "charAt", "charCodeAt", "concat", "indexOf", "lastIndexOf", "match", "replace", "search", "split", "slice", "substring", "toLowerCase", "toUpperCase", "substr", "trim", "trimLeft", "trimRight", "localeCompare", "toLocaleLowerCase", "toLocaleUpperCase"]));
		runtime$1.global.String = new _object.ptr(runtime$1, "Function", _classObject, (x$220 = new _nativeFunctionObject.ptr("String", builtinString, builtinNewString), new x$220.constructor.elem(x$220)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$221 = new Value.ptr(2, new $Int(1)), new x$221.constructor.elem(x$221)), 0) }, { k: "prototype", v: new _property.ptr((x$222 = new Value.ptr(5, runtime$1.global.StringPrototype), new x$222.constructor.elem(x$222)), 0) }, { k: "fromCharCode", v: new _property.ptr((x$223 = new Value.ptr(5, fromCharCode_function), new x$223.constructor.elem(x$223)), 65) }]), new sliceType(["length", "prototype", "fromCharCode"]));
		_key$3 = "constructor"; (runtime$1.global.StringPrototype.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$3)] = { k: _key$3, v: new _property.ptr((x$224 = new Value.ptr(5, runtime$1.global.String), new x$224.constructor.elem(x$224)), 65) };
		toString_function$4 = new _object.ptr(runtime$1, "Function", _classObject, (x$226 = new _nativeFunctionObject.ptr("toString", builtinBoolean_toString, $throwNilPointerError), new x$226.constructor.elem(x$226)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$225 = new Value.ptr(2, new $Int(0)), new x$225.constructor.elem(x$225)), 0) }]), new sliceType(["length"]));
		valueOf_function$2 = new _object.ptr(runtime$1, "Function", _classObject, (x$228 = new _nativeFunctionObject.ptr("valueOf", builtinBoolean_valueOf, $throwNilPointerError), new x$228.constructor.elem(x$228)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$227 = new Value.ptr(2, new $Int(0)), new x$227.constructor.elem(x$227)), 0) }]), new sliceType(["length"]));
		runtime$1.global.BooleanPrototype = new _object.ptr(runtime$1, "Boolean", _classObject, new prototypeValueBoolean.constructor.elem(prototypeValueBoolean), runtime$1.global.ObjectPrototype, true, $makeMap($String.keyFor, [{ k: "toString", v: new _property.ptr((x$229 = new Value.ptr(5, toString_function$4), new x$229.constructor.elem(x$229)), 65) }, { k: "valueOf", v: new _property.ptr((x$230 = new Value.ptr(5, valueOf_function$2), new x$230.constructor.elem(x$230)), 65) }]), new sliceType(["toString", "valueOf"]));
		runtime$1.global.Boolean = new _object.ptr(runtime$1, "Function", _classObject, (x$231 = new _nativeFunctionObject.ptr("Boolean", builtinBoolean, builtinNewBoolean), new x$231.constructor.elem(x$231)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$232 = new Value.ptr(2, new $Int(1)), new x$232.constructor.elem(x$232)), 0) }, { k: "prototype", v: new _property.ptr((x$233 = new Value.ptr(5, runtime$1.global.BooleanPrototype), new x$233.constructor.elem(x$233)), 0) }]), new sliceType(["length", "prototype"]));
		_key$4 = "constructor"; (runtime$1.global.BooleanPrototype.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$4)] = { k: _key$4, v: new _property.ptr((x$234 = new Value.ptr(5, runtime$1.global.Boolean), new x$234.constructor.elem(x$234)), 65) };
		toString_function$5 = new _object.ptr(runtime$1, "Function", _classObject, (x$236 = new _nativeFunctionObject.ptr("toString", builtinNumber_toString, $throwNilPointerError), new x$236.constructor.elem(x$236)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$235 = new Value.ptr(2, new $Int(0)), new x$235.constructor.elem(x$235)), 0) }]), new sliceType(["length"]));
		valueOf_function$3 = new _object.ptr(runtime$1, "Function", _classObject, (x$238 = new _nativeFunctionObject.ptr("valueOf", builtinNumber_valueOf, $throwNilPointerError), new x$238.constructor.elem(x$238)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$237 = new Value.ptr(2, new $Int(0)), new x$237.constructor.elem(x$237)), 0) }]), new sliceType(["length"]));
		toFixed_function = new _object.ptr(runtime$1, "Function", _classObject, (x$240 = new _nativeFunctionObject.ptr("toFixed", builtinNumber_toFixed, $throwNilPointerError), new x$240.constructor.elem(x$240)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$239 = new Value.ptr(2, new $Int(1)), new x$239.constructor.elem(x$239)), 0) }]), new sliceType(["length"]));
		toExponential_function = new _object.ptr(runtime$1, "Function", _classObject, (x$242 = new _nativeFunctionObject.ptr("toExponential", builtinNumber_toExponential, $throwNilPointerError), new x$242.constructor.elem(x$242)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$241 = new Value.ptr(2, new $Int(1)), new x$241.constructor.elem(x$241)), 0) }]), new sliceType(["length"]));
		toPrecision_function = new _object.ptr(runtime$1, "Function", _classObject, (x$244 = new _nativeFunctionObject.ptr("toPrecision", builtinNumber_toPrecision, $throwNilPointerError), new x$244.constructor.elem(x$244)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$243 = new Value.ptr(2, new $Int(1)), new x$243.constructor.elem(x$243)), 0) }]), new sliceType(["length"]));
		toLocaleString_function$2 = new _object.ptr(runtime$1, "Function", _classObject, (x$246 = new _nativeFunctionObject.ptr("toLocaleString", builtinNumber_toLocaleString, $throwNilPointerError), new x$246.constructor.elem(x$246)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$245 = new Value.ptr(2, new $Int(1)), new x$245.constructor.elem(x$245)), 0) }]), new sliceType(["length"]));
		runtime$1.global.NumberPrototype = new _object.ptr(runtime$1, "Number", _classObject, new prototypeValueNumber.constructor.elem(prototypeValueNumber), runtime$1.global.ObjectPrototype, true, $makeMap($String.keyFor, [{ k: "toString", v: new _property.ptr((x$247 = new Value.ptr(5, toString_function$5), new x$247.constructor.elem(x$247)), 65) }, { k: "valueOf", v: new _property.ptr((x$248 = new Value.ptr(5, valueOf_function$3), new x$248.constructor.elem(x$248)), 65) }, { k: "toFixed", v: new _property.ptr((x$249 = new Value.ptr(5, toFixed_function), new x$249.constructor.elem(x$249)), 65) }, { k: "toExponential", v: new _property.ptr((x$250 = new Value.ptr(5, toExponential_function), new x$250.constructor.elem(x$250)), 65) }, { k: "toPrecision", v: new _property.ptr((x$251 = new Value.ptr(5, toPrecision_function), new x$251.constructor.elem(x$251)), 65) }, { k: "toLocaleString", v: new _property.ptr((x$252 = new Value.ptr(5, toLocaleString_function$2), new x$252.constructor.elem(x$252)), 65) }]), new sliceType(["toString", "valueOf", "toFixed", "toExponential", "toPrecision", "toLocaleString"]));
		runtime$1.global.Number = new _object.ptr(runtime$1, "Function", _classObject, (x$253 = new _nativeFunctionObject.ptr("Number", builtinNumber, builtinNewNumber), new x$253.constructor.elem(x$253)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$254 = new Value.ptr(2, new $Int(1)), new x$254.constructor.elem(x$254)), 0) }, { k: "prototype", v: new _property.ptr((x$255 = new Value.ptr(5, runtime$1.global.NumberPrototype), new x$255.constructor.elem(x$255)), 0) }, { k: "MAX_VALUE", v: new _property.ptr((x$256 = new Value.ptr(2, new $Float64(1.7976931348623157e+308)), new x$256.constructor.elem(x$256)), 0) }, { k: "MIN_VALUE", v: new _property.ptr((x$257 = new Value.ptr(2, new $Float64(5e-324)), new x$257.constructor.elem(x$257)), 0) }, { k: "NaN", v: new _property.ptr((x$258 = new Value.ptr(2, new $Float64(math.NaN())), new x$258.constructor.elem(x$258)), 0) }, { k: "NEGATIVE_INFINITY", v: new _property.ptr((x$259 = new Value.ptr(2, new $Float64(math.Inf(-1))), new x$259.constructor.elem(x$259)), 0) }, { k: "POSITIVE_INFINITY", v: new _property.ptr((x$260 = new Value.ptr(2, new $Float64(math.Inf(1))), new x$260.constructor.elem(x$260)), 0) }]), new sliceType(["length", "prototype", "MAX_VALUE", "MIN_VALUE", "NaN", "NEGATIVE_INFINITY", "POSITIVE_INFINITY"]));
		_key$5 = "constructor"; (runtime$1.global.NumberPrototype.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$5)] = { k: _key$5, v: new _property.ptr((x$261 = new Value.ptr(5, runtime$1.global.Number), new x$261.constructor.elem(x$261)), 65) };
		abs_function = new _object.ptr(runtime$1, "Function", _classObject, (x$263 = new _nativeFunctionObject.ptr("abs", builtinMath_abs, $throwNilPointerError), new x$263.constructor.elem(x$263)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$262 = new Value.ptr(2, new $Int(1)), new x$262.constructor.elem(x$262)), 0) }]), new sliceType(["length"]));
		acos_function = new _object.ptr(runtime$1, "Function", _classObject, (x$265 = new _nativeFunctionObject.ptr("acos", builtinMath_acos, $throwNilPointerError), new x$265.constructor.elem(x$265)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$264 = new Value.ptr(2, new $Int(1)), new x$264.constructor.elem(x$264)), 0) }]), new sliceType(["length"]));
		asin_function = new _object.ptr(runtime$1, "Function", _classObject, (x$267 = new _nativeFunctionObject.ptr("asin", builtinMath_asin, $throwNilPointerError), new x$267.constructor.elem(x$267)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$266 = new Value.ptr(2, new $Int(1)), new x$266.constructor.elem(x$266)), 0) }]), new sliceType(["length"]));
		atan_function = new _object.ptr(runtime$1, "Function", _classObject, (x$269 = new _nativeFunctionObject.ptr("atan", builtinMath_atan, $throwNilPointerError), new x$269.constructor.elem(x$269)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$268 = new Value.ptr(2, new $Int(1)), new x$268.constructor.elem(x$268)), 0) }]), new sliceType(["length"]));
		atan2_function = new _object.ptr(runtime$1, "Function", _classObject, (x$271 = new _nativeFunctionObject.ptr("atan2", builtinMath_atan2, $throwNilPointerError), new x$271.constructor.elem(x$271)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$270 = new Value.ptr(2, new $Int(1)), new x$270.constructor.elem(x$270)), 0) }]), new sliceType(["length"]));
		ceil_function = new _object.ptr(runtime$1, "Function", _classObject, (x$273 = new _nativeFunctionObject.ptr("ceil", builtinMath_ceil, $throwNilPointerError), new x$273.constructor.elem(x$273)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$272 = new Value.ptr(2, new $Int(1)), new x$272.constructor.elem(x$272)), 0) }]), new sliceType(["length"]));
		cos_function = new _object.ptr(runtime$1, "Function", _classObject, (x$275 = new _nativeFunctionObject.ptr("cos", builtinMath_cos, $throwNilPointerError), new x$275.constructor.elem(x$275)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$274 = new Value.ptr(2, new $Int(1)), new x$274.constructor.elem(x$274)), 0) }]), new sliceType(["length"]));
		exp_function = new _object.ptr(runtime$1, "Function", _classObject, (x$277 = new _nativeFunctionObject.ptr("exp", builtinMath_exp, $throwNilPointerError), new x$277.constructor.elem(x$277)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$276 = new Value.ptr(2, new $Int(1)), new x$276.constructor.elem(x$276)), 0) }]), new sliceType(["length"]));
		floor_function = new _object.ptr(runtime$1, "Function", _classObject, (x$279 = new _nativeFunctionObject.ptr("floor", builtinMath_floor, $throwNilPointerError), new x$279.constructor.elem(x$279)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$278 = new Value.ptr(2, new $Int(1)), new x$278.constructor.elem(x$278)), 0) }]), new sliceType(["length"]));
		log_function = new _object.ptr(runtime$1, "Function", _classObject, (x$281 = new _nativeFunctionObject.ptr("log", builtinMath_log, $throwNilPointerError), new x$281.constructor.elem(x$281)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$280 = new Value.ptr(2, new $Int(1)), new x$280.constructor.elem(x$280)), 0) }]), new sliceType(["length"]));
		max_function = new _object.ptr(runtime$1, "Function", _classObject, (x$283 = new _nativeFunctionObject.ptr("max", builtinMath_max, $throwNilPointerError), new x$283.constructor.elem(x$283)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$282 = new Value.ptr(2, new $Int(2)), new x$282.constructor.elem(x$282)), 0) }]), new sliceType(["length"]));
		min_function = new _object.ptr(runtime$1, "Function", _classObject, (x$285 = new _nativeFunctionObject.ptr("min", builtinMath_min, $throwNilPointerError), new x$285.constructor.elem(x$285)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$284 = new Value.ptr(2, new $Int(2)), new x$284.constructor.elem(x$284)), 0) }]), new sliceType(["length"]));
		pow_function = new _object.ptr(runtime$1, "Function", _classObject, (x$287 = new _nativeFunctionObject.ptr("pow", builtinMath_pow, $throwNilPointerError), new x$287.constructor.elem(x$287)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$286 = new Value.ptr(2, new $Int(2)), new x$286.constructor.elem(x$286)), 0) }]), new sliceType(["length"]));
		random_function = new _object.ptr(runtime$1, "Function", _classObject, (x$289 = new _nativeFunctionObject.ptr("random", builtinMath_random, $throwNilPointerError), new x$289.constructor.elem(x$289)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$288 = new Value.ptr(2, new $Int(0)), new x$288.constructor.elem(x$288)), 0) }]), new sliceType(["length"]));
		round_function = new _object.ptr(runtime$1, "Function", _classObject, (x$291 = new _nativeFunctionObject.ptr("round", builtinMath_round, $throwNilPointerError), new x$291.constructor.elem(x$291)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$290 = new Value.ptr(2, new $Int(1)), new x$290.constructor.elem(x$290)), 0) }]), new sliceType(["length"]));
		sin_function = new _object.ptr(runtime$1, "Function", _classObject, (x$293 = new _nativeFunctionObject.ptr("sin", builtinMath_sin, $throwNilPointerError), new x$293.constructor.elem(x$293)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$292 = new Value.ptr(2, new $Int(1)), new x$292.constructor.elem(x$292)), 0) }]), new sliceType(["length"]));
		sqrt_function = new _object.ptr(runtime$1, "Function", _classObject, (x$295 = new _nativeFunctionObject.ptr("sqrt", builtinMath_sqrt, $throwNilPointerError), new x$295.constructor.elem(x$295)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$294 = new Value.ptr(2, new $Int(1)), new x$294.constructor.elem(x$294)), 0) }]), new sliceType(["length"]));
		tan_function = new _object.ptr(runtime$1, "Function", _classObject, (x$297 = new _nativeFunctionObject.ptr("tan", builtinMath_tan, $throwNilPointerError), new x$297.constructor.elem(x$297)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$296 = new Value.ptr(2, new $Int(1)), new x$296.constructor.elem(x$296)), 0) }]), new sliceType(["length"]));
		runtime$1.global.Math = new _object.ptr(runtime$1, "Math", _classObject, $ifaceNil, runtime$1.global.ObjectPrototype, true, $makeMap($String.keyFor, [{ k: "abs", v: new _property.ptr((x$298 = new Value.ptr(5, abs_function), new x$298.constructor.elem(x$298)), 65) }, { k: "acos", v: new _property.ptr((x$299 = new Value.ptr(5, acos_function), new x$299.constructor.elem(x$299)), 65) }, { k: "asin", v: new _property.ptr((x$300 = new Value.ptr(5, asin_function), new x$300.constructor.elem(x$300)), 65) }, { k: "atan", v: new _property.ptr((x$301 = new Value.ptr(5, atan_function), new x$301.constructor.elem(x$301)), 65) }, { k: "atan2", v: new _property.ptr((x$302 = new Value.ptr(5, atan2_function), new x$302.constructor.elem(x$302)), 65) }, { k: "ceil", v: new _property.ptr((x$303 = new Value.ptr(5, ceil_function), new x$303.constructor.elem(x$303)), 65) }, { k: "cos", v: new _property.ptr((x$304 = new Value.ptr(5, cos_function), new x$304.constructor.elem(x$304)), 65) }, { k: "exp", v: new _property.ptr((x$305 = new Value.ptr(5, exp_function), new x$305.constructor.elem(x$305)), 65) }, { k: "floor", v: new _property.ptr((x$306 = new Value.ptr(5, floor_function), new x$306.constructor.elem(x$306)), 65) }, { k: "log", v: new _property.ptr((x$307 = new Value.ptr(5, log_function), new x$307.constructor.elem(x$307)), 65) }, { k: "max", v: new _property.ptr((x$308 = new Value.ptr(5, max_function), new x$308.constructor.elem(x$308)), 65) }, { k: "min", v: new _property.ptr((x$309 = new Value.ptr(5, min_function), new x$309.constructor.elem(x$309)), 65) }, { k: "pow", v: new _property.ptr((x$310 = new Value.ptr(5, pow_function), new x$310.constructor.elem(x$310)), 65) }, { k: "random", v: new _property.ptr((x$311 = new Value.ptr(5, random_function), new x$311.constructor.elem(x$311)), 65) }, { k: "round", v: new _property.ptr((x$312 = new Value.ptr(5, round_function), new x$312.constructor.elem(x$312)), 65) }, { k: "sin", v: new _property.ptr((x$313 = new Value.ptr(5, sin_function), new x$313.constructor.elem(x$313)), 65) }, { k: "sqrt", v: new _property.ptr((x$314 = new Value.ptr(5, sqrt_function), new x$314.constructor.elem(x$314)), 65) }, { k: "tan", v: new _property.ptr((x$315 = new Value.ptr(5, tan_function), new x$315.constructor.elem(x$315)), 65) }, { k: "E", v: new _property.ptr((x$316 = new Value.ptr(2, new $Float64(2.718281828459045)), new x$316.constructor.elem(x$316)), 0) }, { k: "LN10", v: new _property.ptr((x$317 = new Value.ptr(2, new $Float64(2.302585092994046)), new x$317.constructor.elem(x$317)), 0) }, { k: "LN2", v: new _property.ptr((x$318 = new Value.ptr(2, new $Float64(0.6931471805599453)), new x$318.constructor.elem(x$318)), 0) }, { k: "LOG2E", v: new _property.ptr((x$319 = new Value.ptr(2, new $Float64(1.4426950408889634)), new x$319.constructor.elem(x$319)), 0) }, { k: "LOG10E", v: new _property.ptr((x$320 = new Value.ptr(2, new $Float64(0.4342944819032518)), new x$320.constructor.elem(x$320)), 0) }, { k: "PI", v: new _property.ptr((x$321 = new Value.ptr(2, new $Float64(3.141592653589793)), new x$321.constructor.elem(x$321)), 0) }, { k: "SQRT1_2", v: new _property.ptr((x$322 = new Value.ptr(2, new $Float64(0.7071067811865476)), new x$322.constructor.elem(x$322)), 0) }, { k: "SQRT2", v: new _property.ptr((x$323 = new Value.ptr(2, new $Float64(1.4142135623730951)), new x$323.constructor.elem(x$323)), 0) }]), new sliceType(["abs", "acos", "asin", "atan", "atan2", "ceil", "cos", "exp", "floor", "log", "max", "min", "pow", "random", "round", "sin", "sqrt", "tan", "E", "LN10", "LN2", "LOG2E", "LOG10E", "PI", "SQRT1_2", "SQRT2"]));
		toString_function$6 = new _object.ptr(runtime$1, "Function", _classObject, (x$325 = new _nativeFunctionObject.ptr("toString", builtinDate_toString, $throwNilPointerError), new x$325.constructor.elem(x$325)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$324 = new Value.ptr(2, new $Int(0)), new x$324.constructor.elem(x$324)), 0) }]), new sliceType(["length"]));
		toDateString_function = new _object.ptr(runtime$1, "Function", _classObject, (x$327 = new _nativeFunctionObject.ptr("toDateString", builtinDate_toDateString, $throwNilPointerError), new x$327.constructor.elem(x$327)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$326 = new Value.ptr(2, new $Int(0)), new x$326.constructor.elem(x$326)), 0) }]), new sliceType(["length"]));
		toTimeString_function = new _object.ptr(runtime$1, "Function", _classObject, (x$329 = new _nativeFunctionObject.ptr("toTimeString", builtinDate_toTimeString, $throwNilPointerError), new x$329.constructor.elem(x$329)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$328 = new Value.ptr(2, new $Int(0)), new x$328.constructor.elem(x$328)), 0) }]), new sliceType(["length"]));
		toUTCString_function = new _object.ptr(runtime$1, "Function", _classObject, (x$331 = new _nativeFunctionObject.ptr("toUTCString", builtinDate_toUTCString, $throwNilPointerError), new x$331.constructor.elem(x$331)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$330 = new Value.ptr(2, new $Int(0)), new x$330.constructor.elem(x$330)), 0) }]), new sliceType(["length"]));
		toISOString_function = new _object.ptr(runtime$1, "Function", _classObject, (x$333 = new _nativeFunctionObject.ptr("toISOString", builtinDate_toISOString, $throwNilPointerError), new x$333.constructor.elem(x$333)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$332 = new Value.ptr(2, new $Int(0)), new x$332.constructor.elem(x$332)), 0) }]), new sliceType(["length"]));
		toJSON_function = new _object.ptr(runtime$1, "Function", _classObject, (x$335 = new _nativeFunctionObject.ptr("toJSON", builtinDate_toJSON, $throwNilPointerError), new x$335.constructor.elem(x$335)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$334 = new Value.ptr(2, new $Int(1)), new x$334.constructor.elem(x$334)), 0) }]), new sliceType(["length"]));
		toGMTString_function = new _object.ptr(runtime$1, "Function", _classObject, (x$337 = new _nativeFunctionObject.ptr("toGMTString", builtinDate_toGMTString, $throwNilPointerError), new x$337.constructor.elem(x$337)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$336 = new Value.ptr(2, new $Int(0)), new x$336.constructor.elem(x$336)), 0) }]), new sliceType(["length"]));
		toLocaleString_function$3 = new _object.ptr(runtime$1, "Function", _classObject, (x$339 = new _nativeFunctionObject.ptr("toLocaleString", builtinDate_toLocaleString, $throwNilPointerError), new x$339.constructor.elem(x$339)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$338 = new Value.ptr(2, new $Int(0)), new x$338.constructor.elem(x$338)), 0) }]), new sliceType(["length"]));
		toLocaleDateString_function = new _object.ptr(runtime$1, "Function", _classObject, (x$341 = new _nativeFunctionObject.ptr("toLocaleDateString", builtinDate_toLocaleDateString, $throwNilPointerError), new x$341.constructor.elem(x$341)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$340 = new Value.ptr(2, new $Int(0)), new x$340.constructor.elem(x$340)), 0) }]), new sliceType(["length"]));
		toLocaleTimeString_function = new _object.ptr(runtime$1, "Function", _classObject, (x$343 = new _nativeFunctionObject.ptr("toLocaleTimeString", builtinDate_toLocaleTimeString, $throwNilPointerError), new x$343.constructor.elem(x$343)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$342 = new Value.ptr(2, new $Int(0)), new x$342.constructor.elem(x$342)), 0) }]), new sliceType(["length"]));
		valueOf_function$4 = new _object.ptr(runtime$1, "Function", _classObject, (x$345 = new _nativeFunctionObject.ptr("valueOf", builtinDate_valueOf, $throwNilPointerError), new x$345.constructor.elem(x$345)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$344 = new Value.ptr(2, new $Int(0)), new x$344.constructor.elem(x$344)), 0) }]), new sliceType(["length"]));
		getTime_function = new _object.ptr(runtime$1, "Function", _classObject, (x$347 = new _nativeFunctionObject.ptr("getTime", builtinDate_getTime, $throwNilPointerError), new x$347.constructor.elem(x$347)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$346 = new Value.ptr(2, new $Int(0)), new x$346.constructor.elem(x$346)), 0) }]), new sliceType(["length"]));
		getYear_function = new _object.ptr(runtime$1, "Function", _classObject, (x$349 = new _nativeFunctionObject.ptr("getYear", builtinDate_getYear, $throwNilPointerError), new x$349.constructor.elem(x$349)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$348 = new Value.ptr(2, new $Int(0)), new x$348.constructor.elem(x$348)), 0) }]), new sliceType(["length"]));
		getFullYear_function = new _object.ptr(runtime$1, "Function", _classObject, (x$351 = new _nativeFunctionObject.ptr("getFullYear", builtinDate_getFullYear, $throwNilPointerError), new x$351.constructor.elem(x$351)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$350 = new Value.ptr(2, new $Int(0)), new x$350.constructor.elem(x$350)), 0) }]), new sliceType(["length"]));
		getUTCFullYear_function = new _object.ptr(runtime$1, "Function", _classObject, (x$353 = new _nativeFunctionObject.ptr("getUTCFullYear", builtinDate_getUTCFullYear, $throwNilPointerError), new x$353.constructor.elem(x$353)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$352 = new Value.ptr(2, new $Int(0)), new x$352.constructor.elem(x$352)), 0) }]), new sliceType(["length"]));
		getMonth_function = new _object.ptr(runtime$1, "Function", _classObject, (x$355 = new _nativeFunctionObject.ptr("getMonth", builtinDate_getMonth, $throwNilPointerError), new x$355.constructor.elem(x$355)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$354 = new Value.ptr(2, new $Int(0)), new x$354.constructor.elem(x$354)), 0) }]), new sliceType(["length"]));
		getUTCMonth_function = new _object.ptr(runtime$1, "Function", _classObject, (x$357 = new _nativeFunctionObject.ptr("getUTCMonth", builtinDate_getUTCMonth, $throwNilPointerError), new x$357.constructor.elem(x$357)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$356 = new Value.ptr(2, new $Int(0)), new x$356.constructor.elem(x$356)), 0) }]), new sliceType(["length"]));
		getDate_function = new _object.ptr(runtime$1, "Function", _classObject, (x$359 = new _nativeFunctionObject.ptr("getDate", builtinDate_getDate, $throwNilPointerError), new x$359.constructor.elem(x$359)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$358 = new Value.ptr(2, new $Int(0)), new x$358.constructor.elem(x$358)), 0) }]), new sliceType(["length"]));
		getUTCDate_function = new _object.ptr(runtime$1, "Function", _classObject, (x$361 = new _nativeFunctionObject.ptr("getUTCDate", builtinDate_getUTCDate, $throwNilPointerError), new x$361.constructor.elem(x$361)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$360 = new Value.ptr(2, new $Int(0)), new x$360.constructor.elem(x$360)), 0) }]), new sliceType(["length"]));
		getDay_function = new _object.ptr(runtime$1, "Function", _classObject, (x$363 = new _nativeFunctionObject.ptr("getDay", builtinDate_getDay, $throwNilPointerError), new x$363.constructor.elem(x$363)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$362 = new Value.ptr(2, new $Int(0)), new x$362.constructor.elem(x$362)), 0) }]), new sliceType(["length"]));
		getUTCDay_function = new _object.ptr(runtime$1, "Function", _classObject, (x$365 = new _nativeFunctionObject.ptr("getUTCDay", builtinDate_getUTCDay, $throwNilPointerError), new x$365.constructor.elem(x$365)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$364 = new Value.ptr(2, new $Int(0)), new x$364.constructor.elem(x$364)), 0) }]), new sliceType(["length"]));
		getHours_function = new _object.ptr(runtime$1, "Function", _classObject, (x$367 = new _nativeFunctionObject.ptr("getHours", builtinDate_getHours, $throwNilPointerError), new x$367.constructor.elem(x$367)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$366 = new Value.ptr(2, new $Int(0)), new x$366.constructor.elem(x$366)), 0) }]), new sliceType(["length"]));
		getUTCHours_function = new _object.ptr(runtime$1, "Function", _classObject, (x$369 = new _nativeFunctionObject.ptr("getUTCHours", builtinDate_getUTCHours, $throwNilPointerError), new x$369.constructor.elem(x$369)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$368 = new Value.ptr(2, new $Int(0)), new x$368.constructor.elem(x$368)), 0) }]), new sliceType(["length"]));
		getMinutes_function = new _object.ptr(runtime$1, "Function", _classObject, (x$371 = new _nativeFunctionObject.ptr("getMinutes", builtinDate_getMinutes, $throwNilPointerError), new x$371.constructor.elem(x$371)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$370 = new Value.ptr(2, new $Int(0)), new x$370.constructor.elem(x$370)), 0) }]), new sliceType(["length"]));
		getUTCMinutes_function = new _object.ptr(runtime$1, "Function", _classObject, (x$373 = new _nativeFunctionObject.ptr("getUTCMinutes", builtinDate_getUTCMinutes, $throwNilPointerError), new x$373.constructor.elem(x$373)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$372 = new Value.ptr(2, new $Int(0)), new x$372.constructor.elem(x$372)), 0) }]), new sliceType(["length"]));
		getSeconds_function = new _object.ptr(runtime$1, "Function", _classObject, (x$375 = new _nativeFunctionObject.ptr("getSeconds", builtinDate_getSeconds, $throwNilPointerError), new x$375.constructor.elem(x$375)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$374 = new Value.ptr(2, new $Int(0)), new x$374.constructor.elem(x$374)), 0) }]), new sliceType(["length"]));
		getUTCSeconds_function = new _object.ptr(runtime$1, "Function", _classObject, (x$377 = new _nativeFunctionObject.ptr("getUTCSeconds", builtinDate_getUTCSeconds, $throwNilPointerError), new x$377.constructor.elem(x$377)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$376 = new Value.ptr(2, new $Int(0)), new x$376.constructor.elem(x$376)), 0) }]), new sliceType(["length"]));
		getMilliseconds_function = new _object.ptr(runtime$1, "Function", _classObject, (x$379 = new _nativeFunctionObject.ptr("getMilliseconds", builtinDate_getMilliseconds, $throwNilPointerError), new x$379.constructor.elem(x$379)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$378 = new Value.ptr(2, new $Int(0)), new x$378.constructor.elem(x$378)), 0) }]), new sliceType(["length"]));
		getUTCMilliseconds_function = new _object.ptr(runtime$1, "Function", _classObject, (x$381 = new _nativeFunctionObject.ptr("getUTCMilliseconds", builtinDate_getUTCMilliseconds, $throwNilPointerError), new x$381.constructor.elem(x$381)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$380 = new Value.ptr(2, new $Int(0)), new x$380.constructor.elem(x$380)), 0) }]), new sliceType(["length"]));
		getTimezoneOffset_function = new _object.ptr(runtime$1, "Function", _classObject, (x$383 = new _nativeFunctionObject.ptr("getTimezoneOffset", builtinDate_getTimezoneOffset, $throwNilPointerError), new x$383.constructor.elem(x$383)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$382 = new Value.ptr(2, new $Int(0)), new x$382.constructor.elem(x$382)), 0) }]), new sliceType(["length"]));
		setTime_function = new _object.ptr(runtime$1, "Function", _classObject, (x$385 = new _nativeFunctionObject.ptr("setTime", builtinDate_setTime, $throwNilPointerError), new x$385.constructor.elem(x$385)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$384 = new Value.ptr(2, new $Int(1)), new x$384.constructor.elem(x$384)), 0) }]), new sliceType(["length"]));
		setMilliseconds_function = new _object.ptr(runtime$1, "Function", _classObject, (x$387 = new _nativeFunctionObject.ptr("setMilliseconds", builtinDate_setMilliseconds, $throwNilPointerError), new x$387.constructor.elem(x$387)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$386 = new Value.ptr(2, new $Int(1)), new x$386.constructor.elem(x$386)), 0) }]), new sliceType(["length"]));
		setUTCMilliseconds_function = new _object.ptr(runtime$1, "Function", _classObject, (x$389 = new _nativeFunctionObject.ptr("setUTCMilliseconds", builtinDate_setUTCMilliseconds, $throwNilPointerError), new x$389.constructor.elem(x$389)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$388 = new Value.ptr(2, new $Int(1)), new x$388.constructor.elem(x$388)), 0) }]), new sliceType(["length"]));
		setSeconds_function = new _object.ptr(runtime$1, "Function", _classObject, (x$391 = new _nativeFunctionObject.ptr("setSeconds", builtinDate_setSeconds, $throwNilPointerError), new x$391.constructor.elem(x$391)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$390 = new Value.ptr(2, new $Int(2)), new x$390.constructor.elem(x$390)), 0) }]), new sliceType(["length"]));
		setUTCSeconds_function = new _object.ptr(runtime$1, "Function", _classObject, (x$393 = new _nativeFunctionObject.ptr("setUTCSeconds", builtinDate_setUTCSeconds, $throwNilPointerError), new x$393.constructor.elem(x$393)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$392 = new Value.ptr(2, new $Int(2)), new x$392.constructor.elem(x$392)), 0) }]), new sliceType(["length"]));
		setMinutes_function = new _object.ptr(runtime$1, "Function", _classObject, (x$395 = new _nativeFunctionObject.ptr("setMinutes", builtinDate_setMinutes, $throwNilPointerError), new x$395.constructor.elem(x$395)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$394 = new Value.ptr(2, new $Int(3)), new x$394.constructor.elem(x$394)), 0) }]), new sliceType(["length"]));
		setUTCMinutes_function = new _object.ptr(runtime$1, "Function", _classObject, (x$397 = new _nativeFunctionObject.ptr("setUTCMinutes", builtinDate_setUTCMinutes, $throwNilPointerError), new x$397.constructor.elem(x$397)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$396 = new Value.ptr(2, new $Int(3)), new x$396.constructor.elem(x$396)), 0) }]), new sliceType(["length"]));
		setHours_function = new _object.ptr(runtime$1, "Function", _classObject, (x$399 = new _nativeFunctionObject.ptr("setHours", builtinDate_setHours, $throwNilPointerError), new x$399.constructor.elem(x$399)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$398 = new Value.ptr(2, new $Int(4)), new x$398.constructor.elem(x$398)), 0) }]), new sliceType(["length"]));
		setUTCHours_function = new _object.ptr(runtime$1, "Function", _classObject, (x$401 = new _nativeFunctionObject.ptr("setUTCHours", builtinDate_setUTCHours, $throwNilPointerError), new x$401.constructor.elem(x$401)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$400 = new Value.ptr(2, new $Int(4)), new x$400.constructor.elem(x$400)), 0) }]), new sliceType(["length"]));
		setDate_function = new _object.ptr(runtime$1, "Function", _classObject, (x$403 = new _nativeFunctionObject.ptr("setDate", builtinDate_setDate, $throwNilPointerError), new x$403.constructor.elem(x$403)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$402 = new Value.ptr(2, new $Int(1)), new x$402.constructor.elem(x$402)), 0) }]), new sliceType(["length"]));
		setUTCDate_function = new _object.ptr(runtime$1, "Function", _classObject, (x$405 = new _nativeFunctionObject.ptr("setUTCDate", builtinDate_setUTCDate, $throwNilPointerError), new x$405.constructor.elem(x$405)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$404 = new Value.ptr(2, new $Int(1)), new x$404.constructor.elem(x$404)), 0) }]), new sliceType(["length"]));
		setMonth_function = new _object.ptr(runtime$1, "Function", _classObject, (x$407 = new _nativeFunctionObject.ptr("setMonth", builtinDate_setMonth, $throwNilPointerError), new x$407.constructor.elem(x$407)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$406 = new Value.ptr(2, new $Int(2)), new x$406.constructor.elem(x$406)), 0) }]), new sliceType(["length"]));
		setUTCMonth_function = new _object.ptr(runtime$1, "Function", _classObject, (x$409 = new _nativeFunctionObject.ptr("setUTCMonth", builtinDate_setUTCMonth, $throwNilPointerError), new x$409.constructor.elem(x$409)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$408 = new Value.ptr(2, new $Int(2)), new x$408.constructor.elem(x$408)), 0) }]), new sliceType(["length"]));
		setYear_function = new _object.ptr(runtime$1, "Function", _classObject, (x$411 = new _nativeFunctionObject.ptr("setYear", builtinDate_setYear, $throwNilPointerError), new x$411.constructor.elem(x$411)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$410 = new Value.ptr(2, new $Int(1)), new x$410.constructor.elem(x$410)), 0) }]), new sliceType(["length"]));
		setFullYear_function = new _object.ptr(runtime$1, "Function", _classObject, (x$413 = new _nativeFunctionObject.ptr("setFullYear", builtinDate_setFullYear, $throwNilPointerError), new x$413.constructor.elem(x$413)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$412 = new Value.ptr(2, new $Int(3)), new x$412.constructor.elem(x$412)), 0) }]), new sliceType(["length"]));
		setUTCFullYear_function = new _object.ptr(runtime$1, "Function", _classObject, (x$415 = new _nativeFunctionObject.ptr("setUTCFullYear", builtinDate_setUTCFullYear, $throwNilPointerError), new x$415.constructor.elem(x$415)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$414 = new Value.ptr(2, new $Int(3)), new x$414.constructor.elem(x$414)), 0) }]), new sliceType(["length"]));
		parse_function = new _object.ptr(runtime$1, "Function", _classObject, (x$417 = new _nativeFunctionObject.ptr("parse", builtinDate_parse, $throwNilPointerError), new x$417.constructor.elem(x$417)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$416 = new Value.ptr(2, new $Int(1)), new x$416.constructor.elem(x$416)), 0) }]), new sliceType(["length"]));
		UTC_function = new _object.ptr(runtime$1, "Function", _classObject, (x$419 = new _nativeFunctionObject.ptr("UTC", builtinDate_UTC, $throwNilPointerError), new x$419.constructor.elem(x$419)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$418 = new Value.ptr(2, new $Int(7)), new x$418.constructor.elem(x$418)), 0) }]), new sliceType(["length"]));
		now_function = new _object.ptr(runtime$1, "Function", _classObject, (x$421 = new _nativeFunctionObject.ptr("now", builtinDate_now, $throwNilPointerError), new x$421.constructor.elem(x$421)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$420 = new Value.ptr(2, new $Int(0)), new x$420.constructor.elem(x$420)), 0) }]), new sliceType(["length"]));
		runtime$1.global.DatePrototype = new _object.ptr(runtime$1, "Date", _classObject, new prototypeValueDate.constructor.elem(prototypeValueDate), runtime$1.global.ObjectPrototype, true, $makeMap($String.keyFor, [{ k: "toString", v: new _property.ptr((x$422 = new Value.ptr(5, toString_function$6), new x$422.constructor.elem(x$422)), 65) }, { k: "toDateString", v: new _property.ptr((x$423 = new Value.ptr(5, toDateString_function), new x$423.constructor.elem(x$423)), 65) }, { k: "toTimeString", v: new _property.ptr((x$424 = new Value.ptr(5, toTimeString_function), new x$424.constructor.elem(x$424)), 65) }, { k: "toUTCString", v: new _property.ptr((x$425 = new Value.ptr(5, toUTCString_function), new x$425.constructor.elem(x$425)), 65) }, { k: "toISOString", v: new _property.ptr((x$426 = new Value.ptr(5, toISOString_function), new x$426.constructor.elem(x$426)), 65) }, { k: "toJSON", v: new _property.ptr((x$427 = new Value.ptr(5, toJSON_function), new x$427.constructor.elem(x$427)), 65) }, { k: "toGMTString", v: new _property.ptr((x$428 = new Value.ptr(5, toGMTString_function), new x$428.constructor.elem(x$428)), 65) }, { k: "toLocaleString", v: new _property.ptr((x$429 = new Value.ptr(5, toLocaleString_function$3), new x$429.constructor.elem(x$429)), 65) }, { k: "toLocaleDateString", v: new _property.ptr((x$430 = new Value.ptr(5, toLocaleDateString_function), new x$430.constructor.elem(x$430)), 65) }, { k: "toLocaleTimeString", v: new _property.ptr((x$431 = new Value.ptr(5, toLocaleTimeString_function), new x$431.constructor.elem(x$431)), 65) }, { k: "valueOf", v: new _property.ptr((x$432 = new Value.ptr(5, valueOf_function$4), new x$432.constructor.elem(x$432)), 65) }, { k: "getTime", v: new _property.ptr((x$433 = new Value.ptr(5, getTime_function), new x$433.constructor.elem(x$433)), 65) }, { k: "getYear", v: new _property.ptr((x$434 = new Value.ptr(5, getYear_function), new x$434.constructor.elem(x$434)), 65) }, { k: "getFullYear", v: new _property.ptr((x$435 = new Value.ptr(5, getFullYear_function), new x$435.constructor.elem(x$435)), 65) }, { k: "getUTCFullYear", v: new _property.ptr((x$436 = new Value.ptr(5, getUTCFullYear_function), new x$436.constructor.elem(x$436)), 65) }, { k: "getMonth", v: new _property.ptr((x$437 = new Value.ptr(5, getMonth_function), new x$437.constructor.elem(x$437)), 65) }, { k: "getUTCMonth", v: new _property.ptr((x$438 = new Value.ptr(5, getUTCMonth_function), new x$438.constructor.elem(x$438)), 65) }, { k: "getDate", v: new _property.ptr((x$439 = new Value.ptr(5, getDate_function), new x$439.constructor.elem(x$439)), 65) }, { k: "getUTCDate", v: new _property.ptr((x$440 = new Value.ptr(5, getUTCDate_function), new x$440.constructor.elem(x$440)), 65) }, { k: "getDay", v: new _property.ptr((x$441 = new Value.ptr(5, getDay_function), new x$441.constructor.elem(x$441)), 65) }, { k: "getUTCDay", v: new _property.ptr((x$442 = new Value.ptr(5, getUTCDay_function), new x$442.constructor.elem(x$442)), 65) }, { k: "getHours", v: new _property.ptr((x$443 = new Value.ptr(5, getHours_function), new x$443.constructor.elem(x$443)), 65) }, { k: "getUTCHours", v: new _property.ptr((x$444 = new Value.ptr(5, getUTCHours_function), new x$444.constructor.elem(x$444)), 65) }, { k: "getMinutes", v: new _property.ptr((x$445 = new Value.ptr(5, getMinutes_function), new x$445.constructor.elem(x$445)), 65) }, { k: "getUTCMinutes", v: new _property.ptr((x$446 = new Value.ptr(5, getUTCMinutes_function), new x$446.constructor.elem(x$446)), 65) }, { k: "getSeconds", v: new _property.ptr((x$447 = new Value.ptr(5, getSeconds_function), new x$447.constructor.elem(x$447)), 65) }, { k: "getUTCSeconds", v: new _property.ptr((x$448 = new Value.ptr(5, getUTCSeconds_function), new x$448.constructor.elem(x$448)), 65) }, { k: "getMilliseconds", v: new _property.ptr((x$449 = new Value.ptr(5, getMilliseconds_function), new x$449.constructor.elem(x$449)), 65) }, { k: "getUTCMilliseconds", v: new _property.ptr((x$450 = new Value.ptr(5, getUTCMilliseconds_function), new x$450.constructor.elem(x$450)), 65) }, { k: "getTimezoneOffset", v: new _property.ptr((x$451 = new Value.ptr(5, getTimezoneOffset_function), new x$451.constructor.elem(x$451)), 65) }, { k: "setTime", v: new _property.ptr((x$452 = new Value.ptr(5, setTime_function), new x$452.constructor.elem(x$452)), 65) }, { k: "setMilliseconds", v: new _property.ptr((x$453 = new Value.ptr(5, setMilliseconds_function), new x$453.constructor.elem(x$453)), 65) }, { k: "setUTCMilliseconds", v: new _property.ptr((x$454 = new Value.ptr(5, setUTCMilliseconds_function), new x$454.constructor.elem(x$454)), 65) }, { k: "setSeconds", v: new _property.ptr((x$455 = new Value.ptr(5, setSeconds_function), new x$455.constructor.elem(x$455)), 65) }, { k: "setUTCSeconds", v: new _property.ptr((x$456 = new Value.ptr(5, setUTCSeconds_function), new x$456.constructor.elem(x$456)), 65) }, { k: "setMinutes", v: new _property.ptr((x$457 = new Value.ptr(5, setMinutes_function), new x$457.constructor.elem(x$457)), 65) }, { k: "setUTCMinutes", v: new _property.ptr((x$458 = new Value.ptr(5, setUTCMinutes_function), new x$458.constructor.elem(x$458)), 65) }, { k: "setHours", v: new _property.ptr((x$459 = new Value.ptr(5, setHours_function), new x$459.constructor.elem(x$459)), 65) }, { k: "setUTCHours", v: new _property.ptr((x$460 = new Value.ptr(5, setUTCHours_function), new x$460.constructor.elem(x$460)), 65) }, { k: "setDate", v: new _property.ptr((x$461 = new Value.ptr(5, setDate_function), new x$461.constructor.elem(x$461)), 65) }, { k: "setUTCDate", v: new _property.ptr((x$462 = new Value.ptr(5, setUTCDate_function), new x$462.constructor.elem(x$462)), 65) }, { k: "setMonth", v: new _property.ptr((x$463 = new Value.ptr(5, setMonth_function), new x$463.constructor.elem(x$463)), 65) }, { k: "setUTCMonth", v: new _property.ptr((x$464 = new Value.ptr(5, setUTCMonth_function), new x$464.constructor.elem(x$464)), 65) }, { k: "setYear", v: new _property.ptr((x$465 = new Value.ptr(5, setYear_function), new x$465.constructor.elem(x$465)), 65) }, { k: "setFullYear", v: new _property.ptr((x$466 = new Value.ptr(5, setFullYear_function), new x$466.constructor.elem(x$466)), 65) }, { k: "setUTCFullYear", v: new _property.ptr((x$467 = new Value.ptr(5, setUTCFullYear_function), new x$467.constructor.elem(x$467)), 65) }]), new sliceType(["toString", "toDateString", "toTimeString", "toUTCString", "toISOString", "toJSON", "toGMTString", "toLocaleString", "toLocaleDateString", "toLocaleTimeString", "valueOf", "getTime", "getYear", "getFullYear", "getUTCFullYear", "getMonth", "getUTCMonth", "getDate", "getUTCDate", "getDay", "getUTCDay", "getHours", "getUTCHours", "getMinutes", "getUTCMinutes", "getSeconds", "getUTCSeconds", "getMilliseconds", "getUTCMilliseconds", "getTimezoneOffset", "setTime", "setMilliseconds", "setUTCMilliseconds", "setSeconds", "setUTCSeconds", "setMinutes", "setUTCMinutes", "setHours", "setUTCHours", "setDate", "setUTCDate", "setMonth", "setUTCMonth", "setYear", "setFullYear", "setUTCFullYear"]));
		runtime$1.global.Date = new _object.ptr(runtime$1, "Function", _classObject, (x$468 = new _nativeFunctionObject.ptr("Date", builtinDate, builtinNewDate), new x$468.constructor.elem(x$468)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$469 = new Value.ptr(2, new $Int(7)), new x$469.constructor.elem(x$469)), 0) }, { k: "prototype", v: new _property.ptr((x$470 = new Value.ptr(5, runtime$1.global.DatePrototype), new x$470.constructor.elem(x$470)), 0) }, { k: "parse", v: new _property.ptr((x$471 = new Value.ptr(5, parse_function), new x$471.constructor.elem(x$471)), 65) }, { k: "UTC", v: new _property.ptr((x$472 = new Value.ptr(5, UTC_function), new x$472.constructor.elem(x$472)), 65) }, { k: "now", v: new _property.ptr((x$473 = new Value.ptr(5, now_function), new x$473.constructor.elem(x$473)), 65) }]), new sliceType(["length", "prototype", "parse", "UTC", "now"]));
		_key$6 = "constructor"; (runtime$1.global.DatePrototype.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$6)] = { k: _key$6, v: new _property.ptr((x$474 = new Value.ptr(5, runtime$1.global.Date), new x$474.constructor.elem(x$474)), 65) };
		toString_function$7 = new _object.ptr(runtime$1, "Function", _classObject, (x$476 = new _nativeFunctionObject.ptr("toString", builtinRegExp_toString, $throwNilPointerError), new x$476.constructor.elem(x$476)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$475 = new Value.ptr(2, new $Int(0)), new x$475.constructor.elem(x$475)), 0) }]), new sliceType(["length"]));
		exec_function = new _object.ptr(runtime$1, "Function", _classObject, (x$478 = new _nativeFunctionObject.ptr("exec", builtinRegExp_exec, $throwNilPointerError), new x$478.constructor.elem(x$478)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$477 = new Value.ptr(2, new $Int(1)), new x$477.constructor.elem(x$477)), 0) }]), new sliceType(["length"]));
		test_function = new _object.ptr(runtime$1, "Function", _classObject, (x$480 = new _nativeFunctionObject.ptr("test", builtinRegExp_test, $throwNilPointerError), new x$480.constructor.elem(x$480)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$479 = new Value.ptr(2, new $Int(1)), new x$479.constructor.elem(x$479)), 0) }]), new sliceType(["length"]));
		compile_function = new _object.ptr(runtime$1, "Function", _classObject, (x$482 = new _nativeFunctionObject.ptr("compile", builtinRegExp_compile, $throwNilPointerError), new x$482.constructor.elem(x$482)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$481 = new Value.ptr(2, new $Int(1)), new x$481.constructor.elem(x$481)), 0) }]), new sliceType(["length"]));
		runtime$1.global.RegExpPrototype = new _object.ptr(runtime$1, "RegExp", _classObject, new prototypeValueRegExp.constructor.elem(prototypeValueRegExp), runtime$1.global.ObjectPrototype, true, $makeMap($String.keyFor, [{ k: "toString", v: new _property.ptr((x$483 = new Value.ptr(5, toString_function$7), new x$483.constructor.elem(x$483)), 65) }, { k: "exec", v: new _property.ptr((x$484 = new Value.ptr(5, exec_function), new x$484.constructor.elem(x$484)), 65) }, { k: "test", v: new _property.ptr((x$485 = new Value.ptr(5, test_function), new x$485.constructor.elem(x$485)), 65) }, { k: "compile", v: new _property.ptr((x$486 = new Value.ptr(5, compile_function), new x$486.constructor.elem(x$486)), 65) }]), new sliceType(["toString", "exec", "test", "compile"]));
		runtime$1.global.RegExp = new _object.ptr(runtime$1, "Function", _classObject, (x$487 = new _nativeFunctionObject.ptr("RegExp", builtinRegExp, builtinNewRegExp), new x$487.constructor.elem(x$487)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$488 = new Value.ptr(2, new $Int(2)), new x$488.constructor.elem(x$488)), 0) }, { k: "prototype", v: new _property.ptr((x$489 = new Value.ptr(5, runtime$1.global.RegExpPrototype), new x$489.constructor.elem(x$489)), 0) }]), new sliceType(["length", "prototype"]));
		_key$7 = "constructor"; (runtime$1.global.RegExpPrototype.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$7)] = { k: _key$7, v: new _property.ptr((x$490 = new Value.ptr(5, runtime$1.global.RegExp), new x$490.constructor.elem(x$490)), 65) };
		toString_function$8 = new _object.ptr(runtime$1, "Function", _classObject, (x$492 = new _nativeFunctionObject.ptr("toString", builtinError_toString, $throwNilPointerError), new x$492.constructor.elem(x$492)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$491 = new Value.ptr(2, new $Int(0)), new x$491.constructor.elem(x$491)), 0) }]), new sliceType(["length"]));
		runtime$1.global.ErrorPrototype = new _object.ptr(runtime$1, "Error", _classObject, $ifaceNil, runtime$1.global.ObjectPrototype, true, $makeMap($String.keyFor, [{ k: "toString", v: new _property.ptr((x$493 = new Value.ptr(5, toString_function$8), new x$493.constructor.elem(x$493)), 65) }, { k: "name", v: new _property.ptr((x$494 = new Value.ptr(3, new $String("Error")), new x$494.constructor.elem(x$494)), 65) }, { k: "message", v: new _property.ptr((x$495 = new Value.ptr(3, new $String("")), new x$495.constructor.elem(x$495)), 65) }]), new sliceType(["toString", "name", "message"]));
		runtime$1.global.Error = new _object.ptr(runtime$1, "Function", _classObject, (x$496 = new _nativeFunctionObject.ptr("Error", builtinError, builtinNewError), new x$496.constructor.elem(x$496)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$497 = new Value.ptr(2, new $Int(1)), new x$497.constructor.elem(x$497)), 0) }, { k: "prototype", v: new _property.ptr((x$498 = new Value.ptr(5, runtime$1.global.ErrorPrototype), new x$498.constructor.elem(x$498)), 0) }]), new sliceType(["length", "prototype"]));
		_key$8 = "constructor"; (runtime$1.global.ErrorPrototype.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$8)] = { k: _key$8, v: new _property.ptr((x$499 = new Value.ptr(5, runtime$1.global.Error), new x$499.constructor.elem(x$499)), 65) };
		runtime$1.global.EvalErrorPrototype = new _object.ptr(runtime$1, "EvalError", _classObject, $ifaceNil, runtime$1.global.ErrorPrototype, true, $makeMap($String.keyFor, [{ k: "name", v: new _property.ptr((x$500 = new Value.ptr(3, new $String("EvalError")), new x$500.constructor.elem(x$500)), 65) }]), new sliceType(["name"]));
		runtime$1.global.EvalError = new _object.ptr(runtime$1, "Function", _classObject, (x$501 = new _nativeFunctionObject.ptr("EvalError", builtinEvalError, builtinNewEvalError), new x$501.constructor.elem(x$501)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$502 = new Value.ptr(2, new $Int(1)), new x$502.constructor.elem(x$502)), 0) }, { k: "prototype", v: new _property.ptr((x$503 = new Value.ptr(5, runtime$1.global.EvalErrorPrototype), new x$503.constructor.elem(x$503)), 0) }]), new sliceType(["length", "prototype"]));
		_key$9 = "constructor"; (runtime$1.global.EvalErrorPrototype.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$9)] = { k: _key$9, v: new _property.ptr((x$504 = new Value.ptr(5, runtime$1.global.EvalError), new x$504.constructor.elem(x$504)), 65) };
		runtime$1.global.TypeErrorPrototype = new _object.ptr(runtime$1, "TypeError", _classObject, $ifaceNil, runtime$1.global.ErrorPrototype, true, $makeMap($String.keyFor, [{ k: "name", v: new _property.ptr((x$505 = new Value.ptr(3, new $String("TypeError")), new x$505.constructor.elem(x$505)), 65) }]), new sliceType(["name"]));
		runtime$1.global.TypeError = new _object.ptr(runtime$1, "Function", _classObject, (x$506 = new _nativeFunctionObject.ptr("TypeError", builtinTypeError, builtinNewTypeError), new x$506.constructor.elem(x$506)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$507 = new Value.ptr(2, new $Int(1)), new x$507.constructor.elem(x$507)), 0) }, { k: "prototype", v: new _property.ptr((x$508 = new Value.ptr(5, runtime$1.global.TypeErrorPrototype), new x$508.constructor.elem(x$508)), 0) }]), new sliceType(["length", "prototype"]));
		_key$10 = "constructor"; (runtime$1.global.TypeErrorPrototype.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$10)] = { k: _key$10, v: new _property.ptr((x$509 = new Value.ptr(5, runtime$1.global.TypeError), new x$509.constructor.elem(x$509)), 65) };
		runtime$1.global.RangeErrorPrototype = new _object.ptr(runtime$1, "RangeError", _classObject, $ifaceNil, runtime$1.global.ErrorPrototype, true, $makeMap($String.keyFor, [{ k: "name", v: new _property.ptr((x$510 = new Value.ptr(3, new $String("RangeError")), new x$510.constructor.elem(x$510)), 65) }]), new sliceType(["name"]));
		runtime$1.global.RangeError = new _object.ptr(runtime$1, "Function", _classObject, (x$511 = new _nativeFunctionObject.ptr("RangeError", builtinRangeError, builtinNewRangeError), new x$511.constructor.elem(x$511)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$512 = new Value.ptr(2, new $Int(1)), new x$512.constructor.elem(x$512)), 0) }, { k: "prototype", v: new _property.ptr((x$513 = new Value.ptr(5, runtime$1.global.RangeErrorPrototype), new x$513.constructor.elem(x$513)), 0) }]), new sliceType(["length", "prototype"]));
		_key$11 = "constructor"; (runtime$1.global.RangeErrorPrototype.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$11)] = { k: _key$11, v: new _property.ptr((x$514 = new Value.ptr(5, runtime$1.global.RangeError), new x$514.constructor.elem(x$514)), 65) };
		runtime$1.global.ReferenceErrorPrototype = new _object.ptr(runtime$1, "ReferenceError", _classObject, $ifaceNil, runtime$1.global.ErrorPrototype, true, $makeMap($String.keyFor, [{ k: "name", v: new _property.ptr((x$515 = new Value.ptr(3, new $String("ReferenceError")), new x$515.constructor.elem(x$515)), 65) }]), new sliceType(["name"]));
		runtime$1.global.ReferenceError = new _object.ptr(runtime$1, "Function", _classObject, (x$516 = new _nativeFunctionObject.ptr("ReferenceError", builtinReferenceError, builtinNewReferenceError), new x$516.constructor.elem(x$516)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$517 = new Value.ptr(2, new $Int(1)), new x$517.constructor.elem(x$517)), 0) }, { k: "prototype", v: new _property.ptr((x$518 = new Value.ptr(5, runtime$1.global.ReferenceErrorPrototype), new x$518.constructor.elem(x$518)), 0) }]), new sliceType(["length", "prototype"]));
		_key$12 = "constructor"; (runtime$1.global.ReferenceErrorPrototype.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$12)] = { k: _key$12, v: new _property.ptr((x$519 = new Value.ptr(5, runtime$1.global.ReferenceError), new x$519.constructor.elem(x$519)), 65) };
		runtime$1.global.SyntaxErrorPrototype = new _object.ptr(runtime$1, "SyntaxError", _classObject, $ifaceNil, runtime$1.global.ErrorPrototype, true, $makeMap($String.keyFor, [{ k: "name", v: new _property.ptr((x$520 = new Value.ptr(3, new $String("SyntaxError")), new x$520.constructor.elem(x$520)), 65) }]), new sliceType(["name"]));
		runtime$1.global.SyntaxError = new _object.ptr(runtime$1, "Function", _classObject, (x$521 = new _nativeFunctionObject.ptr("SyntaxError", builtinSyntaxError, builtinNewSyntaxError), new x$521.constructor.elem(x$521)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$522 = new Value.ptr(2, new $Int(1)), new x$522.constructor.elem(x$522)), 0) }, { k: "prototype", v: new _property.ptr((x$523 = new Value.ptr(5, runtime$1.global.SyntaxErrorPrototype), new x$523.constructor.elem(x$523)), 0) }]), new sliceType(["length", "prototype"]));
		_key$13 = "constructor"; (runtime$1.global.SyntaxErrorPrototype.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$13)] = { k: _key$13, v: new _property.ptr((x$524 = new Value.ptr(5, runtime$1.global.SyntaxError), new x$524.constructor.elem(x$524)), 65) };
		runtime$1.global.URIErrorPrototype = new _object.ptr(runtime$1, "URIError", _classObject, $ifaceNil, runtime$1.global.ErrorPrototype, true, $makeMap($String.keyFor, [{ k: "name", v: new _property.ptr((x$525 = new Value.ptr(3, new $String("URIError")), new x$525.constructor.elem(x$525)), 65) }]), new sliceType(["name"]));
		runtime$1.global.URIError = new _object.ptr(runtime$1, "Function", _classObject, (x$526 = new _nativeFunctionObject.ptr("URIError", builtinURIError, builtinNewURIError), new x$526.constructor.elem(x$526)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$527 = new Value.ptr(2, new $Int(1)), new x$527.constructor.elem(x$527)), 0) }, { k: "prototype", v: new _property.ptr((x$528 = new Value.ptr(5, runtime$1.global.URIErrorPrototype), new x$528.constructor.elem(x$528)), 0) }]), new sliceType(["length", "prototype"]));
		_key$14 = "constructor"; (runtime$1.global.URIErrorPrototype.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$14)] = { k: _key$14, v: new _property.ptr((x$529 = new Value.ptr(5, runtime$1.global.URIError), new x$529.constructor.elem(x$529)), 65) };
		parse_function$1 = new _object.ptr(runtime$1, "Function", _classObject, (x$531 = new _nativeFunctionObject.ptr("parse", builtinJSON_parse, $throwNilPointerError), new x$531.constructor.elem(x$531)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$530 = new Value.ptr(2, new $Int(2)), new x$530.constructor.elem(x$530)), 0) }]), new sliceType(["length"]));
		stringify_function = new _object.ptr(runtime$1, "Function", _classObject, (x$533 = new _nativeFunctionObject.ptr("stringify", builtinJSON_stringify, $throwNilPointerError), new x$533.constructor.elem(x$533)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$532 = new Value.ptr(2, new $Int(3)), new x$532.constructor.elem(x$532)), 0) }]), new sliceType(["length"]));
		runtime$1.global.JSON = new _object.ptr(runtime$1, "JSON", _classObject, $ifaceNil, runtime$1.global.ObjectPrototype, true, $makeMap($String.keyFor, [{ k: "parse", v: new _property.ptr((x$534 = new Value.ptr(5, parse_function$1), new x$534.constructor.elem(x$534)), 65) }, { k: "stringify", v: new _property.ptr((x$535 = new Value.ptr(5, stringify_function), new x$535.constructor.elem(x$535)), 65) }]), new sliceType(["parse", "stringify"]));
		eval_function = new _object.ptr(runtime$1, "Function", _classObject, (x$537 = new _nativeFunctionObject.ptr("eval", builtinGlobal_eval, $throwNilPointerError), new x$537.constructor.elem(x$537)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$536 = new Value.ptr(2, new $Int(1)), new x$536.constructor.elem(x$536)), 0) }]), new sliceType(["length"]));
		parseInt_function = new _object.ptr(runtime$1, "Function", _classObject, (x$539 = new _nativeFunctionObject.ptr("parseInt", builtinGlobal_parseInt, $throwNilPointerError), new x$539.constructor.elem(x$539)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$538 = new Value.ptr(2, new $Int(2)), new x$538.constructor.elem(x$538)), 0) }]), new sliceType(["length"]));
		parseFloat_function = new _object.ptr(runtime$1, "Function", _classObject, (x$541 = new _nativeFunctionObject.ptr("parseFloat", builtinGlobal_parseFloat, $throwNilPointerError), new x$541.constructor.elem(x$541)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$540 = new Value.ptr(2, new $Int(1)), new x$540.constructor.elem(x$540)), 0) }]), new sliceType(["length"]));
		isNaN_function = new _object.ptr(runtime$1, "Function", _classObject, (x$543 = new _nativeFunctionObject.ptr("isNaN", builtinGlobal_isNaN, $throwNilPointerError), new x$543.constructor.elem(x$543)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$542 = new Value.ptr(2, new $Int(1)), new x$542.constructor.elem(x$542)), 0) }]), new sliceType(["length"]));
		isFinite_function = new _object.ptr(runtime$1, "Function", _classObject, (x$545 = new _nativeFunctionObject.ptr("isFinite", builtinGlobal_isFinite, $throwNilPointerError), new x$545.constructor.elem(x$545)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$544 = new Value.ptr(2, new $Int(1)), new x$544.constructor.elem(x$544)), 0) }]), new sliceType(["length"]));
		decodeURI_function = new _object.ptr(runtime$1, "Function", _classObject, (x$547 = new _nativeFunctionObject.ptr("decodeURI", builtinGlobal_decodeURI, $throwNilPointerError), new x$547.constructor.elem(x$547)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$546 = new Value.ptr(2, new $Int(1)), new x$546.constructor.elem(x$546)), 0) }]), new sliceType(["length"]));
		decodeURIComponent_function = new _object.ptr(runtime$1, "Function", _classObject, (x$549 = new _nativeFunctionObject.ptr("decodeURIComponent", builtinGlobal_decodeURIComponent, $throwNilPointerError), new x$549.constructor.elem(x$549)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$548 = new Value.ptr(2, new $Int(1)), new x$548.constructor.elem(x$548)), 0) }]), new sliceType(["length"]));
		encodeURI_function = new _object.ptr(runtime$1, "Function", _classObject, (x$551 = new _nativeFunctionObject.ptr("encodeURI", builtinGlobal_encodeURI, $throwNilPointerError), new x$551.constructor.elem(x$551)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$550 = new Value.ptr(2, new $Int(1)), new x$550.constructor.elem(x$550)), 0) }]), new sliceType(["length"]));
		encodeURIComponent_function = new _object.ptr(runtime$1, "Function", _classObject, (x$553 = new _nativeFunctionObject.ptr("encodeURIComponent", builtinGlobal_encodeURIComponent, $throwNilPointerError), new x$553.constructor.elem(x$553)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$552 = new Value.ptr(2, new $Int(1)), new x$552.constructor.elem(x$552)), 0) }]), new sliceType(["length"]));
		escape_function = new _object.ptr(runtime$1, "Function", _classObject, (x$555 = new _nativeFunctionObject.ptr("escape", builtinGlobal_escape, $throwNilPointerError), new x$555.constructor.elem(x$555)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$554 = new Value.ptr(2, new $Int(1)), new x$554.constructor.elem(x$554)), 0) }]), new sliceType(["length"]));
		unescape_function = new _object.ptr(runtime$1, "Function", _classObject, (x$557 = new _nativeFunctionObject.ptr("unescape", builtinGlobal_unescape, $throwNilPointerError), new x$557.constructor.elem(x$557)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$556 = new Value.ptr(2, new $Int(1)), new x$556.constructor.elem(x$556)), 0) }]), new sliceType(["length"]));
		runtime$1.globalObject.property = $makeMap($String.keyFor, [{ k: "eval", v: new _property.ptr((x$558 = new Value.ptr(5, eval_function), new x$558.constructor.elem(x$558)), 65) }, { k: "parseInt", v: new _property.ptr((x$559 = new Value.ptr(5, parseInt_function), new x$559.constructor.elem(x$559)), 65) }, { k: "parseFloat", v: new _property.ptr((x$560 = new Value.ptr(5, parseFloat_function), new x$560.constructor.elem(x$560)), 65) }, { k: "isNaN", v: new _property.ptr((x$561 = new Value.ptr(5, isNaN_function), new x$561.constructor.elem(x$561)), 65) }, { k: "isFinite", v: new _property.ptr((x$562 = new Value.ptr(5, isFinite_function), new x$562.constructor.elem(x$562)), 65) }, { k: "decodeURI", v: new _property.ptr((x$563 = new Value.ptr(5, decodeURI_function), new x$563.constructor.elem(x$563)), 65) }, { k: "decodeURIComponent", v: new _property.ptr((x$564 = new Value.ptr(5, decodeURIComponent_function), new x$564.constructor.elem(x$564)), 65) }, { k: "encodeURI", v: new _property.ptr((x$565 = new Value.ptr(5, encodeURI_function), new x$565.constructor.elem(x$565)), 65) }, { k: "encodeURIComponent", v: new _property.ptr((x$566 = new Value.ptr(5, encodeURIComponent_function), new x$566.constructor.elem(x$566)), 65) }, { k: "escape", v: new _property.ptr((x$567 = new Value.ptr(5, escape_function), new x$567.constructor.elem(x$567)), 65) }, { k: "unescape", v: new _property.ptr((x$568 = new Value.ptr(5, unescape_function), new x$568.constructor.elem(x$568)), 65) }, { k: "Object", v: new _property.ptr((x$569 = new Value.ptr(5, runtime$1.global.Object), new x$569.constructor.elem(x$569)), 65) }, { k: "Function", v: new _property.ptr((x$570 = new Value.ptr(5, runtime$1.global.Function), new x$570.constructor.elem(x$570)), 65) }, { k: "Array", v: new _property.ptr((x$571 = new Value.ptr(5, runtime$1.global.Array), new x$571.constructor.elem(x$571)), 65) }, { k: "String", v: new _property.ptr((x$572 = new Value.ptr(5, runtime$1.global.String), new x$572.constructor.elem(x$572)), 65) }, { k: "Boolean", v: new _property.ptr((x$573 = new Value.ptr(5, runtime$1.global.Boolean), new x$573.constructor.elem(x$573)), 65) }, { k: "Number", v: new _property.ptr((x$574 = new Value.ptr(5, runtime$1.global.Number), new x$574.constructor.elem(x$574)), 65) }, { k: "Math", v: new _property.ptr((x$575 = new Value.ptr(5, runtime$1.global.Math), new x$575.constructor.elem(x$575)), 65) }, { k: "Date", v: new _property.ptr((x$576 = new Value.ptr(5, runtime$1.global.Date), new x$576.constructor.elem(x$576)), 65) }, { k: "RegExp", v: new _property.ptr((x$577 = new Value.ptr(5, runtime$1.global.RegExp), new x$577.constructor.elem(x$577)), 65) }, { k: "Error", v: new _property.ptr((x$578 = new Value.ptr(5, runtime$1.global.Error), new x$578.constructor.elem(x$578)), 65) }, { k: "EvalError", v: new _property.ptr((x$579 = new Value.ptr(5, runtime$1.global.EvalError), new x$579.constructor.elem(x$579)), 65) }, { k: "TypeError", v: new _property.ptr((x$580 = new Value.ptr(5, runtime$1.global.TypeError), new x$580.constructor.elem(x$580)), 65) }, { k: "RangeError", v: new _property.ptr((x$581 = new Value.ptr(5, runtime$1.global.RangeError), new x$581.constructor.elem(x$581)), 65) }, { k: "ReferenceError", v: new _property.ptr((x$582 = new Value.ptr(5, runtime$1.global.ReferenceError), new x$582.constructor.elem(x$582)), 65) }, { k: "SyntaxError", v: new _property.ptr((x$583 = new Value.ptr(5, runtime$1.global.SyntaxError), new x$583.constructor.elem(x$583)), 65) }, { k: "URIError", v: new _property.ptr((x$584 = new Value.ptr(5, runtime$1.global.URIError), new x$584.constructor.elem(x$584)), 65) }, { k: "JSON", v: new _property.ptr((x$585 = new Value.ptr(5, runtime$1.global.JSON), new x$585.constructor.elem(x$585)), 65) }, { k: "undefined", v: new _property.ptr((x$586 = new Value.ptr(0, $ifaceNil), new x$586.constructor.elem(x$586)), 0) }, { k: "NaN", v: new _property.ptr((x$587 = new Value.ptr(2, new $Float64(math.NaN())), new x$587.constructor.elem(x$587)), 0) }, { k: "Infinity", v: new _property.ptr((x$588 = new Value.ptr(2, new $Float64(math.Inf(1))), new x$588.constructor.elem(x$588)), 0) }]);
		runtime$1.globalObject.propertyOrder = new sliceType(["eval", "parseInt", "parseFloat", "isNaN", "isFinite", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", "escape", "unescape", "Object", "Function", "Array", "String", "Boolean", "Number", "Math", "Date", "RegExp", "Error", "EvalError", "TypeError", "RangeError", "ReferenceError", "SyntaxError", "URIError", "JSON", "undefined", "NaN", "Infinity"]);
	};
	newConsoleObject = function(runtime$1) {
		var $ptr, assert_function, debug_function, dir_function, error_function, info_function, log_function, runtime$1, timeEnd_function, time_function, trace_function, warn_function, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		log_function = new _object.ptr(runtime$1, "Function", _classObject, (x$1 = new _nativeFunctionObject.ptr("log", builtinConsole_log, $throwNilPointerError), new x$1.constructor.elem(x$1)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x = new Value.ptr(2, new $Int(0)), new x.constructor.elem(x)), 0) }]), new sliceType(["length"]));
		debug_function = new _object.ptr(runtime$1, "Function", _classObject, (x$3 = new _nativeFunctionObject.ptr("debug", builtinConsole_log, $throwNilPointerError), new x$3.constructor.elem(x$3)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$2 = new Value.ptr(2, new $Int(0)), new x$2.constructor.elem(x$2)), 0) }]), new sliceType(["length"]));
		info_function = new _object.ptr(runtime$1, "Function", _classObject, (x$5 = new _nativeFunctionObject.ptr("info", builtinConsole_log, $throwNilPointerError), new x$5.constructor.elem(x$5)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$4 = new Value.ptr(2, new $Int(0)), new x$4.constructor.elem(x$4)), 0) }]), new sliceType(["length"]));
		error_function = new _object.ptr(runtime$1, "Function", _classObject, (x$7 = new _nativeFunctionObject.ptr("error", builtinConsole_error, $throwNilPointerError), new x$7.constructor.elem(x$7)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$6 = new Value.ptr(2, new $Int(0)), new x$6.constructor.elem(x$6)), 0) }]), new sliceType(["length"]));
		warn_function = new _object.ptr(runtime$1, "Function", _classObject, (x$9 = new _nativeFunctionObject.ptr("warn", builtinConsole_error, $throwNilPointerError), new x$9.constructor.elem(x$9)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$8 = new Value.ptr(2, new $Int(0)), new x$8.constructor.elem(x$8)), 0) }]), new sliceType(["length"]));
		dir_function = new _object.ptr(runtime$1, "Function", _classObject, (x$11 = new _nativeFunctionObject.ptr("dir", builtinConsole_dir, $throwNilPointerError), new x$11.constructor.elem(x$11)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$10 = new Value.ptr(2, new $Int(0)), new x$10.constructor.elem(x$10)), 0) }]), new sliceType(["length"]));
		time_function = new _object.ptr(runtime$1, "Function", _classObject, (x$13 = new _nativeFunctionObject.ptr("time", builtinConsole_time, $throwNilPointerError), new x$13.constructor.elem(x$13)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$12 = new Value.ptr(2, new $Int(0)), new x$12.constructor.elem(x$12)), 0) }]), new sliceType(["length"]));
		timeEnd_function = new _object.ptr(runtime$1, "Function", _classObject, (x$15 = new _nativeFunctionObject.ptr("timeEnd", builtinConsole_timeEnd, $throwNilPointerError), new x$15.constructor.elem(x$15)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$14 = new Value.ptr(2, new $Int(0)), new x$14.constructor.elem(x$14)), 0) }]), new sliceType(["length"]));
		trace_function = new _object.ptr(runtime$1, "Function", _classObject, (x$17 = new _nativeFunctionObject.ptr("trace", builtinConsole_trace, $throwNilPointerError), new x$17.constructor.elem(x$17)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$16 = new Value.ptr(2, new $Int(0)), new x$16.constructor.elem(x$16)), 0) }]), new sliceType(["length"]));
		assert_function = new _object.ptr(runtime$1, "Function", _classObject, (x$19 = new _nativeFunctionObject.ptr("assert", builtinConsole_assert, $throwNilPointerError), new x$19.constructor.elem(x$19)), runtime$1.global.FunctionPrototype, true, $makeMap($String.keyFor, [{ k: "length", v: new _property.ptr((x$18 = new Value.ptr(2, new $Int(0)), new x$18.constructor.elem(x$18)), 0) }]), new sliceType(["length"]));
		return new _object.ptr(runtime$1, "Object", _classObject, $ifaceNil, runtime$1.global.ObjectPrototype, true, $makeMap($String.keyFor, [{ k: "log", v: new _property.ptr((x$20 = new Value.ptr(5, log_function), new x$20.constructor.elem(x$20)), 65) }, { k: "debug", v: new _property.ptr((x$21 = new Value.ptr(5, debug_function), new x$21.constructor.elem(x$21)), 65) }, { k: "info", v: new _property.ptr((x$22 = new Value.ptr(5, info_function), new x$22.constructor.elem(x$22)), 65) }, { k: "error", v: new _property.ptr((x$23 = new Value.ptr(5, error_function), new x$23.constructor.elem(x$23)), 65) }, { k: "warn", v: new _property.ptr((x$24 = new Value.ptr(5, warn_function), new x$24.constructor.elem(x$24)), 65) }, { k: "dir", v: new _property.ptr((x$25 = new Value.ptr(5, dir_function), new x$25.constructor.elem(x$25)), 65) }, { k: "time", v: new _property.ptr((x$26 = new Value.ptr(5, time_function), new x$26.constructor.elem(x$26)), 65) }, { k: "timeEnd", v: new _property.ptr((x$27 = new Value.ptr(5, timeEnd_function), new x$27.constructor.elem(x$27)), 65) }, { k: "trace", v: new _property.ptr((x$28 = new Value.ptr(5, trace_function), new x$28.constructor.elem(x$28)), 65) }, { k: "assert", v: new _property.ptr((x$29 = new Value.ptr(5, assert_function), new x$29.constructor.elem(x$29)), 65) }]), new sliceType(["log", "debug", "info", "error", "warn", "dir", "time", "timeEnd", "trace", "assert"]));
	};
	toValue_int = function(value) {
		var $ptr, value;
		return new Value.ptr(2, new $Int(value));
	};
	toValue_int32 = function(value) {
		var $ptr, value;
		return new Value.ptr(2, new $Int32(value));
	};
	toValue_int64 = function(value) {
		var $ptr, value;
		return new Value.ptr(2, value);
	};
	toValue_uint16 = function(value) {
		var $ptr, value;
		return new Value.ptr(2, new $Uint16(value));
	};
	toValue_uint32 = function(value) {
		var $ptr, value;
		return new Value.ptr(2, new $Uint32(value));
	};
	toValue_float64 = function(value) {
		var $ptr, value;
		return new Value.ptr(2, new $Float64(value));
	};
	toValue_string = function(value) {
		var $ptr, value;
		return new Value.ptr(3, new $String(value));
	};
	toValue_string16 = function(value) {
		var $ptr, value;
		return new Value.ptr(3, value);
	};
	toValue_bool = function(value) {
		var $ptr, value;
		return new Value.ptr(4, new $Bool(value));
	};
	toValue_object = function(value) {
		var $ptr, value;
		return new Value.ptr(5, value);
	};
	newObject = function(runtime$1, class$1) {
		var $ptr, class$1, runtime$1, self;
		self = new _object.ptr(runtime$1, class$1, _classObject, $ifaceNil, ptrType$4.nil, true, {}, sliceType.nil);
		return self;
	};
	_object.ptr.prototype.getOwnProperty = function(name) {
		var $ptr, _r$13, name, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; name = $f.name; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.objectClass.getOwnProperty(self, name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _object.ptr.prototype.getOwnProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.name = name; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_object.prototype.getOwnProperty = function(name) { return this.$val.getOwnProperty(name); };
	_object.ptr.prototype.getProperty = function(name) {
		var $ptr, _r$13, name, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; name = $f.name; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.objectClass.getProperty(self, name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _object.ptr.prototype.getProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.name = name; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_object.prototype.getProperty = function(name) { return this.$val.getProperty(name); };
	_object.ptr.prototype.get = function(name) {
		var $ptr, _r$13, name, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; name = $f.name; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.objectClass.get(self, name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _object.ptr.prototype.get }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.name = name; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_object.prototype.get = function(name) { return this.$val.get(name); };
	_object.ptr.prototype.canPut = function(name) {
		var $ptr, _r$13, name, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; name = $f.name; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.objectClass.canPut(self, name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _object.ptr.prototype.canPut }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.name = name; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_object.prototype.canPut = function(name) { return this.$val.canPut(name); };
	_object.ptr.prototype.put = function(name, value, throw$1) {
		var $ptr, name, self, throw$1, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; name = $f.name; self = $f.self; throw$1 = $f.throw$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = this;
		$r = self.objectClass.put(self, name, value, throw$1); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _object.ptr.prototype.put }; } $f.$ptr = $ptr; $f.name = name; $f.self = self; $f.throw$1 = throw$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_object.prototype.put = function(name, value, throw$1) { return this.$val.put(name, value, throw$1); };
	_object.ptr.prototype.hasProperty = function(name) {
		var $ptr, _r$13, name, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; name = $f.name; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.objectClass.hasProperty(self, name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _object.ptr.prototype.hasProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.name = name; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_object.prototype.hasProperty = function(name) { return this.$val.hasProperty(name); };
	_object.ptr.prototype.hasOwnProperty = function(name) {
		var $ptr, _r$13, name, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; name = $f.name; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.objectClass.hasOwnProperty(self, name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _object.ptr.prototype.hasOwnProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.name = name; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_object.prototype.hasOwnProperty = function(name) { return this.$val.hasOwnProperty(name); };
	_object.ptr.prototype.DefaultValue = function(hint) {
		var $ptr, _i, _r$13, _r$14, _r$15, _ref, hint, method, methodName, methodSequence, result, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _ref = $f._ref; hint = $f.hint; method = $f.method; methodName = $f.methodName; methodSequence = $f.methodSequence; result = $f.result; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		if (hint === 0) {
			if (self.class$1 === "Date") {
				hint = 1;
			} else {
				hint = 2;
			}
		}
		methodSequence = new sliceType(["valueOf", "toString"]);
		if (hint === 1) {
			methodSequence = new sliceType(["toString", "valueOf"]);
		}
		_ref = methodSequence;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			methodName = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$13 = self.get(methodName); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			method = $clone(_r$13, Value);
			/* */ if (method.isCallable()) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (method.isCallable()) { */ case 4:
				_r$14 = method._object().call(toValue_object(self), sliceType$5.nil, false, nativeFrame); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				result = $clone(_r$14, Value);
				if (result.IsPrimitive()) {
					return result;
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$15 = self.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		$panic(_r$15);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _object.ptr.prototype.DefaultValue }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._ref = _ref; $f.hint = hint; $f.method = method; $f.methodName = methodName; $f.methodSequence = methodSequence; $f.result = result; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_object.prototype.DefaultValue = function(hint) { return this.$val.DefaultValue(hint); };
	_object.ptr.prototype.String = function() {
		var $ptr, _r$13, _r$14, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.DefaultValue(1); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = _r$13.string(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _object.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_object.prototype.String = function() { return this.$val.String(); };
	_object.ptr.prototype.defineProperty = function(name, value, mode, throw$1) {
		var $ptr, _r$13, mode, name, self, throw$1, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; mode = $f.mode; name = $f.name; self = $f.self; throw$1 = $f.throw$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = this;
		_r$13 = self.defineOwnProperty(name, new _property.ptr(new value.constructor.elem(value), mode), throw$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _object.ptr.prototype.defineProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.mode = mode; $f.name = name; $f.self = self; $f.throw$1 = throw$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_object.prototype.defineProperty = function(name, value, mode, throw$1) { return this.$val.defineProperty(name, value, mode, throw$1); };
	_object.ptr.prototype.defineOwnProperty = function(name, descriptor, throw$1) {
		var $ptr, _r$13, descriptor, name, self, throw$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; descriptor = $f.descriptor; name = $f.name; self = $f.self; throw$1 = $f.throw$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		descriptor = $clone(descriptor, _property);
		self = this;
		_r$13 = self.objectClass.defineOwnProperty(self, name, descriptor, throw$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _object.ptr.prototype.defineOwnProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.descriptor = descriptor; $f.name = name; $f.self = self; $f.throw$1 = throw$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_object.prototype.defineOwnProperty = function(name, descriptor, throw$1) { return this.$val.defineOwnProperty(name, descriptor, throw$1); };
	_object.ptr.prototype.delete$ = function(name, throw$1) {
		var $ptr, _r$13, name, self, throw$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; name = $f.name; self = $f.self; throw$1 = $f.throw$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.objectClass.delete$8(self, name, throw$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _object.ptr.prototype.delete$ }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.name = name; $f.self = self; $f.throw$1 = throw$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_object.prototype.delete$ = function(name, throw$1) { return this.$val.delete$(name, throw$1); };
	_object.ptr.prototype.enumerate = function(all, each) {
		var $ptr, all, each, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; all = $f.all; each = $f.each; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		$r = self.objectClass.enumerate(self, all, each); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _object.ptr.prototype.enumerate }; } $f.$ptr = $ptr; $f.all = all; $f.each = each; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_object.prototype.enumerate = function(all, each) { return this.$val.enumerate(all, each); };
	_object.ptr.prototype._read = function(name) {
		var $ptr, _entry, _tuple$1, exists, name, property, self;
		self = this;
		_tuple$1 = (_entry = self.property[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [new _property.ptr($ifaceNil, 0), false]);
		property = $clone(_tuple$1[0], _property);
		exists = _tuple$1[1];
		return [property, exists];
	};
	_object.prototype._read = function(name) { return this.$val._read(name); };
	_object.ptr.prototype._write = function(name, value, mode) {
		var $ptr, _entry, _key, _tuple$1, exists, mode, name, self, value, x;
		self = this;
		if ($interfaceIsEqual(value, $ifaceNil)) {
			value = (x = new Value.ptr(0, $ifaceNil), new x.constructor.elem(x));
		}
		_tuple$1 = (_entry = self.property[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [new _property.ptr($ifaceNil, 0), false]);
		exists = _tuple$1[1];
		_key = name; (self.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new _property.ptr(value, mode) };
		if (!exists) {
			self.propertyOrder = $append(self.propertyOrder, name);
		}
	};
	_object.prototype._write = function(name, value, mode) { return this.$val._write(name, value, mode); };
	_object.ptr.prototype._delete = function(name) {
		var $ptr, _entry, _i, _ref, _tuple$1, exists, index, name, property, self;
		self = this;
		_tuple$1 = (_entry = self.property[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [new _property.ptr($ifaceNil, 0), false]);
		exists = _tuple$1[1];
		delete self.property[$String.keyFor(name)];
		if (exists) {
			_ref = self.propertyOrder;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				index = _i;
				property = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (name === property) {
					if (index === (self.propertyOrder.$length - 1 >> 0)) {
						self.propertyOrder = $subslice(self.propertyOrder, 0, index);
					} else {
						self.propertyOrder = $appendSlice($subslice(self.propertyOrder, 0, index), $subslice(self.propertyOrder, (index + 1 >> 0)));
					}
				}
				_i++;
			}
		}
	};
	_object.prototype._delete = function(name) { return this.$val._delete(name); };
	objectEnumerate = function(self, all, each) {
		var $ptr, _entry, _i, _r$13, _ref, all, each, name, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _r$13 = $f._r$13; _ref = $f._ref; all = $f.all; each = $f.each; name = $f.name; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = self.propertyOrder;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			name = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (all || (_entry = self.property[$String.keyFor(name)], _entry !== undefined ? _entry.v : new _property.ptr($ifaceNil, 0)).enumerable()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (all || (_entry = self.property[$String.keyFor(name)], _entry !== undefined ? _entry.v : new _property.ptr($ifaceNil, 0)).enumerable()) { */ case 3:
				_r$13 = each(name); /* */ $s = 7; case 7: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				/* */ if (!_r$13) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!_r$13) { */ case 5:
					return;
				/* } */ case 6:
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: objectEnumerate }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._r$13 = _r$13; $f._ref = _ref; $f.all = all; $f.each = each; $f.name = name; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	init = function() {
		var $ptr;
		_classObject = new _objectClass.ptr(objectGetOwnProperty, objectGetProperty, objectGet, objectCanPut, objectPut, objectHasProperty, objectHasOwnProperty, objectDefineOwnProperty, objectDelete, objectEnumerate, objectClone, $throwNilPointerError);
		_classArray = new _objectClass.ptr(objectGetOwnProperty, objectGetProperty, objectGet, objectCanPut, objectPut, objectHasProperty, objectHasOwnProperty, arrayDefineOwnProperty, objectDelete, objectEnumerate, objectClone, $throwNilPointerError);
		_classString = new _objectClass.ptr(stringGetOwnProperty, objectGetProperty, objectGet, objectCanPut, objectPut, objectHasProperty, objectHasOwnProperty, objectDefineOwnProperty, objectDelete, stringEnumerate, objectClone, $throwNilPointerError);
		_classArguments = new _objectClass.ptr(argumentsGetOwnProperty, objectGetProperty, argumentsGet, objectCanPut, objectPut, objectHasProperty, objectHasOwnProperty, argumentsDefineOwnProperty, argumentsDelete, objectEnumerate, objectClone, $throwNilPointerError);
		_classGoStruct = new _objectClass.ptr(goStructGetOwnProperty, objectGetProperty, objectGet, goStructCanPut, goStructPut, objectHasProperty, objectHasOwnProperty, objectDefineOwnProperty, objectDelete, goStructEnumerate, objectClone, goStructMarshalJSON);
		_classGoMap = new _objectClass.ptr(goMapGetOwnProperty, objectGetProperty, objectGet, objectCanPut, objectPut, objectHasProperty, objectHasOwnProperty, goMapDefineOwnProperty, goMapDelete, goMapEnumerate, objectClone, $throwNilPointerError);
		_classGoArray = new _objectClass.ptr(goArrayGetOwnProperty, objectGetProperty, objectGet, objectCanPut, objectPut, objectHasProperty, objectHasOwnProperty, goArrayDefineOwnProperty, goArrayDelete, goArrayEnumerate, objectClone, $throwNilPointerError);
		_classGoSlice = new _objectClass.ptr(goSliceGetOwnProperty, objectGetProperty, objectGet, objectCanPut, objectPut, objectHasProperty, objectHasOwnProperty, goSliceDefineOwnProperty, goSliceDelete, goSliceEnumerate, objectClone, $throwNilPointerError);
	};
	objectGetOwnProperty = function(self, name) {
		var $ptr, _tuple$1, exists, name, property, self;
		_tuple$1 = self._read(name);
		property = $clone(_tuple$1[0], _property);
		exists = _tuple$1[1];
		if (!exists) {
			return ptrType$14.nil;
		}
		return property;
	};
	objectGetProperty = function(self, name) {
		var $ptr, _r$13, _r$14, name, property, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; name = $f.name; property = $f.property; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = self.getOwnProperty(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		property = _r$13;
		if (!(property === ptrType$14.nil)) {
			return property;
		}
		/* */ if (!(self.prototype === ptrType$4.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(self.prototype === ptrType$4.nil)) { */ case 2:
			_r$14 = self.prototype.getProperty(name); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$14;
		/* } */ case 3:
		return ptrType$14.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: objectGetProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.name = name; $f.property = property; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	objectGet = function(self, name) {
		var $ptr, _r$13, _r$14, name, property, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; name = $f.name; property = $f.property; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = self.getProperty(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		property = _r$13;
		/* */ if (!(property === ptrType$14.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(property === ptrType$14.nil)) { */ case 2:
			_r$14 = property.get(self); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$14;
		/* } */ case 3:
		return new Value.ptr(0, $ifaceNil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: objectGet }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.name = name; $f.property = property; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	objectCanPut = function(self, name) {
		var $ptr, _r$13, _tuple$1, canPut, name, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _tuple$1 = $f._tuple$1; canPut = $f.canPut; name = $f.name; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = _objectCanPut(self, name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		canPut = _tuple$1[0];
		return canPut;
		/* */ } return; } if ($f === undefined) { $f = { $blk: objectCanPut }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._tuple$1 = _tuple$1; $f.canPut = canPut; $f.name = name; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_objectCanPut = function(self, name) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _ref, _ref$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, canPut, name, property, propertyValue, propertyValue$1, propertyValue$2, propertyValue$3, propertyValue$4, propertyValue$5, self, setter, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; canPut = $f.canPut; name = $f.name; property = $f.property; propertyValue = $f.propertyValue; propertyValue$1 = $f.propertyValue$1; propertyValue$2 = $f.propertyValue$2; propertyValue$3 = $f.propertyValue$3; propertyValue$4 = $f.propertyValue$4; propertyValue$5 = $f.propertyValue$5; self = $f.self; setter = $f.setter; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		canPut = false;
		property = ptrType$14.nil;
		setter = ptrType$4.nil;
		_r$13 = self.getOwnProperty(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		property = _r$13;
		/* */ if (!(property === ptrType$14.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(property === ptrType$14.nil)) { */ case 2:
			_ref = property.value;
			/* */ if ($assertType(_ref, Value, true)[1]) { $s = 4; continue; }
			/* */ if ($assertType(_ref, _propertyGetSet, true)[1]) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ($assertType(_ref, Value, true)[1]) { */ case 4:
				propertyValue = _ref.$val;
				canPut = property.writable();
				return [canPut, property, setter];
			/* } else if ($assertType(_ref, _propertyGetSet, true)[1]) { */ case 5:
				propertyValue$1 = _ref.$val;
				setter = propertyValue$1[1];
				canPut = !(setter === ptrType$4.nil);
				return [canPut, property, setter];
			/* } else { */ case 6:
				propertyValue$2 = _ref;
				_r$14 = self.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 8; case 8: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$panic(_r$14);
			/* } */ case 7:
		/* } */ case 3:
		if (self.prototype === ptrType$4.nil) {
			_tmp = self.extensible;
			_tmp$1 = ptrType$14.nil;
			_tmp$2 = ptrType$4.nil;
			canPut = _tmp;
			property = _tmp$1;
			setter = _tmp$2;
			return [canPut, property, setter];
		}
		_r$15 = self.prototype.getProperty(name); /* */ $s = 9; case 9: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		property = _r$15;
		if (property === ptrType$14.nil) {
			_tmp$3 = self.extensible;
			_tmp$4 = ptrType$14.nil;
			_tmp$5 = ptrType$4.nil;
			canPut = _tmp$3;
			property = _tmp$4;
			setter = _tmp$5;
			return [canPut, property, setter];
		}
		_ref$1 = property.value;
		/* */ if ($assertType(_ref$1, Value, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref$1, _propertyGetSet, true)[1]) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if ($assertType(_ref$1, Value, true)[1]) { */ case 10:
			propertyValue$3 = _ref$1.$val;
			if (!self.extensible) {
				_tmp$6 = false;
				_tmp$7 = ptrType$14.nil;
				_tmp$8 = ptrType$4.nil;
				canPut = _tmp$6;
				property = _tmp$7;
				setter = _tmp$8;
				return [canPut, property, setter];
			}
			_tmp$9 = property.writable();
			_tmp$10 = ptrType$14.nil;
			_tmp$11 = ptrType$4.nil;
			canPut = _tmp$9;
			property = _tmp$10;
			setter = _tmp$11;
			return [canPut, property, setter];
		/* } else if ($assertType(_ref$1, _propertyGetSet, true)[1]) { */ case 11:
			propertyValue$4 = _ref$1.$val;
			setter = propertyValue$4[1];
			canPut = !(setter === ptrType$4.nil);
			return [canPut, property, setter];
		/* } else { */ case 12:
			propertyValue$5 = _ref$1;
			_r$16 = self.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 14; case 14: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			$panic(_r$16);
		/* } */ case 13:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _objectCanPut }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.canPut = canPut; $f.name = name; $f.property = property; $f.propertyValue = propertyValue; $f.propertyValue$1 = propertyValue$1; $f.propertyValue$2 = propertyValue$2; $f.propertyValue$3 = propertyValue$3; $f.propertyValue$4 = propertyValue$4; $f.propertyValue$5 = propertyValue$5; $f.self = self; $f.setter = setter; $f.$s = $s; $f.$r = $r; return $f;
	};
	objectPut = function(self, name, value, throw$1) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _ref, _tuple$1, _tuple$2, canPut, getSet, isAccessor, name, property, property$1, propertyValue, propertyValue$1, propertyValue$2, self, setter, throw$1, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _ref = $f._ref; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; canPut = $f.canPut; getSet = $f.getSet; isAccessor = $f.isAccessor; name = $f.name; property = $f.property; property$1 = $f.property$1; propertyValue = $f.propertyValue; propertyValue$1 = $f.propertyValue$1; propertyValue$2 = $f.propertyValue$2; self = $f.self; setter = $f.setter; throw$1 = $f.throw$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		_r$13 = _objectCanPut(self, name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		canPut = _tuple$1[0];
		property = _tuple$1[1];
		setter = _tuple$1[2];
		/* */ if (!canPut) { $s = 2; continue; }
		/* */ if (!(setter === ptrType$4.nil)) { $s = 3; continue; }
		/* */ if (!(property === ptrType$14.nil)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!canPut) { */ case 2:
			_r$14 = self.runtime.typeErrorResult(throw$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$14;
			$s = 6; continue;
		/* } else if (!(setter === ptrType$4.nil)) { */ case 3:
			_r$15 = toValue(self); /* */ $s = 8; case 8: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = setter.call(_r$15, new sliceType$5([$clone(value, Value)]), false, nativeFrame); /* */ $s = 9; case 9: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$16;
			$s = 6; continue;
		/* } else if (!(property === ptrType$14.nil)) { */ case 4:
			property.value = new value.constructor.elem(value);
			_r$17 = self.defineOwnProperty(name, property, throw$1); /* */ $s = 10; case 10: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_r$17;
			$s = 6; continue;
		/* } else { */ case 5:
			_r$18 = self.defineProperty(name, value, 73, throw$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_r$18;
		/* } */ case 6:
		return;
		_r$19 = self.canPut(name); /* */ $s = 14; case 14: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		/* */ if (!_r$19) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (!_r$19) { */ case 12:
			_r$20 = self.runtime.typeErrorResult(throw$1); /* */ $s = 15; case 15: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_r$20;
			return;
		/* } */ case 13:
		_r$21 = self.getOwnProperty(name); /* */ $s = 16; case 16: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		property$1 = _r$21;
		/* */ if (property$1 === ptrType$14.nil) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (property$1 === ptrType$14.nil) { */ case 17:
			_r$22 = self.getProperty(name); /* */ $s = 20; case 20: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			property$1 = _r$22;
			/* */ if (!(property$1 === ptrType$14.nil)) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (!(property$1 === ptrType$14.nil)) { */ case 21:
				_tuple$2 = $assertType(property$1.value, _propertyGetSet, true);
				getSet = $clone(_tuple$2[0], _propertyGetSet);
				isAccessor = _tuple$2[1];
				/* */ if (isAccessor) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if (isAccessor) { */ case 23:
					_r$23 = toValue(self); /* */ $s = 25; case 25: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					_r$24 = getSet[1].call(_r$23, new sliceType$5([$clone(value, Value)]), false, nativeFrame); /* */ $s = 26; case 26: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					_r$24;
					return;
				/* } */ case 24:
			/* } */ case 22:
			_r$25 = self.defineProperty(name, value, 73, throw$1); /* */ $s = 27; case 27: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			_r$25;
			$s = 19; continue;
		/* } else { */ case 18:
			_ref = property$1.value;
			/* */ if ($assertType(_ref, Value, true)[1]) { $s = 28; continue; }
			/* */ if ($assertType(_ref, _propertyGetSet, true)[1]) { $s = 29; continue; }
			/* */ $s = 30; continue;
			/* if ($assertType(_ref, Value, true)[1]) { */ case 28:
				propertyValue = _ref.$val;
				property$1.value = new value.constructor.elem(value);
				_r$26 = self.defineOwnProperty(name, property$1, throw$1); /* */ $s = 32; case 32: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				_r$26;
				$s = 31; continue;
			/* } else if ($assertType(_ref, _propertyGetSet, true)[1]) { */ case 29:
				propertyValue$1 = _ref.$val;
				/* */ if (!(propertyValue$1[1] === ptrType$4.nil)) { $s = 33; continue; }
				/* */ $s = 34; continue;
				/* if (!(propertyValue$1[1] === ptrType$4.nil)) { */ case 33:
					_r$27 = toValue(self); /* */ $s = 35; case 35: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					_r$28 = propertyValue$1[1].call(_r$27, new sliceType$5([$clone(value, Value)]), false, nativeFrame); /* */ $s = 36; case 36: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
					_r$28;
					return;
				/* } */ case 34:
				/* */ if (throw$1) { $s = 37; continue; }
				/* */ $s = 38; continue;
				/* if (throw$1) { */ case 37:
					_r$29 = self.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 39; case 39: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					$panic(_r$29);
				/* } */ case 38:
				$s = 31; continue;
			/* } else { */ case 30:
				propertyValue$2 = _ref;
				_r$30 = self.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 40; case 40: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				$panic(_r$30);
			/* } */ case 31:
		/* } */ case 19:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: objectPut }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._ref = _ref; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.canPut = canPut; $f.getSet = getSet; $f.isAccessor = isAccessor; $f.name = name; $f.property = property; $f.property$1 = property$1; $f.propertyValue = propertyValue; $f.propertyValue$1 = propertyValue$1; $f.propertyValue$2 = propertyValue$2; $f.self = self; $f.setter = setter; $f.throw$1 = throw$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	objectHasProperty = function(self, name) {
		var $ptr, _r$13, name, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; name = $f.name; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = self.getProperty(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return !(_r$13 === ptrType$14.nil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: objectHasProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.name = name; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	objectHasOwnProperty = function(self, name) {
		var $ptr, _r$13, name, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; name = $f.name; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = self.getOwnProperty(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return !(_r$13 === ptrType$14.nil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: objectHasOwnProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.name = name; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	objectDefineOwnProperty = function(self, name, descriptor, throw$1) {
		var $ptr, _r$13, _r$14, _tmp, _tmp$1, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _v, configurable, descriptor, exists, getSet, isAccessor, isAccessor$1, isDataDescriptor, mode0, mode1, name, newGetSet, newGetSet$1, newGetSet$2, presentGet, presentSet, property, self, throw$1, value, value1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _v = $f._v; configurable = $f.configurable; descriptor = $f.descriptor; exists = $f.exists; getSet = $f.getSet; isAccessor = $f.isAccessor; isAccessor$1 = $f.isAccessor$1; isDataDescriptor = $f.isDataDescriptor; mode0 = $f.mode0; mode1 = $f.mode1; name = $f.name; newGetSet = $f.newGetSet; newGetSet$1 = $f.newGetSet$1; newGetSet$2 = $f.newGetSet$2; presentGet = $f.presentGet; presentSet = $f.presentSet; property = $f.property; self = $f.self; throw$1 = $f.throw$1; value = $f.value; value1 = $f.value1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		descriptor = $clone(descriptor, _property);
		_tuple$1 = self._read(name);
		property = $clone(_tuple$1[0], _property);
		exists = _tuple$1[1];
		/* */ if (!exists) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!exists) { */ case 1:
			/* */ if (!self.extensible) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!self.extensible) { */ case 3:
				/* goto Reject */ $s = 5; continue;
			/* } */ case 4:
			_tuple$2 = $assertType(descriptor.value, _propertyGetSet, true);
			newGetSet = $clone(_tuple$2[0], _propertyGetSet);
			isAccessor = _tuple$2[1];
			if (isAccessor) {
				if (newGetSet[0] === _nilGetSetObject) {
					newGetSet[0] = ptrType$4.nil;
				}
				if (newGetSet[1] === _nilGetSetObject) {
					newGetSet[1] = ptrType$4.nil;
				}
				descriptor.value = new _propertyGetSet(newGetSet);
			}
			self._write(name, descriptor.value, descriptor.mode);
			return true;
		/* } */ case 2:
		if (descriptor.isEmpty()) {
			return true;
		}
		configurable = property.configurable();
		/* */ if (!configurable) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!configurable) { */ case 6:
			/* */ if (descriptor.configurable()) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (descriptor.configurable()) { */ case 8:
				/* goto Reject */ $s = 5; continue;
			/* } */ case 9:
			/* */ if (descriptor.enumerateSet() && !(descriptor.enumerable() === property.enumerable())) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (descriptor.enumerateSet() && !(descriptor.enumerable() === property.enumerable())) { */ case 10:
				/* goto Reject */ $s = 5; continue;
			/* } */ case 11:
		/* } */ case 7:
		_tuple$3 = $assertType(property.value, Value, true);
		value = $clone(_tuple$3[0], Value);
		isDataDescriptor = _tuple$3[1];
		_tuple$4 = $assertType(property.value, _propertyGetSet, true);
		getSet = $clone(_tuple$4[0], _propertyGetSet);
		/* */ if (descriptor.isGenericDescriptor()) { $s = 12; continue; }
		/* */ if (!(isDataDescriptor === descriptor.isDataDescriptor())) { $s = 13; continue; }
		/* */ if (isDataDescriptor && descriptor.isDataDescriptor()) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (descriptor.isGenericDescriptor()) { */ case 12:
			$s = 16; continue;
		/* } else if (!(isDataDescriptor === descriptor.isDataDescriptor())) { */ case 13:
			/* */ if (!configurable) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (!configurable) { */ case 17:
				/* goto Reject */ $s = 5; continue;
			/* } */ case 18:
			$s = 16; continue;
		/* } else if (isDataDescriptor && descriptor.isDataDescriptor()) { */ case 14:
			/* */ if (!configurable) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (!configurable) { */ case 19:
				/* */ if (!property.writable() && descriptor.writable()) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (!property.writable() && descriptor.writable()) { */ case 21:
					/* goto Reject */ $s = 5; continue;
				/* } */ case 22:
				/* */ if (!property.writable()) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if (!property.writable()) { */ case 23:
					if (!(!($interfaceIsEqual(descriptor.value, $ifaceNil)))) { _v = false; $s = 27; continue s; }
					_r$13 = sameValue(value, $assertType(descriptor.value, Value)); /* */ $s = 28; case 28: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_v = !_r$13; case 27:
					/* */ if (_v) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (_v) { */ case 25:
						/* goto Reject */ $s = 5; continue;
					/* } */ case 26:
				/* } */ case 24:
			/* } */ case 20:
			$s = 16; continue;
		/* } else { */ case 15:
			_tuple$5 = $assertType(descriptor.value, _propertyGetSet, true);
			newGetSet$1 = $clone(_tuple$5[0], _propertyGetSet);
			_tmp = true;
			_tmp$1 = true;
			presentGet = _tmp;
			presentSet = _tmp$1;
			if (newGetSet$1[0] === _nilGetSetObject) {
				newGetSet$1[0] = ptrType$4.nil;
			} else if (newGetSet$1[0] === ptrType$4.nil) {
				newGetSet$1[0] = getSet[0];
				presentGet = false;
			}
			if (newGetSet$1[1] === _nilGetSetObject) {
				newGetSet$1[1] = ptrType$4.nil;
			} else if (newGetSet$1[1] === ptrType$4.nil) {
				newGetSet$1[1] = getSet[1];
				presentSet = false;
			}
			/* */ if (!configurable) { $s = 29; continue; }
			/* */ $s = 30; continue;
			/* if (!configurable) { */ case 29:
				/* */ if ((presentGet && (!(getSet[0] === newGetSet$1[0]))) || (presentSet && (!(getSet[1] === newGetSet$1[1])))) { $s = 31; continue; }
				/* */ $s = 32; continue;
				/* if ((presentGet && (!(getSet[0] === newGetSet$1[0]))) || (presentSet && (!(getSet[1] === newGetSet$1[1])))) { */ case 31:
					/* goto Reject */ $s = 5; continue;
				/* } */ case 32:
			/* } */ case 30:
			descriptor.value = new _propertyGetSet(newGetSet$1);
		/* } */ case 16:
		value1 = descriptor.value;
		if ($interfaceIsEqual(value1, $ifaceNil)) {
			value1 = property.value;
		} else {
			_tuple$6 = $assertType(descriptor.value, _propertyGetSet, true);
			newGetSet$2 = $clone(_tuple$6[0], _propertyGetSet);
			isAccessor$1 = _tuple$6[1];
			if (isAccessor$1) {
				if (newGetSet$2[0] === _nilGetSetObject) {
					newGetSet$2[0] = ptrType$4.nil;
				}
				if (newGetSet$2[1] === _nilGetSetObject) {
					newGetSet$2[1] = ptrType$4.nil;
				}
				value1 = new _propertyGetSet(newGetSet$2);
			}
		}
		mode1 = descriptor.mode;
		if (!(((mode1 & 146) === 0))) {
			mode0 = property.mode;
			if (!(((mode1 & 128) === 0))) {
				if (descriptor.isDataDescriptor()) {
					mode1 = mode1 & (-129);
					mode1 = mode1 | (((mode0 & 64)));
				}
			}
			if (!(((mode1 & 16) === 0))) {
				mode1 = mode1 | (((mode0 & 8)));
			}
			if (!(((mode1 & 2) === 0))) {
				mode1 = mode1 | (((mode0 & 1)));
			}
			mode1 = mode1 & (201);
		}
		self._write(name, value1, mode1);
		return true;
		/* Reject: */ case 5:
		/* */ if (throw$1) { $s = 33; continue; }
		/* */ $s = 34; continue;
		/* if (throw$1) { */ case 33:
			_r$14 = self.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 35; case 35: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			$panic(_r$14);
		/* } */ case 34:
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: objectDefineOwnProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._v = _v; $f.configurable = configurable; $f.descriptor = descriptor; $f.exists = exists; $f.getSet = getSet; $f.isAccessor = isAccessor; $f.isAccessor$1 = isAccessor$1; $f.isDataDescriptor = isDataDescriptor; $f.mode0 = mode0; $f.mode1 = mode1; $f.name = name; $f.newGetSet = newGetSet; $f.newGetSet$1 = newGetSet$1; $f.newGetSet$2 = newGetSet$2; $f.presentGet = presentGet; $f.presentSet = presentSet; $f.property = property; $f.self = self; $f.throw$1 = throw$1; $f.value = value; $f.value1 = value1; $f.$s = $s; $f.$r = $r; return $f;
	};
	objectDelete = function(self, name, throw$1) {
		var $ptr, _r$13, _r$14, name, property_, self, throw$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; name = $f.name; property_ = $f.property_; self = $f.self; throw$1 = $f.throw$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = self.getOwnProperty(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		property_ = _r$13;
		if (property_ === ptrType$14.nil) {
			return true;
		}
		if (property_.configurable()) {
			self._delete(name);
			return true;
		}
		_r$14 = self.runtime.typeErrorResult(throw$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: objectDelete }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.name = name; $f.property_ = property_; $f.self = self; $f.throw$1 = throw$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	objectClone = function(in$1, out, clone) {
		var $ptr, _entry, _i, _key, _keys, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _ref, _ref$1, clone, in$1, index, out, property, value, value$1, value$2, value$3, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _key = $f._key; _keys = $f._keys; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _ref = $f._ref; _ref$1 = $f._ref$1; clone = $f.clone; in$1 = $f.in$1; index = $f.index; out = $f.out; property = $f.property; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; value$3 = $f.value$3; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_object.copy(out, in$1);
		out.runtime = clone.runtime;
		/* */ if (!(out.prototype === ptrType$4.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(out.prototype === ptrType$4.nil)) { */ case 1:
			_r$13 = clone.object(in$1.prototype); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			out.prototype = _r$13;
		/* } */ case 2:
		out.property = (x = $keys(in$1.property).length, ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
		out.propertyOrder = $makeSlice(sliceType, in$1.propertyOrder.$length);
		$copySlice(out.propertyOrder, in$1.propertyOrder);
		_ref = in$1.property;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 4:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 5; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 4; continue;
			}
			index = _entry.k;
			property = $clone(_entry.v, _property);
			_r$14 = clone.property(property); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_key = index; (out.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $clone(_r$14, _property) };
			_i++;
		/* } */ $s = 4; continue; case 5:
		_ref$1 = in$1.value;
		/* */ if ($assertType(_ref$1, _nativeFunctionObject, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref$1, _bindFunctionObject, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref$1, _nodeFunctionObject, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref$1, _argumentsObject, true)[1]) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if ($assertType(_ref$1, _nativeFunctionObject, true)[1]) { */ case 7:
			value = _ref$1.$val;
			out.value = new value.constructor.elem(value);
			$s = 11; continue;
		/* } else if ($assertType(_ref$1, _bindFunctionObject, true)[1]) { */ case 8:
			value$1 = _ref$1.$val;
			_r$15 = clone.object(value$1.target); /* */ $s = 12; case 12: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = clone.value(value$1.this$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$17 = clone.valueArray(value$1.argumentList); /* */ $s = 14; case 14: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			out.value = (x$1 = new _bindFunctionObject.ptr(_r$15, $clone(_r$16, Value), _r$17), new x$1.constructor.elem(x$1));
			$s = 11; continue;
		/* } else if ($assertType(_ref$1, _nodeFunctionObject, true)[1]) { */ case 9:
			value$2 = _ref$1.$val;
			_r$18 = clone.stash(value$2.stash); /* */ $s = 15; case 15: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			out.value = (x$2 = new _nodeFunctionObject.ptr(value$2.node, _r$18), new x$2.constructor.elem(x$2));
			$s = 11; continue;
		/* } else if ($assertType(_ref$1, _argumentsObject, true)[1]) { */ case 10:
			value$3 = _ref$1.$val;
			_r$19 = value$3.clone(clone); /* */ $s = 16; case 16: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			out.value = (x$3 = _r$19, new x$3.constructor.elem(x$3));
		/* } */ case 11:
		return out;
		/* */ } return; } if ($f === undefined) { $f = { $blk: objectClone }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._keys = _keys; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._ref = _ref; $f._ref$1 = _ref$1; $f.clone = clone; $f.in$1 = in$1; $f.index = index; $f.out = out; $f.property = property; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.value$3 = value$3; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	New = function() {
		var $ptr, _r$13, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = [self];
		self[0] = new Otto.ptr($chanNil, newContext());
		self[0].runtime.otto = self[0];
		_r$13 = self[0].Set("console", self[0].runtime.newConsole()); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$13;
		$r = registry.Apply((function(self) { return function $b(entry) {
			var $ptr, _r$14, _r$15, entry, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$14 = $f._r$14; _r$15 = $f._r$15; entry = $f.entry; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			entry = $clone(entry, registry.Entry);
			_r$14 = entry.Source(); /* */ $s = 1; case 1: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = self[0].Run(new $String(_r$14)); /* */ $s = 2; case 2: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$15;
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.entry = entry; $f.$s = $s; $f.$r = $r; return $f;
		}; })(self)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return self[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	Otto.ptr.prototype.clone = function() {
		var $ptr, _r$13, otto, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; otto = $f.otto; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		otto = this;
		_r$13 = otto.runtime.clone(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self = new Otto.ptr($chanNil, _r$13);
		self.runtime.otto = self;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Otto.ptr.prototype.clone }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.otto = otto; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	Otto.prototype.clone = function() { return this.$val.clone(); };
	Otto.ptr.prototype.Run = function(src) {
		var $ptr, _r$13, _tuple$1, err, self, src, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _tuple$1 = $f._tuple$1; err = $f.err; self = $f.self; src = $f.src; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, Otto);
		_r$13 = self.runtime.cmpl_run(src); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		value = $clone(_tuple$1[0], Value);
		err = _tuple$1[1];
		if (!value.safe()) {
			Value.copy(value, new Value.ptr(0, $ifaceNil));
		}
		return [value, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Otto.ptr.prototype.Run }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._tuple$1 = _tuple$1; $f.err = err; $f.self = self; $f.src = src; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Otto.prototype.Run = function(src) { return this.$val.Run(src); };
	Otto.ptr.prototype.Eval = function(src) {
		var $ptr, _r$13, _tuple$1, err, self, src, value, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _tuple$1 = $f._tuple$1; err = $f.err; self = $f.self; src = $f.src; value = $f.value; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		self = $clone(this, Otto);
		if (self.runtime.scope === ptrType$16.nil) {
			self.runtime.enterGlobalScope();
			$deferred.push([$methodVal(self.runtime, "leaveScope"), []]);
		}
		_r$13 = self.runtime.cmpl_eval(src); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		value = $clone(_tuple$1[0], Value);
		err = _tuple$1[1];
		if (!value.safe()) {
			Value.copy(value, new Value.ptr(0, $ifaceNil));
		}
		return [value, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new Value.ptr(0, $ifaceNil), $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Otto.ptr.prototype.Eval }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._tuple$1 = _tuple$1; $f.err = err; $f.self = self; $f.src = src; $f.value = value; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Otto.prototype.Eval = function(src) { return this.$val.Eval(src); };
	Otto.ptr.prototype.Get = function(name) {
		var $ptr, _r$13, err, name, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; err = $f.err; name = $f.name; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = [name];
		self = [self];
		value = [value];
		self[0] = $clone(this, Otto);
		value[0] = new Value.ptr(0, $ifaceNil);
		_r$13 = catchPanic((function(name, self, value) { return function $b() {
			var $ptr, _r$13, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$13 = self[0].getValue(name[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			Value.copy(value[0], _r$13);
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.$s = $s; $f.$r = $r; return $f;
		}; })(name, self, value)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		err = _r$13;
		if (!value[0].safe()) {
			Value.copy(value[0], new Value.ptr(0, $ifaceNil));
		}
		return [value[0], err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Otto.ptr.prototype.Get }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.err = err; $f.name = name; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Otto.prototype.Get = function(name) { return this.$val.Get(name); };
	Otto.ptr.prototype.getValue = function(name) {
		var $ptr, _r$13, name, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; name = $f.name; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, Otto);
		_r$13 = self.runtime.globalStash.getBinding(name, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Otto.ptr.prototype.getValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.name = name; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	Otto.prototype.getValue = function(name) { return this.$val.getValue(name); };
	Otto.ptr.prototype.Set = function(name, value) {
		var $ptr, _r$13, _r$14, _tuple$1, err, name, self, value, value$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; err = $f.err; name = $f.name; self = $f.self; value = $f.value; value$1 = $f.value$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = [name];
		self = [self];
		value$1 = [value$1];
		self[0] = $clone(this, Otto);
		_r$13 = self[0].ToValue(value); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		value$1[0] = $clone(_tuple$1[0], Value);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_r$14 = catchPanic((function(name, self, value$1) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = self[0].setValue(name[0], value$1[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(name, self, value$1)); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		err = _r$14;
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Otto.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.err = err; $f.name = name; $f.self = self; $f.value = value; $f.value$1 = value$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Otto.prototype.Set = function(name, value) { return this.$val.Set(name, value); };
	Otto.ptr.prototype.setValue = function(name, value) {
		var $ptr, name, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; name = $f.name; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = $clone(this, Otto);
		$r = self.runtime.globalStash.setValue(name, value, false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Otto.ptr.prototype.setValue }; } $f.$ptr = $ptr; $f.name = name; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Otto.prototype.setValue = function(name, value) { return this.$val.setValue(name, value); };
	Otto.ptr.prototype.SetDebuggerHandler = function(fn) {
		var $ptr, fn, self;
		self = $clone(this, Otto);
		self.runtime.debugger$6 = fn;
	};
	Otto.prototype.SetDebuggerHandler = function(fn) { return this.$val.SetDebuggerHandler(fn); };
	Otto.ptr.prototype.Context = function() {
		var $ptr, _entry, _i, _key, _r$13, _r$14, _r$15, _r$16, _r$17, _ref, _tuple$1, _tuple$2, _v, ctx, frame, limit, name, ok, scope, self, stash, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _key = $f._key; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _ref = $f._ref; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _v = $f._v; ctx = $f.ctx; frame = $f.frame; limit = $f.limit; name = $f.name; ok = $f.ok; scope = $f.scope; self = $f.self; stash = $f.stash; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		ctx = new Context.ptr("", 0, 0, "", false, new Value.ptr(0, $ifaceNil), sliceType.nil);
		self = $clone(this, Otto);
		if (self.runtime.scope === ptrType$16.nil) {
			self.runtime.enterGlobalScope();
			$deferred.push([$methodVal(self.runtime, "leaveScope"), []]);
		}
		scope = self.runtime.scope;
		frame = $clone(scope.frame, _frame);
		ctx.Filename = "<unknown>";
		ctx.Callee = frame.callee;
		if (!(frame.file === ptrType$1.nil)) {
			ctx.Filename = frame.file.Name();
			if (ctx.Filename === "") {
				ctx.Filename = "<anonymous>";
			}
			_tuple$1 = _position(frame.file, frame.offset);
			ctx.Line = _tuple$1[0];
			ctx.Column = _tuple$1[1];
		}
		Value.copy(ctx.This, toValue_object(scope.this$2));
		limit = 10;
		ctx.Symbols = {};
		_r$13 = frame.location(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		ctx.Stacktrace = $append(ctx.Stacktrace, _r$13);
		/* while (true) { */ case 2:
			/* if (!(limit > 0)) { break; } */ if(!(limit > 0)) { $s = 3; continue; }
			stash = scope.lexical;
			/* while (true) { */ case 4:
				_ref = getStashProperties(stash);
				_i = 0;
				/* while (true) { */ case 6:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
					name = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					_tuple$2 = (_entry = ctx.Symbols[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [new Value.ptr(0, $ifaceNil), false]);
					ok = _tuple$2[1];
					/* */ if (!ok) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (!ok) { */ case 8:
						_r$14 = stash.getBinding(name, true); /* */ $s = 10; case 10: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						_key = name; (ctx.Symbols || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $clone(_r$14, Value) };
					/* } */ case 9:
					_i++;
				/* } */ $s = 6; continue; case 7:
				_r$15 = stash.outer(); /* */ $s = 11; case 11: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				stash = _r$15;
				if ($interfaceIsEqual(stash, $ifaceNil)) { _v = true; $s = 14; continue s; }
				_r$16 = stash.outer(); /* */ $s = 15; case 15: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				_v = $interfaceIsEqual(_r$16, $ifaceNil); case 14:
				/* */ if (_v) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_v) { */ case 12:
					/* break; */ $s = 5; continue;
				/* } */ case 13:
			/* } */ $s = 4; continue; case 5:
			scope = scope.outer;
			if (scope === ptrType$16.nil) {
				/* break; */ $s = 3; continue;
			}
			/* */ if (scope.frame.offset >= 0) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (scope.frame.offset >= 0) { */ case 16:
				_r$17 = scope.frame.location(); /* */ $s = 18; case 18: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				ctx.Stacktrace = $append(ctx.Stacktrace, _r$17);
			/* } */ case 17:
			limit = limit - (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		return ctx;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  ctx; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Otto.ptr.prototype.Context }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._ref = _ref; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._v = _v; $f.ctx = ctx; $f.frame = frame; $f.limit = limit; $f.name = name; $f.ok = ok; $f.scope = scope; $f.self = self; $f.stash = stash; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Otto.prototype.Context = function() { return this.$val.Context(); };
	Otto.ptr.prototype.Call = function(source, this$1, argumentList) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, argumentList, construct, err, err$1, err$2, err$3, err$4, fn, node, node$1, ok, ok$1, program, result, result$1, self, source, this$1, this$2, thisValue, value, value$1, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; argumentList = $f.argumentList; construct = $f.construct; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; fn = $f.fn; node = $f.node; node$1 = $f.node$1; ok = $f.ok; ok$1 = $f.ok$1; program = $f.program; result = $f.result; result$1 = $f.result$1; self = $f.self; source = $f.source; this$1 = $f.this$1; this$2 = $f.this$2; thisValue = $f.thisValue; value = $f.value; value$1 = $f.value$1; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		argumentList = [argumentList];
		node = [node];
		self = [self];
		value = [value];
		self[0] = $clone(this, Otto);
		thisValue = new Value.ptr(0, $ifaceNil);
		construct = false;
		if (strings.HasPrefix(source, "new ")) {
			source = source.substring(4);
			construct = true;
		}
		self[0].runtime.enterGlobalScope();
		$deferred.push([(function(argumentList, node, self, value) { return function() {
			var $ptr;
			self[0].runtime.leaveScope();
		}; })(argumentList, node, self, value), []]);
		/* */ if (!construct && $interfaceIsEqual(this$1, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!construct && $interfaceIsEqual(this$1, $ifaceNil)) { */ case 1:
			_r$13 = self[0].runtime.cmpl_parse("", new $String(source + "()")); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_tuple$1 = _r$13;
			program = _tuple$1[0];
			err = _tuple$1[1];
			/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 5:
				_tuple$2 = $assertType((x = program.body, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), ptrType$42, true);
				node$1 = _tuple$2[0];
				ok = _tuple$2[1];
				/* */ if (ok) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (ok) { */ case 7:
					_tuple$3 = $assertType(node$1.expression, ptrType$23, true);
					node[0] = _tuple$3[0];
					ok$1 = _tuple$3[1];
					/* */ if (ok$1) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (ok$1) { */ case 9:
						value[0] = new Value.ptr(0, $ifaceNil);
						_r$14 = catchPanic((function(argumentList, node, self, value) { return function $b() {
							var $ptr, _r$14, $s, $r;
							/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$14 = $f._r$14; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
							_r$14 = self[0].runtime.cmpl_evaluate_nodeCallExpression(node[0], argumentList[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
							Value.copy(value[0], _r$14);
							/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$14 = _r$14; $f.$s = $s; $f.$r = $r; return $f;
						}; })(argumentList, node, self, value)); /* */ $s = 11; case 11: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						err$1 = _r$14;
						if (!($interfaceIsEqual(err$1, $ifaceNil))) {
							return [new Value.ptr(0, $ifaceNil), err$1];
						}
						return [value[0], $ifaceNil];
					/* } */ case 10:
				/* } */ case 8:
			/* } */ case 6:
			$s = 3; continue;
		/* } else { */ case 2:
			_r$15 = self[0].ToValue(this$1); /* */ $s = 12; case 12: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_tuple$4 = _r$15;
			value$1 = $clone(_tuple$4[0], Value);
			err$2 = _tuple$4[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				return [new Value.ptr(0, $ifaceNil), err$2];
			}
			Value.copy(thisValue, value$1);
		/* } */ case 3:
		this$2 = $clone(thisValue, Value);
		_r$16 = self[0].Run(new $String(source)); /* */ $s = 13; case 13: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_tuple$5 = _r$16;
		fn = $clone(_tuple$5[0], Value);
		err$3 = _tuple$5[1];
		if (!($interfaceIsEqual(err$3, $ifaceNil))) {
			return [new Value.ptr(0, $ifaceNil), err$3];
		}
		/* */ if (construct) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (construct) { */ case 14:
			_r$17 = fn.constructSafe(self[0].runtime, this$2, argumentList[0]); /* */ $s = 16; case 16: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_tuple$6 = _r$17;
			result = $clone(_tuple$6[0], Value);
			err$4 = _tuple$6[1];
			if (!($interfaceIsEqual(err$4, $ifaceNil))) {
				return [new Value.ptr(0, $ifaceNil), err$4];
			}
			return [result, $ifaceNil];
		/* } */ case 15:
		_r$18 = fn.Call(this$2, argumentList[0]); /* */ $s = 17; case 17: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		_tuple$7 = _r$18;
		result$1 = $clone(_tuple$7[0], Value);
		err$3 = _tuple$7[1];
		if (!($interfaceIsEqual(err$3, $ifaceNil))) {
			return [new Value.ptr(0, $ifaceNil), err$3];
		}
		return [result$1, $ifaceNil];
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; return [new Value.ptr(0, $ifaceNil), $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Otto.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.argumentList = argumentList; $f.construct = construct; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.fn = fn; $f.node = node; $f.node$1 = node$1; $f.ok = ok; $f.ok$1 = ok$1; $f.program = program; $f.result = result; $f.result$1 = result$1; $f.self = self; $f.source = source; $f.this$1 = this$1; $f.this$2 = this$2; $f.thisValue = thisValue; $f.value = value; $f.value$1 = value$1; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Otto.prototype.Call = function(source, this$1, argumentList) { return this.$val.Call(source, this$1, argumentList); };
	Otto.ptr.prototype.Object = function(source) {
		var $ptr, _r$13, _r$14, _tuple$1, err, self, source, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; err = $f.err; self = $f.self; source = $f.source; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, Otto);
		_r$13 = self.runtime.cmpl_run(new $String(source)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		value = $clone(_tuple$1[0], Value);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$98.nil, err];
		}
		if (value.IsObject()) {
			return [value.Object(), $ifaceNil];
		}
		_r$14 = fmt.Errorf("value is not an object", new sliceType$1([])); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return [ptrType$98.nil, _r$14];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Otto.ptr.prototype.Object }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.err = err; $f.self = self; $f.source = source; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Otto.prototype.Object = function(source) { return this.$val.Object(source); };
	Otto.ptr.prototype.ToValue = function(value) {
		var $ptr, _r$13, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, Otto);
		_r$13 = self.runtime.safeToValue(value); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Otto.ptr.prototype.ToValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Otto.prototype.ToValue = function(value) { return this.$val.ToValue(value); };
	Otto.ptr.prototype.Copy = function() {
		var $ptr, _r$13, in$1, out, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; in$1 = $f.in$1; out = $f.out; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		in$1 = this;
		_r$13 = in$1.runtime.clone(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		out = new Otto.ptr($chanNil, _r$13);
		out.runtime.otto = out;
		return out;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Otto.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.in$1 = in$1; $f.out = out; $f.$s = $s; $f.$r = $r; return $f;
	};
	Otto.prototype.Copy = function() { return this.$val.Copy(); };
	_newObject = function(object, value) {
		var $ptr, object, value;
		value = $clone(value, Value);
		return new Object.ptr(object, $clone(value, Value));
	};
	Object.ptr.prototype.Call = function(name, argumentList) {
		var $ptr, _r$13, _r$14, _tuple$1, argumentList, err, function$1, name, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; argumentList = $f.argumentList; err = $f.err; function$1 = $f.function$1; name = $f.name; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, Object);
		_r$13 = self.Get(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		function$1 = $clone(_tuple$1[0], Value);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [new Value.ptr(0, $ifaceNil), err];
		}
		_r$14 = function$1.Call(self.Value(), argumentList); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Object.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.argumentList = argumentList; $f.err = err; $f.function$1 = function$1; $f.name = name; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	Object.prototype.Call = function(name, argumentList) { return this.$val.Call(name, argumentList); };
	Object.ptr.prototype.Value = function() {
		var $ptr, self;
		self = $clone(this, Object);
		return self.value;
	};
	Object.prototype.Value = function() { return this.$val.Value(); };
	Object.ptr.prototype.Get = function(name) {
		var $ptr, _r$13, err, name, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; err = $f.err; name = $f.name; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = [name];
		self = [self];
		value = [value];
		self[0] = $clone(this, Object);
		value[0] = new Value.ptr(0, $ifaceNil);
		_r$13 = catchPanic((function(name, self, value) { return function $b() {
			var $ptr, _r$13, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$13 = self[0].object.get(name[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			Value.copy(value[0], _r$13);
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.$s = $s; $f.$r = $r; return $f;
		}; })(name, self, value)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		err = _r$13;
		if (!value[0].safe()) {
			Value.copy(value[0], new Value.ptr(0, $ifaceNil));
		}
		return [value[0], err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Object.ptr.prototype.Get }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.err = err; $f.name = name; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Object.prototype.Get = function(name) { return this.$val.Get(name); };
	Object.ptr.prototype.Set = function(name, value) {
		var $ptr, _r$13, _r$14, _tuple$1, err, name, self, value, value$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; err = $f.err; name = $f.name; self = $f.self; value = $f.value; value$1 = $f.value$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = [name];
		self = [self];
		value$1 = [value$1];
		self[0] = $clone(this, Object);
		_r$13 = self[0].object.runtime.safeToValue(value); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		value$1[0] = $clone(_tuple$1[0], Value);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_r$14 = catchPanic((function(name, self, value$1) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = self[0].object.put(name[0], value$1[0], true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(name, self, value$1)); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		err = _r$14;
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Object.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.err = err; $f.name = name; $f.self = self; $f.value = value; $f.value$1 = value$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Object.prototype.Set = function(name, value) { return this.$val.Set(name, value); };
	Object.ptr.prototype.Keys = function() {
		var $ptr, keys, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; keys = $f.keys; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		keys = [keys];
		self = $clone(this, Object);
		keys[0] = sliceType.nil;
		$r = self.object.enumerate(false, (function(keys) { return function(name) {
			var $ptr, name;
			keys[0] = $append(keys[0], name);
			return true;
		}; })(keys)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return keys[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Object.ptr.prototype.Keys }; } $f.$ptr = $ptr; $f.keys = keys; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	Object.prototype.Keys = function() { return this.$val.Keys(); };
	Object.ptr.prototype.Class = function() {
		var $ptr, self;
		self = $clone(this, Object);
		return self.object.class$1;
	};
	Object.prototype.Class = function() { return this.$val.Class(); };
	_runtime.ptr.prototype.toValueArray = function(arguments$1) {
		var $ptr, _i, _r$13, _r$14, _ref, _tuple$1, arguments$1, index, length, ok, self, value, valueArray, valueArray$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; _tuple$1 = $f._tuple$1; arguments$1 = $f.arguments$1; index = $f.index; length = $f.length; ok = $f.ok; self = $f.self; value = $f.value; valueArray = $f.valueArray; valueArray$1 = $f.valueArray$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		length = arguments$1.$length;
		/* */ if (length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (length === 1) { */ case 1:
			_tuple$1 = $assertType((0 >= arguments$1.$length ? $throwRuntimeError("index out of range") : arguments$1.$array[arguments$1.$offset + 0]), sliceType$5, true);
			valueArray = _tuple$1[0];
			ok = _tuple$1[1];
			if (ok) {
				return valueArray;
			}
			_r$13 = self.toValue((0 >= arguments$1.$length ? $throwRuntimeError("index out of range") : arguments$1.$array[arguments$1.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return new sliceType$5([$clone(_r$13, Value)]);
		/* } */ case 2:
		valueArray$1 = $makeSlice(sliceType$5, length);
		_ref = arguments$1;
		_i = 0;
		/* while (true) { */ case 5:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
			index = _i;
			value = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$14 = self.toValue(value); /* */ $s = 7; case 7: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			Value.copy(((index < 0 || index >= valueArray$1.$length) ? $throwRuntimeError("index out of range") : valueArray$1.$array[valueArray$1.$offset + index]), _r$14);
			_i++;
		/* } */ $s = 5; continue; case 6:
		return valueArray$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.toValueArray }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f._tuple$1 = _tuple$1; $f.arguments$1 = arguments$1; $f.index = index; $f.length = length; $f.ok = ok; $f.self = self; $f.value = value; $f.valueArray = valueArray; $f.valueArray$1 = valueArray$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.toValueArray = function(arguments$1) { return this.$val.toValueArray(arguments$1); };
	stringToArrayIndex = function(name) {
		var $ptr, _tuple$1, err, index, name;
		_tuple$1 = strconv.ParseInt(name, 10, 64);
		index = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return new $Int64(-1, 4294967295);
		}
		if ((index.$high < 0 || (index.$high === 0 && index.$low < 0))) {
			return new $Int64(-1, 4294967295);
		}
		if ((index.$high > 0 || (index.$high === 0 && index.$low >= 4294967295))) {
			return new $Int64(-1, 4294967295);
		}
		return index;
	};
	isUint32 = function(value) {
		var $ptr, value;
		return (value.$high > 0 || (value.$high === 0 && value.$low >= 0)) && (value.$high < 0 || (value.$high === 0 && value.$low <= 4294967295));
	};
	arrayIndexToString = function(index) {
		var $ptr, index;
		return strconv.FormatInt(index, 10);
	};
	valueOfArrayIndex = function(array, index) {
		var $ptr, _tuple$1, array, index, value;
		_tuple$1 = getValueOfArrayIndex(array, index);
		value = $clone(_tuple$1[0], Value);
		return value;
	};
	getValueOfArrayIndex = function(array, index) {
		var $ptr, array, index, value;
		if (index >= 0 && index < array.$length) {
			value = $clone(((index < 0 || index >= array.$length) ? $throwRuntimeError("index out of range") : array.$array[array.$offset + index]), Value);
			if (!value.isEmpty()) {
				return [value, true];
			}
		}
		return [new Value.ptr(0, $ifaceNil), false];
	};
	valueToRangeIndex = function(indexValue, length, negativeIsZero) {
		var $ptr, _r$13, index, indexValue, length, negativeIsZero, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; index = $f.index; indexValue = $f.indexValue; length = $f.length; negativeIsZero = $f.negativeIsZero; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		indexValue = $clone(indexValue, Value);
		_r$13 = indexValue.number(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		index = _r$13.int64;
		if (negativeIsZero) {
			if ((index.$high < 0 || (index.$high === 0 && index.$low < 0))) {
				index = new $Int64(0, 0);
			}
			if ((index.$high > length.$high || (index.$high === length.$high && index.$low >= length.$low))) {
				index = length;
			}
			return index;
		}
		if ((index.$high < 0 || (index.$high === 0 && index.$low < 0))) {
			index = (x = length, new $Int64(index.$high + x.$high, index.$low + x.$low));
			if ((index.$high < 0 || (index.$high === 0 && index.$low < 0))) {
				index = new $Int64(0, 0);
			}
		} else {
			if ((index.$high > length.$high || (index.$high === length.$high && index.$low > length.$low))) {
				index = length;
			}
		}
		return index;
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueToRangeIndex }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.index = index; $f.indexValue = indexValue; $f.length = length; $f.negativeIsZero = negativeIsZero; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	rangeStartEnd = function(array, size, negativeIsZero) {
		var $ptr, _r$13, _r$14, array, end, endValue, negativeIsZero, size, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; array = $f.array; end = $f.end; endValue = $f.endValue; negativeIsZero = $f.negativeIsZero; size = $f.size; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		_r$13 = valueToRangeIndex(valueOfArrayIndex(array, 0), size, negativeIsZero); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		start = _r$13;
		if (array.$length === 1) {
			end = size;
			return [start, end];
		}
		end = size;
		endValue = $clone(valueOfArrayIndex(array, 1), Value);
		/* */ if (!endValue.IsUndefined()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!endValue.IsUndefined()) { */ case 2:
			_r$14 = valueToRangeIndex(endValue, size, negativeIsZero); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			end = _r$14;
		/* } */ case 3:
		return [start, end];
		/* */ } return; } if ($f === undefined) { $f = { $blk: rangeStartEnd }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.array = array; $f.end = end; $f.endValue = endValue; $f.negativeIsZero = negativeIsZero; $f.size = size; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	rangeStartLength = function(source, size) {
		var $ptr, _r$13, _r$14, length, lengthValue, size, source, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; length = $f.length; lengthValue = $f.lengthValue; size = $f.size; source = $f.source; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = new $Int64(0, 0);
		length = new $Int64(0, 0);
		_r$13 = valueToRangeIndex(valueOfArrayIndex(source, 0), size, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		start = _r$13;
		length = size;
		if (source.$length === 1) {
			return [start, length];
		}
		lengthValue = $clone(valueOfArrayIndex(source, 1), Value);
		/* */ if (!lengthValue.IsUndefined()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!lengthValue.IsUndefined()) { */ case 2:
			_r$14 = lengthValue.number(); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			length = _r$14.int64;
		/* } */ case 3:
		return [start, length];
		/* */ } return; } if ($f === undefined) { $f = { $blk: rangeStartLength }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.length = length; $f.lengthValue = lengthValue; $f.size = size; $f.source = source; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	hereBeDragons = function(arguments$1) {
		var $ptr, _r$13, _r$14, _r$15, _tuple$1, argument0, arguments$1, message, name, pc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _tuple$1 = $f._tuple$1; argument0 = $f.argument0; arguments$1 = $f.arguments$1; message = $f.message; name = $f.name; pc = $f.pc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple$1 = runtime.Caller(1);
		pc = _tuple$1[0];
		name = runtime.FuncForPC(pc).Name();
		_r$13 = fmt.Sprintf("Here be dragons -- %s", new sliceType$1([new $String(name)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		message = _r$13;
		/* */ if (arguments$1.$length > 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (arguments$1.$length > 0) { */ case 2:
			message = message + (": ");
			_r$14 = fmt.Sprintf("%s", new sliceType$1([(0 >= arguments$1.$length ? $throwRuntimeError("index out of range") : arguments$1.$array[arguments$1.$offset + 0])])); /* */ $s = 5; case 5: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			argument0 = _r$14;
			/* */ if (arguments$1.$length === 1) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (arguments$1.$length === 1) { */ case 6:
				message = message + (argument0);
				$s = 8; continue;
			/* } else { */ case 7:
				_r$15 = fmt.Sprintf(argument0, $subslice(arguments$1, 1)); /* */ $s = 9; case 9: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				message = message + (_r$15);
			/* } */ case 8:
			$s = 4; continue;
		/* } else { */ case 3:
			message = message + (".");
		/* } */ case 4:
		return message;
		/* */ } return; } if ($f === undefined) { $f = { $blk: hereBeDragons }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._tuple$1 = _tuple$1; $f.argument0 = argument0; $f.arguments$1 = arguments$1; $f.message = message; $f.name = name; $f.pc = pc; $f.$s = $s; $f.$r = $r; return $f;
	};
	_property.ptr.prototype.writable = function() {
		var $ptr, self;
		self = $clone(this, _property);
		return (self.mode & 448) === 64;
	};
	_property.prototype.writable = function() { return this.$val.writable(); };
	_property.ptr.prototype.writeOn = function() {
		var $ptr, self;
		self = this;
		self.mode = ((self.mode & -449)) | 64;
	};
	_property.prototype.writeOn = function() { return this.$val.writeOn(); };
	_property.ptr.prototype.writeOff = function() {
		var $ptr, self;
		self = this;
		self.mode = self.mode & (-449);
	};
	_property.prototype.writeOff = function() { return this.$val.writeOff(); };
	_property.ptr.prototype.writeSet = function() {
		var $ptr, self;
		self = $clone(this, _property);
		return 0 === ((self.mode & 448) & 146);
	};
	_property.prototype.writeSet = function() { return this.$val.writeSet(); };
	_property.ptr.prototype.enumerable = function() {
		var $ptr, self;
		self = $clone(this, _property);
		return (self.mode & 56) === 8;
	};
	_property.prototype.enumerable = function() { return this.$val.enumerable(); };
	_property.ptr.prototype.enumerateOn = function() {
		var $ptr, self;
		self = this;
		self.mode = ((self.mode & -57)) | 8;
	};
	_property.prototype.enumerateOn = function() { return this.$val.enumerateOn(); };
	_property.ptr.prototype.enumerateOff = function() {
		var $ptr, self;
		self = this;
		self.mode = self.mode & (-57);
	};
	_property.prototype.enumerateOff = function() { return this.$val.enumerateOff(); };
	_property.ptr.prototype.enumerateSet = function() {
		var $ptr, self;
		self = $clone(this, _property);
		return 0 === ((self.mode & 56) & 146);
	};
	_property.prototype.enumerateSet = function() { return this.$val.enumerateSet(); };
	_property.ptr.prototype.configurable = function() {
		var $ptr, self;
		self = $clone(this, _property);
		return (self.mode & 7) === 1;
	};
	_property.prototype.configurable = function() { return this.$val.configurable(); };
	_property.ptr.prototype.configureOn = function() {
		var $ptr, self;
		self = this;
		self.mode = ((self.mode & -8)) | 1;
	};
	_property.prototype.configureOn = function() { return this.$val.configureOn(); };
	_property.ptr.prototype.configureOff = function() {
		var $ptr, self;
		self = this;
		self.mode = self.mode & (-8);
	};
	_property.prototype.configureOff = function() { return this.$val.configureOff(); };
	_property.ptr.prototype.get = function(this$1) {
		var $ptr, _r$13, _r$14, _ref, self, this$1, value, value$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; self = $f.self; this$1 = $f.this$1; value = $f.value; value$1 = $f.value$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, _property);
		_ref = self.value;
		/* */ if ($assertType(_ref, Value, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, _propertyGetSet, true)[1]) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($assertType(_ref, Value, true)[1]) { */ case 1:
			value = _ref.$val;
			return value;
		/* } else if ($assertType(_ref, _propertyGetSet, true)[1]) { */ case 2:
			value$1 = _ref.$val;
			/* */ if (!(value$1[0] === ptrType$4.nil)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!(value$1[0] === ptrType$4.nil)) { */ case 4:
				_r$13 = toValue(this$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$14 = value$1[0].call(_r$13, sliceType$5.nil, false, nativeFrame); /* */ $s = 7; case 7: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				/* */ $s = 8; case 8:
				return _r$14;
			/* } */ case 5:
		/* } */ case 3:
		return new Value.ptr(0, $ifaceNil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _property.ptr.prototype.get }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f.self = self; $f.this$1 = this$1; $f.value = value; $f.value$1 = value$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_property.prototype.get = function(this$1) { return this.$val.get(this$1); };
	_property.ptr.prototype.isAccessorDescriptor = function() {
		var $ptr, _tuple$1, self, setGet, test;
		self = $clone(this, _property);
		_tuple$1 = $assertType(self.value, _propertyGetSet, true);
		setGet = $clone(_tuple$1[0], _propertyGetSet);
		test = _tuple$1[1];
		return test && (!(setGet[0] === ptrType$4.nil) || !(setGet[1] === ptrType$4.nil));
	};
	_property.prototype.isAccessorDescriptor = function() { return this.$val.isAccessorDescriptor(); };
	_property.ptr.prototype.isDataDescriptor = function() {
		var $ptr, _tuple$1, self, valid, value;
		self = $clone(this, _property);
		if (self.writeSet()) {
			return true;
		}
		_tuple$1 = $assertType(self.value, Value, true);
		value = $clone(_tuple$1[0], Value);
		valid = _tuple$1[1];
		return valid && !value.isEmpty();
	};
	_property.prototype.isDataDescriptor = function() { return this.$val.isDataDescriptor(); };
	_property.ptr.prototype.isGenericDescriptor = function() {
		var $ptr, self;
		self = $clone(this, _property);
		return !(self.isDataDescriptor() || self.isAccessorDescriptor());
	};
	_property.prototype.isGenericDescriptor = function() { return this.$val.isGenericDescriptor(); };
	_property.ptr.prototype.isEmpty = function() {
		var $ptr, self;
		self = $clone(this, _property);
		return (self.mode === 146) && self.isGenericDescriptor();
	};
	_property.prototype.isEmpty = function() { return this.$val.isEmpty(); };
	toPropertyDescriptor = function(rt, value) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _tmp, _tmp$1, descriptor, getter, getterSetter, objectDescriptor, rt, setter, value, value$1, value$2, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; descriptor = $f.descriptor; getter = $f.getter; getterSetter = $f.getterSetter; objectDescriptor = $f.objectDescriptor; rt = $f.rt; setter = $f.setter; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		descriptor = new _property.ptr($ifaceNil, 0);
		value = $clone(value, Value);
		objectDescriptor = value._object();
		/* */ if (objectDescriptor === ptrType$4.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (objectDescriptor === ptrType$4.nil) { */ case 1:
			_r$13 = rt.panicTypeError(new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 2:
		descriptor.mode = 146;
		_r$14 = objectDescriptor.hasProperty("enumerable"); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ if (_r$14) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$14) { */ case 4:
			_r$15 = objectDescriptor.get("enumerable"); /* */ $s = 10; case 10: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = _r$15.bool(); /* */ $s = 11; case 11: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ if (_r$16) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_r$16) { */ case 7:
				descriptor.enumerateOn();
				$s = 9; continue;
			/* } else { */ case 8:
				descriptor.enumerateOff();
			/* } */ case 9:
		/* } */ case 5:
		_r$17 = objectDescriptor.hasProperty("configurable"); /* */ $s = 14; case 14: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		/* */ if (_r$17) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (_r$17) { */ case 12:
			_r$18 = objectDescriptor.get("configurable"); /* */ $s = 18; case 18: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_r$19 = _r$18.bool(); /* */ $s = 19; case 19: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			/* */ if (_r$19) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (_r$19) { */ case 15:
				descriptor.configureOn();
				$s = 17; continue;
			/* } else { */ case 16:
				descriptor.configureOff();
			/* } */ case 17:
		/* } */ case 13:
		_r$20 = objectDescriptor.hasProperty("writable"); /* */ $s = 22; case 22: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		/* */ if (_r$20) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (_r$20) { */ case 20:
			_r$21 = objectDescriptor.get("writable"); /* */ $s = 26; case 26: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			_r$22 = _r$21.bool(); /* */ $s = 27; case 27: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			/* */ if (_r$22) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (_r$22) { */ case 23:
				descriptor.writeOn();
				$s = 25; continue;
			/* } else { */ case 24:
				descriptor.writeOff();
			/* } */ case 25:
		/* } */ case 21:
		_tmp = ptrType$4.nil;
		_tmp$1 = ptrType$4.nil;
		getter = _tmp;
		setter = _tmp$1;
		getterSetter = false;
		_r$23 = objectDescriptor.hasProperty("get"); /* */ $s = 30; case 30: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		/* */ if (_r$23) { $s = 28; continue; }
		/* */ $s = 29; continue;
		/* if (_r$23) { */ case 28:
			_r$24 = objectDescriptor.get("get"); /* */ $s = 31; case 31: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			value$1 = $clone(_r$24, Value);
			/* */ if (value$1.IsDefined()) { $s = 32; continue; }
			/* */ $s = 33; continue;
			/* if (value$1.IsDefined()) { */ case 32:
				/* */ if (!value$1.isCallable()) { $s = 35; continue; }
				/* */ $s = 36; continue;
				/* if (!value$1.isCallable()) { */ case 35:
					_r$25 = rt.panicTypeError(new sliceType$1([])); /* */ $s = 37; case 37: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					$panic(_r$25);
				/* } */ case 36:
				getter = value$1._object();
				getterSetter = true;
				$s = 34; continue;
			/* } else { */ case 33:
				getter = _nilGetSetObject;
				getterSetter = true;
			/* } */ case 34:
		/* } */ case 29:
		_r$26 = objectDescriptor.hasProperty("set"); /* */ $s = 40; case 40: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
		/* */ if (_r$26) { $s = 38; continue; }
		/* */ $s = 39; continue;
		/* if (_r$26) { */ case 38:
			_r$27 = objectDescriptor.get("set"); /* */ $s = 41; case 41: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			value$2 = $clone(_r$27, Value);
			/* */ if (value$2.IsDefined()) { $s = 42; continue; }
			/* */ $s = 43; continue;
			/* if (value$2.IsDefined()) { */ case 42:
				/* */ if (!value$2.isCallable()) { $s = 45; continue; }
				/* */ $s = 46; continue;
				/* if (!value$2.isCallable()) { */ case 45:
					_r$28 = rt.panicTypeError(new sliceType$1([])); /* */ $s = 47; case 47: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
					$panic(_r$28);
				/* } */ case 46:
				setter = value$2._object();
				getterSetter = true;
				$s = 44; continue;
			/* } else { */ case 43:
				setter = _nilGetSetObject;
				getterSetter = true;
			/* } */ case 44:
		/* } */ case 39:
		/* */ if (getterSetter) { $s = 48; continue; }
		/* */ $s = 49; continue;
		/* if (getterSetter) { */ case 48:
			/* */ if (descriptor.writeSet()) { $s = 50; continue; }
			/* */ $s = 51; continue;
			/* if (descriptor.writeSet()) { */ case 50:
				_r$29 = rt.panicTypeError(new sliceType$1([])); /* */ $s = 52; case 52: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				$panic(_r$29);
			/* } */ case 51:
			descriptor.value = new _propertyGetSet($toNativeArray($kindPtr, [getter, setter]));
		/* } */ case 49:
		_r$30 = objectDescriptor.hasProperty("value"); /* */ $s = 55; case 55: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
		/* */ if (_r$30) { $s = 53; continue; }
		/* */ $s = 54; continue;
		/* if (_r$30) { */ case 53:
			/* */ if (getterSetter) { $s = 56; continue; }
			/* */ $s = 57; continue;
			/* if (getterSetter) { */ case 56:
				_r$31 = rt.panicTypeError(new sliceType$1([])); /* */ $s = 58; case 58: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				$panic(_r$31);
			/* } */ case 57:
			_r$32 = objectDescriptor.get("value"); /* */ $s = 59; case 59: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			descriptor.value = (x = _r$32, new x.constructor.elem(x));
		/* } */ case 54:
		return descriptor;
		/* */ } return; } if ($f === undefined) { $f = { $blk: toPropertyDescriptor }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.descriptor = descriptor; $f.getter = getter; $f.getterSetter = getterSetter; $f.objectDescriptor = objectDescriptor; $f.rt = rt; $f.setter = setter; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.fromPropertyDescriptor = function(descriptor) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, descriptor, get, getSet, object, self, set, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; descriptor = $f.descriptor; get = $f.get; getSet = $f.getSet; object = $f.object; self = $f.self; set = $f.set; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		descriptor = $clone(descriptor, _property);
		self = this;
		object = self.newObject();
		/* */ if (descriptor.isDataDescriptor()) { $s = 1; continue; }
		/* */ if (descriptor.isAccessorDescriptor()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (descriptor.isDataDescriptor()) { */ case 1:
			_r$13 = object.defineProperty("value", $assertType(descriptor.value, Value), 73, false); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$13;
			_r$14 = object.defineProperty("writable", toValue_bool(descriptor.writable()), 73, false); /* */ $s = 5; case 5: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$14;
			$s = 3; continue;
		/* } else if (descriptor.isAccessorDescriptor()) { */ case 2:
			getSet = $clone($assertType(descriptor.value, _propertyGetSet), _propertyGetSet);
			get = new Value.ptr(0, $ifaceNil);
			if (!(getSet[0] === ptrType$4.nil)) {
				Value.copy(get, toValue_object(getSet[0]));
			}
			set = new Value.ptr(0, $ifaceNil);
			if (!(getSet[1] === ptrType$4.nil)) {
				Value.copy(set, toValue_object(getSet[1]));
			}
			_r$15 = object.defineProperty("get", get, 73, false); /* */ $s = 6; case 6: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$15;
			_r$16 = object.defineProperty("set", set, 73, false); /* */ $s = 7; case 7: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$16;
		/* } */ case 3:
		_r$17 = object.defineProperty("enumerable", toValue_bool(descriptor.enumerable()), 73, false); /* */ $s = 8; case 8: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_r$17;
		_r$18 = object.defineProperty("configurable", toValue_bool(descriptor.configurable()), 73, false); /* */ $s = 9; case 9: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		_r$18;
		return object;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.fromPropertyDescriptor }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f.descriptor = descriptor; $f.get = get; $f.getSet = getSet; $f.object = object; $f.self = self; $f.set = set; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.fromPropertyDescriptor = function(descriptor) { return this.$val.fromPropertyDescriptor(descriptor); };
	newReturnResult = function(value) {
		var $ptr, value;
		value = $clone(value, Value);
		return new _result.ptr(1, $clone(value, Value), "");
	};
	newContinueResult = function(target) {
		var $ptr, target;
		return new _result.ptr(3, $clone(emptyValue, Value), target);
	};
	newBreakResult = function(target) {
		var $ptr, target;
		return new _result.ptr(2, $clone(emptyValue, Value), target);
	};
	_runtime.ptr.prototype.enterScope = function(scope) {
		var $ptr, scope, self;
		self = this;
		scope.outer = self.scope;
		self.scope = scope;
	};
	_runtime.prototype.enterScope = function(scope) { return this.$val.enterScope(scope); };
	_runtime.ptr.prototype.leaveScope = function() {
		var $ptr, self;
		self = this;
		self.scope = self.scope.outer;
	};
	_runtime.prototype.leaveScope = function() { return this.$val.leaveScope(); };
	_runtime.ptr.prototype.enterGlobalScope = function() {
		var $ptr, self;
		self = this;
		self.enterScope(newScope(self.globalStash, self.globalStash, self.globalObject));
	};
	_runtime.prototype.enterGlobalScope = function() { return this.$val.enterGlobalScope(); };
	_runtime.ptr.prototype.enterFunctionScope = function(outer, this$1) {
		var $ptr, _r$13, _ref, outer, self, stash, this$1, thisObject, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _ref = $f._ref; outer = $f.outer; self = $f.self; stash = $f.stash; this$1 = $f.this$1; thisObject = $f.thisObject; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		this$1 = $clone(this$1, Value);
		self = this;
		if ($interfaceIsEqual(outer, $ifaceNil)) {
			outer = self.globalStash;
		}
		stash = self.newFunctionStash(outer);
		thisObject = ptrType$4.nil;
		_ref = this$1.kind;
		/* */ if (_ref === 0 || _ref === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_ref === 0 || _ref === 1) { */ case 1:
			thisObject = self.globalObject;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$13 = self.toObject(this$1); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			thisObject = _r$13;
		/* } */ case 3:
		self.enterScope(newScope(stash, stash, thisObject));
		return stash;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.enterFunctionScope }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._ref = _ref; $f.outer = outer; $f.self = self; $f.stash = stash; $f.this$1 = this$1; $f.thisObject = thisObject; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.enterFunctionScope = function(outer, this$1) { return this.$val.enterFunctionScope(outer, this$1); };
	_runtime.ptr.prototype.putValue = function(reference, value) {
		var $ptr, _r$13, _r$14, name, reference, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; name = $f.name; reference = $f.reference; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = this;
		_r$13 = reference.putValue(value); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		name = _r$13;
		/* */ if (!(name === "")) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(name === "")) { */ case 2:
			_r$14 = self.globalObject.defineProperty(name, value, 73, false); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$14;
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.putValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.name = name; $f.reference = reference; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.putValue = function(reference, value) { return this.$val.putValue(reference, value); };
	_runtime.ptr.prototype.tryCatchEvaluate = function(inner) {
		var $ptr, _r$13, exception, inner, self, tryValue, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; exception = $f.exception; inner = $f.inner; self = $f.self; tryValue = $f.tryValue; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		exception = [exception];
		self = [self];
		tryValue = [tryValue];
		tryValue[0] = new Value.ptr(0, $ifaceNil);
		exception[0] = false;
		self[0] = this;
		$deferred.push([(function(exception, self, tryValue) { return function $b() {
			var $ptr, _r$13, _r$14, _ref, _tuple$1, caught, caught$1, caught$2, caught$3, exception$1, ok, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; _tuple$1 = $f._tuple$1; caught = $f.caught; caught$1 = $f.caught$1; caught$2 = $f.caught$2; caught$3 = $f.caught$3; exception$1 = $f.exception$1; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			caught = $recover();
			/* */ if (!($interfaceIsEqual(caught, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(caught, $ifaceNil))) { */ case 1:
				_tuple$1 = $assertType(caught, ptrType$97, true);
				exception$1 = _tuple$1[0];
				ok = _tuple$1[1];
				if (ok) {
					caught = exception$1.eject();
				}
				_ref = caught;
				/* */ if ($assertType(_ref, _error, true)[1]) { $s = 3; continue; }
				/* */ if ($assertType(_ref, Value, true)[1]) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if ($assertType(_ref, _error, true)[1]) { */ case 3:
					caught$1 = _ref.$val;
					exception[0] = true;
					_r$13 = self[0].newError(caught$1.name, caught$1.messageValue()); /* */ $s = 7; case 7: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_r$14 = toValue_object(_r$13); /* */ $s = 8; case 8: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					Value.copy(tryValue[0], _r$14);
					$s = 6; continue;
				/* } else if ($assertType(_ref, Value, true)[1]) { */ case 4:
					caught$2 = _ref.$val;
					exception[0] = true;
					Value.copy(tryValue[0], caught$2);
					$s = 6; continue;
				/* } else { */ case 5:
					caught$3 = _ref;
					$panic(caught$3);
				/* } */ case 6:
			/* } */ case 2:
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f._tuple$1 = _tuple$1; $f.caught = caught; $f.caught$1 = caught$1; $f.caught$2 = caught$2; $f.caught$3 = caught$3; $f.exception$1 = exception$1; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
		}; })(exception, self, tryValue), []]);
		_r$13 = inner(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		Value.copy(tryValue[0], _r$13);
		return [tryValue[0], exception[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tryValue[0], exception[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.tryCatchEvaluate }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.exception = exception; $f.inner = inner; $f.self = self; $f.tryValue = tryValue; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	_runtime.prototype.tryCatchEvaluate = function(inner) { return this.$val.tryCatchEvaluate(inner); };
	_runtime.ptr.prototype.toObject = function(value) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _ref, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _ref = $f._ref; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = this;
		_ref = value.kind;
		/* */ if (_ref === 6 || _ref === 0 || _ref === 1) { $s = 1; continue; }
		/* */ if (_ref === 4) { $s = 2; continue; }
		/* */ if (_ref === 3) { $s = 3; continue; }
		/* */ if (_ref === 2) { $s = 4; continue; }
		/* */ if (_ref === 5) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_ref === 6 || _ref === 0 || _ref === 1) { */ case 1:
			_r$13 = self.panicTypeError(new sliceType$1([])); /* */ $s = 7; case 7: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
			$s = 6; continue;
		/* } else if (_ref === 4) { */ case 2:
			_r$14 = self.newBoolean(value); /* */ $s = 8; case 8: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 9; case 9:
			return _r$14;
		/* } else if (_ref === 3) { */ case 3:
			_r$15 = self.newString(value); /* */ $s = 10; case 10: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 11; case 11:
			return _r$15;
		/* } else if (_ref === 2) { */ case 4:
			_r$16 = self.newNumber(value); /* */ $s = 12; case 12: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ $s = 13; case 13:
			return _r$16;
		/* } else if (_ref === 5) { */ case 5:
			return value._object();
		/* } */ case 6:
		_r$17 = self.panicTypeError(new sliceType$1([])); /* */ $s = 14; case 14: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		$panic(_r$17);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.toObject }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._ref = _ref; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.toObject = function(value) { return this.$val.toObject(value); };
	_runtime.ptr.prototype.objectCoerce = function(value) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _ref, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _ref = $f._ref; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = this;
		_ref = value.kind;
		/* */ if (_ref === 0) { $s = 1; continue; }
		/* */ if (_ref === 1) { $s = 2; continue; }
		/* */ if (_ref === 4) { $s = 3; continue; }
		/* */ if (_ref === 3) { $s = 4; continue; }
		/* */ if (_ref === 2) { $s = 5; continue; }
		/* */ if (_ref === 5) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_ref === 0) { */ case 1:
			return [ptrType$4.nil, errors.New("undefined")];
		/* } else if (_ref === 1) { */ case 2:
			return [ptrType$4.nil, errors.New("null")];
		/* } else if (_ref === 4) { */ case 3:
			_r$13 = self.newBoolean(value); /* */ $s = 8; case 8: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 9; case 9:
			return [_r$13, $ifaceNil];
		/* } else if (_ref === 3) { */ case 4:
			_r$14 = self.newString(value); /* */ $s = 10; case 10: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 11; case 11:
			return [_r$14, $ifaceNil];
		/* } else if (_ref === 2) { */ case 5:
			_r$15 = self.newNumber(value); /* */ $s = 12; case 12: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 13; case 13:
			return [_r$15, $ifaceNil];
		/* } else if (_ref === 5) { */ case 6:
			return [value._object(), $ifaceNil];
		/* } */ case 7:
		_r$16 = self.panicTypeError(new sliceType$1([])); /* */ $s = 14; case 14: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		$panic(_r$16);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.objectCoerce }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._ref = _ref; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.objectCoerce = function(value) { return this.$val.objectCoerce(value); };
	checkObjectCoercible = function(rt, value) {
		var $ptr, _r$13, _tuple$1, isObject, mustCoerce, rt, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _tuple$1 = $f._tuple$1; isObject = $f.isObject; mustCoerce = $f.mustCoerce; rt = $f.rt; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		_tuple$1 = testObjectCoercible(value);
		isObject = _tuple$1[0];
		mustCoerce = _tuple$1[1];
		/* */ if (!isObject && !mustCoerce) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!isObject && !mustCoerce) { */ case 1:
			_r$13 = rt.panicTypeError(new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: checkObjectCoercible }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._tuple$1 = _tuple$1; $f.isObject = isObject; $f.mustCoerce = mustCoerce; $f.rt = rt; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	testObjectCoercible = function(value) {
		var $ptr, _ref, _tmp, _tmp$1, isObject, mustCoerce, value;
		isObject = false;
		mustCoerce = false;
		value = $clone(value, Value);
		_ref = value.kind;
		if (_ref === 8 || _ref === 6 || _ref === 1 || _ref === 0) {
			_tmp = false;
			_tmp$1 = false;
			isObject = _tmp;
			mustCoerce = _tmp$1;
			return [isObject, mustCoerce];
		} else if (_ref === 2 || _ref === 3 || _ref === 4) {
			isObject = false;
			mustCoerce = true;
		} else if (_ref === 5) {
			isObject = true;
			mustCoerce = false;
		}
		return [isObject, mustCoerce];
	};
	_runtime.ptr.prototype.safeToValue = function(value) {
		var $ptr, _r$13, err, result, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; err = $f.err; result = $f.result; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		self = [self];
		value = [value];
		self[0] = this;
		result[0] = new Value.ptr(0, $ifaceNil);
		_r$13 = catchPanic((function(result, self, value) { return function $b() {
			var $ptr, _r$13, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$13 = self[0].toValue(value[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			Value.copy(result[0], _r$13);
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.$s = $s; $f.$r = $r; return $f;
		}; })(result, self, value)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		err = _r$13;
		return [result[0], err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.safeToValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.err = err; $f.result = result; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.safeToValue = function(value) { return this.$val.safeToValue(value); };
	convertNumeric = function(val, t) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _v, f64, i64, i64$1, t, u64, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _v = $f._v; f64 = $f.f64; i64 = $f.i64; i64$1 = $f.i64$1; t = $f.t; u64 = $f.u64; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = val;
		_r$13 = t.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ if (val.Kind() === _r$13) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (val.Kind() === _r$13) { */ case 1:
			return val;
		/* } */ case 2:
		/* */ if (val.Kind() === 20) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (val.Kind() === 20) { */ case 4:
			_r$14 = val.Interface(); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = reflect.ValueOf(_r$14); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			val = _r$15;
		/* } */ case 5:
		_ref = val.Kind();
		/* */ if (_ref === 13 || _ref === 14) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (_ref === 13 || _ref === 14) { */ case 8:
			f64 = val.Float();
			_r$16 = t.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_ref$1 = _r$16;
			/* */ if (_ref$1 === 14) { $s = 11; continue; }
			/* */ if (_ref$1 === 13) { $s = 12; continue; }
			/* */ if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6 || _ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (_ref$1 === 14) { */ case 11:
				_r$17 = reflect.ValueOf(new $Float64(f64)); /* */ $s = 16; case 16: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				/* */ $s = 17; case 17:
				return _r$17;
			/* } else if (_ref$1 === 13) { */ case 12:
				_r$18 = reflect.Zero(t); /* */ $s = 20; case 20: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				_r$19 = _r$18.OverflowFloat(f64); /* */ $s = 21; case 21: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				/* */ if (_r$19) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (_r$19) { */ case 18:
					$panic(new $String("converting float64 to float32 would overflow"));
				/* } */ case 19:
				_r$20 = val.Convert(t); /* */ $s = 22; case 22: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				/* */ $s = 23; case 23:
				return _r$20;
			/* } else if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6 || _ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11) { */ case 13:
				i64 = new $Int64(0, f64);
				/* */ if (!(($flatten64(i64) === f64))) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (!(($flatten64(i64) === f64))) { */ case 24:
					_r$21 = fmt.Sprintf("converting %v to %v would cause loss of precision", new sliceType$1([val.Type(), t])); /* */ $s = 26; case 26: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
					$panic(new $String(_r$21));
				/* } */ case 25:
				_r$22 = reflect.ValueOf(i64); /* */ $s = 27; case 27: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				val = _r$22;
				$s = 15; continue;
			/* } else { */ case 14:
				_r$23 = fmt.Sprintf("cannot convert %v to %v", new sliceType$1([val.Type(), t])); /* */ $s = 28; case 28: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				$panic(new $String(_r$23));
			/* } */ case 15:
		/* } */ case 9:
		_ref$2 = val.Kind();
		/* */ if (_ref$2 === 2 || _ref$2 === 3 || _ref$2 === 4 || _ref$2 === 5 || _ref$2 === 6) { $s = 29; continue; }
		/* */ if (_ref$2 === 7 || _ref$2 === 8 || _ref$2 === 9 || _ref$2 === 10 || _ref$2 === 11) { $s = 30; continue; }
		/* */ $s = 31; continue;
		/* if (_ref$2 === 2 || _ref$2 === 3 || _ref$2 === 4 || _ref$2 === 5 || _ref$2 === 6) { */ case 29:
			i64$1 = val.Int();
			_r$24 = t.Kind(); /* */ $s = 32; case 32: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			_ref$3 = _r$24;
			/* */ if (_ref$3 === 2 || _ref$3 === 3 || _ref$3 === 4 || _ref$3 === 5 || _ref$3 === 6) { $s = 33; continue; }
			/* */ if (_ref$3 === 7 || _ref$3 === 8 || _ref$3 === 9 || _ref$3 === 10 || _ref$3 === 11) { $s = 34; continue; }
			/* */ $s = 35; continue;
			/* if (_ref$3 === 2 || _ref$3 === 3 || _ref$3 === 4 || _ref$3 === 5 || _ref$3 === 6) { */ case 33:
				_r$25 = reflect.Zero(t); /* */ $s = 38; case 38: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				_r$26 = _r$25.OverflowInt(i64$1); /* */ $s = 39; case 39: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				/* */ if (_r$26) { $s = 36; continue; }
				/* */ $s = 37; continue;
				/* if (_r$26) { */ case 36:
					_r$27 = fmt.Sprintf("converting %v to %v would overflow", new sliceType$1([val.Type(), t])); /* */ $s = 40; case 40: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					$panic(new $String(_r$27));
				/* } */ case 37:
				_r$28 = val.Convert(t); /* */ $s = 41; case 41: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				/* */ $s = 42; case 42:
				return _r$28;
			/* } else if (_ref$3 === 7 || _ref$3 === 8 || _ref$3 === 9 || _ref$3 === 10 || _ref$3 === 11) { */ case 34:
				/* */ if ((i64$1.$high < 0 || (i64$1.$high === 0 && i64$1.$low < 0))) { $s = 43; continue; }
				/* */ $s = 44; continue;
				/* if ((i64$1.$high < 0 || (i64$1.$high === 0 && i64$1.$low < 0))) { */ case 43:
					_r$29 = fmt.Sprintf("converting %v to %v would underflow", new sliceType$1([val.Type(), t])); /* */ $s = 45; case 45: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					$panic(new $String(_r$29));
				/* } */ case 44:
				_r$30 = reflect.Zero(t); /* */ $s = 48; case 48: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				_r$31 = _r$30.OverflowUint(new $Uint64(i64$1.$high, i64$1.$low)); /* */ $s = 49; case 49: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				/* */ if (_r$31) { $s = 46; continue; }
				/* */ $s = 47; continue;
				/* if (_r$31) { */ case 46:
					_r$32 = fmt.Sprintf("converting %v to %v would overflow", new sliceType$1([val.Type(), t])); /* */ $s = 50; case 50: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
					$panic(new $String(_r$32));
				/* } */ case 47:
				_r$33 = val.Convert(t); /* */ $s = 51; case 51: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
				/* */ $s = 52; case 52:
				return _r$33;
			/* } */ case 35:
			$s = 31; continue;
		/* } else if (_ref$2 === 7 || _ref$2 === 8 || _ref$2 === 9 || _ref$2 === 10 || _ref$2 === 11) { */ case 30:
			u64 = val.Uint();
			_r$34 = t.Kind(); /* */ $s = 53; case 53: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
			_ref$4 = _r$34;
			/* */ if (_ref$4 === 2 || _ref$4 === 3 || _ref$4 === 4 || _ref$4 === 5 || _ref$4 === 6) { $s = 54; continue; }
			/* */ if (_ref$4 === 7 || _ref$4 === 8 || _ref$4 === 9 || _ref$4 === 10 || _ref$4 === 11) { $s = 55; continue; }
			/* */ $s = 56; continue;
			/* if (_ref$4 === 2 || _ref$4 === 3 || _ref$4 === 4 || _ref$4 === 5 || _ref$4 === 6) { */ case 54:
				if ((u64.$high > 2147483647 || (u64.$high === 2147483647 && u64.$low > 4294967295))) { _v = true; $s = 59; continue s; }
				_r$35 = reflect.Zero(t); /* */ $s = 60; case 60: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
				_r$36 = _r$35.OverflowInt(new $Int64(u64.$high, u64.$low)); /* */ $s = 61; case 61: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
				_v = _r$36; case 59:
				/* */ if (_v) { $s = 57; continue; }
				/* */ $s = 58; continue;
				/* if (_v) { */ case 57:
					_r$37 = fmt.Sprintf("converting %v to %v would overflow", new sliceType$1([val.Type(), t])); /* */ $s = 62; case 62: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
					$panic(new $String(_r$37));
				/* } */ case 58:
				_r$38 = val.Convert(t); /* */ $s = 63; case 63: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
				/* */ $s = 64; case 64:
				return _r$38;
			/* } else if (_ref$4 === 7 || _ref$4 === 8 || _ref$4 === 9 || _ref$4 === 10 || _ref$4 === 11) { */ case 55:
				_r$39 = reflect.Zero(t); /* */ $s = 67; case 67: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
				_r$40 = _r$39.OverflowUint(u64); /* */ $s = 68; case 68: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
				/* */ if (_r$40) { $s = 65; continue; }
				/* */ $s = 66; continue;
				/* if (_r$40) { */ case 65:
					_r$41 = fmt.Sprintf("converting %v to %v would overflow", new sliceType$1([val.Type(), t])); /* */ $s = 69; case 69: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
					$panic(new $String(_r$41));
				/* } */ case 66:
				_r$42 = val.Convert(t); /* */ $s = 70; case 70: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
				/* */ $s = 71; case 71:
				return _r$42;
			/* } */ case 56:
		/* } */ case 31:
		_r$43 = fmt.Sprintf("unsupported type %v for numeric conversion", new sliceType$1([val.Type()])); /* */ $s = 72; case 72: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
		$panic(new $String(_r$43));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: convertNumeric }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._v = _v; $f.f64 = f64; $f.i64 = i64; $f.i64$1 = i64$1; $f.t = t; $f.u64 = u64; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	callParamConvert = function(val, t) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _ref, _ref$1, elemType, i, s, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _ref = $f._ref; _ref$1 = $f._ref$1; elemType = $f.elemType; i = $f.i; s = $f.s; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = val;
		/* */ if (val.Kind() === 20) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (val.Kind() === 20) { */ case 1:
			_r$13 = val.Interface(); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = reflect.ValueOf(_r$13); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			val = _r$14;
		/* } */ case 2:
		_r$15 = t.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_ref = _r$15;
		/* */ if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 13 || _ref === 14) { $s = 6; continue; }
		/* */ if (_ref === 23) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 13 || _ref === 14) { */ case 6:
			_r$16 = t.Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ if (val.Kind() === _r$16) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (val.Kind() === _r$16) { */ case 10:
				return val;
			/* } */ case 11:
			_r$17 = convertNumeric(val, t); /* */ $s = 13; case 13: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ $s = 14; case 14:
			return _r$17;
		/* } else if (_ref === 23) { */ case 7:
			/* */ if (!((val.Kind() === 23))) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (!((val.Kind() === 23))) { */ case 15:
				_r$18 = fmt.Sprintf("cannot use %v as type %v", new sliceType$1([new val.constructor.elem(val), t])); /* */ $s = 17; case 17: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				$panic(new $String(_r$18));
			/* } */ case 16:
			$s = 9; continue;
		/* } else { */ case 8:
			return val;
		/* } */ case 9:
		_r$19 = t.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		elemType = _r$19;
		_r$20 = elemType.Kind(); /* */ $s = 19; case 19: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		_ref$1 = _r$20;
		/* */ if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11 || _ref$1 === 13 || _ref$1 === 14 || _ref$1 === 23) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11 || _ref$1 === 13 || _ref$1 === 14 || _ref$1 === 23) { */ case 20:
			_r$21 = reflect.MakeSlice(reflect.SliceOf(elemType), val.Len(), val.Len()); /* */ $s = 22; case 22: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			s = _r$21;
			i = 0;
			/* while (true) { */ case 23:
				/* if (!(i < val.Len())) { break; } */ if(!(i < val.Len())) { $s = 24; continue; }
				_r$22 = s.Index(i); /* */ $s = 25; case 25: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				_r$23 = val.Index(i); /* */ $s = 26; case 26: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				_r$24 = callParamConvert(_r$23, elemType); /* */ $s = 27; case 27: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				$r = _r$22.Set(_r$24); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i = i + (1) >> 0;
			/* } */ $s = 23; continue; case 24:
			return s;
		/* } */ case 21:
		return val;
		/* */ } return; } if ($f === undefined) { $f = { $blk: callParamConvert }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._ref = _ref; $f._ref$1 = _ref$1; $f.elemType = elemType; $f.i = i; $f.s = s; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	callSliceRequired = function(param, val) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, param, val, vt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; param = $f.param; val = $f.val; vt = $f.vt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = val;
		vt = val.Type();
		/* while (true) { */ case 1:
			_r$13 = param.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* if (!(_r$13 === 23)) { break; } */ if(!(_r$13 === 23)) { $s = 2; continue; }
			/* */ if (val.Kind() === 20) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (val.Kind() === 20) { */ case 4:
				_r$14 = val.Interface(); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_r$15 = reflect.ValueOf(_r$14); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				val = _r$15;
				vt = val.Type();
			/* } */ case 5:
			_r$16 = vt.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ if (!((_r$16 === 23))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!((_r$16 === 23))) { */ case 8:
				return false;
			/* } */ case 9:
			_r$17 = vt.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			vt = _r$17;
			/* */ if (!((val.Kind() === 0))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (!((val.Kind() === 0))) { */ case 12:
				/* */ if (val.Len() > 0) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (val.Len() > 0) { */ case 14:
					_r$18 = val.Index(0); /* */ $s = 17; case 17: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					val = _r$18;
					$s = 16; continue;
				/* } else { */ case 15:
					val = new reflect.Value.ptr(ptrType$99.nil, 0, 0);
				/* } */ case 16:
			/* } */ case 13:
			_r$19 = param.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			param = _r$19;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: callSliceRequired }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f.param = param; $f.val = val; $f.vt = vt; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.toValue = function(value) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _ref, _ref$1, _ref$2, self, value, value$1, value$2, value$3, value$4, value$5, value$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; self = $f.self; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; value$3 = $f.value$3; value$4 = $f.value$4; value$5 = $f.value$5; value$6 = $f.value$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = [self];
		value$1 = [value$1];
		self[0] = this;
		_ref = value;
		/* */ if ($assertType(_ref, Value, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, funcType, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, _nativeFunction, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, Object, true)[1] || $assertType(_ref, ptrType$98, true)[1] || $assertType(_ref, _object, true)[1] || $assertType(_ref, ptrType$4, true)[1]) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ($assertType(_ref, Value, true)[1]) { */ case 1:
			value$2 = _ref.$val;
			return value$2;
		/* } else if ($assertType(_ref, funcType, true)[1]) { */ case 2:
			value$3 = _ref.$val;
			_r$13 = self[0].newNativeFunction("", value$3); /* */ $s = 7; case 7: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = toValue_object(_r$13); /* */ $s = 8; case 8: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 9; case 9:
			return _r$14;
		/* } else if ($assertType(_ref, _nativeFunction, true)[1]) { */ case 3:
			value$4 = _ref.$val;
			_r$15 = self[0].newNativeFunction("", value$4); /* */ $s = 10; case 10: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = toValue_object(_r$15); /* */ $s = 11; case 11: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ $s = 12; case 12:
			return _r$16;
		/* } else if ($assertType(_ref, Object, true)[1] || $assertType(_ref, ptrType$98, true)[1] || $assertType(_ref, _object, true)[1] || $assertType(_ref, ptrType$4, true)[1]) { */ case 4:
			value$5 = _ref;
			$s = 6; continue;
		/* } else { */ case 5:
			value$6 = _ref;
			_r$17 = reflect.ValueOf(value$6); /* */ $s = 13; case 13: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			value$1[0] = _r$17;
			_ref$1 = value$1[0].Kind();
			/* */ if (_ref$1 === 22) { $s = 14; continue; }
			/* */ if (_ref$1 === 19) { $s = 15; continue; }
			/* */ if (_ref$1 === 25) { $s = 16; continue; }
			/* */ if (_ref$1 === 21) { $s = 17; continue; }
			/* */ if (_ref$1 === 23) { $s = 18; continue; }
			/* */ if (_ref$1 === 17) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (_ref$1 === 22) { */ case 14:
				_r$18 = reflect.Indirect(value$1[0]); /* */ $s = 21; case 21: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				_r$19 = _r$18.Kind(); /* */ $s = 22; case 22: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				_ref$2 = _r$19;
				/* */ if (_ref$2 === 25) { $s = 23; continue; }
				/* */ if (_ref$2 === 17) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (_ref$2 === 25) { */ case 23:
					_r$20 = self[0].newGoStructObject(value$1[0]); /* */ $s = 26; case 26: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
					_r$21 = toValue_object(_r$20); /* */ $s = 27; case 27: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
					/* */ $s = 28; case 28:
					return _r$21;
				/* } else if (_ref$2 === 17) { */ case 24:
					return toValue_object(self[0].newGoArray(value$1[0]));
				/* } */ case 25:
				$s = 20; continue;
			/* } else if (_ref$1 === 19) { */ case 15:
				_r$22 = self[0].newNativeFunction("", (function(self, value$1) { return function $b(call) {
					var $ptr, _i, _i$1, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _ref$3, _ref$4, _ref$5, argsCount, call, callSlice, i, i$1, in$1, isVariadic, l, lastArg, lastParam, out, paramType, paramsCount, s, t, v, val, value$7, x, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; argsCount = $f.argsCount; call = $f.call; callSlice = $f.callSlice; i = $f.i; i$1 = $f.i$1; in$1 = $f.in$1; isVariadic = $f.isVariadic; l = $f.l; lastArg = $f.lastArg; lastParam = $f.lastParam; out = $f.out; paramType = $f.paramType; paramsCount = $f.paramsCount; s = $f.s; t = $f.t; v = $f.v; val = $f.val; value$7 = $f.value$7; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					call = $clone(call, FunctionCall);
					argsCount = call.ArgumentList.$length;
					in$1 = $makeSlice(sliceType$16, argsCount);
					t = value$1[0].Type();
					callSlice = false;
					_r$22 = t.NumIn(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					paramsCount = _r$22;
					lastParam = paramsCount - 1 >> 0;
					lastArg = argsCount - 1 >> 0;
					_r$23 = t.IsVariadic(); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					isVariadic = _r$23;
					_ref$3 = call.ArgumentList;
					_i = 0;
					/* while (true) { */ case 3:
						/* if (!(_i < _ref$3.$length)) { break; } */ if(!(_i < _ref$3.$length)) { $s = 4; continue; }
						i = _i;
						value$7 = $clone(((_i < 0 || _i >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i]), Value);
						paramType = $ifaceNil;
						/* */ if (isVariadic && (i === lastArg) && (argsCount === paramsCount)) { $s = 5; continue; }
						/* */ $s = 6; continue;
						/* if (isVariadic && (i === lastArg) && (argsCount === paramsCount)) { */ case 5:
							_r$24 = t.In(lastArg); /* */ $s = 7; case 7: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
							paramType = _r$24;
							_r$25 = value$7.export$(); /* */ $s = 8; case 8: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
							_r$26 = reflect.ValueOf(_r$25); /* */ $s = 9; case 9: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
							val = _r$26;
							_r$27 = callSliceRequired(paramType, val); /* */ $s = 10; case 10: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
							callSlice = _r$27;
							/* */ if (callSlice) { $s = 11; continue; }
							/* */ $s = 12; continue;
							/* if (callSlice) { */ case 11:
								_r$28 = value$7.export$(); /* */ $s = 13; case 13: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
								_r$29 = reflect.ValueOf(_r$28); /* */ $s = 14; case 14: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
								_r$30 = callParamConvert(_r$29, paramType); /* */ $s = 15; case 15: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
								((i < 0 || i >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i] = _r$30);
								_i++;
								/* continue; */ $s = 3; continue;
							/* } */ case 12:
						/* } */ case 6:
						/* */ if (i >= lastParam) { $s = 16; continue; }
						/* */ $s = 17; continue;
						/* if (i >= lastParam) { */ case 16:
							/* */ if (isVariadic) { $s = 19; continue; }
							/* */ $s = 20; continue;
							/* if (isVariadic) { */ case 19:
								_r$31 = t.In(lastParam); /* */ $s = 22; case 22: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
								_r$32 = _r$31.Elem(); /* */ $s = 23; case 23: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
								paramType = _r$32;
								$s = 21; continue;
							/* } else { */ case 20:
								_r$33 = t.In(lastParam); /* */ $s = 24; case 24: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
								paramType = _r$33;
							/* } */ case 21:
							$s = 18; continue;
						/* } else { */ case 17:
							_r$34 = t.In(i); /* */ $s = 25; case 25: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
							paramType = _r$34;
						/* } */ case 18:
						_r$35 = value$7.export$(); /* */ $s = 26; case 26: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
						_r$36 = reflect.ValueOf(_r$35); /* */ $s = 27; case 27: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
						_r$37 = callParamConvert(_r$36, paramType); /* */ $s = 28; case 28: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
						((i < 0 || i >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i] = _r$37);
						_i++;
					/* } */ $s = 3; continue; case 4:
					out = sliceType$16.nil;
					/* */ if (callSlice) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if (callSlice) { */ case 29:
						_r$38 = value$1[0].CallSlice(in$1); /* */ $s = 32; case 32: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
						out = _r$38;
						$s = 31; continue;
					/* } else { */ case 30:
						_r$39 = value$1[0].Call(in$1); /* */ $s = 33; case 33: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
						out = _r$39;
					/* } */ case 31:
					l = out.$length;
					_ref$4 = l;
					/* */ if (_ref$4 === 0) { $s = 34; continue; }
					/* */ if (_ref$4 === 1) { $s = 35; continue; }
					/* */ $s = 36; continue;
					/* if (_ref$4 === 0) { */ case 34:
						return new Value.ptr(0, $ifaceNil);
					/* } else if (_ref$4 === 1) { */ case 35:
						_r$40 = (0 >= out.$length ? $throwRuntimeError("index out of range") : out.$array[out.$offset + 0]).Interface(); /* */ $s = 37; case 37: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
						_r$41 = self[0].toValue(_r$40); /* */ $s = 38; case 38: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
						/* */ $s = 39; case 39:
						return _r$41;
					/* } */ case 36:
					s = $makeSlice(sliceType$1, l);
					_ref$5 = out;
					_i$1 = 0;
					/* while (true) { */ case 40:
						/* if (!(_i$1 < _ref$5.$length)) { break; } */ if(!(_i$1 < _ref$5.$length)) { $s = 41; continue; }
						i$1 = _i$1;
						v = ((_i$1 < 0 || _i$1 >= _ref$5.$length) ? $throwRuntimeError("index out of range") : _ref$5.$array[_ref$5.$offset + _i$1]);
						_r$42 = v.Interface(); /* */ $s = 42; case 42: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
						_r$43 = self[0].toValue(_r$42); /* */ $s = 43; case 43: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
						((i$1 < 0 || i$1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i$1] = (x = _r$43, new x.constructor.elem(x)));
						_i$1++;
					/* } */ $s = 40; continue; case 41:
					_r$44 = self[0].toValue(s); /* */ $s = 44; case 44: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
					/* */ $s = 45; case 45:
					return _r$44;
					/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f.argsCount = argsCount; $f.call = call; $f.callSlice = callSlice; $f.i = i; $f.i$1 = i$1; $f.in$1 = in$1; $f.isVariadic = isVariadic; $f.l = l; $f.lastArg = lastArg; $f.lastParam = lastParam; $f.out = out; $f.paramType = paramType; $f.paramsCount = paramsCount; $f.s = s; $f.t = t; $f.v = v; $f.val = val; $f.value$7 = value$7; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
				}; })(self, value$1)); /* */ $s = 29; case 29: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				_r$23 = toValue_object(_r$22); /* */ $s = 30; case 30: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				/* */ $s = 31; case 31:
				return _r$23;
			/* } else if (_ref$1 === 25) { */ case 16:
				_r$24 = self[0].newGoStructObject(value$1[0]); /* */ $s = 32; case 32: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				_r$25 = toValue_object(_r$24); /* */ $s = 33; case 33: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				/* */ $s = 34; case 34:
				return _r$25;
			/* } else if (_ref$1 === 21) { */ case 17:
				_r$26 = self[0].newGoMapObject(value$1[0]); /* */ $s = 35; case 35: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				_r$27 = toValue_object(_r$26); /* */ $s = 36; case 36: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				/* */ $s = 37; case 37:
				return _r$27;
			/* } else if (_ref$1 === 23) { */ case 18:
				return toValue_object(self[0].newGoSlice(value$1[0]));
			/* } else if (_ref$1 === 17) { */ case 19:
				return toValue_object(self[0].newGoArray(value$1[0]));
			/* } */ case 20:
		/* } */ case 6:
		_r$28 = toValue(value); /* */ $s = 38; case 38: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
		/* */ $s = 39; case 39:
		return _r$28;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.toValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.self = self; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.value$3 = value$3; $f.value$4 = value$4; $f.value$5 = value$5; $f.value$6 = value$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.toValue = function(value) { return this.$val.toValue(value); };
	_runtime.ptr.prototype.newGoSlice = function(value) {
		var $ptr, runtime$1, self, value;
		value = value;
		runtime$1 = this;
		self = runtime$1.newGoSliceObject(value);
		self.prototype = runtime$1.global.ArrayPrototype;
		return self;
	};
	_runtime.prototype.newGoSlice = function(value) { return this.$val.newGoSlice(value); };
	_runtime.ptr.prototype.newGoArray = function(value) {
		var $ptr, runtime$1, self, value;
		value = value;
		runtime$1 = this;
		self = runtime$1.newGoArrayObject(value);
		self.prototype = runtime$1.global.ArrayPrototype;
		return self;
	};
	_runtime.prototype.newGoArray = function(value) { return this.$val.newGoArray(value); };
	_runtime.ptr.prototype.parse = function(filename, src) {
		var $ptr, _r$13, filename, runtime$1, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; filename = $f.filename; runtime$1 = $f.runtime$1; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		runtime$1 = this;
		_r$13 = parser.ParseFile(ptrType$100.nil, filename, src, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.parse }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.filename = filename; $f.runtime$1 = runtime$1; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.parse = function(filename, src) { return this.$val.parse(filename, src); };
	_runtime.ptr.prototype.cmpl_parse = function(filename, src) {
		var $ptr, _r$13, _r$14, _tuple$1, err, filename, program, runtime$1, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; err = $f.err; filename = $f.filename; program = $f.program; runtime$1 = $f.runtime$1; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		runtime$1 = this;
		_r$13 = parser.ParseFile(ptrType$100.nil, filename, src, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		program = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$101.nil, err];
		}
		_r$14 = cmpl_parse(program); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return [_r$14, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_parse }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.err = err; $f.filename = filename; $f.program = program; $f.runtime$1 = runtime$1; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_parse = function(filename, src) { return this.$val.cmpl_parse(filename, src); };
	_runtime.ptr.prototype.parseSource = function(src) {
		var $ptr, _r$13, _ref, _tuple$1, err, program, self, src, src$1, src$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _ref = $f._ref; _tuple$1 = $f._tuple$1; err = $f.err; program = $f.program; self = $f.self; src = $f.src; src$1 = $f.src$1; src$2 = $f.src$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_ref = src;
		if ($assertType(_ref, ptrType$9, true)[1]) {
			src$1 = _ref.$val;
			return [ptrType$101.nil, src$1, $ifaceNil];
		} else if ($assertType(_ref, ptrType$102, true)[1]) {
			src$2 = _ref.$val;
			return [src$2.program, ptrType$9.nil, $ifaceNil];
		}
		_r$13 = self.parse("", src); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		program = _tuple$1[0];
		err = _tuple$1[1];
		return [ptrType$101.nil, program, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.parseSource }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._ref = _ref; $f._tuple$1 = _tuple$1; $f.err = err; $f.program = program; $f.self = self; $f.src = src; $f.src$1 = src$1; $f.src$2 = src$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.parseSource = function(src) { return this.$val.parseSource(src); };
	_runtime.ptr.prototype.cmpl_runOrEval = function(src, eval$1) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _ref, _tuple$1, cmpl_program, err, eval$1, program, result, self, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _ref = $f._ref; _tuple$1 = $f._tuple$1; cmpl_program = $f.cmpl_program; err = $f.err; eval$1 = $f.eval$1; program = $f.program; result = $f.result; self = $f.self; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cmpl_program = [cmpl_program];
		eval$1 = [eval$1];
		result = [result];
		self = [self];
		self[0] = this;
		result[0] = new Value.ptr(0, $ifaceNil);
		_r$13 = self[0].parseSource(src); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		cmpl_program[0] = _tuple$1[0];
		program = _tuple$1[1];
		err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [result[0], err];
		}
		/* */ if (cmpl_program[0] === ptrType$101.nil) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (cmpl_program[0] === ptrType$101.nil) { */ case 2:
			_r$14 = cmpl_parse(program); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			cmpl_program[0] = _r$14;
		/* } */ case 3:
		_r$15 = catchPanic((function(cmpl_program, eval$1, result, self) { return function $b() {
			var $ptr, _r$15, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$15 = $f._r$15; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$15 = self[0].cmpl_evaluate_nodeProgram(cmpl_program[0], eval$1[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			Value.copy(result[0], _r$15);
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$15 = _r$15; $f.$s = $s; $f.$r = $r; return $f;
		}; })(cmpl_program, eval$1, result, self)); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		err = _r$15;
		_ref = result[0].kind;
		/* */ if (_ref === 6) { $s = 6; continue; }
		/* */ if (_ref === 8) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (_ref === 6) { */ case 6:
			Value.copy(result[0], new Value.ptr(0, $ifaceNil));
			$s = 8; continue;
		/* } else if (_ref === 8) { */ case 7:
			_r$16 = result[0].resolve(); /* */ $s = 9; case 9: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			Value.copy(result[0], _r$16);
		/* } */ case 8:
		return [result[0], err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_runOrEval }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._ref = _ref; $f._tuple$1 = _tuple$1; $f.cmpl_program = cmpl_program; $f.err = err; $f.eval$1 = eval$1; $f.program = program; $f.result = result; $f.self = self; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_runOrEval = function(src, eval$1) { return this.$val.cmpl_runOrEval(src, eval$1); };
	_runtime.ptr.prototype.cmpl_run = function(src) {
		var $ptr, _r$13, self, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; self = $f.self; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.cmpl_runOrEval(src, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_run }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.self = self; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_run = function(src) { return this.$val.cmpl_run(src); };
	_runtime.ptr.prototype.cmpl_eval = function(src) {
		var $ptr, _r$13, self, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; self = $f.self; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.cmpl_runOrEval(src, true); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_eval }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.self = self; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_eval = function(src) { return this.$val.cmpl_eval(src); };
	_runtime.ptr.prototype.parseThrow = function(err) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _ref, err, err$1, err$2, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _ref = $f._ref; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return;
		}
		_ref = err;
		/* */ if ($assertType(_ref, parser.ErrorList, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, parser.ErrorList, true)[1]) { */ case 1:
			err$1 = _ref.$val;
			err$2 = (0 >= err$1.$length ? $throwRuntimeError("index out of range") : err$1.$array[err$1.$offset + 0]);
			/* */ if (err$2.Message === "Invalid left-hand side in assignment") { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (err$2.Message === "Invalid left-hand side in assignment") { */ case 3:
				_r$13 = self.panicReferenceError(new sliceType$1([new $String(err$2.Message)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				$panic(_r$13);
			/* } */ case 4:
			_r$14 = self.panicSyntaxError(new sliceType$1([new $String(err$2.Message)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			$panic(_r$14);
		/* } */ case 2:
		_r$15 = err.Error(); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = self.panicSyntaxError(new sliceType$1([new $String(_r$15)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		$panic(_r$16);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.parseThrow }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._ref = _ref; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.parseThrow = function(err) { return this.$val.parseThrow(err); };
	_runtime.ptr.prototype.cmpl_parseOrThrow = function(source) {
		var $ptr, _r$13, _tuple$1, err, program, self, source, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _tuple$1 = $f._tuple$1; err = $f.err; program = $f.program; self = $f.self; source = $f.source; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.cmpl_parse("", new $String(source)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		program = _tuple$1[0];
		err = _tuple$1[1];
		$r = self.parseThrow(err); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return program;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.cmpl_parseOrThrow }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._tuple$1 = _tuple$1; $f.err = err; $f.program = program; $f.self = self; $f.source = source; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.cmpl_parseOrThrow = function(source) { return this.$val.cmpl_parseOrThrow(source); };
	newScope = function(lexical, variable, this$1) {
		var $ptr, lexical, this$1, variable;
		return new _scope.ptr(lexical, variable, this$1, false, ptrType$16.nil, new _frame.ptr(ptrType$1.nil, 0, ""));
	};
	Otto.ptr.prototype.Compile = function(filename, src) {
		var $ptr, _r$13, _r$14, _r$15, _tuple$1, _tuple$2, cmpl_program, err, filename, program, script, self, src, src$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; cmpl_program = $f.cmpl_program; err = $f.err; filename = $f.filename; program = $f.program; script = $f.script; self = $f.self; src = $f.src; src$1 = $f.src$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = parser.ReadSource(filename, src); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		src$1 = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$102.nil, err];
		}
		_r$14 = self.runtime.parse(filename, src$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_tuple$2 = _r$14;
		program = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$102.nil, err];
		}
		_r$15 = cmpl_parse(program); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		cmpl_program = _r$15;
		script = new Script.ptr(scriptVersion, cmpl_program, filename, $bytesToString(src$1));
		return [script, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Otto.ptr.prototype.Compile }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.cmpl_program = cmpl_program; $f.err = err; $f.filename = filename; $f.program = program; $f.script = script; $f.self = self; $f.src = src; $f.src$1 = src$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Otto.prototype.Compile = function(filename, src) { return this.$val.Compile(filename, src); };
	Script.ptr.prototype.String = function() {
		var $ptr, self;
		self = this;
		return "// " + self.filename + "\n" + self.src;
	};
	Script.prototype.String = function() { return this.$val.String(); };
	_runtime.ptr.prototype.newObjectStash = function(object, outer) {
		var $ptr, object, outer, runtime$1;
		runtime$1 = this;
		if (object === ptrType$4.nil) {
			object = runtime$1.newBaseObject();
			object.class$1 = "environment";
		}
		return new _objectStash.ptr(runtime$1, outer, object);
	};
	_runtime.prototype.newObjectStash = function(object, outer) { return this.$val.newObjectStash(object, outer); };
	_objectStash.ptr.prototype.clone = function(clone) {
		var $ptr, _r$13, _r$14, _tuple$1, clone, exists, in$1, out, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; clone = $f.clone; exists = $f.exists; in$1 = $f.in$1; out = $f.out; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		in$1 = this;
		_tuple$1 = clone.objectStash(in$1);
		out = _tuple$1[0];
		exists = _tuple$1[1];
		if (exists) {
			return out;
		}
		_r$13 = clone.stash(in$1._outer); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = clone.object(in$1.object); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_objectStash.copy(out, new _objectStash.ptr(clone.runtime, _r$13, _r$14));
		return out;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _objectStash.ptr.prototype.clone }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.clone = clone; $f.exists = exists; $f.in$1 = in$1; $f.out = out; $f.$s = $s; $f.$r = $r; return $f;
	};
	_objectStash.prototype.clone = function(clone) { return this.$val.clone(clone); };
	_objectStash.ptr.prototype.hasBinding = function(name) {
		var $ptr, _r$13, name, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; name = $f.name; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.object.hasProperty(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _objectStash.ptr.prototype.hasBinding }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.name = name; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_objectStash.prototype.hasBinding = function(name) { return this.$val.hasBinding(name); };
	_objectStash.ptr.prototype.createBinding = function(name, deletable, value) {
		var $ptr, _r$13, _r$14, _r$15, deletable, mode, name, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; deletable = $f.deletable; mode = $f.mode; name = $f.name; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = this;
		_r$13 = self.object.hasProperty(name); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ if (_r$13) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$13) { */ case 1:
			_r$14 = hereBeDragons(new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			$panic(new $String(_r$14));
		/* } */ case 2:
		mode = 73;
		if (!deletable) {
			mode = 72;
		}
		_r$15 = self.object.defineProperty(name, value, mode, false); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$15;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _objectStash.ptr.prototype.createBinding }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.deletable = deletable; $f.mode = mode; $f.name = name; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_objectStash.prototype.createBinding = function(name, deletable, value) { return this.$val.createBinding(name, deletable, value); };
	_objectStash.ptr.prototype.setBinding = function(name, value, strict) {
		var $ptr, name, self, strict, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; name = $f.name; self = $f.self; strict = $f.strict; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = this;
		$r = self.object.put(name, value, strict); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _objectStash.ptr.prototype.setBinding }; } $f.$ptr = $ptr; $f.name = name; $f.self = self; $f.strict = strict; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_objectStash.prototype.setBinding = function(name, value, strict) { return this.$val.setBinding(name, value, strict); };
	_objectStash.ptr.prototype.setValue = function(name, value, throw$1) {
		var $ptr, _r$13, name, self, throw$1, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; name = $f.name; self = $f.self; throw$1 = $f.throw$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = this;
		_r$13 = self.hasBinding(name); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ if (!_r$13) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r$13) { */ case 1:
			$r = self.createBinding(name, true, value); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			$r = self.setBinding(name, value, throw$1); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _objectStash.ptr.prototype.setValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.name = name; $f.self = self; $f.throw$1 = throw$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_objectStash.prototype.setValue = function(name, value, throw$1) { return this.$val.setValue(name, value, throw$1); };
	_objectStash.ptr.prototype.getBinding = function(name, throw$1) {
		var $ptr, _r$13, _r$14, _r$15, name, self, throw$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; name = $f.name; self = $f.self; throw$1 = $f.throw$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.object.hasProperty(name); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ if (_r$13) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$13) { */ case 1:
			_r$14 = self.object.get(name); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$14;
		/* } */ case 2:
		/* */ if (throw$1) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (throw$1) { */ case 6:
			_r$15 = self._runtime.panicReferenceError(new sliceType$1([new $String("Not Defined"), new $String(name)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			$panic(_r$15);
		/* } */ case 7:
		return new Value.ptr(0, $ifaceNil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _objectStash.ptr.prototype.getBinding }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.name = name; $f.self = self; $f.throw$1 = throw$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_objectStash.prototype.getBinding = function(name, throw$1) { return this.$val.getBinding(name, throw$1); };
	_objectStash.ptr.prototype.deleteBinding = function(name) {
		var $ptr, _r$13, name, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; name = $f.name; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.object.delete$(name, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _objectStash.ptr.prototype.deleteBinding }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.name = name; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_objectStash.prototype.deleteBinding = function(name) { return this.$val.deleteBinding(name); };
	_objectStash.ptr.prototype.outer = function() {
		var $ptr, self;
		self = this;
		return self._outer;
	};
	_objectStash.prototype.outer = function() { return this.$val.outer(); };
	_objectStash.ptr.prototype.newReference = function(name, strict, at) {
		var $ptr, at, name, self, strict;
		self = this;
		return newPropertyReference(self._runtime, self.object, name, strict, at);
	};
	_objectStash.prototype.newReference = function(name, strict, at) { return this.$val.newReference(name, strict, at); };
	_runtime.ptr.prototype.newDeclarationStash = function(outer) {
		var $ptr, outer, runtime$1;
		runtime$1 = this;
		return new _dclStash.ptr(runtime$1, outer, $makeMap($String.keyFor, []));
	};
	_runtime.prototype.newDeclarationStash = function(outer) { return this.$val.newDeclarationStash(outer); };
	_dclStash.ptr.prototype.clone = function(clone) {
		var $ptr, _entry, _i, _key, _keys, _r$13, _r$14, _ref, _tuple$1, clone, exists, in$1, index, out, property, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _key = $f._key; _keys = $f._keys; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; _tuple$1 = $f._tuple$1; clone = $f.clone; exists = $f.exists; in$1 = $f.in$1; index = $f.index; out = $f.out; property = $f.property; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		in$1 = this;
		_tuple$1 = clone.dclStash(in$1);
		out = _tuple$1[0];
		exists = _tuple$1[1];
		if (exists) {
			return out;
		}
		property = (x = $keys(in$1.property).length, ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
		_ref = in$1.property;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			index = _entry.k;
			value = $clone(_entry.v, _dclProperty);
			_r$13 = clone.dclProperty(value); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_key = index; (property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $clone(_r$13, _dclProperty) };
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$14 = clone.stash(in$1._outer); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_dclStash.copy(out, new _dclStash.ptr(clone.runtime, _r$14, property));
		return out;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _dclStash.ptr.prototype.clone }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._keys = _keys; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f._tuple$1 = _tuple$1; $f.clone = clone; $f.exists = exists; $f.in$1 = in$1; $f.index = index; $f.out = out; $f.property = property; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_dclStash.prototype.clone = function(clone) { return this.$val.clone(clone); };
	_dclStash.ptr.prototype.hasBinding = function(name) {
		var $ptr, _entry, _tuple$1, exists, name, self;
		self = this;
		_tuple$1 = (_entry = self.property[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [new _dclProperty.ptr(new Value.ptr(0, $ifaceNil), false, false, false), false]);
		exists = _tuple$1[1];
		return exists;
	};
	_dclStash.prototype.hasBinding = function(name) { return this.$val.hasBinding(name); };
	_dclStash.ptr.prototype.createBinding = function(name, deletable, value) {
		var $ptr, _entry, _key, _r$13, _tuple$1, deletable, exists, name, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r$13 = $f._r$13; _tuple$1 = $f._tuple$1; deletable = $f.deletable; exists = $f.exists; name = $f.name; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = this;
		_tuple$1 = (_entry = self.property[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [new _dclProperty.ptr(new Value.ptr(0, $ifaceNil), false, false, false), false]);
		exists = _tuple$1[1];
		/* */ if (exists) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (exists) { */ case 1:
			_r$13 = fmt.Errorf("createBinding: %s: already exists", new sliceType$1([new $String(name)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 2:
		_key = name; (self.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new _dclProperty.ptr($clone(value, Value), true, deletable, false) };
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _dclStash.ptr.prototype.createBinding }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r$13 = _r$13; $f._tuple$1 = _tuple$1; $f.deletable = deletable; $f.exists = exists; $f.name = name; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_dclStash.prototype.createBinding = function(name, deletable, value) { return this.$val.createBinding(name, deletable, value); };
	_dclStash.ptr.prototype.setBinding = function(name, value, strict) {
		var $ptr, _entry, _key, _r$13, _r$14, _tuple$1, exists, name, property, self, strict, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; exists = $f.exists; name = $f.name; property = $f.property; self = $f.self; strict = $f.strict; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = this;
		_tuple$1 = (_entry = self.property[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [new _dclProperty.ptr(new Value.ptr(0, $ifaceNil), false, false, false), false]);
		property = $clone(_tuple$1[0], _dclProperty);
		exists = _tuple$1[1];
		/* */ if (!exists) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!exists) { */ case 1:
			_r$13 = fmt.Errorf("setBinding: %s: missing", new sliceType$1([new $String(name)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 2:
		/* */ if (property.mutable) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (property.mutable) { */ case 4:
			Value.copy(property.value, value);
			_key = name; (self.property || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $clone(property, _dclProperty) };
			$s = 6; continue;
		/* } else { */ case 5:
			_r$14 = self._runtime.typeErrorResult(strict); /* */ $s = 7; case 7: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$14;
		/* } */ case 6:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _dclStash.ptr.prototype.setBinding }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.exists = exists; $f.name = name; $f.property = property; $f.self = self; $f.strict = strict; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_dclStash.prototype.setBinding = function(name, value, strict) { return this.$val.setBinding(name, value, strict); };
	_dclStash.ptr.prototype.setValue = function(name, value, throw$1) {
		var $ptr, name, self, throw$1, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; name = $f.name; self = $f.self; throw$1 = $f.throw$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = this;
		/* */ if (!self.hasBinding(name)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!self.hasBinding(name)) { */ case 1:
			$r = self.createBinding(name, false, value); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			$r = self.setBinding(name, value, throw$1); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _dclStash.ptr.prototype.setValue }; } $f.$ptr = $ptr; $f.name = name; $f.self = self; $f.throw$1 = throw$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_dclStash.prototype.setValue = function(name, value, throw$1) { return this.$val.setValue(name, value, throw$1); };
	_dclStash.ptr.prototype.getBinding = function(name, throw$1) {
		var $ptr, _entry, _r$13, _r$14, _tuple$1, exists, name, property, self, throw$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; exists = $f.exists; name = $f.name; property = $f.property; self = $f.self; throw$1 = $f.throw$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_tuple$1 = (_entry = self.property[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [new _dclProperty.ptr(new Value.ptr(0, $ifaceNil), false, false, false), false]);
		property = $clone(_tuple$1[0], _dclProperty);
		exists = _tuple$1[1];
		/* */ if (!exists) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!exists) { */ case 1:
			_r$13 = fmt.Errorf("getBinding: %s: missing", new sliceType$1([new $String(name)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 2:
		/* */ if (!property.mutable && !property.readable) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!property.mutable && !property.readable) { */ case 4:
			/* */ if (throw$1) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (throw$1) { */ case 6:
				_r$14 = self._runtime.panicTypeError(new sliceType$1([])); /* */ $s = 8; case 8: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$panic(_r$14);
			/* } */ case 7:
			return new Value.ptr(0, $ifaceNil);
		/* } */ case 5:
		return property.value;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _dclStash.ptr.prototype.getBinding }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.exists = exists; $f.name = name; $f.property = property; $f.self = self; $f.throw$1 = throw$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_dclStash.prototype.getBinding = function(name, throw$1) { return this.$val.getBinding(name, throw$1); };
	_dclStash.ptr.prototype.deleteBinding = function(name) {
		var $ptr, _entry, _tuple$1, exists, name, property, self;
		self = this;
		_tuple$1 = (_entry = self.property[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [new _dclProperty.ptr(new Value.ptr(0, $ifaceNil), false, false, false), false]);
		property = $clone(_tuple$1[0], _dclProperty);
		exists = _tuple$1[1];
		if (!exists) {
			return true;
		}
		if (!property.deletable) {
			return false;
		}
		delete self.property[$String.keyFor(name)];
		return true;
	};
	_dclStash.prototype.deleteBinding = function(name) { return this.$val.deleteBinding(name); };
	_dclStash.ptr.prototype.outer = function() {
		var $ptr, self;
		self = this;
		return self._outer;
	};
	_dclStash.prototype.outer = function() { return this.$val.outer(); };
	_dclStash.ptr.prototype.newReference = function(name, strict, param) {
		var $ptr, name, param, self, strict;
		self = this;
		return new _stashReference.ptr(name, false, self);
	};
	_dclStash.prototype.newReference = function(name, strict, param) { return this.$val.newReference(name, strict, param); };
	_runtime.ptr.prototype.newFunctionStash = function(outer) {
		var $ptr, outer, runtime$1;
		runtime$1 = this;
		return new _fnStash.ptr(new _dclStash.ptr(runtime$1, outer, $makeMap($String.keyFor, [])), ptrType$4.nil, false);
	};
	_runtime.prototype.newFunctionStash = function(outer) { return this.$val.newFunctionStash(outer); };
	_fnStash.ptr.prototype.clone = function(clone) {
		var $ptr, _entry, _i, _key, _keys, _r$13, _r$14, _ref, _tuple$1, clone, dclStash, exists, in$1, index, name, out, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _key = $f._key; _keys = $f._keys; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; _tuple$1 = $f._tuple$1; clone = $f.clone; dclStash = $f.dclStash; exists = $f.exists; in$1 = $f.in$1; index = $f.index; name = $f.name; out = $f.out; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		in$1 = this;
		_tuple$1 = clone.fnStash(in$1);
		out = _tuple$1[0];
		exists = _tuple$1[1];
		if (exists) {
			return out;
		}
		_r$13 = in$1._dclStash.clone(clone); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		dclStash = $assertType(_r$13, ptrType$17);
		index = (x = $keys(in$1.indexOfArgumentName).length, ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
		_ref = in$1.indexOfArgumentName;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			name = _entry.k;
			value = _entry.v;
			_key = name; (index || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: value };
			_i++;
		}
		_r$14 = clone.object(in$1.arguments$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_fnStash.copy(out, new _fnStash.ptr($clone(dclStash, _dclStash), _r$14, index));
		return out;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _fnStash.ptr.prototype.clone }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._keys = _keys; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f._tuple$1 = _tuple$1; $f.clone = clone; $f.dclStash = dclStash; $f.exists = exists; $f.in$1 = in$1; $f.index = index; $f.name = name; $f.out = out; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_fnStash.prototype.clone = function(clone) { return this.$val.clone(clone); };
	getStashProperties = function(stash) {
		var $ptr, _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _keys, _keys$1, _keys$2, _ref, _ref$1, _ref$2, _ref$3, k, k$1, k$2, keys, stash, vars, vars$1, vars$2, vars$3;
		keys = sliceType.nil;
		_ref = stash;
		if ($assertType(_ref, ptrType$17, true)[1]) {
			vars = _ref.$val;
			_ref$1 = vars.property;
			_i = 0;
			_keys = $keys(_ref$1);
			while (true) {
				if (!(_i < _keys.length)) { break; }
				_entry = _ref$1[_keys[_i]];
				if (_entry === undefined) {
					_i++;
					continue;
				}
				k = _entry.k;
				keys = $append(keys, k);
				_i++;
			}
		} else if ($assertType(_ref, ptrType$18, true)[1]) {
			vars$1 = _ref.$val;
			_ref$2 = vars$1._dclStash.property;
			_i$1 = 0;
			_keys$1 = $keys(_ref$2);
			while (true) {
				if (!(_i$1 < _keys$1.length)) { break; }
				_entry$1 = _ref$2[_keys$1[_i$1]];
				if (_entry$1 === undefined) {
					_i$1++;
					continue;
				}
				k$1 = _entry$1.k;
				keys = $append(keys, k$1);
				_i$1++;
			}
		} else if ($assertType(_ref, ptrType$15, true)[1]) {
			vars$2 = _ref.$val;
			_ref$3 = vars$2.object.property;
			_i$2 = 0;
			_keys$2 = $keys(_ref$3);
			while (true) {
				if (!(_i$2 < _keys$2.length)) { break; }
				_entry$2 = _ref$3[_keys$2[_i$2]];
				if (_entry$2 === undefined) {
					_i$2++;
					continue;
				}
				k$2 = _entry$2.k;
				keys = $append(keys, k$2);
				_i$2++;
			}
		} else {
			vars$3 = _ref;
			$panic(new $String("unknown stash type"));
		}
		return keys;
	};
	_runtime.ptr.prototype.newArgumentsObject = function(indexOfParameterName, stash, length) {
		var $ptr, _i, _r$13, _r$14, _ref, index, indexOfParameterName, length, name, runtime$1, self, stash, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; index = $f.index; indexOfParameterName = $f.indexOfParameterName; length = $f.length; name = $f.name; runtime$1 = $f.runtime$1; self = $f.self; stash = $f.stash; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		runtime$1 = this;
		self = runtime$1.newClassObject("Arguments");
		_ref = indexOfParameterName;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			index = _i;
			name = strconv.FormatInt(new $Int64(0, index), 10);
			_r$13 = objectDefineOwnProperty(self, name, new _property.ptr((x = new Value.ptr(0, $ifaceNil), new x.constructor.elem(x)), 73), false); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$13;
			_i++;
		/* } */ $s = 1; continue; case 2:
		self.objectClass = _classArguments;
		self.value = (x$1 = new _argumentsObject.ptr(indexOfParameterName, stash), new x$1.constructor.elem(x$1));
		self.prototype = runtime$1.global.ObjectPrototype;
		_r$14 = self.defineProperty("length", toValue_int(length), 65, false); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newArgumentsObject }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f.index = index; $f.indexOfParameterName = indexOfParameterName; $f.length = length; $f.name = name; $f.runtime$1 = runtime$1; $f.self = self; $f.stash = stash; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newArgumentsObject = function(indexOfParameterName, stash, length) { return this.$val.newArgumentsObject(indexOfParameterName, stash, length); };
	_argumentsObject.ptr.prototype.clone = function(clone) {
		var $ptr, _r$13, clone, in$1, indexOfParameterName, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; clone = $f.clone; in$1 = $f.in$1; indexOfParameterName = $f.indexOfParameterName; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		in$1 = $clone(this, _argumentsObject);
		indexOfParameterName = $makeSlice(sliceType, in$1.indexOfParameterName.$length);
		$copySlice(indexOfParameterName, in$1.indexOfParameterName);
		_r$13 = clone.stash(in$1.stash); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return new _argumentsObject.ptr(indexOfParameterName, _r$13);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _argumentsObject.ptr.prototype.clone }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.clone = clone; $f.in$1 = in$1; $f.indexOfParameterName = indexOfParameterName; $f.$s = $s; $f.$r = $r; return $f;
	};
	_argumentsObject.prototype.clone = function(clone) { return this.$val.clone(clone); };
	_argumentsObject.ptr.prototype.get = function(name) {
		var $ptr, _r$13, index, name, name$1, self, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; index = $f.index; name = $f.name; name$1 = $f.name$1; self = $f.self; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, _argumentsObject);
		index = stringToArrayIndex(name);
		/* */ if ((index.$high > 0 || (index.$high === 0 && index.$low >= 0)) && (x = new $Int64(0, self.indexOfParameterName.$length), (index.$high < x.$high || (index.$high === x.$high && index.$low < x.$low)))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((index.$high > 0 || (index.$high === 0 && index.$low >= 0)) && (x = new $Int64(0, self.indexOfParameterName.$length), (index.$high < x.$high || (index.$high === x.$high && index.$low < x.$low)))) { */ case 1:
			name$1 = (x$1 = self.indexOfParameterName, (($flatten64(index) < 0 || $flatten64(index) >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + $flatten64(index)]));
			if (name$1 === "") {
				return [new Value.ptr(0, $ifaceNil), false];
			}
			_r$13 = self.stash.getBinding(name$1, false); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return [_r$13, true];
		/* } */ case 2:
		return [new Value.ptr(0, $ifaceNil), false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: _argumentsObject.ptr.prototype.get }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.index = index; $f.name = name; $f.name$1 = name$1; $f.self = self; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_argumentsObject.prototype.get = function(name) { return this.$val.get(name); };
	_argumentsObject.ptr.prototype.put = function(name, value) {
		var $ptr, index, name, self, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; index = $f.index; name = $f.name; self = $f.self; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = $clone(this, _argumentsObject);
		index = stringToArrayIndex(name);
		name = (x = self.indexOfParameterName, (($flatten64(index) < 0 || $flatten64(index) >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + $flatten64(index)]));
		$r = self.stash.setBinding(name, value, false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _argumentsObject.ptr.prototype.put }; } $f.$ptr = $ptr; $f.index = index; $f.name = name; $f.self = self; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_argumentsObject.prototype.put = function(name, value) { return this.$val.put(name, value); };
	_argumentsObject.ptr.prototype.delete$ = function(name) {
		var $ptr, index, name, self, x;
		self = $clone(this, _argumentsObject);
		index = stringToArrayIndex(name);
		(x = self.indexOfParameterName, (($flatten64(index) < 0 || $flatten64(index) >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + $flatten64(index)] = ""));
	};
	_argumentsObject.prototype.delete$ = function(name) { return this.$val.delete$(name); };
	argumentsGet = function(self, name) {
		var $ptr, _r$13, _r$14, _tuple$1, exists, name, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; exists = $f.exists; name = $f.name; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = $assertType(self.value, _argumentsObject).get(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		value = $clone(_tuple$1[0], Value);
		exists = _tuple$1[1];
		/* */ if (exists) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (exists) { */ case 2:
			return value;
		/* } */ case 3:
		_r$14 = objectGet(self, name); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: argumentsGet }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.exists = exists; $f.name = name; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	argumentsGetOwnProperty = function(self, name) {
		var $ptr, _r$13, _tuple$1, exists, name, property, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _tuple$1 = $f._tuple$1; exists = $f.exists; name = $f.name; property = $f.property; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		property = objectGetOwnProperty(self, name);
		_r$13 = $assertType(self.value, _argumentsObject).get(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		value = $clone(_tuple$1[0], Value);
		exists = _tuple$1[1];
		/* */ if (exists) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (exists) { */ case 2:
			property.value = new value.constructor.elem(value);
		/* } */ case 3:
		return property;
		/* */ } return; } if ($f === undefined) { $f = { $blk: argumentsGetOwnProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._tuple$1 = _tuple$1; $f.exists = exists; $f.name = name; $f.property = property; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	argumentsDefineOwnProperty = function(self, name, descriptor, throw$1) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _tuple$1, _tuple$2, descriptor, exists, name, self, throw$1, valid, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; descriptor = $f.descriptor; exists = $f.exists; name = $f.name; self = $f.self; throw$1 = $f.throw$1; valid = $f.valid; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		descriptor = $clone(descriptor, _property);
		_r$13 = $assertType(self.value, _argumentsObject).get(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		exists = _tuple$1[1];
		/* */ if (exists) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (exists) { */ case 2:
			_r$14 = objectDefineOwnProperty(self, name, descriptor, false); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ if (!_r$14) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!_r$14) { */ case 4:
				_r$15 = self.runtime.typeErrorResult(throw$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				/* */ $s = 8; case 8:
				return _r$15;
			/* } */ case 5:
			_tuple$2 = $assertType(descriptor.value, Value, true);
			value = $clone(_tuple$2[0], Value);
			valid = _tuple$2[1];
			/* */ if (valid) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (valid) { */ case 9:
				$r = $assertType(self.value, _argumentsObject).put(name, value); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
			return true;
		/* } */ case 3:
		_r$16 = objectDefineOwnProperty(self, name, descriptor, throw$1); /* */ $s = 12; case 12: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 13; case 13:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: argumentsDefineOwnProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.descriptor = descriptor; $f.exists = exists; $f.name = name; $f.self = self; $f.throw$1 = throw$1; $f.valid = valid; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	argumentsDelete = function(self, name, throw$1) {
		var $ptr, _r$13, _r$14, _tuple$1, exists, name, self, throw$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; exists = $f.exists; name = $f.name; self = $f.self; throw$1 = $f.throw$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = objectDelete(self, name, throw$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ if (!_r$13) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r$13) { */ case 1:
			return false;
		/* } */ case 2:
		_r$14 = $assertType(self.value, _argumentsObject).get(name); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_tuple$1 = _r$14;
		exists = _tuple$1[1];
		/* */ if (exists) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (exists) { */ case 5:
			$assertType(self.value, _argumentsObject).delete$(name);
		/* } */ case 6:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: argumentsDelete }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f.exists = exists; $f.name = name; $f.self = self; $f.throw$1 = throw$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.newArrayObject = function(length) {
		var $ptr, _r$13, length, runtime$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; length = $f.length; runtime$1 = $f.runtime$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		runtime$1 = this;
		self = runtime$1.newObject();
		self.class$1 = "Array";
		_r$13 = self.defineProperty("length", toValue_uint32(length), 64, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$13;
		self.objectClass = _classArray;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newArrayObject }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.length = length; $f.runtime$1 = runtime$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newArrayObject = function(length) { return this.$val.newArrayObject(length); };
	isArray = function(object) {
		var $ptr, object;
		return !(object === ptrType$4.nil) && (object.class$1 === "Array" || object.class$1 === "GoArray");
	};
	objectLength = function(object) {
		var $ptr, _r$13, _r$14, _r$15, _ref, object, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _ref = $f._ref; object = $f.object; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (object === ptrType$4.nil) {
			return 0;
		}
		_ref = object.class$1;
		/* */ if (_ref === "Array") { $s = 1; continue; }
		/* */ if (_ref === "String") { $s = 2; continue; }
		/* */ if (_ref === "GoArray") { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === "Array") { */ case 1:
			_r$13 = object.get("length"); /* */ $s = 5; case 5: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 6; case 6:
			return $assertType(_r$13.value, $Uint32);
		/* } else if (_ref === "String") { */ case 2:
			_r$14 = object.get("length"); /* */ $s = 7; case 7: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 8; case 8:
			return ($assertType(_r$14.value, $Int) >>> 0);
		/* } else if (_ref === "GoArray") { */ case 3:
			_r$15 = object.get("length"); /* */ $s = 9; case 9: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 10; case 10:
			return ($assertType(_r$15.value, $Int) >>> 0);
		/* } */ case 4:
		return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: objectLength }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._ref = _ref; $f.object = object; $f.$s = $s; $f.$r = $r; return $f;
	};
	arrayUint32 = function(rt, value) {
		var $ptr, _r$13, _r$14, nm, rt, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; nm = $f.nm; rt = $f.rt; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		_r$13 = value.number(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		nm = $clone(_r$13, _number);
		/* */ if (!((nm.kind === 0)) || !isUint32(nm.int64)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((nm.kind === 0)) || !isUint32(nm.int64)) { */ case 2:
			_r$14 = rt.panicRangeError(new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			$panic(_r$14);
		/* } */ case 3:
		return (nm.int64.$low >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: arrayUint32 }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.nm = nm; $f.rt = rt; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	arrayDefineOwnProperty = function(self, name, descriptor, throw$1) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _tuple$1, _tuple$2, descriptor, index, isValue, length, lengthProperty, lengthValue, name, newLength, newLengthValue, newWritable, self, throw$1, valid, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; descriptor = $f.descriptor; index = $f.index; isValue = $f.isValue; length = $f.length; lengthProperty = $f.lengthProperty; lengthValue = $f.lengthValue; name = $f.name; newLength = $f.newLength; newLengthValue = $f.newLengthValue; newWritable = $f.newWritable; self = $f.self; throw$1 = $f.throw$1; valid = $f.valid; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		descriptor = $clone(descriptor, _property);
		_r$13 = self.getOwnProperty("length"); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		lengthProperty = _r$13;
		_tuple$1 = $assertType(lengthProperty.value, Value, true);
		lengthValue = $clone(_tuple$1[0], Value);
		valid = _tuple$1[1];
		if (!valid) {
			$panic(new $String("Array.length != Value{}"));
		}
		length = $assertType(lengthValue.value, $Uint32);
		/* */ if (name === "length") { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (name === "length") { */ case 2:
			/* */ if ($interfaceIsEqual(descriptor.value, $ifaceNil)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ($interfaceIsEqual(descriptor.value, $ifaceNil)) { */ case 5:
				_r$14 = objectDefineOwnProperty(self, name, descriptor, throw$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				/* */ $s = 8; case 8:
				return _r$14;
			/* } */ case 6:
			_tuple$2 = $assertType(descriptor.value, Value, true);
			newLengthValue = $clone(_tuple$2[0], Value);
			isValue = _tuple$2[1];
			/* */ if (!isValue) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!isValue) { */ case 9:
				_r$15 = self.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 11; case 11: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				$panic(_r$15);
			/* } */ case 10:
			_r$16 = arrayUint32(self.runtime, newLengthValue); /* */ $s = 12; case 12: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			newLength = _r$16;
			descriptor.value = (x = toValue_uint32(newLength), new x.constructor.elem(x));
			/* */ if (newLength > length) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (newLength > length) { */ case 13:
				_r$17 = objectDefineOwnProperty(self, name, descriptor, throw$1); /* */ $s = 15; case 15: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				/* */ $s = 16; case 16:
				return _r$17;
			/* } */ case 14:
			/* */ if (!lengthProperty.writable()) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (!lengthProperty.writable()) { */ case 17:
				/* goto Reject */ $s = 19; continue;
			/* } */ case 18:
			newWritable = true;
			if ((descriptor.mode & 448) === 0) {
				newWritable = false;
				descriptor.mode = descriptor.mode | (64);
			}
			_r$18 = objectDefineOwnProperty(self, name, descriptor, throw$1); /* */ $s = 22; case 22: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			/* */ if (!_r$18) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (!_r$18) { */ case 20:
				return false;
			/* } */ case 21:
			/* while (true) { */ case 23:
				/* if (!(newLength < length)) { break; } */ if(!(newLength < length)) { $s = 24; continue; }
				length = length - (1) >>> 0;
				_r$19 = self.delete$(strconv.FormatInt(new $Int64(0, length), 10), false); /* */ $s = 27; case 27: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				/* */ if (!_r$19) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (!_r$19) { */ case 25:
					descriptor.value = (x$1 = toValue_uint32(length + 1 >>> 0), new x$1.constructor.elem(x$1));
					if (!newWritable) {
						descriptor.mode = descriptor.mode & (63);
					}
					_r$20 = objectDefineOwnProperty(self, name, descriptor, false); /* */ $s = 28; case 28: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
					_r$20;
					/* goto Reject */ $s = 19; continue;
				/* } */ case 26:
			/* } */ $s = 23; continue; case 24:
			/* */ if (!newWritable) { $s = 29; continue; }
			/* */ $s = 30; continue;
			/* if (!newWritable) { */ case 29:
				descriptor.mode = descriptor.mode & (63);
				_r$21 = objectDefineOwnProperty(self, name, descriptor, false); /* */ $s = 31; case 31: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				_r$21;
			/* } */ case 30:
			$s = 4; continue;
		/* } else { */ case 3:
			index = stringToArrayIndex(name);
			/* */ if ((index.$high > 0 || (index.$high === 0 && index.$low >= 0))) { $s = 32; continue; }
			/* */ $s = 33; continue;
			/* if ((index.$high > 0 || (index.$high === 0 && index.$low >= 0))) { */ case 32:
				/* */ if ((x$2 = new $Int64(0, length), (index.$high > x$2.$high || (index.$high === x$2.$high && index.$low >= x$2.$low))) && !lengthProperty.writable()) { $s = 34; continue; }
				/* */ $s = 35; continue;
				/* if ((x$2 = new $Int64(0, length), (index.$high > x$2.$high || (index.$high === x$2.$high && index.$low >= x$2.$low))) && !lengthProperty.writable()) { */ case 34:
					/* goto Reject */ $s = 19; continue;
				/* } */ case 35:
				_r$22 = objectDefineOwnProperty(self, strconv.FormatInt(index, 10), descriptor, false); /* */ $s = 38; case 38: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				/* */ if (!_r$22) { $s = 36; continue; }
				/* */ $s = 37; continue;
				/* if (!_r$22) { */ case 36:
					/* goto Reject */ $s = 19; continue;
				/* } */ case 37:
				/* */ if ((x$3 = new $Int64(0, length), (index.$high > x$3.$high || (index.$high === x$3.$high && index.$low >= x$3.$low)))) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if ((x$3 = new $Int64(0, length), (index.$high > x$3.$high || (index.$high === x$3.$high && index.$low >= x$3.$low)))) { */ case 39:
					lengthProperty.value = (x$4 = toValue_uint32((new $Int64(index.$high + 0, index.$low + 1).$low >>> 0)), new x$4.constructor.elem(x$4));
					_r$23 = objectDefineOwnProperty(self, "length", lengthProperty, false); /* */ $s = 41; case 41: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					_r$23;
					return true;
				/* } */ case 40:
			/* } */ case 33:
		/* } */ case 4:
		_r$24 = objectDefineOwnProperty(self, name, descriptor, throw$1); /* */ $s = 42; case 42: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		/* */ $s = 43; case 43:
		return _r$24;
		/* Reject: */ case 19:
		/* */ if (throw$1) { $s = 44; continue; }
		/* */ $s = 45; continue;
		/* if (throw$1) { */ case 44:
			_r$25 = self.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 46; case 46: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			$panic(_r$25);
		/* } */ case 45:
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: arrayDefineOwnProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.descriptor = descriptor; $f.index = index; $f.isValue = isValue; $f.length = length; $f.lengthProperty = lengthProperty; $f.lengthValue = lengthValue; $f.name = name; $f.newLength = newLength; $f.newLengthValue = newLengthValue; $f.newWritable = newWritable; $f.self = self; $f.throw$1 = throw$1; $f.valid = valid; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.newBooleanObject = function(value) {
		var $ptr, _arg, _r$13, _r$14, _r$15, runtime$1, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; runtime$1 = $f.runtime$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		runtime$1 = this;
		_r$13 = value.bool(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toValue_bool(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_arg = _r$14;
		_r$15 = runtime$1.newPrimitiveObject("Boolean", _arg); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ $s = 4; case 4:
		return _r$15;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newBooleanObject }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.runtime$1 = runtime$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newBooleanObject = function(value) { return this.$val.newBooleanObject(value); };
	ecmaTime = function(goTime) {
		var $ptr, _q, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, goTime, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; goTime = $f.goTime; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		goTime = $clone(goTime, time.Time);
		_r$13 = goTime.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = goTime.Month(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = dateFromGoMonth(_r$14); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = goTime.Day(); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$17 = goTime.Hour(); /* */ $s = 5; case 5: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_r$18 = goTime.Minute(); /* */ $s = 6; case 6: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		_r$19 = goTime.Second(); /* */ $s = 7; case 7: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		/* */ $s = 8; case 8:
		return new _ecmaTime.ptr(_r$13, _r$15, _r$16, _r$17, _r$18, _r$19, (_q = goTime.Nanosecond() / 1000000, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), goTime.Location());
		/* */ } return; } if ($f === undefined) { $f = { $blk: ecmaTime }; } $f.$ptr = $ptr; $f._q = _q; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f.goTime = goTime; $f.$s = $s; $f.$r = $r; return $f;
	};
	_ecmaTime.ptr.prototype.goTime = function() {
		var $ptr, _r$13, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = time.Date(self.year, dateToGoMonth(self.month), self.day, self.hour, self.minute, self.second, $imul(self.millisecond, 1000000), self.location); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _ecmaTime.ptr.prototype.goTime }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_ecmaTime.prototype.goTime = function() { return this.$val.goTime(); };
	_dateObject.ptr.prototype.Time = function() {
		var $ptr, self;
		self = this;
		return self.time;
	};
	_dateObject.prototype.Time = function() { return this.$val.Time(); };
	_dateObject.ptr.prototype.Epoch = function() {
		var $ptr, self;
		self = this;
		return self.epoch;
	};
	_dateObject.prototype.Epoch = function() { return this.$val.Epoch(); };
	_dateObject.ptr.prototype.Value = function() {
		var $ptr, self;
		self = this;
		return self.value;
	};
	_dateObject.prototype.Value = function() { return this.$val.Value(); };
	_dateObject.ptr.prototype.SetNaN = function() {
		var $ptr, self;
		self = this;
		time.Time.copy(self.time, new time.Time.ptr(new $Int64(0, 0), 0, ptrType$5.nil));
		self.epoch = new $Int64(-1, 4294967295);
		Value.copy(self.value, NaNValue());
		self.isNaN = true;
	};
	_dateObject.prototype.SetNaN = function() { return this.$val.SetNaN(); };
	_dateObject.ptr.prototype.SetTime = function(time$1) {
		var $ptr, self, time$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; self = $f.self; time$1 = $f.time$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		time$1 = $clone(time$1, time.Time);
		self = this;
		$r = self.Set(timeToEpoch(time$1)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _dateObject.ptr.prototype.SetTime }; } $f.$ptr = $ptr; $f.self = self; $f.time$1 = time$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_dateObject.prototype.SetTime = function(time$1) { return this.$val.SetTime(time$1); };
	_dateObject.ptr.prototype.Set = function(epoch) {
		var $ptr, _r$13, _tuple$1, epoch, err, self, time$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _tuple$1 = $f._tuple$1; epoch = $f.epoch; err = $f.err; self = $f.self; time$1 = $f.time$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		self.epoch = epochToInteger(epoch);
		_r$13 = epochToTime(epoch); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		time$1 = $clone(_tuple$1[0], time.Time);
		err = _tuple$1[1];
		time.Time.copy(self.time, time$1);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			self.isNaN = true;
			self.epoch = new $Int64(-1, 4294967295);
			Value.copy(self.value, NaNValue());
		} else {
			Value.copy(self.value, toValue_int64(self.epoch));
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _dateObject.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._tuple$1 = _tuple$1; $f.epoch = epoch; $f.err = err; $f.self = self; $f.time$1 = time$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_dateObject.prototype.Set = function(epoch) { return this.$val.Set(epoch); };
	epochToInteger = function(value) {
		var $ptr, value;
		if (value > 0) {
			return new $Int64(0, math.Floor(value));
		}
		return new $Int64(0, math.Ceil(value));
	};
	epochToTime = function(value) {
		var $ptr, _r$13, epoch, epochWithMilli, err, milli, time$1, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; epoch = $f.epoch; epochWithMilli = $f.epochWithMilli; err = $f.err; milli = $f.milli; time$1 = $f.time$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		time$1 = new time.Time.ptr(new $Int64(0, 0), 0, ptrType$5.nil);
		err = $ifaceNil;
		epochWithMilli = value;
		/* */ if (math.IsNaN(epochWithMilli) || math.IsInf(epochWithMilli, 0)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (math.IsNaN(epochWithMilli) || math.IsInf(epochWithMilli, 0)) { */ case 1:
			_r$13 = fmt.Errorf("Invalid time %v", new sliceType$1([new $Float64(value)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			err = _r$13;
			return [time$1, err];
		/* } */ case 2:
		epoch = new $Int64(0, epochWithMilli / 1000);
		milli = $div64(new $Int64(0, epochWithMilli), new $Int64(0, 1000), true);
		time.Time.copy(time$1, time.Unix(epoch, $mul64(milli, new $Int64(0, 1000000))).UTC());
		return [time$1, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: epochToTime }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.epoch = epoch; $f.epochWithMilli = epochWithMilli; $f.err = err; $f.milli = milli; $f.time$1 = time$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	timeToEpoch = function(time$1) {
		var $ptr, time$1;
		time$1 = $clone(time$1, time.Time);
		return $flatten64($div64(time$1.UnixNano(), new $Int64(0, 1000000), false));
	};
	_runtime.ptr.prototype.newDateObject = function(epoch) {
		var $ptr, date, epoch, runtime$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; date = $f.date; epoch = $f.epoch; runtime$1 = $f.runtime$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		runtime$1 = this;
		self = runtime$1.newObject();
		self.class$1 = "Date";
		date = new _dateObject.ptr(new time.Time.ptr(new $Int64(0, 0), 0, ptrType$5.nil), new $Int64(0, 0), new Value.ptr(0, $ifaceNil), false);
		$r = date.Set(epoch); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		self.value = new date.constructor.elem(date);
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newDateObject }; } $f.$ptr = $ptr; $f.date = date; $f.epoch = epoch; $f.runtime$1 = runtime$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newDateObject = function(epoch) { return this.$val.newDateObject(epoch); };
	_object.ptr.prototype.dateValue = function() {
		var $ptr, _tuple$1, self, value;
		self = this;
		_tuple$1 = $assertType(self.value, _dateObject, true);
		value = $clone(_tuple$1[0], _dateObject);
		return value;
	};
	_object.prototype.dateValue = function() { return this.$val.dateValue(); };
	dateObjectOf = function(rt, _dateObject$1) {
		var $ptr, _dateObject$1, _r$13, rt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _dateObject$1 = $f._dateObject$1; _r$13 = $f._r$13; rt = $f.rt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (_dateObject$1 === ptrType$4.nil || !(_dateObject$1.class$1 === "Date")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_dateObject$1 === ptrType$4.nil || !(_dateObject$1.class$1 === "Date")) { */ case 1:
			_r$13 = rt.panicTypeError(new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 2:
		return _dateObject$1.dateValue();
		/* */ } return; } if ($f === undefined) { $f = { $blk: dateObjectOf }; } $f.$ptr = $ptr; $f._dateObject$1 = _dateObject$1; $f._r$13 = _r$13; $f.rt = rt; $f.$s = $s; $f.$r = $r; return $f;
	};
	dateToGoMonth = function(month) {
		var $ptr, month;
		return ((month + 1 >> 0) >> 0);
	};
	dateFromGoMonth = function(month) {
		var $ptr, month;
		return (month >> 0) - 1 >> 0;
	};
	dateFromGoDay = function(day) {
		var $ptr, day;
		return (day >> 0);
	};
	newDateTime = function(argumentList, location) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, argumentList, day, epoch, hour, invalid, location, millisecond, minute, month, pick, second, time$1, time$2, value, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; argumentList = $f.argumentList; day = $f.day; epoch = $f.epoch; hour = $f.hour; invalid = $f.invalid; location = $f.location; millisecond = $f.millisecond; minute = $f.minute; month = $f.month; pick = $f.pick; second = $f.second; time$1 = $f.time$1; time$2 = $f.time$2; value = $f.value; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		argumentList = [argumentList];
		epoch = 0;
		pick = (function(argumentList) { return function $b(index, default_) {
			var $ptr, _r$13, default_, index, value, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; default_ = $f.default_; index = $f.index; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			if (index >= argumentList[0].$length) {
				return [default_, false];
			}
			_r$13 = ((index < 0 || index >= argumentList[0].$length) ? $throwRuntimeError("index out of range") : argumentList[0].$array[argumentList[0].$offset + index]).float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			value = _r$13;
			if (math.IsNaN(value) || math.IsInf(value, 0)) {
				return [0, true];
			}
			return [value, false];
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.default_ = default_; $f.index = index; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
		}; })(argumentList);
		/* */ if (argumentList[0].$length >= 2) { $s = 1; continue; }
		/* */ if (argumentList[0].$length === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (argumentList[0].$length >= 2) { */ case 1:
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = 0;
			_tmp$3 = 0;
			_tmp$4 = 0;
			_tmp$5 = 0;
			_tmp$6 = 0;
			year = _tmp;
			month = _tmp$1;
			day = _tmp$2;
			hour = _tmp$3;
			minute = _tmp$4;
			second = _tmp$5;
			millisecond = _tmp$6;
			invalid = false;
			_r$13 = pick(0, 1900); /* */ $s = 5; case 5: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_tuple$1 = _r$13;
			year = _tuple$1[0];
			invalid = _tuple$1[1];
			/* */ if (invalid) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (invalid) { */ case 6:
				/* goto INVALID */ $s = 8; continue;
			/* } */ case 7:
			_r$14 = pick(1, 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_tuple$2 = _r$14;
			month = _tuple$2[0];
			invalid = _tuple$2[1];
			/* */ if (invalid) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (invalid) { */ case 10:
				/* goto INVALID */ $s = 8; continue;
			/* } */ case 11:
			_r$15 = pick(2, 1); /* */ $s = 12; case 12: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_tuple$3 = _r$15;
			day = _tuple$3[0];
			invalid = _tuple$3[1];
			/* */ if (invalid) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (invalid) { */ case 13:
				/* goto INVALID */ $s = 8; continue;
			/* } */ case 14:
			_r$16 = pick(3, 0); /* */ $s = 15; case 15: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_tuple$4 = _r$16;
			hour = _tuple$4[0];
			invalid = _tuple$4[1];
			/* */ if (invalid) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (invalid) { */ case 16:
				/* goto INVALID */ $s = 8; continue;
			/* } */ case 17:
			_r$17 = pick(4, 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_tuple$5 = _r$17;
			minute = _tuple$5[0];
			invalid = _tuple$5[1];
			/* */ if (invalid) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (invalid) { */ case 19:
				/* goto INVALID */ $s = 8; continue;
			/* } */ case 20:
			_r$18 = pick(5, 0); /* */ $s = 21; case 21: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_tuple$6 = _r$18;
			second = _tuple$6[0];
			invalid = _tuple$6[1];
			/* */ if (invalid) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (invalid) { */ case 22:
				/* goto INVALID */ $s = 8; continue;
			/* } */ case 23:
			_r$19 = pick(6, 0); /* */ $s = 24; case 24: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			_tuple$7 = _r$19;
			millisecond = _tuple$7[0];
			invalid = _tuple$7[1];
			/* */ if (invalid) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (invalid) { */ case 25:
				/* goto INVALID */ $s = 8; continue;
			/* } */ case 26:
			if (year >= 0 && year <= 99) {
				year = year + (1900);
			}
			_r$20 = time.Date((year >> 0), dateToGoMonth((month >> 0)), (day >> 0), (hour >> 0), (minute >> 0), (second >> 0), $imul(($imul((millisecond >> 0), 1000)), 1000), location); /* */ $s = 27; case 27: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			time$1 = $clone(_r$20, time.Time);
			epoch = timeToEpoch(time$1);
			return epoch;
		/* } else if (argumentList[0].$length === 0) { */ case 2:
			time$2 = $clone(time.Now().UTC(), time.Time);
			epoch = timeToEpoch(time$2);
			return epoch;
		/* } else { */ case 3:
			value = $clone(valueOfArrayIndex(argumentList[0], 0), Value);
			_r$21 = toPrimitive(value); /* */ $s = 28; case 28: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			Value.copy(value, _r$21);
			/* */ if (value.IsString()) { $s = 29; continue; }
			/* */ $s = 30; continue;
			/* if (value.IsString()) { */ case 29:
				_r$22 = value.string(); /* */ $s = 31; case 31: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				_r$23 = dateParse(_r$22); /* */ $s = 32; case 32: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				epoch = _r$23;
				/* */ $s = 33; case 33:
				return epoch;
			/* } */ case 30:
			_r$24 = value.float64(); /* */ $s = 34; case 34: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			epoch = _r$24;
			/* */ $s = 35; case 35:
			return epoch;
		/* } */ case 4:
		/* INVALID: */ case 8:
		epoch = math.NaN();
		return epoch;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newDateTime }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.argumentList = argumentList; $f.day = day; $f.epoch = epoch; $f.hour = hour; $f.invalid = invalid; $f.location = location; $f.millisecond = millisecond; $f.minute = minute; $f.month = month; $f.pick = pick; $f.second = second; $f.time$1 = time$1; $f.time$2 = time$2; $f.value = value; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	dateParse = function(date) {
		var $ptr, _i, _r$13, _r$14, _ref, _tuple$1, date, date$1, epoch, err, layout, match, time$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; _tuple$1 = $f._tuple$1; date = $f.date; date$1 = $f.date$1; epoch = $f.epoch; err = $f.err; layout = $f.layout; match = $f.match; time$1 = $f.time$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		epoch = 0;
		time$1 = new time.Time.ptr(new $Int64(0, 0), 0, ptrType$5.nil);
		err = $ifaceNil;
		date$1 = date;
		_r$13 = matchDateTimeZone.FindStringSubmatch(date$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		match = _r$13;
		/* */ if (!(match === sliceType.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(match === sliceType.nil)) { */ case 2:
			if ((2 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 2]) === "Z") {
				date$1 = (1 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 1]) + "+0000";
			} else {
				date$1 = (1 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 1]) + (3 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 3]) + (4 >= match.$length ? $throwRuntimeError("index out of range") : match.$array[match.$offset + 4]);
			}
		/* } */ case 3:
		_ref = dateLayoutList;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			layout = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$14 = time.Parse(layout, date$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_tuple$1 = _r$14;
			time.Time.copy(time$1, _tuple$1[0]);
			err = _tuple$1[1];
			if ($interfaceIsEqual(err, $ifaceNil)) {
				/* break; */ $s = 5; continue;
			}
			_i++;
		/* } */ $s = 4; continue; case 5:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			epoch = math.NaN();
			return epoch;
		}
		epoch = $flatten64(time$1.UnixNano()) / 1e+06;
		return epoch;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dateParse }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f._tuple$1 = _tuple$1; $f.date = date; $f.date$1 = date$1; $f.epoch = epoch; $f.err = err; $f.layout = layout; $f.match = match; $f.time$1 = time$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.newErrorObject = function(name, message) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, message, msg, name, rt, self, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; message = $f.message; msg = $f.msg; name = $f.name; rt = $f.rt; self = $f.self; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		message = $clone(message, Value);
		rt = this;
		self = rt.newClassObject("Error");
		/* */ if (message.IsDefined()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (message.IsDefined()) { */ case 1:
			_r$13 = message.string(); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			msg = _r$13;
			_r$14 = self.defineProperty("message", toValue_string(msg), 73, false); /* */ $s = 5; case 5: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$14;
			_r$15 = newError(rt, name, new sliceType$1([new $String(msg)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			self.value = (x = _r$15, new x.constructor.elem(x));
			$s = 3; continue;
		/* } else { */ case 2:
			_r$16 = newError(rt, name, new sliceType$1([])); /* */ $s = 7; case 7: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			self.value = (x$1 = _r$16, new x$1.constructor.elem(x$1));
		/* } */ case 3:
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newErrorObject }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.message = message; $f.msg = msg; $f.name = name; $f.rt = rt; $f.self = self; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newErrorObject = function(name, message) { return this.$val.newErrorObject(name, message); };
	defaultConstruct = function(fn, argumentList) {
		var $ptr, _r$13, _r$14, argumentList, fn, object, prototype, this$1, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; argumentList = $f.argumentList; fn = $f.fn; object = $f.object; prototype = $f.prototype; this$1 = $f.this$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		object = fn.runtime.newObject();
		object.class$1 = "Object";
		_r$13 = fn.get("prototype"); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		prototype = $clone(_r$13, Value);
		if (!((prototype.kind === 5))) {
			Value.copy(prototype, toValue_object(fn.runtime.global.ObjectPrototype));
		}
		object.prototype = prototype._object();
		this$1 = $clone(toValue_object(object), Value);
		_r$14 = fn.call(this$1, argumentList, false, nativeFrame); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		value = $clone(_r$14, Value);
		if (value.kind === 5) {
			return value;
		}
		return this$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: defaultConstruct }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.argumentList = argumentList; $f.fn = fn; $f.object = object; $f.prototype = prototype; $f.this$1 = this$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.newNativeFunctionObject = function(name, native$1, length) {
		var $ptr, _r$13, length, name, native$1, runtime$1, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; length = $f.length; name = $f.name; native$1 = $f.native$1; runtime$1 = $f.runtime$1; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		runtime$1 = this;
		self = runtime$1.newClassObject("Function");
		self.value = (x = new _nativeFunctionObject.ptr("", native$1, defaultConstruct), new x.constructor.elem(x));
		_r$13 = self.defineProperty("length", toValue_int(length), 0, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$13;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newNativeFunctionObject }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.length = length; $f.name = name; $f.native$1 = native$1; $f.runtime$1 = runtime$1; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newNativeFunctionObject = function(name, native$1, length) { return this.$val.newNativeFunctionObject(name, native$1, length); };
	_runtime.ptr.prototype.newBoundFunctionObject = function(target, this$1, argumentList) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, argumentList, length, runtime$1, self, target, this$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; argumentList = $f.argumentList; length = $f.length; runtime$1 = $f.runtime$1; self = $f.self; target = $f.target; this$1 = $f.this$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		this$1 = $clone(this$1, Value);
		runtime$1 = this;
		self = runtime$1.newClassObject("Function");
		self.value = (x = new _bindFunctionObject.ptr(target, $clone(this$1, Value), argumentList), new x.constructor.elem(x));
		_r$13 = target.get("length"); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = toInt32(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		length = (_r$14 >> 0);
		length = length - (argumentList.$length) >> 0;
		if (length < 0) {
			length = 0;
		}
		_r$15 = self.defineProperty("length", toValue_int(length), 0, false); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$15;
		_r$16 = self.defineProperty("caller", new Value.ptr(0, $ifaceNil), 0, false); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$16;
		_r$17 = self.defineProperty("arguments", new Value.ptr(0, $ifaceNil), 0, false); /* */ $s = 5; case 5: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_r$17;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newBoundFunctionObject }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f.argumentList = argumentList; $f.length = length; $f.runtime$1 = runtime$1; $f.self = self; $f.target = target; $f.this$1 = this$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newBoundFunctionObject = function(target, this$1, argumentList) { return this.$val.newBoundFunctionObject(target, this$1, argumentList); };
	_bindFunctionObject.ptr.prototype.construct = function(argumentList) {
		var $ptr, _r$13, _r$14, _r$15, _ref, argumentList, fn, object, value, value$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _ref = $f._ref; argumentList = $f.argumentList; fn = $f.fn; object = $f.object; value = $f.value; value$1 = $f.value$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fn = $clone(this, _bindFunctionObject);
		object = fn.target;
		_ref = object.value;
		/* */ if ($assertType(_ref, _nativeFunctionObject, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, _nodeFunctionObject, true)[1]) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($assertType(_ref, _nativeFunctionObject, true)[1]) { */ case 1:
			value = _ref.$val;
			_r$13 = value.construct(object, fn.argumentList); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$13;
		/* } else if ($assertType(_ref, _nodeFunctionObject, true)[1]) { */ case 2:
			value$1 = _ref.$val;
			argumentList = $appendSlice(fn.argumentList, argumentList);
			_r$14 = object.construct(argumentList); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 7; case 7:
			return _r$14;
		/* } */ case 3:
		_r$15 = fn.target.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 8; case 8: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		$panic(_r$15);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _bindFunctionObject.ptr.prototype.construct }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._ref = _ref; $f.argumentList = argumentList; $f.fn = fn; $f.object = object; $f.value = value; $f.value$1 = value$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_bindFunctionObject.prototype.construct = function(argumentList) { return this.$val.construct(argumentList); };
	_runtime.ptr.prototype.newNodeFunctionObject = function(node, stash) {
		var $ptr, _r$13, node, runtime$1, self, stash, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; node = $f.node; runtime$1 = $f.runtime$1; self = $f.self; stash = $f.stash; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		runtime$1 = this;
		self = runtime$1.newClassObject("Function");
		self.value = (x = new _nodeFunctionObject.ptr(node, stash), new x.constructor.elem(x));
		_r$13 = self.defineProperty("length", toValue_int(node.parameterList.$length), 0, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$13;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newNodeFunctionObject }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.node = node; $f.runtime$1 = runtime$1; $f.self = self; $f.stash = stash; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newNodeFunctionObject = function(node, stash) { return this.$val.newNodeFunctionObject(node, stash); };
	_object.ptr.prototype.isCall = function() {
		var $ptr, _ref, fn, fn$1, fn$2, self;
		self = this;
		_ref = self.value;
		if ($assertType(_ref, _nativeFunctionObject, true)[1]) {
			fn = _ref.$val;
			return !(fn.call === $throwNilPointerError);
		} else if ($assertType(_ref, _bindFunctionObject, true)[1]) {
			fn$1 = _ref.$val;
			return true;
		} else if ($assertType(_ref, _nodeFunctionObject, true)[1]) {
			fn$2 = _ref.$val;
			return true;
		}
		return false;
	};
	_object.prototype.isCall = function() { return this.$val.isCall(); };
	_object.ptr.prototype.call = function(this$1, argumentList, eval$1, frame) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _ref, _tuple$1, argumentList, callValue, eval$1, fn, fn$1, fn$2, frame, rt, self, stash, this$1, valid, value, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _ref = $f._ref; _tuple$1 = $f._tuple$1; argumentList = $f.argumentList; callValue = $f.callValue; eval$1 = $f.eval$1; fn = $f.fn; fn$1 = $f.fn$1; fn$2 = $f.fn$2; frame = $f.frame; rt = $f.rt; self = $f.self; stash = $f.stash; this$1 = $f.this$1; valid = $f.valid; value = $f.value; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		rt = [rt];
		frame = $clone(frame, _frame);
		this$1 = $clone(this$1, Value);
		self = this;
		_ref = self.value;
		/* */ if ($assertType(_ref, _nativeFunctionObject, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, _bindFunctionObject, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, _nodeFunctionObject, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, _nativeFunctionObject, true)[1]) { */ case 1:
			fn = _ref.$val;
			if (eval$1) {
				eval$1 = self === self.runtime.eval$5;
			}
			_r$13 = fn.call(new FunctionCall.ptr(self.runtime, ptrType$4.nil, eval$1, $clone(this$1, Value), argumentList, self.runtime.otto)); /* */ $s = 5; case 5: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 6; case 6:
			return _r$13;
		/* } else if ($assertType(_ref, _bindFunctionObject, true)[1]) { */ case 2:
			fn$1 = _ref.$val;
			argumentList = $appendSlice(fn$1.argumentList, argumentList);
			_r$14 = fn$1.target.call(fn$1.this$1, argumentList, false, frame); /* */ $s = 7; case 7: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 8; case 8:
			return _r$14;
		/* } else if ($assertType(_ref, _nodeFunctionObject, true)[1]) { */ case 3:
			fn$2 = _ref.$val;
			rt[0] = self.runtime;
			_r$15 = rt[0].enterFunctionScope(fn$2.stash, this$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			stash = _r$15;
			_frame.copy(rt[0].scope.frame, new _frame.ptr(fn$2.node.file, 0, fn$2.node.name));
			$deferred.push([(function(rt) { return function() {
				var $ptr;
				rt[0].leaveScope();
			}; })(rt), []]);
			_r$16 = rt[0].cmpl_call_nodeFunction(self, stash, fn$2.node, this$1, argumentList); /* */ $s = 10; case 10: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			callValue = $clone(_r$16, Value);
			_tuple$1 = $assertType(callValue.value, _result, true);
			value = $clone(_tuple$1[0], _result);
			valid = _tuple$1[1];
			if (valid) {
				return value.value;
			}
			return callValue;
		/* } */ case 4:
		_r$17 = self.runtime.panicTypeError(new sliceType$1([new $String("%v is not a function"), (x = toValue_object(self), new x.constructor.elem(x))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		$panic(_r$17);
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; return new Value.ptr(0, $ifaceNil); } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: _object.ptr.prototype.call }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._ref = _ref; $f._tuple$1 = _tuple$1; $f.argumentList = argumentList; $f.callValue = callValue; $f.eval$1 = eval$1; $f.fn = fn; $f.fn$1 = fn$1; $f.fn$2 = fn$2; $f.frame = frame; $f.rt = rt; $f.self = self; $f.stash = stash; $f.this$1 = this$1; $f.valid = valid; $f.value = value; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	_object.prototype.call = function(this$1, argumentList, eval$1, frame) { return this.$val.call(this$1, argumentList, eval$1, frame); };
	_object.ptr.prototype.construct = function(argumentList) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _ref, argumentList, fn, fn$1, fn$2, self, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _ref = $f._ref; argumentList = $f.argumentList; fn = $f.fn; fn$1 = $f.fn$1; fn$2 = $f.fn$2; self = $f.self; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_ref = self.value;
		/* */ if ($assertType(_ref, _nativeFunctionObject, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, _bindFunctionObject, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, _nodeFunctionObject, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, _nativeFunctionObject, true)[1]) { */ case 1:
			fn = _ref.$val;
			/* */ if (fn.call === $throwNilPointerError) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (fn.call === $throwNilPointerError) { */ case 5:
				_r$13 = self.runtime.panicTypeError(new sliceType$1([new $String("%v is not a function"), (x = toValue_object(self), new x.constructor.elem(x))])); /* */ $s = 7; case 7: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				$panic(_r$13);
			/* } */ case 6:
			/* */ if (fn.construct === $throwNilPointerError) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (fn.construct === $throwNilPointerError) { */ case 8:
				_r$14 = self.runtime.panicTypeError(new sliceType$1([new $String("%v is not a constructor"), (x$1 = toValue_object(self), new x$1.constructor.elem(x$1))])); /* */ $s = 10; case 10: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$panic(_r$14);
			/* } */ case 9:
			_r$15 = fn.construct(self, argumentList); /* */ $s = 11; case 11: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 12; case 12:
			return _r$15;
		/* } else if ($assertType(_ref, _bindFunctionObject, true)[1]) { */ case 2:
			fn$1 = _ref.$val;
			_r$16 = fn$1.construct(argumentList); /* */ $s = 13; case 13: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ $s = 14; case 14:
			return _r$16;
		/* } else if ($assertType(_ref, _nodeFunctionObject, true)[1]) { */ case 3:
			fn$2 = _ref.$val;
			_r$17 = defaultConstruct(self, argumentList); /* */ $s = 15; case 15: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ $s = 16; case 16:
			return _r$17;
		/* } */ case 4:
		_r$18 = self.runtime.panicTypeError(new sliceType$1([new $String("%v is not a function"), (x$2 = toValue_object(self), new x$2.constructor.elem(x$2))])); /* */ $s = 17; case 17: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		$panic(_r$18);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _object.ptr.prototype.construct }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._ref = _ref; $f.argumentList = argumentList; $f.fn = fn; $f.fn$1 = fn$1; $f.fn$2 = fn$2; $f.self = self; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	_object.prototype.construct = function(argumentList) { return this.$val.construct(argumentList); };
	_object.ptr.prototype.hasInstance = function(of) {
		var $ptr, _r$13, _r$14, _r$15, of, prototype, prototypeObject, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; of = $f.of; prototype = $f.prototype; prototypeObject = $f.prototypeObject; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		of = $clone(of, Value);
		self = this;
		/* */ if (!self.isCall()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!self.isCall()) { */ case 1:
			_r$13 = self.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 2:
		if (!of.IsObject()) {
			return false;
		}
		_r$14 = self.get("prototype"); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		prototype = $clone(_r$14, Value);
		/* */ if (!prototype.IsObject()) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!prototype.IsObject()) { */ case 5:
			_r$15 = self.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			$panic(_r$15);
		/* } */ case 6:
		prototypeObject = prototype._object();
		value = of._object().prototype;
		while (true) {
			if (!(!(value === ptrType$4.nil))) { break; }
			if (value === prototypeObject) {
				return true;
			}
			value = value.prototype;
		}
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _object.ptr.prototype.hasInstance }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.of = of; $f.prototype = prototype; $f.prototypeObject = prototypeObject; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_object.prototype.hasInstance = function(of) { return this.$val.hasInstance(of); };
	FunctionCall.ptr.prototype.Argument = function(index) {
		var $ptr, index, self;
		self = $clone(this, FunctionCall);
		return valueOfArrayIndex(self.ArgumentList, index);
	};
	FunctionCall.prototype.Argument = function(index) { return this.$val.Argument(index); };
	FunctionCall.ptr.prototype.getArgument = function(index) {
		var $ptr, index, self;
		self = $clone(this, FunctionCall);
		return getValueOfArrayIndex(self.ArgumentList, index);
	};
	FunctionCall.prototype.getArgument = function(index) { return this.$val.getArgument(index); };
	FunctionCall.ptr.prototype.slice = function(index) {
		var $ptr, index, self;
		self = $clone(this, FunctionCall);
		if (index < self.ArgumentList.$length) {
			return $subslice(self.ArgumentList, index);
		}
		return new sliceType$5([]);
	};
	FunctionCall.prototype.slice = function(index) { return this.$val.slice(index); };
	FunctionCall.ptr.prototype.thisObject = function() {
		var $ptr, _r$13, _r$14, self, this$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; self = $f.self; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (self._thisObject === ptrType$4.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self._thisObject === ptrType$4.nil) { */ case 1:
			_r$13 = self.This.resolve(); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			this$1 = $clone(_r$13, Value);
			_r$14 = self.runtime.toObject(this$1); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			self._thisObject = _r$14;
		/* } */ case 2:
		return self._thisObject;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunctionCall.ptr.prototype.thisObject }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.self = self; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunctionCall.prototype.thisObject = function() { return this.$val.thisObject(); };
	FunctionCall.ptr.prototype.thisClassObject = function(class$1) {
		var $ptr, _r$13, _r$14, class$1, self, thisObject, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; class$1 = $f.class$1; self = $f.self; thisObject = $f.thisObject; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.thisObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		thisObject = _r$13;
		/* */ if (!(thisObject.class$1 === class$1)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(thisObject.class$1 === class$1)) { */ case 2:
			_r$14 = self.runtime.panicTypeError(new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			$panic(_r$14);
		/* } */ case 3:
		return self._thisObject;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunctionCall.ptr.prototype.thisClassObject }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.class$1 = class$1; $f.self = self; $f.thisObject = thisObject; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunctionCall.prototype.thisClassObject = function(class$1) { return this.$val.thisClassObject(class$1); };
	FunctionCall.ptr.prototype.toObject = function(value) {
		var $ptr, _r$13, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = $clone(this, FunctionCall);
		_r$13 = self.runtime.toObject(value); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunctionCall.ptr.prototype.toObject }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunctionCall.prototype.toObject = function(value) { return this.$val.toObject(value); };
	FunctionCall.ptr.prototype.CallerLocation = function() {
		var $ptr, _r$13, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, FunctionCall);
		_r$13 = self.runtime.scope.frame.location(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunctionCall.ptr.prototype.CallerLocation }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunctionCall.prototype.CallerLocation = function() { return this.$val.CallerLocation(); };
	_runtime.ptr.prototype.newGoArrayObject = function(value) {
		var $ptr, runtime$1, self, value;
		value = value;
		runtime$1 = this;
		self = runtime$1.newObject();
		self.class$1 = "GoArray";
		self.objectClass = _classGoArray;
		self.value = _newGoArrayObject(value);
		return self;
	};
	_runtime.prototype.newGoArrayObject = function(value) { return this.$val.newGoArrayObject(value); };
	_newGoArrayObject = function(value) {
		var $ptr, mode, self, value, writable;
		value = value;
		writable = value.Kind() === 22;
		mode = 8;
		if (writable) {
			mode = 72;
		}
		self = new _goArrayObject.ptr($clone(value, reflect.Value), writable, mode);
		return self;
	};
	_goArrayObject.ptr.prototype.getValue = function(index) {
		var $ptr, _r$13, _r$14, index, self, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; index = $f.index; self = $f.self; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, _goArrayObject);
		_r$13 = reflect.Indirect(self.value); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		value = _r$13;
		/* */ if ((x = new $Int64(0, value.Len()), (index.$high < x.$high || (index.$high === x.$high && index.$low < x.$low)))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((x = new $Int64(0, value.Len()), (index.$high < x.$high || (index.$high === x.$high && index.$low < x.$low)))) { */ case 2:
			_r$14 = value.Index(((index.$low + ((index.$high >> 31) * 4294967296)) >> 0)); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return [_r$14, true];
		/* } */ case 3:
		return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: _goArrayObject.ptr.prototype.getValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.index = index; $f.self = self; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_goArrayObject.prototype.getValue = function(index) { return this.$val.getValue(index); };
	_goArrayObject.ptr.prototype.setValue = function(index, value) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _tuple$1, _tuple$2, err, exists, index, indexValue, reflectValue, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; exists = $f.exists; index = $f.index; indexValue = $f.indexValue; reflectValue = $f.reflectValue; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = $clone(this, _goArrayObject);
		_r$13 = self.getValue(index); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		indexValue = _tuple$1[0];
		exists = _tuple$1[1];
		if (!exists) {
			return false;
		}
		_r$14 = reflect.Indirect(self.value); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = _r$14.Type(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = _r$15.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$17 = _r$16.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_r$18 = value.toReflectValue(_r$17); /* */ $s = 6; case 6: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		_tuple$2 = _r$18;
		reflectValue = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		$r = indexValue.Set(reflectValue); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _goArrayObject.ptr.prototype.setValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.exists = exists; $f.index = index; $f.indexValue = indexValue; $f.reflectValue = reflectValue; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_goArrayObject.prototype.setValue = function(index, value) { return this.$val.setValue(index, value); };
	goArrayGetOwnProperty = function(self, name) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _tuple$1, exists, index, name, object, reflectValue, self, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _tuple$1 = $f._tuple$1; exists = $f.exists; index = $f.index; name = $f.name; object = $f.object; reflectValue = $f.reflectValue; self = $f.self; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (name === "length") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (name === "length") { */ case 1:
			_r$13 = reflect.Indirect($assertType(self.value, ptrType$105).value); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = _r$13.Len(); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = toValue(new $Int(_r$14)); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 6; case 6:
			return new _property.ptr((x = _r$15, new x.constructor.elem(x)), 0);
		/* } */ case 2:
		index = stringToArrayIndex(name);
		/* */ if ((index.$high > 0 || (index.$high === 0 && index.$low >= 0))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if ((index.$high > 0 || (index.$high === 0 && index.$low >= 0))) { */ case 7:
			object = $assertType(self.value, ptrType$105);
			value = new Value.ptr(0, $ifaceNil);
			_r$16 = object.getValue(index); /* */ $s = 9; case 9: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_tuple$1 = _r$16;
			reflectValue = _tuple$1[0];
			exists = _tuple$1[1];
			/* */ if (exists) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (exists) { */ case 10:
				_r$17 = reflectValue.Interface(); /* */ $s = 12; case 12: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$18 = self.runtime.toValue(_r$17); /* */ $s = 13; case 13: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				Value.copy(value, _r$18);
			/* } */ case 11:
			return new _property.ptr(new value.constructor.elem(value), object.propertyMode);
		/* } */ case 8:
		return objectGetOwnProperty(self, name);
		/* */ } return; } if ($f === undefined) { $f = { $blk: goArrayGetOwnProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._tuple$1 = _tuple$1; $f.exists = exists; $f.index = index; $f.name = name; $f.object = object; $f.reflectValue = reflectValue; $f.self = self; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	goArrayEnumerate = function(self, all, each) {
		var $ptr, _r$13, _tmp, _tmp$1, all, each, index, length, name, object, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; all = $f.all; each = $f.each; index = $f.index; length = $f.length; name = $f.name; object = $f.object; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		object = $assertType(self.value, ptrType$105);
		_tmp = 0;
		_tmp$1 = object.value.Len();
		index = _tmp;
		length = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(index < length)) { break; } */ if(!(index < length)) { $s = 2; continue; }
			name = strconv.FormatInt(new $Int64(0, index), 10);
			_r$13 = each(name); /* */ $s = 5; case 5: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ if (!_r$13) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r$13) { */ case 3:
				return;
			/* } */ case 4:
			index = index + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = objectEnumerate(self, all, each); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: goArrayEnumerate }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.all = all; $f.each = each; $f.index = index; $f.length = length; $f.name = name; $f.object = object; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	goArrayDefineOwnProperty = function(self, name, descriptor, throw$1) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, descriptor, index, name, object, self, throw$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; descriptor = $f.descriptor; index = $f.index; name = $f.name; object = $f.object; self = $f.self; throw$1 = $f.throw$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		descriptor = $clone(descriptor, _property);
		/* */ if (name === "length") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (name === "length") { */ case 1:
			_r$13 = self.runtime.typeErrorResult(throw$1); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$13;
		/* } else { */ case 2:
			index = stringToArrayIndex(name);
			/* */ if ((index.$high > 0 || (index.$high === 0 && index.$low >= 0))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((index.$high > 0 || (index.$high === 0 && index.$low >= 0))) { */ case 6:
				object = $assertType(self.value, ptrType$105);
				/* */ if (object.writable) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (object.writable) { */ case 8:
					_r$14 = $assertType(self.value, ptrType$105).setValue(index, $assertType(descriptor.value, Value)); /* */ $s = 12; case 12: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					/* */ if (_r$14) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_r$14) { */ case 10:
						return true;
					/* } */ case 11:
				/* } */ case 9:
				_r$15 = self.runtime.typeErrorResult(throw$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				/* */ $s = 14; case 14:
				return _r$15;
			/* } */ case 7:
		/* } */ case 3:
		_r$16 = objectDefineOwnProperty(self, name, descriptor, throw$1); /* */ $s = 15; case 15: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 16; case 16:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: goArrayDefineOwnProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.descriptor = descriptor; $f.index = index; $f.name = name; $f.object = object; $f.self = self; $f.throw$1 = throw$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	goArrayDelete = function(self, name, throw$1) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _tuple$1, exists, index, indexValue, name, object, self, throw$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _tuple$1 = $f._tuple$1; exists = $f.exists; index = $f.index; indexValue = $f.indexValue; name = $f.name; object = $f.object; self = $f.self; throw$1 = $f.throw$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (name === "length") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (name === "length") { */ case 1:
			_r$13 = self.runtime.typeErrorResult(throw$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r$13;
		/* } */ case 2:
		index = stringToArrayIndex(name);
		/* */ if ((index.$high > 0 || (index.$high === 0 && index.$low >= 0))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ((index.$high > 0 || (index.$high === 0 && index.$low >= 0))) { */ case 5:
			object = $assertType(self.value, ptrType$105);
			/* */ if (object.writable) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (object.writable) { */ case 7:
				_r$14 = object.getValue(index); /* */ $s = 9; case 9: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_tuple$1 = _r$14;
				indexValue = _tuple$1[0];
				exists = _tuple$1[1];
				/* */ if (exists) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (exists) { */ case 10:
					_r$15 = reflect.Indirect(object.value); /* */ $s = 12; case 12: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					_r$16 = _r$15.Type(); /* */ $s = 13; case 13: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					_r$17 = _r$16.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					_r$18 = reflect.Zero(_r$17); /* */ $s = 15; case 15: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					$r = indexValue.Set(_r$18); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return true;
				/* } */ case 11:
			/* } */ case 8:
			_r$19 = self.runtime.typeErrorResult(throw$1); /* */ $s = 17; case 17: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			/* */ $s = 18; case 18:
			return _r$19;
		/* } */ case 6:
		_r$20 = self.delete$(name, throw$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		/* */ $s = 20; case 20:
		return _r$20;
		/* */ } return; } if ($f === undefined) { $f = { $blk: goArrayDelete }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._tuple$1 = _tuple$1; $f.exists = exists; $f.index = index; $f.indexValue = indexValue; $f.name = name; $f.object = object; $f.self = self; $f.throw$1 = throw$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.newGoMapObject = function(value) {
		var $ptr, _r$13, runtime$1, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; runtime$1 = $f.runtime$1; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = value;
		runtime$1 = this;
		self = runtime$1.newObject();
		self.class$1 = "Object";
		self.objectClass = _classGoMap;
		_r$13 = _newGoMapObject(value); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self.value = _r$13;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newGoMapObject }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.runtime$1 = runtime$1; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newGoMapObject = function(value) { return this.$val.newGoMapObject(value); };
	_newGoMapObject = function(value) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = value;
		/* */ if (!((value.Kind() === 21))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((value.Kind() === 21))) { */ case 1:
			$r = dbgf(new sliceType$1([new $String("%/panic//%@: %v != reflect.Map"), new reflect.Kind(value.Kind())])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$13 = value.Type().Key(); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = _r$13.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = value.Type().Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = _r$15.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		self = new _goMapObject.ptr($clone(value, reflect.Value), _r$14, _r$16);
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _newGoMapObject }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_goMapObject.ptr.prototype.toKey = function(name) {
		var $ptr, _r$13, _tuple$1, err, name, reflectValue, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _tuple$1 = $f._tuple$1; err = $f.err; name = $f.name; reflectValue = $f.reflectValue; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, _goMapObject);
		_r$13 = stringToReflectValue(name, self.keyKind); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		reflectValue = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		return reflectValue;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _goMapObject.ptr.prototype.toKey }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._tuple$1 = _tuple$1; $f.err = err; $f.name = name; $f.reflectValue = reflectValue; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_goMapObject.prototype.toKey = function(name) { return this.$val.toKey(name); };
	_goMapObject.ptr.prototype.toValue = function(value) {
		var $ptr, _r$13, _tuple$1, err, reflectValue, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _tuple$1 = $f._tuple$1; err = $f.err; reflectValue = $f.reflectValue; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = $clone(this, _goMapObject);
		_r$13 = value.toReflectValue(self.valueKind); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		reflectValue = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		return reflectValue;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _goMapObject.ptr.prototype.toValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._tuple$1 = _tuple$1; $f.err = err; $f.reflectValue = reflectValue; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_goMapObject.prototype.toValue = function(value) { return this.$val.toValue(value); };
	goMapGetOwnProperty = function(self, name) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, name, object, self, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; name = $f.name; object = $f.object; self = $f.self; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		object = $assertType(self.value, ptrType$106);
		_r$13 = object.toKey(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = object.value.MapIndex(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		value = _r$14;
		/* */ if (value.IsValid()) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (value.IsValid()) { */ case 3:
			_r$15 = value.Interface(); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = self.runtime.toValue(_r$15); /* */ $s = 6; case 6: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ $s = 7; case 7:
			return new _property.ptr((x = _r$16, new x.constructor.elem(x)), 73);
		/* } */ case 4:
		return ptrType$14.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: goMapGetOwnProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.name = name; $f.object = object; $f.self = self; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	goMapEnumerate = function(self, all, each) {
		var $ptr, _i, _r$13, _r$14, _r$15, _r$16, _ref, all, each, key, keys, object, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _ref = $f._ref; all = $f.all; each = $f.each; key = $f.key; keys = $f.keys; object = $f.object; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		object = $assertType(self.value, ptrType$106);
		_r$13 = object.value.MapKeys(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		keys = _r$13;
		_ref = keys;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			key = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$14 = toValue(new key.constructor.elem(key)); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = _r$14.String(); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = each(_r$15); /* */ $s = 8; case 8: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ if (!_r$16) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!_r$16) { */ case 4:
				return;
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: goMapEnumerate }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._ref = _ref; $f.all = all; $f.each = each; $f.key = key; $f.keys = keys; $f.object = object; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	goMapDefineOwnProperty = function(self, name, descriptor, throw$1) {
		var $ptr, _arg, _arg$1, _r$13, _r$14, _r$15, _r$16, descriptor, name, object, self, throw$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; descriptor = $f.descriptor; name = $f.name; object = $f.object; self = $f.self; throw$1 = $f.throw$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		descriptor = $clone(descriptor, _property);
		object = $assertType(self.value, ptrType$106);
		/* */ if (!((descriptor.mode === 73))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((descriptor.mode === 73))) { */ case 1:
			_r$13 = self.runtime.typeErrorResult(throw$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r$13;
		/* } */ case 2:
		/* */ if (!descriptor.isDataDescriptor()) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!descriptor.isDataDescriptor()) { */ case 5:
			_r$14 = self.runtime.typeErrorResult(throw$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 8; case 8:
			return _r$14;
		/* } */ case 6:
		_r$15 = object.toKey(name); /* */ $s = 9; case 9: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_arg = _r$15;
		_r$16 = object.toValue($assertType(descriptor.value, Value)); /* */ $s = 10; case 10: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_arg$1 = _r$16;
		$r = object.value.SetMapIndex(_arg, _arg$1); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: goMapDefineOwnProperty }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.descriptor = descriptor; $f.name = name; $f.object = object; $f.self = self; $f.throw$1 = throw$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	goMapDelete = function(self, name, throw$1) {
		var $ptr, _r$13, name, object, self, throw$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; name = $f.name; object = $f.object; self = $f.self; throw$1 = $f.throw$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		object = $assertType(self.value, ptrType$106);
		_r$13 = object.toKey(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		$r = object.value.SetMapIndex(_r$13, new reflect.Value.ptr(ptrType$99.nil, 0, 0)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: goMapDelete }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.name = name; $f.object = object; $f.self = self; $f.throw$1 = throw$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.newGoSliceObject = function(value) {
		var $ptr, runtime$1, self, value;
		value = value;
		runtime$1 = this;
		self = runtime$1.newObject();
		self.class$1 = "GoArray";
		self.objectClass = _classGoSlice;
		self.value = _newGoSliceObject(value);
		return self;
	};
	_runtime.prototype.newGoSliceObject = function(value) { return this.$val.newGoSliceObject(value); };
	_newGoSliceObject = function(value) {
		var $ptr, self, value;
		value = value;
		self = new _goSliceObject.ptr($clone(value, reflect.Value));
		return self;
	};
	_goSliceObject.ptr.prototype.getValue = function(index) {
		var $ptr, _r$13, index, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; index = $f.index; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, _goSliceObject);
		/* */ if ((x = new $Int64(0, self.value.Len()), (index.$high < x.$high || (index.$high === x.$high && index.$low < x.$low)))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x = new $Int64(0, self.value.Len()), (index.$high < x.$high || (index.$high === x.$high && index.$low < x.$low)))) { */ case 1:
			_r$13 = self.value.Index(((index.$low + ((index.$high >> 31) * 4294967296)) >> 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return [_r$13, true];
		/* } */ case 2:
		return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: _goSliceObject.ptr.prototype.getValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.index = index; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_goSliceObject.prototype.getValue = function(index) { return this.$val.getValue(index); };
	_goSliceObject.ptr.prototype.setValue = function(index, value) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _tuple$1, _tuple$2, err, exists, index, indexValue, reflectValue, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; exists = $f.exists; index = $f.index; indexValue = $f.indexValue; reflectValue = $f.reflectValue; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = $clone(this, _goSliceObject);
		_r$13 = self.getValue(index); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		indexValue = _tuple$1[0];
		exists = _tuple$1[1];
		if (!exists) {
			return false;
		}
		_r$14 = self.value.Type().Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = _r$14.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = value.toReflectValue(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_tuple$2 = _r$16;
		reflectValue = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		$r = indexValue.Set(reflectValue); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _goSliceObject.ptr.prototype.setValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.exists = exists; $f.index = index; $f.indexValue = indexValue; $f.reflectValue = reflectValue; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_goSliceObject.prototype.setValue = function(index, value) { return this.$val.setValue(index, value); };
	goSliceGetOwnProperty = function(self, name) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _tuple$1, exists, index, name, reflectValue, self, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _tuple$1 = $f._tuple$1; exists = $f.exists; index = $f.index; name = $f.name; reflectValue = $f.reflectValue; self = $f.self; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (name === "length") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (name === "length") { */ case 1:
			_r$13 = toValue(new $Int($assertType(self.value, ptrType$107).value.Len())); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return new _property.ptr((x = _r$13, new x.constructor.elem(x)), 0);
		/* } */ case 2:
		index = stringToArrayIndex(name);
		/* */ if ((index.$high > 0 || (index.$high === 0 && index.$low >= 0))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ((index.$high > 0 || (index.$high === 0 && index.$low >= 0))) { */ case 5:
			value = new Value.ptr(0, $ifaceNil);
			_r$14 = $assertType(self.value, ptrType$107).getValue(index); /* */ $s = 7; case 7: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_tuple$1 = _r$14;
			reflectValue = _tuple$1[0];
			exists = _tuple$1[1];
			/* */ if (exists) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (exists) { */ case 8:
				_r$15 = reflectValue.Interface(); /* */ $s = 10; case 10: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$16 = self.runtime.toValue(_r$15); /* */ $s = 11; case 11: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				Value.copy(value, _r$16);
			/* } */ case 9:
			return new _property.ptr(new value.constructor.elem(value), 72);
		/* } */ case 6:
		return objectGetOwnProperty(self, name);
		/* */ } return; } if ($f === undefined) { $f = { $blk: goSliceGetOwnProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._tuple$1 = _tuple$1; $f.exists = exists; $f.index = index; $f.name = name; $f.reflectValue = reflectValue; $f.self = self; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	goSliceEnumerate = function(self, all, each) {
		var $ptr, _r$13, _tmp, _tmp$1, all, each, index, length, name, object, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; all = $f.all; each = $f.each; index = $f.index; length = $f.length; name = $f.name; object = $f.object; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		object = $assertType(self.value, ptrType$107);
		_tmp = 0;
		_tmp$1 = object.value.Len();
		index = _tmp;
		length = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(index < length)) { break; } */ if(!(index < length)) { $s = 2; continue; }
			name = strconv.FormatInt(new $Int64(0, index), 10);
			_r$13 = each(name); /* */ $s = 5; case 5: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ if (!_r$13) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r$13) { */ case 3:
				return;
			/* } */ case 4:
			index = index + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = objectEnumerate(self, all, each); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: goSliceEnumerate }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.all = all; $f.each = each; $f.index = index; $f.length = length; $f.name = name; $f.object = object; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	goSliceDefineOwnProperty = function(self, name, descriptor, throw$1) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, descriptor, index, name, self, throw$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; descriptor = $f.descriptor; index = $f.index; name = $f.name; self = $f.self; throw$1 = $f.throw$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		descriptor = $clone(descriptor, _property);
		/* */ if (name === "length") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (name === "length") { */ case 1:
			_r$13 = self.runtime.typeErrorResult(throw$1); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$13;
		/* } else { */ case 2:
			index = stringToArrayIndex(name);
			/* */ if ((index.$high > 0 || (index.$high === 0 && index.$low >= 0))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((index.$high > 0 || (index.$high === 0 && index.$low >= 0))) { */ case 6:
				_r$14 = $assertType(self.value, ptrType$107).setValue(index, $assertType(descriptor.value, Value)); /* */ $s = 10; case 10: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				/* */ if (_r$14) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_r$14) { */ case 8:
					return true;
				/* } */ case 9:
				_r$15 = self.runtime.typeErrorResult(throw$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				/* */ $s = 12; case 12:
				return _r$15;
			/* } */ case 7:
		/* } */ case 3:
		_r$16 = objectDefineOwnProperty(self, name, descriptor, throw$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 14; case 14:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: goSliceDefineOwnProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.descriptor = descriptor; $f.index = index; $f.name = name; $f.self = self; $f.throw$1 = throw$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	goSliceDelete = function(self, name, throw$1) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _tuple$1, exists, index, indexValue, name, object, self, throw$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _tuple$1 = $f._tuple$1; exists = $f.exists; index = $f.index; indexValue = $f.indexValue; name = $f.name; object = $f.object; self = $f.self; throw$1 = $f.throw$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (name === "length") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (name === "length") { */ case 1:
			_r$13 = self.runtime.typeErrorResult(throw$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r$13;
		/* } */ case 2:
		index = stringToArrayIndex(name);
		/* */ if ((index.$high > 0 || (index.$high === 0 && index.$low >= 0))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ((index.$high > 0 || (index.$high === 0 && index.$low >= 0))) { */ case 5:
			object = $assertType(self.value, ptrType$107);
			_r$14 = object.getValue(index); /* */ $s = 7; case 7: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_tuple$1 = _r$14;
			indexValue = _tuple$1[0];
			exists = _tuple$1[1];
			/* */ if (exists) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (exists) { */ case 8:
				_r$15 = object.value.Type().Elem(); /* */ $s = 10; case 10: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$16 = reflect.Zero(_r$15); /* */ $s = 11; case 11: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				$r = indexValue.Set(_r$16); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return true;
			/* } */ case 9:
			_r$17 = self.runtime.typeErrorResult(throw$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ $s = 14; case 14:
			return _r$17;
		/* } */ case 6:
		_r$18 = self.delete$(name, throw$1); /* */ $s = 15; case 15: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		/* */ $s = 16; case 16:
		return _r$18;
		/* */ } return; } if ($f === undefined) { $f = { $blk: goSliceDelete }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._tuple$1 = _tuple$1; $f.exists = exists; $f.index = index; $f.indexValue = indexValue; $f.name = name; $f.object = object; $f.self = self; $f.throw$1 = throw$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.newGoStructObject = function(value) {
		var $ptr, _r$13, runtime$1, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; runtime$1 = $f.runtime$1; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = value;
		runtime$1 = this;
		self = runtime$1.newObject();
		self.class$1 = "Object";
		self.objectClass = _classGoStruct;
		_r$13 = _newGoStructObject(value); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		self.value = _r$13;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newGoStructObject }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.runtime$1 = runtime$1; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newGoStructObject = function(value) { return this.$val.newGoStructObject(value); };
	_newGoStructObject = function(value) {
		var $ptr, _r$13, _r$14, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = value;
		_r$13 = reflect.Indirect(value); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = _r$13.Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ if (!((_r$14 === 25))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r$14 === 25))) { */ case 1:
			$r = dbgf(new sliceType$1([new $String("%/panic//%@: %v != reflect.Struct"), new reflect.Kind(value.Kind())])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		self = new _goStructObject.ptr($clone(value, reflect.Value));
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _newGoStructObject }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_goStructObject.ptr.prototype.getValue = function(name) {
		var $ptr, _r$13, _r$14, field, method, name, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; field = $f.field; method = $f.method; name = $f.name; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, _goStructObject);
		/* */ if (validGoStructName(name)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (validGoStructName(name)) { */ case 1:
			_r$13 = reflect.Indirect(self.value); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = _r$13.FieldByName(name); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			field = _r$14;
			/* */ if (!($equal(field, new reflect.Value.ptr(ptrType$99.nil, 0, 0), reflect.Value))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!($equal(field, new reflect.Value.ptr(ptrType$99.nil, 0, 0), reflect.Value))) { */ case 5:
				return field;
			/* } */ case 6:
			method = self.value.MethodByName(name);
			if (!($equal(method, new reflect.Value.ptr(ptrType$99.nil, 0, 0), reflect.Value))) {
				return method;
			}
		/* } */ case 2:
		return new reflect.Value.ptr(ptrType$99.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: _goStructObject.ptr.prototype.getValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.field = field; $f.method = method; $f.name = name; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_goStructObject.prototype.getValue = function(name) { return this.$val.getValue(name); };
	_goStructObject.ptr.prototype.field = function(name) {
		var $ptr, _r$13, _r$14, _r$15, name, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; name = $f.name; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, _goStructObject);
		_r$13 = reflect.Indirect(self.value); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = _r$13.Type(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = _r$14.FieldByName(name); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		/* */ $s = 4; case 4:
		return _r$15;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _goStructObject.ptr.prototype.field }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.name = name; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_goStructObject.prototype.field = function(name) { return this.$val.field(name); };
	_goStructObject.ptr.prototype.setValue = function(name, value) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _tuple$1, _tuple$2, err, exists, field, fieldValue, name, reflectValue, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; exists = $f.exists; field = $f.field; fieldValue = $f.fieldValue; name = $f.name; reflectValue = $f.reflectValue; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = $clone(this, _goStructObject);
		_r$13 = self.field(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$1 = _r$13;
		field = $clone(_tuple$1[0], reflect.StructField);
		exists = _tuple$1[1];
		if (!exists) {
			return false;
		}
		_r$14 = self.getValue(name); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		fieldValue = _r$14;
		_r$15 = field.Type.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = value.toReflectValue(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_tuple$2 = _r$16;
		reflectValue = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		$r = fieldValue.Set(reflectValue); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _goStructObject.ptr.prototype.setValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.exists = exists; $f.field = field; $f.fieldValue = fieldValue; $f.name = name; $f.reflectValue = reflectValue; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_goStructObject.prototype.setValue = function(name, value) { return this.$val.setValue(name, value); };
	goStructGetOwnProperty = function(self, name) {
		var $ptr, _r$13, _r$14, _r$15, name, object, self, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; name = $f.name; object = $f.object; self = $f.self; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		object = $assertType(self.value, ptrType$108);
		_r$13 = object.getValue(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		value = _r$13;
		/* */ if (value.IsValid()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (value.IsValid()) { */ case 2:
			_r$14 = value.Interface(); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = self.runtime.toValue(_r$14); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 6; case 6:
			return new _property.ptr((x = _r$15, new x.constructor.elem(x)), 72);
		/* } */ case 3:
		return objectGetOwnProperty(self, name);
		/* */ } return; } if ($f === undefined) { $f = { $blk: goStructGetOwnProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f.name = name; $f.object = object; $f.self = self; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	validGoStructName = function(name) {
		var $ptr, name;
		if (name === "") {
			return false;
		}
		return 65 <= name.charCodeAt(0) && name.charCodeAt(0) <= 90;
	};
	goStructEnumerate = function(self, all, each) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, all, each, index, index$1, name, name$1, object, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; all = $f.all; each = $f.each; index = $f.index; index$1 = $f.index$1; name = $f.name; name$1 = $f.name$1; object = $f.object; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		object = $assertType(self.value, ptrType$108);
		index = 0;
		/* while (true) { */ case 1:
			_r$13 = reflect.Indirect(object.value); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = _r$13.NumField(); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* if (!(index < _r$14)) { break; } */ if(!(index < _r$14)) { $s = 2; continue; }
			_r$15 = reflect.Indirect(object.value); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = _r$15.Type(); /* */ $s = 6; case 6: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$17 = _r$16.Field(index); /* */ $s = 7; case 7: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			name = _r$17.Name;
			/* */ if (validGoStructName(name)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (validGoStructName(name)) { */ case 8:
				_r$18 = each(name); /* */ $s = 12; case 12: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				/* */ if (!_r$18) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!_r$18) { */ case 10:
					return;
				/* } */ case 11:
			/* } */ case 9:
			index = index + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		index$1 = 0;
		/* while (true) { */ case 13:
			/* if (!(index$1 < object.value.NumMethod())) { break; } */ if(!(index$1 < object.value.NumMethod())) { $s = 14; continue; }
			_r$19 = object.value.Type().Method(index$1); /* */ $s = 15; case 15: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			name$1 = _r$19.Name;
			/* */ if (validGoStructName(name$1)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (validGoStructName(name$1)) { */ case 16:
				_r$20 = each(name$1); /* */ $s = 20; case 20: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				/* */ if (!_r$20) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (!_r$20) { */ case 18:
					return;
				/* } */ case 19:
			/* } */ case 17:
			index$1 = index$1 + (1) >> 0;
		/* } */ $s = 13; continue; case 14:
		$r = objectEnumerate(self, all, each); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: goStructEnumerate }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f.all = all; $f.each = each; $f.index = index; $f.index$1 = index$1; $f.name = name; $f.name$1 = name$1; $f.object = object; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	goStructCanPut = function(self, name) {
		var $ptr, _r$13, _r$14, name, object, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; name = $f.name; object = $f.object; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		object = $assertType(self.value, ptrType$108);
		_r$13 = object.getValue(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		value = _r$13;
		if (value.IsValid()) {
			return true;
		}
		_r$14 = objectCanPut(self, name); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: goStructCanPut }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.name = name; $f.object = object; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	goStructPut = function(self, name, value, throw$1) {
		var $ptr, _r$13, name, object, self, throw$1, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; name = $f.name; object = $f.object; self = $f.self; throw$1 = $f.throw$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		object = $assertType(self.value, ptrType$108);
		_r$13 = object.setValue(name, value); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ if (_r$13) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$13) { */ case 1:
			return;
		/* } */ case 2:
		$r = objectPut(self, name, value, throw$1); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: goStructPut }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.name = name; $f.object = object; $f.self = self; $f.throw$1 = throw$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	goStructMarshalJSON = function(self) {
		var $ptr, _r$13, _r$14, _ref, goValue, marshaler, object, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; goValue = $f.goValue; marshaler = $f.marshaler; object = $f.object; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		object = $assertType(self.value, ptrType$108);
		_r$13 = reflect.Indirect(object.value); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = _r$13.Interface(); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		goValue = _r$14;
		_ref = goValue;
		if ($assertType(_ref, json.Marshaler, true)[1]) {
			marshaler = _ref;
			return marshaler;
		}
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: goStructMarshalJSON }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f.goValue = goValue; $f.marshaler = marshaler; $f.object = object; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.newNumberObject = function(value) {
		var $ptr, _arg, _r$13, _r$14, runtime$1, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r$13 = $f._r$13; _r$14 = $f._r$14; runtime$1 = $f.runtime$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		runtime$1 = this;
		_r$13 = value.numberValue(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg = _r$13;
		_r$14 = runtime$1.newPrimitiveObject("Number", _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newNumberObject }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.runtime$1 = runtime$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newNumberObject = function(value) { return this.$val.newNumberObject(value); };
	newPropertyReference = function(rt, base, name, strict, at) {
		var $ptr, at, base, name, rt, strict;
		return new _propertyReference.ptr(name, strict, base, rt, at);
	};
	_propertyReference.ptr.prototype.invalid = function() {
		var $ptr, self;
		self = this;
		return self.base === ptrType$4.nil;
	};
	_propertyReference.prototype.invalid = function() { return this.$val.invalid(); };
	_propertyReference.ptr.prototype.getValue = function() {
		var $ptr, _r$13, _r$14, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (self.base === ptrType$4.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.base === ptrType$4.nil) { */ case 1:
			_r$13 = self.runtime.panicReferenceError(new sliceType$1([new $String("'%s' is not defined"), new $String(self.name), new _at(self.at)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 2:
		_r$14 = self.base.get(self.name); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _propertyReference.ptr.prototype.getValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_propertyReference.prototype.getValue = function() { return this.$val.getValue(); };
	_propertyReference.ptr.prototype.putValue = function(value) {
		var $ptr, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = this;
		if (self.base === ptrType$4.nil) {
			return self.name;
		}
		$r = self.base.put(self.name, value, self.strict); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return "";
		/* */ } return; } if ($f === undefined) { $f = { $blk: _propertyReference.ptr.prototype.putValue }; } $f.$ptr = $ptr; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_propertyReference.prototype.putValue = function(value) { return this.$val.putValue(value); };
	_propertyReference.ptr.prototype.delete$ = function() {
		var $ptr, _r$13, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		if (self.base === ptrType$4.nil) {
			return true;
		}
		_r$13 = self.base.delete$(self.name, self.strict); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _propertyReference.ptr.prototype.delete$ }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_propertyReference.prototype.delete$ = function() { return this.$val.delete$(); };
	_stashReference.ptr.prototype.invalid = function() {
		var $ptr, self;
		self = this;
		return false;
	};
	_stashReference.prototype.invalid = function() { return this.$val.invalid(); };
	_stashReference.ptr.prototype.getValue = function() {
		var $ptr, _r$13, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r$13 = self.base.getBinding(self.name, self.strict); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _stashReference.ptr.prototype.getValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_stashReference.prototype.getValue = function() { return this.$val.getValue(); };
	_stashReference.ptr.prototype.putValue = function(value) {
		var $ptr, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		self = this;
		$r = self.base.setValue(self.name, value, self.strict); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return "";
		/* */ } return; } if ($f === undefined) { $f = { $blk: _stashReference.ptr.prototype.putValue }; } $f.$ptr = $ptr; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_stashReference.prototype.putValue = function(value) { return this.$val.putValue(value); };
	_stashReference.ptr.prototype.delete$ = function() {
		var $ptr, _r$13, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		if ($interfaceIsEqual(self.base, $ifaceNil)) {
			return false;
		}
		_r$13 = self.base.deleteBinding(self.name); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _stashReference.ptr.prototype.delete$ }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	_stashReference.prototype.delete$ = function() { return this.$val.delete$(); };
	getIdentifierReference = function(runtime$1, stash, name, strict, at) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _r$13, _r$14, _r$15, _r$16, at, name, runtime$1, stash, strict, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; at = $f.at; name = $f.name; runtime$1 = $f.runtime$1; stash = $f.stash; strict = $f.strict; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(stash, $ifaceNil)) {
			return newPropertyReference(runtime$1, ptrType$4.nil, name, strict, at);
		}
		_r$13 = stash.hasBinding(name); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ if (_r$13) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$13) { */ case 1:
			_r$14 = stash.newReference(name, strict, at); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$14;
		/* } */ case 2:
		_arg = runtime$1;
		_r$15 = stash.outer(); /* */ $s = 6; case 6: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_arg$1 = _r$15;
		_arg$2 = name;
		_arg$3 = strict;
		_arg$4 = at;
		_r$16 = getIdentifierReference(_arg, _arg$1, _arg$2, _arg$3, _arg$4); /* */ $s = 7; case 7: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ $s = 8; case 8:
		return _r$16;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getIdentifierReference }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f.at = at; $f.name = name; $f.runtime$1 = runtime$1; $f.stash = stash; $f.strict = strict; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.newRegExpObject = function(pattern, flags) {
		var $ptr, _arg, _arg$1, _i, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _ref, _ref$1, _rune, _tuple$1, _tuple$2, chr, err, flags, global, ignoreCase, multiline, pattern, re2flags, re2pattern, regularExpression, runtime$1, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _ref = $f._ref; _ref$1 = $f._ref$1; _rune = $f._rune; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; chr = $f.chr; err = $f.err; flags = $f.flags; global = $f.global; ignoreCase = $f.ignoreCase; multiline = $f.multiline; pattern = $f.pattern; re2flags = $f.re2flags; re2pattern = $f.re2pattern; regularExpression = $f.regularExpression; runtime$1 = $f.runtime$1; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		runtime$1 = this;
		self = runtime$1.newObject();
		self.class$1 = "RegExp";
		global = false;
		ignoreCase = false;
		multiline = false;
		re2flags = "";
		_ref = flags;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			chr = _rune[0];
			_ref$1 = chr;
			/* */ if (_ref$1 === 103) { $s = 3; continue; }
			/* */ if (_ref$1 === 109) { $s = 4; continue; }
			/* */ if (_ref$1 === 105) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_ref$1 === 103) { */ case 3:
				/* */ if (global) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (global) { */ case 7:
					_r$13 = runtime$1.panicSyntaxError(new sliceType$1([new $String("newRegExpObject: %s %s"), new $String(pattern), new $String(flags)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					$panic(_r$13);
				/* } */ case 8:
				global = true;
				$s = 6; continue;
			/* } else if (_ref$1 === 109) { */ case 4:
				/* */ if (multiline) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (multiline) { */ case 10:
					_r$14 = runtime$1.panicSyntaxError(new sliceType$1([new $String("newRegExpObject: %s %s"), new $String(pattern), new $String(flags)])); /* */ $s = 12; case 12: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					$panic(_r$14);
				/* } */ case 11:
				multiline = true;
				re2flags = re2flags + ("m");
				$s = 6; continue;
			/* } else if (_ref$1 === 105) { */ case 5:
				/* */ if (ignoreCase) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (ignoreCase) { */ case 13:
					_r$15 = runtime$1.panicSyntaxError(new sliceType$1([new $String("newRegExpObject: %s %s"), new $String(pattern), new $String(flags)])); /* */ $s = 15; case 15: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					$panic(_r$15);
				/* } */ case 14:
				ignoreCase = true;
				re2flags = re2flags + ("i");
			/* } */ case 6:
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		_r$16 = parser.TransformRegExp(pattern); /* */ $s = 16; case 16: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_tuple$1 = _r$16;
		re2pattern = _tuple$1[0];
		err = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 17:
			_r$17 = err.Error(); /* */ $s = 19; case 19: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_arg = new $String(_r$17);
			_r$18 = runtime$1.panicTypeError(new sliceType$1([new $String("Invalid regular expression: %s"), _arg])); /* */ $s = 20; case 20: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			$panic(_r$18);
		/* } */ case 18:
		/* */ if (re2flags.length > 0) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (re2flags.length > 0) { */ case 21:
			_r$19 = fmt.Sprintf("(?%s:%s)", new sliceType$1([new $String(re2flags), new $String(re2pattern)])); /* */ $s = 23; case 23: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			re2pattern = _r$19;
		/* } */ case 22:
		_r$20 = regexp.Compile(re2pattern); /* */ $s = 24; case 24: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		_tuple$2 = _r$20;
		regularExpression = _tuple$2[0];
		err = _tuple$2[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 25; continue; }
		/* */ $s = 26; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 25:
			_r$21 = err.Error(); /* */ $s = 27; case 27: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$21.substring(22));
			_r$22 = runtime$1.panicSyntaxError(new sliceType$1([new $String("Invalid regular expression: %s"), _arg$1])); /* */ $s = 28; case 28: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			$panic(_r$22);
		/* } */ case 26:
		self.value = (x = new _regExpObject.ptr(regularExpression, global, ignoreCase, multiline, pattern, flags), new x.constructor.elem(x));
		_r$23 = self.defineProperty("global", toValue_bool(global), 0, false); /* */ $s = 29; case 29: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_r$23;
		_r$24 = self.defineProperty("ignoreCase", toValue_bool(ignoreCase), 0, false); /* */ $s = 30; case 30: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_r$24;
		_r$25 = self.defineProperty("multiline", toValue_bool(multiline), 0, false); /* */ $s = 31; case 31: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		_r$25;
		_r$26 = self.defineProperty("lastIndex", toValue_int(0), 64, false); /* */ $s = 32; case 32: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
		_r$26;
		_r$27 = self.defineProperty("source", toValue_string(pattern), 0, false); /* */ $s = 33; case 33: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
		_r$27;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newRegExpObject }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._ref = _ref; $f._ref$1 = _ref$1; $f._rune = _rune; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.chr = chr; $f.err = err; $f.flags = flags; $f.global = global; $f.ignoreCase = ignoreCase; $f.multiline = multiline; $f.pattern = pattern; $f.re2flags = re2flags; $f.re2pattern = re2pattern; $f.regularExpression = regularExpression; $f.runtime$1 = runtime$1; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newRegExpObject = function(pattern, flags) { return this.$val.newRegExpObject(pattern, flags); };
	_object.ptr.prototype.regExpValue = function() {
		var $ptr, _tuple$1, self, value;
		self = this;
		_tuple$1 = $assertType(self.value, _regExpObject, true);
		value = $clone(_tuple$1[0], _regExpObject);
		return value;
	};
	_object.prototype.regExpValue = function() { return this.$val.regExpValue(); };
	execRegExp = function(this$1, target) {
		var $ptr, _i, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _ref, endIndex, global, index, index$1, lastIndex, match, result, startIndex, target, this$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _ref = $f._ref; endIndex = $f.endIndex; global = $f.global; index = $f.index; index$1 = $f.index$1; lastIndex = $f.lastIndex; match = $f.match; result = $f.result; startIndex = $f.startIndex; target = $f.target; this$1 = $f.this$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		match = false;
		result = sliceType$6.nil;
		/* */ if (!(this$1.class$1 === "RegExp")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(this$1.class$1 === "RegExp")) { */ case 1:
			_r$13 = this$1.runtime.panicTypeError(new sliceType$1([new $String("Calling RegExp.exec on a non-RegExp object")])); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic(_r$13);
		/* } */ case 2:
		_r$14 = this$1.get("lastIndex"); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = _r$14.number(); /* */ $s = 5; case 5: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		lastIndex = _r$15.int64;
		index = lastIndex;
		_r$16 = this$1.get("global"); /* */ $s = 6; case 6: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$17 = _r$16.bool(); /* */ $s = 7; case 7: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		global = _r$17;
		if (!global) {
			index = new $Int64(0, 0);
		}
		/* */ if ((0 > index.$high || (0 === index.$high && 0 > index.$low)) || (x = new $Int64(0, target.length), (index.$high > x.$high || (index.$high === x.$high && index.$low > x.$low)))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ((0 > index.$high || (0 === index.$high && 0 > index.$low)) || (x = new $Int64(0, target.length), (index.$high > x.$high || (index.$high === x.$high && index.$low > x.$low)))) { */ case 8:
			$s = 10; continue;
		/* } else { */ case 9:
			_r$18 = this$1.regExpValue().regularExpression.FindStringSubmatchIndex(target.substring($flatten64(index))); /* */ $s = 11; case 11: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			result = _r$18;
		/* } */ case 10:
		/* */ if (result === sliceType$6.nil) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (result === sliceType$6.nil) { */ case 12:
			$r = this$1.put("lastIndex", toValue_int(0), true); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return [match, result];
		/* } */ case 13:
		match = true;
		startIndex = index;
		endIndex = ((lastIndex.$low + ((lastIndex.$high >> 31) * 4294967296)) >> 0) + (1 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 1]) >> 0;
		_ref = result;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			index$1 = _i;
			((index$1 < 0 || index$1 >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + index$1] = (((index$1 < 0 || index$1 >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + index$1]) + (((startIndex.$low + ((startIndex.$high >> 31) * 4294967296)) >> 0)) >> 0));
			_i++;
		}
		/* */ if (global) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (global) { */ case 15:
			$r = this$1.put("lastIndex", toValue_int(endIndex), true); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 16:
		return [match, result];
		/* */ } return; } if ($f === undefined) { $f = { $blk: execRegExp }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._ref = _ref; $f.endIndex = endIndex; $f.global = global; $f.index = index; $f.index$1 = index$1; $f.lastIndex = lastIndex; $f.match = match; $f.result = result; $f.startIndex = startIndex; $f.target = target; $f.this$1 = this$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	execResultToArray = function(runtime$1, target, result) {
		var $ptr, _q, _r$13, _r$14, _r$15, _tuple$1, captureCount, index, index$1, match, matchIndex, offset, result, runtime$1, size, target, valueArray, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _tuple$1 = $f._tuple$1; captureCount = $f.captureCount; index = $f.index; index$1 = $f.index$1; match = $f.match; matchIndex = $f.matchIndex; offset = $f.offset; result = $f.result; runtime$1 = $f.runtime$1; size = $f.size; target = $f.target; valueArray = $f.valueArray; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		captureCount = (_q = result.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		valueArray = $makeSlice(sliceType$5, captureCount);
		index = 0;
		while (true) {
			if (!(index < captureCount)) { break; }
			offset = $imul(2, index);
			if (!((((offset < 0 || offset >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + offset]) === -1))) {
				Value.copy(((index < 0 || index >= valueArray.$length) ? $throwRuntimeError("index out of range") : valueArray.$array[valueArray.$offset + index]), toValue_string(target.substring(((offset < 0 || offset >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + offset]), (x = offset + 1 >> 0, ((x < 0 || x >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + x])))));
			} else {
				Value.copy(((index < 0 || index >= valueArray.$length) ? $throwRuntimeError("index out of range") : valueArray.$array[valueArray.$offset + index]), new Value.ptr(0, $ifaceNil));
			}
			index = index + (1) >> 0;
		}
		matchIndex = (0 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 0]);
		if (!((matchIndex === 0))) {
			matchIndex = 0;
			index$1 = 0;
			while (true) {
				if (!(index$1 < (0 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 0]))) { break; }
				_tuple$1 = utf8.DecodeRuneInString(target.substring(index$1));
				size = _tuple$1[1];
				matchIndex = matchIndex + (1) >> 0;
				index$1 = index$1 + (size) >> 0;
			}
		}
		_r$13 = runtime$1.newArrayOf(valueArray); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		match = _r$13;
		_r$14 = match.defineProperty("input", toValue_string(target), 73, false); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14;
		_r$15 = match.defineProperty("index", toValue_int(matchIndex), 73, false); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$15;
		return match;
		/* */ } return; } if ($f === undefined) { $f = { $blk: execResultToArray }; } $f.$ptr = $ptr; $f._q = _q; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._tuple$1 = _tuple$1; $f.captureCount = captureCount; $f.index = index; $f.index$1 = index$1; $f.match = match; $f.matchIndex = matchIndex; $f.offset = offset; $f.result = result; $f.runtime$1 = runtime$1; $f.size = size; $f.target = target; $f.valueArray = valueArray; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	_stringASCII.prototype.Length = function() {
		var $ptr, str;
		str = this.$val;
		return str.length;
	};
	$ptrType(_stringASCII).prototype.Length = function() { return new _stringASCII(this.$get()).Length(); };
	_stringASCII.prototype.At = function(at) {
		var $ptr, at, str;
		str = this.$val;
		return (str.charCodeAt(at) >> 0);
	};
	$ptrType(_stringASCII).prototype.At = function(at) { return new _stringASCII(this.$get()).At(at); };
	_stringASCII.prototype.String = function() {
		var $ptr, str;
		str = this.$val;
		return str;
	};
	$ptrType(_stringASCII).prototype.String = function() { return new _stringASCII(this.$get()).String(); };
	_stringWide.ptr.prototype.Length = function() {
		var $ptr, str;
		str = $clone(this, _stringWide);
		return str.length;
	};
	_stringWide.prototype.Length = function() { return this.$val.Length(); };
	_stringWide.ptr.prototype.At = function(at) {
		var $ptr, at, str, x;
		str = $clone(this, _stringWide);
		if (str.runes === sliceType$3.nil) {
			str.runes = new sliceType$3($stringToRunes(str.string));
		}
		return (x = str.runes, ((at < 0 || at >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + at]));
	};
	_stringWide.prototype.At = function(at) { return this.$val.At(at); };
	_stringWide.ptr.prototype.String = function() {
		var $ptr, str;
		str = $clone(this, _stringWide);
		return str.string;
	};
	_stringWide.prototype.String = function() { return this.$val.String(); };
	_newStringObject = function(str) {
		var $ptr, i, str, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < str.length)) { break; } */ if(!(i < str.length)) { $s = 2; continue; }
			/* */ if (str.charCodeAt(i) >= 128) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (str.charCodeAt(i) >= 128) { */ case 3:
				/* goto wide */ $s = 5; continue;
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		return new _stringASCII(str);
		/* wide: */ case 5:
		return new _stringWide.ptr(str, utf8.RuneCountInString(str), sliceType$3.nil);
		/* */ $s = -1; case -1: } return; }
	};
	stringAt = function(str, index) {
		var $ptr, _r$13, _r$14, _v, index, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _v = $f._v; index = $f.index; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!(0 <= index)) { _v = false; $s = 3; continue s; }
		_r$13 = str.Length(); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_v = index < _r$13; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			_r$14 = str.At(index); /* */ $s = 5; case 5: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 6; case 6:
			return _r$14;
		/* } */ case 2:
		return 65533;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stringAt }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._v = _v; $f.index = index; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.ptr.prototype.newStringObject = function(value) {
		var $ptr, _arg, _r$13, _r$14, _r$15, _r$16, _r$17, runtime$1, self, str, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; runtime$1 = $f.runtime$1; self = $f.self; str = $f.str; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		runtime$1 = this;
		_r$13 = value.string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = _newStringObject(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		str = _r$14;
		self = runtime$1.newClassObject("String");
		_r$15 = str.Length(); /* */ $s = 3; case 3: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$16 = toValue_int(_r$15); /* */ $s = 4; case 4: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_arg = _r$16;
		_r$17 = self.defineProperty("length", _arg, 0, false); /* */ $s = 5; case 5: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_r$17;
		self.objectClass = _classString;
		self.value = str;
		return self;
		/* */ } return; } if ($f === undefined) { $f = { $blk: _runtime.ptr.prototype.newStringObject }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f.runtime$1 = runtime$1; $f.self = self; $f.str = str; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_runtime.prototype.newStringObject = function(value) { return this.$val.newStringObject(value); };
	_object.ptr.prototype.stringValue = function() {
		var $ptr, _tuple$1, ok, self, str;
		self = this;
		_tuple$1 = $assertType(self.value, _stringObject, true);
		str = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok) {
			return str;
		}
		return $ifaceNil;
	};
	_object.prototype.stringValue = function() { return this.$val.stringValue(); };
	stringEnumerate = function(self, all, each) {
		var $ptr, _r$13, _r$14, all, each, index, length, self, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; all = $f.all; each = $f.each; index = $f.index; length = $f.length; self = $f.self; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		str = self.stringValue();
		/* */ if (!($interfaceIsEqual(str, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(str, $ifaceNil))) { */ case 1:
			_r$13 = str.Length(); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			length = _r$13;
			index = 0;
			/* while (true) { */ case 4:
				/* if (!(index < length)) { break; } */ if(!(index < length)) { $s = 5; continue; }
				_r$14 = each(strconv.FormatInt(new $Int64(0, index), 10)); /* */ $s = 8; case 8: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				/* */ if (!_r$14) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (!_r$14) { */ case 6:
					return;
				/* } */ case 7:
				index = index + (1) >> 0;
			/* } */ $s = 4; continue; case 5:
		/* } */ case 2:
		$r = objectEnumerate(self, all, each); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: stringEnumerate }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f.all = all; $f.each = each; $f.index = index; $f.length = length; $f.self = self; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	stringGetOwnProperty = function(self, name) {
		var $ptr, _r$13, chr, index, name, property, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; chr = $f.chr; index = $f.index; name = $f.name; property = $f.property; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		property = objectGetOwnProperty(self, name);
		if (!(property === ptrType$14.nil)) {
			return property;
		}
		index = stringToArrayIndex(name);
		/* */ if ((index.$high > 0 || (index.$high === 0 && index.$low >= 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((index.$high > 0 || (index.$high === 0 && index.$low >= 0))) { */ case 1:
			_r$13 = stringAt(self.stringValue(), ((index.$low + ((index.$high >> 31) * 4294967296)) >> 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			chr = _r$13;
			/* */ if (!((chr === 65533))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!((chr === 65533))) { */ case 4:
				return new _property.ptr((x = toValue_string($encodeRune(chr)), new x.constructor.elem(x)), 0);
			/* } */ case 5:
		/* } */ case 2:
		return ptrType$14.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stringGetOwnProperty }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.chr = chr; $f.index = index; $f.name = name; $f.property = property; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.ptr.prototype.safe = function() {
		var $ptr, vl;
		vl = $clone(this, Value);
		return vl.kind < 6;
	};
	Value.prototype.safe = function() { return this.$val.safe(); };
	Value.ptr.prototype.isEmpty = function() {
		var $ptr, value;
		value = $clone(this, Value);
		return value.kind === 6;
	};
	Value.prototype.isEmpty = function() { return this.$val.isEmpty(); };
	Value.ptr.prototype.IsDefined = function() {
		var $ptr, value;
		value = $clone(this, Value);
		return !((value.kind === 0));
	};
	Value.prototype.IsDefined = function() { return this.$val.IsDefined(); };
	Value.ptr.prototype.IsUndefined = function() {
		var $ptr, value;
		value = $clone(this, Value);
		return value.kind === 0;
	};
	Value.prototype.IsUndefined = function() { return this.$val.IsUndefined(); };
	Value.ptr.prototype.IsNull = function() {
		var $ptr, value;
		value = $clone(this, Value);
		return value.kind === 1;
	};
	Value.prototype.IsNull = function() { return this.$val.IsNull(); };
	Value.ptr.prototype.isCallable = function() {
		var $ptr, _ref, value, value$1;
		value = $clone(this, Value);
		_ref = value.value;
		if ($assertType(_ref, ptrType$4, true)[1]) {
			value$1 = _ref.$val;
			return value$1.isCall();
		}
		return false;
	};
	Value.prototype.isCallable = function() { return this.$val.isCallable(); };
	Value.ptr.prototype.Call = function(this$1, argumentList) {
		var $ptr, _r$13, argumentList, err, result, this$1, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; argumentList = $f.argumentList; err = $f.err; result = $f.result; this$1 = $f.this$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		argumentList = [argumentList];
		result = [result];
		this$1 = [this$1];
		value = [value];
		this$1[0] = $clone(this$1[0], Value);
		value[0] = $clone(this, Value);
		result[0] = new Value.ptr(0, $ifaceNil);
		_r$13 = catchPanic((function(argumentList, result, this$1, value) { return function $b() {
			var $ptr, _r$13, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$13 = value[0].call(ptrType$3.nil, this$1[0], argumentList[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			Value.copy(result[0], _r$13);
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.$s = $s; $f.$r = $r; return $f;
		}; })(argumentList, result, this$1, value)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		err = _r$13;
		if (!value[0].safe()) {
			Value.copy(value[0], new Value.ptr(0, $ifaceNil));
		}
		return [result[0], err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.argumentList = argumentList; $f.err = err; $f.result = result; $f.this$1 = this$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Call = function(this$1, argumentList) { return this.$val.Call(this$1, argumentList); };
	Value.ptr.prototype.call = function(rt, this$1, argumentList) {
		var $ptr, _arg, _arg$1, _arg$2, _r$13, _r$14, _r$15, _ref, argumentList, function$1, rt, this$1, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _ref = $f._ref; argumentList = $f.argumentList; function$1 = $f.function$1; rt = $f.rt; this$1 = $f.this$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		this$1 = $clone(this$1, Value);
		value = $clone(this, Value);
		_ref = value.value;
		/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, ptrType$4, true)[1]) { */ case 1:
			function$1 = _ref.$val;
			_arg = this$1;
			_r$13 = function$1.runtime.toValueArray(argumentList); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_arg$1 = _r$13;
			_arg$2 = nativeFrame;
			_r$14 = function$1.call(_arg, _arg$1, false, _arg$2); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$14;
		/* } */ case 2:
		if (rt === ptrType$3.nil) {
			$panic(new $String("FIXME TypeError"));
		}
		_r$15 = rt.panicTypeError(new sliceType$1([])); /* */ $s = 6; case 6: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		$panic(_r$15);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.call }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._ref = _ref; $f.argumentList = argumentList; $f.function$1 = function$1; $f.rt = rt; $f.this$1 = this$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.call = function(rt, this$1, argumentList) { return this.$val.call(rt, this$1, argumentList); };
	Value.ptr.prototype.constructSafe = function(rt, this$1, argumentList) {
		var $ptr, _r$13, argumentList, err, result, rt, this$1, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; argumentList = $f.argumentList; err = $f.err; result = $f.result; rt = $f.rt; this$1 = $f.this$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		argumentList = [argumentList];
		result = [result];
		rt = [rt];
		this$1 = [this$1];
		value = [value];
		this$1[0] = $clone(this$1[0], Value);
		value[0] = $clone(this, Value);
		result[0] = new Value.ptr(0, $ifaceNil);
		_r$13 = catchPanic((function(argumentList, result, rt, this$1, value) { return function $b() {
			var $ptr, _r$13, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$13 = value[0].construct(rt[0], this$1[0], argumentList[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			Value.copy(result[0], _r$13);
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.$s = $s; $f.$r = $r; return $f;
		}; })(argumentList, result, rt, this$1, value)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		err = _r$13;
		return [result[0], err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.constructSafe }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.argumentList = argumentList; $f.err = err; $f.result = result; $f.rt = rt; $f.this$1 = this$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.constructSafe = function(rt, this$1, argumentList) { return this.$val.constructSafe(rt, this$1, argumentList); };
	Value.ptr.prototype.construct = function(rt, this$1, argumentList) {
		var $ptr, _r$13, _r$14, _r$15, _ref, argumentList, fn, rt, this$1, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _ref = $f._ref; argumentList = $f.argumentList; fn = $f.fn; rt = $f.rt; this$1 = $f.this$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		this$1 = $clone(this$1, Value);
		value = $clone(this, Value);
		_ref = value.value;
		/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, ptrType$4, true)[1]) { */ case 1:
			fn = _ref.$val;
			_r$13 = fn.runtime.toValueArray(argumentList); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = fn.construct(_r$13); /* */ $s = 4; case 4: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$14;
		/* } */ case 2:
		if (rt === ptrType$3.nil) {
			$panic(new $String("FIXME TypeError"));
		}
		_r$15 = rt.panicTypeError(new sliceType$1([])); /* */ $s = 6; case 6: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		$panic(_r$15);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.construct }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._ref = _ref; $f.argumentList = argumentList; $f.fn = fn; $f.rt = rt; $f.this$1 = this$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.construct = function(rt, this$1, argumentList) { return this.$val.construct(rt, this$1, argumentList); };
	Value.ptr.prototype.IsPrimitive = function() {
		var $ptr, value;
		value = $clone(this, Value);
		return !value.IsObject();
	};
	Value.prototype.IsPrimitive = function() { return this.$val.IsPrimitive(); };
	Value.ptr.prototype.IsBoolean = function() {
		var $ptr, value;
		value = $clone(this, Value);
		return value.kind === 4;
	};
	Value.prototype.IsBoolean = function() { return this.$val.IsBoolean(); };
	Value.ptr.prototype.IsNumber = function() {
		var $ptr, value;
		value = $clone(this, Value);
		return value.kind === 2;
	};
	Value.prototype.IsNumber = function() { return this.$val.IsNumber(); };
	Value.ptr.prototype.IsNaN = function() {
		var $ptr, _r$13, _r$14, _ref, value, value$1, value$2, value$3, value$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; value$3 = $f.value$3; value$4 = $f.value$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(this, Value);
		_ref = value.value;
		if ($assertType(_ref, $Float64, true)[1]) {
			value$1 = _ref.$val;
			return math.IsNaN(value$1);
		} else if ($assertType(_ref, $Float32, true)[1]) {
			value$2 = _ref.$val;
			return math.IsNaN(value$2);
		} else if ($assertType(_ref, $Int, true)[1] || $assertType(_ref, $Int8, true)[1] || $assertType(_ref, $Int32, true)[1] || $assertType(_ref, $Int64, true)[1]) {
			value$3 = _ref;
			return false;
		} else if ($assertType(_ref, $Uint, true)[1] || $assertType(_ref, $Uint8, true)[1] || $assertType(_ref, $Uint32, true)[1] || $assertType(_ref, $Uint64, true)[1]) {
			value$4 = _ref;
			return false;
		}
		_r$13 = value.float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$14 = math.IsNaN(_r$13); /* */ $s = 2; case 2: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$14;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.IsNaN }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.value$3 = value$3; $f.value$4 = value$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.IsNaN = function() { return this.$val.IsNaN(); };
	Value.ptr.prototype.IsString = function() {
		var $ptr, value;
		value = $clone(this, Value);
		return value.kind === 3;
	};
	Value.prototype.IsString = function() { return this.$val.IsString(); };
	Value.ptr.prototype.IsObject = function() {
		var $ptr, value;
		value = $clone(this, Value);
		return value.kind === 5;
	};
	Value.prototype.IsObject = function() { return this.$val.IsObject(); };
	Value.ptr.prototype.IsFunction = function() {
		var $ptr, value;
		value = $clone(this, Value);
		if (!((value.kind === 5))) {
			return false;
		}
		return $assertType(value.value, ptrType$4).class$1 === "Function";
	};
	Value.prototype.IsFunction = function() { return this.$val.IsFunction(); };
	Value.ptr.prototype.Class = function() {
		var $ptr, value;
		value = $clone(this, Value);
		if (!((value.kind === 5))) {
			return "";
		}
		return $assertType(value.value, ptrType$4).class$1;
	};
	Value.prototype.Class = function() { return this.$val.Class(); };
	Value.ptr.prototype.isRegExp = function() {
		var $ptr, value;
		value = $clone(this, Value);
		if (!((value.kind === 5))) {
			return false;
		}
		return $assertType(value.value, ptrType$4).class$1 === "RegExp";
	};
	Value.prototype.isRegExp = function() { return this.$val.isRegExp(); };
	toValue_reflectValuePanic = function(value, kind) {
		var $ptr, _r$13, _r$14, _r$15, _ref, kind, value, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _ref = $f._ref; kind = $f.kind; value = $f.value; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = kind;
		/* */ if (_ref === 25) { $s = 1; continue; }
		/* */ if (_ref === 21) { $s = 2; continue; }
		/* */ if (_ref === 23) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 25) { */ case 1:
			_r$13 = newError(ptrType$3.nil, "TypeError", new sliceType$1([new $String("invalid value (struct): missing runtime: %v (%T)"), value, value])); /* */ $s = 5; case 5: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$panic((x = _r$13, new x.constructor.elem(x)));
			$s = 4; continue;
		/* } else if (_ref === 21) { */ case 2:
			_r$14 = newError(ptrType$3.nil, "TypeError", new sliceType$1([new $String("invalid value (map): missing runtime: %v (%T)"), value, value])); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			$panic((x$1 = _r$14, new x$1.constructor.elem(x$1)));
			$s = 4; continue;
		/* } else if (_ref === 23) { */ case 3:
			_r$15 = newError(ptrType$3.nil, "TypeError", new sliceType$1([new $String("invalid value (slice): missing runtime: %v (%T)"), value, value])); /* */ $s = 7; case 7: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			$panic((x$2 = _r$15, new x$2.constructor.elem(x$2)));
		/* } */ case 4:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: toValue_reflectValuePanic }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._ref = _ref; $f.kind = kind; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	toValue = function(value) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _ref, _ref$1, value, value$1, value$10, value$11, value$12, value$13, value$14, value$15, value$16, value$17, value$18, value$19, value$2, value$20, value$21, value$22, value$23, value$24, value$3, value$4, value$5, value$6, value$7, value$8, value$9, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _ref = $f._ref; _ref$1 = $f._ref$1; value = $f.value; value$1 = $f.value$1; value$10 = $f.value$10; value$11 = $f.value$11; value$12 = $f.value$12; value$13 = $f.value$13; value$14 = $f.value$14; value$15 = $f.value$15; value$16 = $f.value$16; value$17 = $f.value$17; value$18 = $f.value$18; value$19 = $f.value$19; value$2 = $f.value$2; value$20 = $f.value$20; value$21 = $f.value$21; value$22 = $f.value$22; value$23 = $f.value$23; value$24 = $f.value$24; value$3 = $f.value$3; value$4 = $f.value$4; value$5 = $f.value$5; value$6 = $f.value$6; value$7 = $f.value$7; value$8 = $f.value$8; value$9 = $f.value$9; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = value;
		/* */ if ($assertType(_ref, Value, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, $Bool, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, $Int, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, $Int8, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, $Int16, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, $Int64, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, $Uint, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, $Uint8, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, $Uint16, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, $Uint32, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref, $Uint64, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref, $Float32, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref, sliceType$2, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref, $String, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, ptrType$98, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, Object, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, _reference, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, _result, true)[1]) { $s = 21; continue; }
		/* */ if (_ref === $ifaceNil) { $s = 22; continue; }
		/* */ if ($assertType(_ref, reflect.Value, true)[1]) { $s = 23; continue; }
		/* */ $s = 24; continue;
		/* if ($assertType(_ref, Value, true)[1]) { */ case 1:
			value$1 = _ref.$val;
			return value$1;
		/* } else if ($assertType(_ref, $Bool, true)[1]) { */ case 2:
			value$2 = _ref.$val;
			return new Value.ptr(4, new $Bool(value$2));
		/* } else if ($assertType(_ref, $Int, true)[1]) { */ case 3:
			value$3 = _ref.$val;
			return new Value.ptr(2, new $Int(value$3));
		/* } else if ($assertType(_ref, $Int8, true)[1]) { */ case 4:
			value$4 = _ref.$val;
			return new Value.ptr(2, new $Int8(value$4));
		/* } else if ($assertType(_ref, $Int16, true)[1]) { */ case 5:
			value$5 = _ref.$val;
			return new Value.ptr(2, new $Int16(value$5));
		/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 6:
			value$6 = _ref.$val;
			return new Value.ptr(2, new $Int32(value$6));
		/* } else if ($assertType(_ref, $Int64, true)[1]) { */ case 7:
			value$7 = _ref.$val;
			return new Value.ptr(2, value$7);
		/* } else if ($assertType(_ref, $Uint, true)[1]) { */ case 8:
			value$8 = _ref.$val;
			return new Value.ptr(2, new $Uint(value$8));
		/* } else if ($assertType(_ref, $Uint8, true)[1]) { */ case 9:
			value$9 = _ref.$val;
			return new Value.ptr(2, new $Uint8(value$9));
		/* } else if ($assertType(_ref, $Uint16, true)[1]) { */ case 10:
			value$10 = _ref.$val;
			return new Value.ptr(2, new $Uint16(value$10));
		/* } else if ($assertType(_ref, $Uint32, true)[1]) { */ case 11:
			value$11 = _ref.$val;
			return new Value.ptr(2, new $Uint32(value$11));
		/* } else if ($assertType(_ref, $Uint64, true)[1]) { */ case 12:
			value$12 = _ref.$val;
			return new Value.ptr(2, value$12);
		/* } else if ($assertType(_ref, $Float32, true)[1]) { */ case 13:
			value$13 = _ref.$val;
			return new Value.ptr(2, new $Float64(value$13));
		/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 14:
			value$14 = _ref.$val;
			return new Value.ptr(2, new $Float64(value$14));
		/* } else if ($assertType(_ref, sliceType$2, true)[1]) { */ case 15:
			value$15 = _ref.$val;
			return new Value.ptr(3, value$15);
		/* } else if ($assertType(_ref, $String, true)[1]) { */ case 16:
			value$16 = _ref.$val;
			return new Value.ptr(3, new $String(value$16));
		/* } else if ($assertType(_ref, ptrType$4, true)[1]) { */ case 17:
			value$17 = _ref.$val;
			return new Value.ptr(5, value$17);
		/* } else if ($assertType(_ref, ptrType$98, true)[1]) { */ case 18:
			value$18 = _ref.$val;
			return new Value.ptr(5, value$18.object);
		/* } else if ($assertType(_ref, Object, true)[1]) { */ case 19:
			value$19 = _ref.$val;
			return new Value.ptr(5, value$19.object);
		/* } else if ($assertType(_ref, _reference, true)[1]) { */ case 20:
			value$20 = _ref;
			return new Value.ptr(8, value$20);
		/* } else if ($assertType(_ref, _result, true)[1]) { */ case 21:
			value$21 = _ref.$val;
			return new Value.ptr(7, new value$21.constructor.elem(value$21));
		/* } else if (_ref === $ifaceNil) { */ case 22:
			value$22 = _ref;
			return new Value.ptr(0, $ifaceNil);
		/* } else if ($assertType(_ref, reflect.Value, true)[1]) { */ case 23:
			value$23 = _ref.$val;
			/* while (true) { */ case 26:
				/* if (!(value$23.Kind() === 22)) { break; } */ if(!(value$23.Kind() === 22)) { $s = 27; continue; }
				if (value$23.IsNil()) {
					return new Value.ptr(0, $ifaceNil);
				}
				_r$13 = value$23.Elem(); /* */ $s = 28; case 28: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				value$23 = _r$13;
			/* } */ $s = 26; continue; case 27:
			_ref$1 = value$23.Kind();
			/* */ if (_ref$1 === 1) { $s = 29; continue; }
			/* */ if (_ref$1 === 2) { $s = 30; continue; }
			/* */ if (_ref$1 === 3) { $s = 31; continue; }
			/* */ if (_ref$1 === 4) { $s = 32; continue; }
			/* */ if (_ref$1 === 5) { $s = 33; continue; }
			/* */ if (_ref$1 === 6) { $s = 34; continue; }
			/* */ if (_ref$1 === 7) { $s = 35; continue; }
			/* */ if (_ref$1 === 8) { $s = 36; continue; }
			/* */ if (_ref$1 === 9) { $s = 37; continue; }
			/* */ if (_ref$1 === 10) { $s = 38; continue; }
			/* */ if (_ref$1 === 11) { $s = 39; continue; }
			/* */ if (_ref$1 === 13) { $s = 40; continue; }
			/* */ if (_ref$1 === 14) { $s = 41; continue; }
			/* */ if (_ref$1 === 24) { $s = 42; continue; }
			/* */ $s = 43; continue;
			/* if (_ref$1 === 1) { */ case 29:
				return new Value.ptr(4, new $Bool(value$23.Bool()));
			/* } else if (_ref$1 === 2) { */ case 30:
				return new Value.ptr(2, new $Int(((x = value$23.Int(), x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
			/* } else if (_ref$1 === 3) { */ case 31:
				return new Value.ptr(2, new $Int8(((x$1 = value$23.Int(), x$1.$low + ((x$1.$high >> 31) * 4294967296)) << 24 >> 24)));
			/* } else if (_ref$1 === 4) { */ case 32:
				return new Value.ptr(2, new $Int16(((x$2 = value$23.Int(), x$2.$low + ((x$2.$high >> 31) * 4294967296)) << 16 >> 16)));
			/* } else if (_ref$1 === 5) { */ case 33:
				return new Value.ptr(2, new $Int32(((x$3 = value$23.Int(), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0)));
			/* } else if (_ref$1 === 6) { */ case 34:
				return new Value.ptr(2, value$23.Int());
			/* } else if (_ref$1 === 7) { */ case 35:
				return new Value.ptr(2, new $Uint((value$23.Uint().$low >>> 0)));
			/* } else if (_ref$1 === 8) { */ case 36:
				return new Value.ptr(2, new $Uint8((value$23.Uint().$low << 24 >>> 24)));
			/* } else if (_ref$1 === 9) { */ case 37:
				return new Value.ptr(2, new $Uint16((value$23.Uint().$low << 16 >>> 16)));
			/* } else if (_ref$1 === 10) { */ case 38:
				return new Value.ptr(2, new $Uint32((value$23.Uint().$low >>> 0)));
			/* } else if (_ref$1 === 11) { */ case 39:
				return new Value.ptr(2, value$23.Uint());
			/* } else if (_ref$1 === 13) { */ case 40:
				return new Value.ptr(2, new $Float32($fround(value$23.Float())));
			/* } else if (_ref$1 === 14) { */ case 41:
				return new Value.ptr(2, new $Float64(value$23.Float()));
			/* } else if (_ref$1 === 24) { */ case 42:
				_r$14 = value$23.String(); /* */ $s = 45; case 45: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				/* */ $s = 46; case 46:
				return new Value.ptr(3, new $String(_r$14));
			/* } else { */ case 43:
				_r$15 = value$23.Interface(); /* */ $s = 47; case 47: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				$r = toValue_reflectValuePanic(_r$15, value$23.Kind()); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 44:
			$s = 25; continue;
		/* } else { */ case 24:
			value$24 = _ref;
			_r$16 = reflect.ValueOf(value$24); /* */ $s = 49; case 49: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$17 = toValue((x$4 = _r$16, new x$4.constructor.elem(x$4))); /* */ $s = 50; case 50: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ $s = 51; case 51:
			return _r$17;
		/* } */ case 25:
		_r$18 = newError(ptrType$3.nil, "TypeError", new sliceType$1([new $String("invalid value: %v (%T)"), value, value])); /* */ $s = 52; case 52: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		$panic((x$5 = _r$18, new x$5.constructor.elem(x$5)));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: toValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._ref = _ref; $f._ref$1 = _ref$1; $f.value = value; $f.value$1 = value$1; $f.value$10 = value$10; $f.value$11 = value$11; $f.value$12 = value$12; $f.value$13 = value$13; $f.value$14 = value$14; $f.value$15 = value$15; $f.value$16 = value$16; $f.value$17 = value$17; $f.value$18 = value$18; $f.value$19 = value$19; $f.value$2 = value$2; $f.value$20 = value$20; $f.value$21 = value$21; $f.value$22 = value$22; $f.value$23 = value$23; $f.value$24 = value$24; $f.value$3 = value$3; $f.value$4 = value$4; $f.value$5 = value$5; $f.value$6 = value$6; $f.value$7 = value$7; $f.value$8 = value$8; $f.value$9 = value$9; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.ptr.prototype.String = function() {
		var $ptr, _r$13, result, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; result = $f.result; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		value = [value];
		value[0] = $clone(this, Value);
		result[0] = "";
		_r$13 = catchPanic((function(result, value) { return function $b() {
			var $ptr, _r$13, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$13 = value[0].string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			result[0] = _r$13;
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.$s = $s; $f.$r = $r; return $f;
		}; })(result, value)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$13;
		return result[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.result = result; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.ToBoolean = function() {
		var $ptr, _r$13, err, result, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; err = $f.err; result = $f.result; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		value = [value];
		value[0] = $clone(this, Value);
		result[0] = false;
		_r$13 = catchPanic((function(result, value) { return function $b() {
			var $ptr, _r$13, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$13 = value[0].bool(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			result[0] = _r$13;
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.$s = $s; $f.$r = $r; return $f;
		}; })(result, value)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		err = _r$13;
		return [result[0], err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.ToBoolean }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.err = err; $f.result = result; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.ToBoolean = function() { return this.$val.ToBoolean(); };
	Value.ptr.prototype.numberValue = function() {
		var $ptr, _r$13, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(this, Value);
		if (value.kind === 2) {
			return value;
		}
		_r$13 = value.float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return new Value.ptr(2, new $Float64(_r$13));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.numberValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.numberValue = function() { return this.$val.numberValue(); };
	Value.ptr.prototype.ToFloat = function() {
		var $ptr, _r$13, err, result, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; err = $f.err; result = $f.result; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		value = [value];
		value[0] = $clone(this, Value);
		result[0] = 0;
		_r$13 = catchPanic((function(result, value) { return function $b() {
			var $ptr, _r$13, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$13 = value[0].float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			result[0] = _r$13;
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.$s = $s; $f.$r = $r; return $f;
		}; })(result, value)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		err = _r$13;
		return [result[0], err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.ToFloat }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.err = err; $f.result = result; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.ToFloat = function() { return this.$val.ToFloat(); };
	Value.ptr.prototype.ToInteger = function() {
		var $ptr, _r$13, err, result, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; err = $f.err; result = $f.result; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		value = [value];
		value[0] = $clone(this, Value);
		result[0] = new $Int64(0, 0);
		_r$13 = catchPanic((function(result, value) { return function $b() {
			var $ptr, _r$13, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$13 = value[0].number(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			result[0] = _r$13.int64;
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.$s = $s; $f.$r = $r; return $f;
		}; })(result, value)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		err = _r$13;
		return [result[0], err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.ToInteger }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.err = err; $f.result = result; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.ToInteger = function() { return this.$val.ToInteger(); };
	Value.ptr.prototype.ToString = function() {
		var $ptr, _r$13, err, result, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; err = $f.err; result = $f.result; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		value = [value];
		value[0] = $clone(this, Value);
		result[0] = "";
		_r$13 = catchPanic((function(result, value) { return function $b() {
			var $ptr, _r$13, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$13 = value[0].string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			result[0] = _r$13;
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.$s = $s; $f.$r = $r; return $f;
		}; })(result, value)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		err = _r$13;
		return [result[0], err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.ToString }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.err = err; $f.result = result; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.ToString = function() { return this.$val.ToString(); };
	Value.ptr.prototype._object = function() {
		var $ptr, _ref, value, value$1;
		value = $clone(this, Value);
		_ref = value.value;
		if ($assertType(_ref, ptrType$4, true)[1]) {
			value$1 = _ref.$val;
			return value$1;
		}
		return ptrType$4.nil;
	};
	Value.prototype._object = function() { return this.$val._object(); };
	Value.ptr.prototype.Object = function() {
		var $ptr, _ref, object, value;
		value = $clone(this, Value);
		_ref = value.value;
		if ($assertType(_ref, ptrType$4, true)[1]) {
			object = _ref.$val;
			return _newObject(object, value);
		}
		return ptrType$98.nil;
	};
	Value.prototype.Object = function() { return this.$val.Object(); };
	Value.ptr.prototype.reference = function() {
		var $ptr, _ref, value, value$1;
		value = $clone(this, Value);
		_ref = value.value;
		if ($assertType(_ref, _reference, true)[1]) {
			value$1 = _ref;
			return value$1;
		}
		return $ifaceNil;
	};
	Value.prototype.reference = function() { return this.$val.reference(); };
	Value.ptr.prototype.resolve = function() {
		var $ptr, _r$13, _ref, value, value$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _ref = $f._ref; value = $f.value; value$1 = $f.value$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(this, Value);
		_ref = value.value;
		/* */ if ($assertType(_ref, _reference, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, _reference, true)[1]) { */ case 1:
			value$1 = _ref;
			_r$13 = value$1.getValue(); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r$13;
		/* } */ case 2:
		return value;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.resolve }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._ref = _ref; $f.value = value; $f.value$1 = value$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.resolve = function() { return this.$val.resolve(); };
	NaNValue = function() {
		var $ptr;
		return new Value.ptr(2, new $Float64(__NaN__));
	};
	$pkg.NaNValue = NaNValue;
	positiveInfinityValue = function() {
		var $ptr;
		return new Value.ptr(2, new $Float64(__PositiveInfinity__));
	};
	negativeInfinityValue = function() {
		var $ptr;
		return new Value.ptr(2, new $Float64(__NegativeInfinity__));
	};
	positiveZeroValue = function() {
		var $ptr;
		return new Value.ptr(2, new $Float64(__PositiveZero__));
	};
	negativeZeroValue = function() {
		var $ptr;
		return new Value.ptr(2, new $Float64(__NegativeZero__));
	};
	sameValue = function(x, y) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _ref, result, x, x$1, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _ref = $f._ref; result = $f.result; x = $f.x; x$1 = $f.x$1; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		y = $clone(y, Value);
		x = $clone(x, Value);
		if (!((x.kind === y.kind))) {
			return false;
		}
		result = false;
		_ref = x.kind;
		/* */ if (_ref === 0 || _ref === 1) { $s = 1; continue; }
		/* */ if (_ref === 2) { $s = 2; continue; }
		/* */ if (_ref === 3) { $s = 3; continue; }
		/* */ if (_ref === 4) { $s = 4; continue; }
		/* */ if (_ref === 5) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_ref === 0 || _ref === 1) { */ case 1:
			result = true;
			$s = 7; continue;
		/* } else if (_ref === 2) { */ case 2:
			_r$13 = x.float64(); /* */ $s = 8; case 8: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			x$1 = _r$13;
			_r$14 = y.float64(); /* */ $s = 9; case 9: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			y$1 = _r$14;
			if (math.IsNaN(x$1) && math.IsNaN(y$1)) {
				result = true;
			} else {
				result = x$1 === y$1;
				if (result && (x$1 === 0)) {
					result = math.Signbit(x$1) === math.Signbit(y$1);
				}
			}
			$s = 7; continue;
		/* } else if (_ref === 3) { */ case 3:
			_r$15 = x.string(); /* */ $s = 10; case 10: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = y.string(); /* */ $s = 11; case 11: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			result = _r$15 === _r$16;
			$s = 7; continue;
		/* } else if (_ref === 4) { */ case 4:
			_r$17 = x.bool(); /* */ $s = 12; case 12: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_r$18 = y.bool(); /* */ $s = 13; case 13: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			result = _r$17 === _r$18;
			$s = 7; continue;
		/* } else if (_ref === 5) { */ case 5:
			result = x._object() === y._object();
			$s = 7; continue;
		/* } else { */ case 6:
			_r$19 = hereBeDragons(new sliceType$1([])); /* */ $s = 14; case 14: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			$panic(new $String(_r$19));
		/* } */ case 7:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sameValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._ref = _ref; $f.result = result; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	strictEqualityComparison = function(x, y) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _ref, result, x, x$1, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _ref = $f._ref; result = $f.result; x = $f.x; x$1 = $f.x$1; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		y = $clone(y, Value);
		x = $clone(x, Value);
		if (!((x.kind === y.kind))) {
			return false;
		}
		result = false;
		_ref = x.kind;
		/* */ if (_ref === 0 || _ref === 1) { $s = 1; continue; }
		/* */ if (_ref === 2) { $s = 2; continue; }
		/* */ if (_ref === 3) { $s = 3; continue; }
		/* */ if (_ref === 4) { $s = 4; continue; }
		/* */ if (_ref === 5) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_ref === 0 || _ref === 1) { */ case 1:
			result = true;
			$s = 7; continue;
		/* } else if (_ref === 2) { */ case 2:
			_r$13 = x.float64(); /* */ $s = 8; case 8: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			x$1 = _r$13;
			_r$14 = y.float64(); /* */ $s = 9; case 9: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			y$1 = _r$14;
			if (math.IsNaN(x$1) && math.IsNaN(y$1)) {
				result = false;
			} else {
				result = x$1 === y$1;
			}
			$s = 7; continue;
		/* } else if (_ref === 3) { */ case 3:
			_r$15 = x.string(); /* */ $s = 10; case 10: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = y.string(); /* */ $s = 11; case 11: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			result = _r$15 === _r$16;
			$s = 7; continue;
		/* } else if (_ref === 4) { */ case 4:
			_r$17 = x.bool(); /* */ $s = 12; case 12: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_r$18 = y.bool(); /* */ $s = 13; case 13: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			result = _r$17 === _r$18;
			$s = 7; continue;
		/* } else if (_ref === 5) { */ case 5:
			result = x._object() === y._object();
			$s = 7; continue;
		/* } else { */ case 6:
			_r$19 = hereBeDragons(new sliceType$1([])); /* */ $s = 14; case 14: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			$panic(new $String(_r$19));
		/* } */ case 7:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: strictEqualityComparison }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._ref = _ref; $f.result = result; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.ptr.prototype.Export = function() {
		var $ptr, _r$13, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, Value);
		_r$13 = self.export$(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return [_r$13, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Export }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Export = function() { return this.$val.Export(); };
	Value.ptr.prototype.export$ = function() {
		var $ptr, _i, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _ref, _ref$1, _ref$2, _ref$3, _v, i, index, kind, length, lengthValue, name, object, result, result$1, self, state, t, v, val, value, value$1, value$2, value$3, value$4, value$5, value$6, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _v = $f._v; i = $f.i; index = $f.index; kind = $f.kind; length = $f.length; lengthValue = $f.lengthValue; name = $f.name; object = $f.object; result = $f.result; result$1 = $f.result$1; self = $f.self; state = $f.state; t = $f.t; v = $f.v; val = $f.val; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; value$3 = $f.value$3; value$4 = $f.value$4; value$5 = $f.value$5; value$6 = $f.value$6; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		object = [object];
		result = [result];
		self = $clone(this, Value);
		_ref = self.kind;
		/* */ if (_ref === 0) { $s = 1; continue; }
		/* */ if (_ref === 1) { $s = 2; continue; }
		/* */ if (_ref === 2 || _ref === 4) { $s = 3; continue; }
		/* */ if (_ref === 3) { $s = 4; continue; }
		/* */ if (_ref === 5) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_ref === 0) { */ case 1:
			return $ifaceNil;
		/* } else if (_ref === 1) { */ case 2:
			return $ifaceNil;
		/* } else if (_ref === 2 || _ref === 4) { */ case 3:
			return self.value;
		/* } else if (_ref === 3) { */ case 4:
			_ref$1 = self.value;
			if ($assertType(_ref$1, $String, true)[1]) {
				value = _ref$1.$val;
				return new $String(value);
			} else if ($assertType(_ref$1, sliceType$2, true)[1]) {
				value$1 = _ref$1.$val;
				return new $String($runesToString(utf16.Decode(value$1)));
			}
			$s = 6; continue;
		/* } else if (_ref === 5) { */ case 5:
			object[0] = self._object();
			_ref$2 = object[0].value;
			/* */ if ($assertType(_ref$2, ptrType$108, true)[1]) { $s = 7; continue; }
			/* */ if ($assertType(_ref$2, ptrType$106, true)[1]) { $s = 8; continue; }
			/* */ if ($assertType(_ref$2, ptrType$105, true)[1]) { $s = 9; continue; }
			/* */ if ($assertType(_ref$2, ptrType$107, true)[1]) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if ($assertType(_ref$2, ptrType$108, true)[1]) { */ case 7:
				value$2 = _ref$2.$val;
				_r$13 = value$2.value.Interface(); /* */ $s = 12; case 12: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				/* */ $s = 13; case 13:
				return _r$13;
			/* } else if ($assertType(_ref$2, ptrType$106, true)[1]) { */ case 8:
				value$3 = _ref$2.$val;
				_r$14 = value$3.value.Interface(); /* */ $s = 14; case 14: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				/* */ $s = 15; case 15:
				return _r$14;
			/* } else if ($assertType(_ref$2, ptrType$105, true)[1]) { */ case 9:
				value$4 = _ref$2.$val;
				_r$15 = value$4.value.Interface(); /* */ $s = 16; case 16: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				/* */ $s = 17; case 17:
				return _r$15;
			/* } else if ($assertType(_ref$2, ptrType$107, true)[1]) { */ case 10:
				value$5 = _ref$2.$val;
				_r$16 = value$5.value.Interface(); /* */ $s = 18; case 18: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				/* */ $s = 19; case 19:
				return _r$16;
			/* } */ case 11:
			/* */ if (object[0].class$1 === "Array") { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (object[0].class$1 === "Array") { */ case 20:
				result$1 = $makeSlice(sliceType$1, 0);
				_r$17 = object[0].get("length"); /* */ $s = 23; case 23: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				lengthValue = $clone(_r$17, Value);
				length = $assertType(lengthValue.value, $Uint32);
				kind = 0;
				state = 0;
				t = $ifaceNil;
				index = 0;
				/* while (true) { */ case 24:
					/* if (!(index < length)) { break; } */ if(!(index < length)) { $s = 25; continue; }
					name = strconv.FormatInt(new $Int64(0, index), 10);
					_r$18 = object[0].hasProperty(name); /* */ $s = 28; case 28: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					/* */ if (!_r$18) { $s = 26; continue; }
					/* */ $s = 27; continue;
					/* if (!_r$18) { */ case 26:
						index = index + (1) >>> 0;
						/* continue; */ $s = 24; continue;
					/* } */ case 27:
					_r$19 = object[0].get(name); /* */ $s = 29; case 29: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					_r$20 = _r$19.export$(); /* */ $s = 30; case 30: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
					value$6 = _r$20;
					t = reflect.TypeOf(value$6);
					/* */ if (state === 0) { $s = 31; continue; }
					if (!(state === 1)) { _v = false; $s = 34; continue s; }
					_r$21 = t.Kind(); /* */ $s = 35; case 35: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
					_v = !((kind === _r$21)); case 34:
					/* */ if (_v) { $s = 32; continue; }
					/* */ $s = 33; continue;
					/* if (state === 0) { */ case 31:
						_r$22 = t.Kind(); /* */ $s = 36; case 36: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
						kind = _r$22;
						state = 1;
						$s = 33; continue;
					/* } else if (_v) { */ case 32:
						state = 2;
					/* } */ case 33:
					result$1 = $append(result$1, value$6);
					index = index + (1) >>> 0;
				/* } */ $s = 24; continue; case 25:
				if (!((state === 1)) || (kind === 20)) {
					return result$1;
				}
				_r$23 = reflect.MakeSlice(reflect.SliceOf(t), result$1.$length, result$1.$length); /* */ $s = 37; case 37: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				val = _r$23;
				_ref$3 = result$1;
				_i = 0;
				/* while (true) { */ case 38:
					/* if (!(_i < _ref$3.$length)) { break; } */ if(!(_i < _ref$3.$length)) { $s = 39; continue; }
					i = _i;
					v = ((_i < 0 || _i >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i]);
					_r$24 = val.Index(i); /* */ $s = 40; case 40: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					_r$25 = reflect.ValueOf(v); /* */ $s = 41; case 41: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					$r = _r$24.Set(_r$25); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				/* } */ $s = 38; continue; case 39:
				_r$26 = val.Interface(); /* */ $s = 43; case 43: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				/* */ $s = 44; case 44:
				return _r$26;
			/* } else { */ case 21:
				result[0] = {};
				$r = object[0].enumerate(false, (function(object, result) { return function $b(name$1) {
					var $ptr, _key, _r$27, _r$28, name$1, value$7, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r$27 = $f._r$27; _r$28 = $f._r$28; name$1 = $f.name$1; value$7 = $f.value$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					_r$27 = object[0].get(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					value$7 = $clone(_r$27, Value);
					/* */ if (value$7.IsDefined()) { $s = 2; continue; }
					/* */ $s = 3; continue;
					/* if (value$7.IsDefined()) { */ case 2:
						_r$28 = value$7.export$(); /* */ $s = 4; case 4: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
						_key = name$1; (result[0] || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: _r$28 };
					/* } */ case 3:
					return true;
					/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._key = _key; $f._r$27 = _r$27; $f._r$28 = _r$28; $f.name$1 = name$1; $f.value$7 = value$7; $f.$s = $s; $f.$r = $r; return $f;
				}; })(object, result)); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return new mapType(result[0]);
			/* } */ case 22:
		/* } */ case 6:
		if (self.safe()) {
			return new self.constructor.elem(self);
		}
		return (x = new Value.ptr(0, $ifaceNil), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.export$ }; } $f.$ptr = $ptr; $f._i = _i; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._v = _v; $f.i = i; $f.index = index; $f.kind = kind; $f.length = length; $f.lengthValue = lengthValue; $f.name = name; $f.object = object; $f.result = result; $f.result$1 = result$1; $f.self = self; $f.state = state; $f.t = t; $f.v = v; $f.val = val; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.value$3 = value$3; $f.value$4 = value$4; $f.value$5 = value$5; $f.value$6 = value$6; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.export$ = function() { return this.$val.export$(); };
	Value.ptr.prototype.evaluateBreakContinue = function(labels) {
		var $ptr, _i, _ref, label, labels, result, self;
		self = $clone(this, Value);
		result = $clone($assertType(self.value, _result), _result);
		if ((result.kind === 2) || (result.kind === 3)) {
			_ref = labels;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				label = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (label === result.target) {
					return result.kind;
				}
				_i++;
			}
		}
		return 1;
	};
	Value.prototype.evaluateBreakContinue = function(labels) { return this.$val.evaluateBreakContinue(labels); };
	Value.ptr.prototype.evaluateBreak = function(labels) {
		var $ptr, _i, _ref, label, labels, result, self;
		self = $clone(this, Value);
		result = $clone($assertType(self.value, _result), _result);
		if (result.kind === 2) {
			_ref = labels;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				label = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (label === result.target) {
					return result.kind;
				}
				_i++;
			}
		}
		return 1;
	};
	Value.prototype.evaluateBreak = function(labels) { return this.$val.evaluateBreak(labels); };
	Value.ptr.prototype.exportNative = function() {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _ref, _ref$1, _ref$2, object, self, value, value$1, value$2, value$3, value$4, value$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; object = $f.object; self = $f.self; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; value$3 = $f.value$3; value$4 = $f.value$4; value$5 = $f.value$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, Value);
		_ref = self.kind;
		/* */ if (_ref === 0) { $s = 1; continue; }
		/* */ if (_ref === 1) { $s = 2; continue; }
		/* */ if (_ref === 2 || _ref === 4) { $s = 3; continue; }
		/* */ if (_ref === 3) { $s = 4; continue; }
		/* */ if (_ref === 5) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_ref === 0) { */ case 1:
			return new self.constructor.elem(self);
		/* } else if (_ref === 1) { */ case 2:
			return $ifaceNil;
		/* } else if (_ref === 2 || _ref === 4) { */ case 3:
			return self.value;
		/* } else if (_ref === 3) { */ case 4:
			_ref$1 = self.value;
			if ($assertType(_ref$1, $String, true)[1]) {
				value = _ref$1.$val;
				return new $String(value);
			} else if ($assertType(_ref$1, sliceType$2, true)[1]) {
				value$1 = _ref$1.$val;
				return new $String($runesToString(utf16.Decode(value$1)));
			}
			$s = 6; continue;
		/* } else if (_ref === 5) { */ case 5:
			object = self._object();
			_ref$2 = object.value;
			/* */ if ($assertType(_ref$2, ptrType$108, true)[1]) { $s = 7; continue; }
			/* */ if ($assertType(_ref$2, ptrType$106, true)[1]) { $s = 8; continue; }
			/* */ if ($assertType(_ref$2, ptrType$105, true)[1]) { $s = 9; continue; }
			/* */ if ($assertType(_ref$2, ptrType$107, true)[1]) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if ($assertType(_ref$2, ptrType$108, true)[1]) { */ case 7:
				value$2 = _ref$2.$val;
				_r$13 = value$2.value.Interface(); /* */ $s = 12; case 12: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				/* */ $s = 13; case 13:
				return _r$13;
			/* } else if ($assertType(_ref$2, ptrType$106, true)[1]) { */ case 8:
				value$3 = _ref$2.$val;
				_r$14 = value$3.value.Interface(); /* */ $s = 14; case 14: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				/* */ $s = 15; case 15:
				return _r$14;
			/* } else if ($assertType(_ref$2, ptrType$105, true)[1]) { */ case 9:
				value$4 = _ref$2.$val;
				_r$15 = value$4.value.Interface(); /* */ $s = 16; case 16: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				/* */ $s = 17; case 17:
				return _r$15;
			/* } else if ($assertType(_ref$2, ptrType$107, true)[1]) { */ case 10:
				value$5 = _ref$2.$val;
				_r$16 = value$5.value.Interface(); /* */ $s = 18; case 18: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				/* */ $s = 19; case 19:
				return _r$16;
			/* } */ case 11:
		/* } */ case 6:
		return new self.constructor.elem(self);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.exportNative }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.object = object; $f.self = self; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.value$3 = value$3; $f.value$4 = value$4; $f.value$5 = value$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.exportNative = function() { return this.$val.exportNative(); };
	Value.ptr.prototype.toReflectValue = function(kind) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$50, _r$51, _r$52, _r$53, _r$54, _r$55, _r$56, _r$57, _r$58, _r$59, _r$60, _r$61, _r$62, _r$63, _r$64, _r$65, _ref, _ref$1, _ref$2, _ref$3, _tuple$1, _tuple$2, frac, frac$1, kind, object, tmp, tmp$1, tmp$10, tmp$2, tmp$3, tmp$4, tmp$5, tmp$6, tmp$7, tmp$8, tmp$9, tmp1, value, value$1, value$2, value$3, vl, vl$1, vl$2, vl$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$45 = $f._r$45; _r$46 = $f._r$46; _r$47 = $f._r$47; _r$48 = $f._r$48; _r$49 = $f._r$49; _r$50 = $f._r$50; _r$51 = $f._r$51; _r$52 = $f._r$52; _r$53 = $f._r$53; _r$54 = $f._r$54; _r$55 = $f._r$55; _r$56 = $f._r$56; _r$57 = $f._r$57; _r$58 = $f._r$58; _r$59 = $f._r$59; _r$60 = $f._r$60; _r$61 = $f._r$61; _r$62 = $f._r$62; _r$63 = $f._r$63; _r$64 = $f._r$64; _r$65 = $f._r$65; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; frac = $f.frac; frac$1 = $f.frac$1; kind = $f.kind; object = $f.object; tmp = $f.tmp; tmp$1 = $f.tmp$1; tmp$10 = $f.tmp$10; tmp$2 = $f.tmp$2; tmp$3 = $f.tmp$3; tmp$4 = $f.tmp$4; tmp$5 = $f.tmp$5; tmp$6 = $f.tmp$6; tmp$7 = $f.tmp$7; tmp$8 = $f.tmp$8; tmp$9 = $f.tmp$9; tmp1 = $f.tmp1; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; value$3 = $f.value$3; vl = $f.vl; vl$1 = $f.vl$1; vl$2 = $f.vl$2; vl$3 = $f.vl$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(this, Value);
		/* */ if (!((kind === 13)) && !((kind === 14)) && !((kind === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((kind === 13)) && !((kind === 14)) && !((kind === 20))) { */ case 1:
			_ref = value.value;
			/* */ if ($assertType(_ref, $Float32, true)[1]) { $s = 3; continue; }
			/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ($assertType(_ref, $Float32, true)[1]) { */ case 3:
				value$1 = _ref.$val;
				_tuple$1 = math.Modf(value$1);
				frac = _tuple$1[1];
				/* */ if (frac > 0) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (frac > 0) { */ case 6:
					_r$13 = fmt.Errorf("RangeError: %v to reflect.Kind: %v", new sliceType$1([new $Float32(value$1), new reflect.Kind(kind)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					/* */ $s = 9; case 9:
					return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), _r$13];
				/* } */ case 7:
				$s = 5; continue;
			/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 4:
				value$2 = _ref.$val;
				_tuple$2 = math.Modf(value$2);
				frac$1 = _tuple$2[1];
				/* */ if (frac$1 > 0) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (frac$1 > 0) { */ case 10:
					_r$14 = fmt.Errorf("RangeError: %v to reflect.Kind: %v", new sliceType$1([new $Float64(value$2), new reflect.Kind(kind)])); /* */ $s = 12; case 12: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					/* */ $s = 13; case 13:
					return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), _r$14];
				/* } */ case 11:
			/* } */ case 5:
		/* } */ case 2:
		_ref$1 = kind;
		/* */ if (_ref$1 === 1) { $s = 14; continue; }
		/* */ if (_ref$1 === 2) { $s = 15; continue; }
		/* */ if (_ref$1 === 3) { $s = 16; continue; }
		/* */ if (_ref$1 === 4) { $s = 17; continue; }
		/* */ if (_ref$1 === 5) { $s = 18; continue; }
		/* */ if (_ref$1 === 6) { $s = 19; continue; }
		/* */ if (_ref$1 === 7) { $s = 20; continue; }
		/* */ if (_ref$1 === 8) { $s = 21; continue; }
		/* */ if (_ref$1 === 9) { $s = 22; continue; }
		/* */ if (_ref$1 === 10) { $s = 23; continue; }
		/* */ if (_ref$1 === 11) { $s = 24; continue; }
		/* */ if (_ref$1 === 13) { $s = 25; continue; }
		/* */ if (_ref$1 === 14) { $s = 26; continue; }
		/* */ if (_ref$1 === 24) { $s = 27; continue; }
		/* */ if (_ref$1 === 0) { $s = 28; continue; }
		/* */ if (_ref$1 === 15) { $s = 29; continue; }
		/* */ if (_ref$1 === 16) { $s = 30; continue; }
		/* */ if (_ref$1 === 18) { $s = 31; continue; }
		/* */ if (_ref$1 === 19) { $s = 32; continue; }
		/* */ if (_ref$1 === 22) { $s = 33; continue; }
		/* */ if (_ref$1 === 26) { $s = 34; continue; }
		/* */ $s = 35; continue;
		/* if (_ref$1 === 1) { */ case 14:
			_r$15 = value.bool(); /* */ $s = 37; case 37: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = reflect.ValueOf(new $Bool(_r$15)); /* */ $s = 38; case 38: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ $s = 39; case 39:
			return [_r$16, $ifaceNil];
		/* } else if (_ref$1 === 2) { */ case 15:
			_r$17 = toIntegerFloat(value); /* */ $s = 40; case 40: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			tmp = _r$17;
			/* */ if (tmp < -2.147483648e+09 || tmp > 2.147483647e+09) { $s = 41; continue; }
			/* */ $s = 42; continue;
			/* if (tmp < -2.147483648e+09 || tmp > 2.147483647e+09) { */ case 41:
				_r$18 = fmt.Errorf("RangeError: %f (%v) to int", new sliceType$1([new $Float64(tmp), new value.constructor.elem(value)])); /* */ $s = 44; case 44: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				/* */ $s = 45; case 45:
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), _r$18];
			/* } else { */ case 42:
				_r$19 = reflect.ValueOf(new $Int((tmp >> 0))); /* */ $s = 46; case 46: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				/* */ $s = 47; case 47:
				return [_r$19, $ifaceNil];
			/* } */ case 43:
			$s = 36; continue;
		/* } else if (_ref$1 === 3) { */ case 16:
			_r$20 = value.number(); /* */ $s = 48; case 48: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			tmp$1 = _r$20.int64;
			/* */ if ((tmp$1.$high < -1 || (tmp$1.$high === -1 && tmp$1.$low < 4294967168)) || (tmp$1.$high > 0 || (tmp$1.$high === 0 && tmp$1.$low > 127))) { $s = 49; continue; }
			/* */ $s = 50; continue;
			/* if ((tmp$1.$high < -1 || (tmp$1.$high === -1 && tmp$1.$low < 4294967168)) || (tmp$1.$high > 0 || (tmp$1.$high === 0 && tmp$1.$low > 127))) { */ case 49:
				_r$21 = fmt.Errorf("RangeError: %d (%v) to int8", new sliceType$1([tmp$1, new value.constructor.elem(value)])); /* */ $s = 52; case 52: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				/* */ $s = 53; case 53:
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), _r$21];
			/* } else { */ case 50:
				_r$22 = reflect.ValueOf(new $Int8(((tmp$1.$low + ((tmp$1.$high >> 31) * 4294967296)) << 24 >> 24))); /* */ $s = 54; case 54: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				/* */ $s = 55; case 55:
				return [_r$22, $ifaceNil];
			/* } */ case 51:
			$s = 36; continue;
		/* } else if (_ref$1 === 4) { */ case 17:
			_r$23 = value.number(); /* */ $s = 56; case 56: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			tmp$2 = _r$23.int64;
			/* */ if ((tmp$2.$high < -1 || (tmp$2.$high === -1 && tmp$2.$low < 4294934528)) || (tmp$2.$high > 0 || (tmp$2.$high === 0 && tmp$2.$low > 32767))) { $s = 57; continue; }
			/* */ $s = 58; continue;
			/* if ((tmp$2.$high < -1 || (tmp$2.$high === -1 && tmp$2.$low < 4294934528)) || (tmp$2.$high > 0 || (tmp$2.$high === 0 && tmp$2.$low > 32767))) { */ case 57:
				_r$24 = fmt.Errorf("RangeError: %d (%v) to int16", new sliceType$1([tmp$2, new value.constructor.elem(value)])); /* */ $s = 60; case 60: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				/* */ $s = 61; case 61:
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), _r$24];
			/* } else { */ case 58:
				_r$25 = reflect.ValueOf(new $Int16(((tmp$2.$low + ((tmp$2.$high >> 31) * 4294967296)) << 16 >> 16))); /* */ $s = 62; case 62: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				/* */ $s = 63; case 63:
				return [_r$25, $ifaceNil];
			/* } */ case 59:
			$s = 36; continue;
		/* } else if (_ref$1 === 5) { */ case 18:
			_r$26 = value.number(); /* */ $s = 64; case 64: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			tmp$3 = _r$26.int64;
			/* */ if ((tmp$3.$high < -1 || (tmp$3.$high === -1 && tmp$3.$low < 2147483648)) || (tmp$3.$high > 0 || (tmp$3.$high === 0 && tmp$3.$low > 2147483647))) { $s = 65; continue; }
			/* */ $s = 66; continue;
			/* if ((tmp$3.$high < -1 || (tmp$3.$high === -1 && tmp$3.$low < 2147483648)) || (tmp$3.$high > 0 || (tmp$3.$high === 0 && tmp$3.$low > 2147483647))) { */ case 65:
				_r$27 = fmt.Errorf("RangeError: %d (%v) to int32", new sliceType$1([tmp$3, new value.constructor.elem(value)])); /* */ $s = 68; case 68: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				/* */ $s = 69; case 69:
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), _r$27];
			/* } else { */ case 66:
				_r$28 = reflect.ValueOf(new $Int32(((tmp$3.$low + ((tmp$3.$high >> 31) * 4294967296)) >> 0))); /* */ $s = 70; case 70: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				/* */ $s = 71; case 71:
				return [_r$28, $ifaceNil];
			/* } */ case 67:
			$s = 36; continue;
		/* } else if (_ref$1 === 6) { */ case 19:
			_r$29 = toIntegerFloat(value); /* */ $s = 72; case 72: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
			tmp$4 = _r$29;
			/* */ if (tmp$4 < -9.223372036854776e+18 || tmp$4 > 9.223372036854776e+18) { $s = 73; continue; }
			/* */ $s = 74; continue;
			/* if (tmp$4 < -9.223372036854776e+18 || tmp$4 > 9.223372036854776e+18) { */ case 73:
				_r$30 = fmt.Errorf("RangeError: %f (%v) to int", new sliceType$1([new $Float64(tmp$4), new value.constructor.elem(value)])); /* */ $s = 76; case 76: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				/* */ $s = 77; case 77:
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), _r$30];
			/* } else { */ case 74:
				_r$31 = reflect.ValueOf(new $Int64(0, tmp$4)); /* */ $s = 78; case 78: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				/* */ $s = 79; case 79:
				return [_r$31, $ifaceNil];
			/* } */ case 75:
			$s = 36; continue;
		/* } else if (_ref$1 === 7) { */ case 20:
			_r$32 = toIntegerFloat(value); /* */ $s = 80; case 80: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			tmp$5 = _r$32;
			/* */ if (tmp$5 < 0 || tmp$5 > 4.294967295e+09) { $s = 81; continue; }
			/* */ $s = 82; continue;
			/* if (tmp$5 < 0 || tmp$5 > 4.294967295e+09) { */ case 81:
				_r$33 = fmt.Errorf("RangeError: %f (%v) to uint", new sliceType$1([new $Float64(tmp$5), new value.constructor.elem(value)])); /* */ $s = 84; case 84: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
				/* */ $s = 85; case 85:
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), _r$33];
			/* } else { */ case 82:
				_r$34 = reflect.ValueOf(new $Uint((tmp$5 >> 0))); /* */ $s = 86; case 86: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
				/* */ $s = 87; case 87:
				return [_r$34, $ifaceNil];
			/* } */ case 83:
			$s = 36; continue;
		/* } else if (_ref$1 === 8) { */ case 21:
			_r$35 = value.number(); /* */ $s = 88; case 88: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
			tmp$6 = _r$35.int64;
			/* */ if ((tmp$6.$high < 0 || (tmp$6.$high === 0 && tmp$6.$low < 0)) || (tmp$6.$high > 0 || (tmp$6.$high === 0 && tmp$6.$low > 255))) { $s = 89; continue; }
			/* */ $s = 90; continue;
			/* if ((tmp$6.$high < 0 || (tmp$6.$high === 0 && tmp$6.$low < 0)) || (tmp$6.$high > 0 || (tmp$6.$high === 0 && tmp$6.$low > 255))) { */ case 89:
				_r$36 = fmt.Errorf("RangeError: %d (%v) to uint8", new sliceType$1([tmp$6, new value.constructor.elem(value)])); /* */ $s = 92; case 92: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
				/* */ $s = 93; case 93:
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), _r$36];
			/* } else { */ case 90:
				_r$37 = reflect.ValueOf(new $Uint8((tmp$6.$low << 24 >>> 24))); /* */ $s = 94; case 94: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
				/* */ $s = 95; case 95:
				return [_r$37, $ifaceNil];
			/* } */ case 91:
			$s = 36; continue;
		/* } else if (_ref$1 === 9) { */ case 22:
			_r$38 = value.number(); /* */ $s = 96; case 96: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
			tmp$7 = _r$38.int64;
			/* */ if ((tmp$7.$high < 0 || (tmp$7.$high === 0 && tmp$7.$low < 0)) || (tmp$7.$high > 0 || (tmp$7.$high === 0 && tmp$7.$low > 65535))) { $s = 97; continue; }
			/* */ $s = 98; continue;
			/* if ((tmp$7.$high < 0 || (tmp$7.$high === 0 && tmp$7.$low < 0)) || (tmp$7.$high > 0 || (tmp$7.$high === 0 && tmp$7.$low > 65535))) { */ case 97:
				_r$39 = fmt.Errorf("RangeError: %d (%v) to uint16", new sliceType$1([tmp$7, new value.constructor.elem(value)])); /* */ $s = 100; case 100: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
				/* */ $s = 101; case 101:
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), _r$39];
			/* } else { */ case 98:
				_r$40 = reflect.ValueOf(new $Uint16((tmp$7.$low << 16 >>> 16))); /* */ $s = 102; case 102: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
				/* */ $s = 103; case 103:
				return [_r$40, $ifaceNil];
			/* } */ case 99:
			$s = 36; continue;
		/* } else if (_ref$1 === 10) { */ case 23:
			_r$41 = value.number(); /* */ $s = 104; case 104: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
			tmp$8 = _r$41.int64;
			/* */ if ((tmp$8.$high < 0 || (tmp$8.$high === 0 && tmp$8.$low < 0)) || (tmp$8.$high > 0 || (tmp$8.$high === 0 && tmp$8.$low > 4294967295))) { $s = 105; continue; }
			/* */ $s = 106; continue;
			/* if ((tmp$8.$high < 0 || (tmp$8.$high === 0 && tmp$8.$low < 0)) || (tmp$8.$high > 0 || (tmp$8.$high === 0 && tmp$8.$low > 4294967295))) { */ case 105:
				_r$42 = fmt.Errorf("RangeError: %d (%v) to uint32", new sliceType$1([tmp$8, new value.constructor.elem(value)])); /* */ $s = 108; case 108: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
				/* */ $s = 109; case 109:
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), _r$42];
			/* } else { */ case 106:
				_r$43 = reflect.ValueOf(new $Uint32((tmp$8.$low >>> 0))); /* */ $s = 110; case 110: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
				/* */ $s = 111; case 111:
				return [_r$43, $ifaceNil];
			/* } */ case 107:
			$s = 36; continue;
		/* } else if (_ref$1 === 11) { */ case 24:
			_r$44 = toIntegerFloat(value); /* */ $s = 112; case 112: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
			tmp$9 = _r$44;
			/* */ if (tmp$9 < 0 || tmp$9 > 1.8446744073709552e+19) { $s = 113; continue; }
			/* */ $s = 114; continue;
			/* if (tmp$9 < 0 || tmp$9 > 1.8446744073709552e+19) { */ case 113:
				_r$45 = fmt.Errorf("RangeError: %f (%v) to uint64", new sliceType$1([new $Float64(tmp$9), new value.constructor.elem(value)])); /* */ $s = 116; case 116: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
				/* */ $s = 117; case 117:
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), _r$45];
			/* } else { */ case 114:
				_r$46 = reflect.ValueOf(new $Uint64(0, tmp$9)); /* */ $s = 118; case 118: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
				/* */ $s = 119; case 119:
				return [_r$46, $ifaceNil];
			/* } */ case 115:
			$s = 36; continue;
		/* } else if (_ref$1 === 13) { */ case 25:
			_r$47 = value.float64(); /* */ $s = 120; case 120: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
			tmp$10 = _r$47;
			tmp1 = tmp$10;
			if (0 > tmp1) {
				tmp1 = -tmp1;
			}
			/* */ if (tmp1 > 0 && (tmp1 < 1.401298464324817e-45 || tmp1 > 3.4028234663852886e+38)) { $s = 121; continue; }
			/* */ $s = 122; continue;
			/* if (tmp1 > 0 && (tmp1 < 1.401298464324817e-45 || tmp1 > 3.4028234663852886e+38)) { */ case 121:
				_r$48 = fmt.Errorf("RangeError: %f (%v) to float32", new sliceType$1([new $Float64(tmp$10), new value.constructor.elem(value)])); /* */ $s = 124; case 124: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
				/* */ $s = 125; case 125:
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), _r$48];
			/* } else { */ case 122:
				_r$49 = reflect.ValueOf(new $Float32($fround(tmp$10))); /* */ $s = 126; case 126: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
				/* */ $s = 127; case 127:
				return [_r$49, $ifaceNil];
			/* } */ case 123:
			$s = 36; continue;
		/* } else if (_ref$1 === 14) { */ case 26:
			_r$50 = value.float64(); /* */ $s = 128; case 128: if($c) { $c = false; _r$50 = _r$50.$blk(); } if (_r$50 && _r$50.$blk !== undefined) { break s; }
			value$3 = _r$50;
			_r$51 = reflect.ValueOf(new $Float64(value$3)); /* */ $s = 129; case 129: if($c) { $c = false; _r$51 = _r$51.$blk(); } if (_r$51 && _r$51.$blk !== undefined) { break s; }
			/* */ $s = 130; case 130:
			return [_r$51, $ifaceNil];
		/* } else if (_ref$1 === 24) { */ case 27:
			_r$52 = value.string(); /* */ $s = 131; case 131: if($c) { $c = false; _r$52 = _r$52.$blk(); } if (_r$52 && _r$52.$blk !== undefined) { break s; }
			_r$53 = reflect.ValueOf(new $String(_r$52)); /* */ $s = 132; case 132: if($c) { $c = false; _r$53 = _r$53.$blk(); } if (_r$53 && _r$53.$blk !== undefined) { break s; }
			/* */ $s = 133; case 133:
			return [_r$53, $ifaceNil];
		/* } else if (_ref$1 === 0) { */ case 28:
			$s = 36; continue;
		/* } else if (_ref$1 === 15) { */ case 29:
			$s = 36; continue;
		/* } else if (_ref$1 === 16) { */ case 30:
			$s = 36; continue;
		/* } else if (_ref$1 === 18) { */ case 31:
			$s = 36; continue;
		/* } else if (_ref$1 === 19) { */ case 32:
			$s = 36; continue;
		/* } else if (_ref$1 === 22) { */ case 33:
			$s = 36; continue;
		/* } else if (_ref$1 === 26) { */ case 34:
			$s = 36; continue;
		/* } else { */ case 35:
			_ref$2 = value.kind;
			/* */ if (_ref$2 === 5) { $s = 134; continue; }
			/* */ if (_ref$2 === 6 || _ref$2 === 7 || _ref$2 === 8) { $s = 135; continue; }
			/* */ $s = 136; continue;
			/* if (_ref$2 === 5) { */ case 134:
				object = value._object();
				_ref$3 = object.value;
				/* */ if ($assertType(_ref$3, ptrType$108, true)[1]) { $s = 138; continue; }
				/* */ if ($assertType(_ref$3, ptrType$106, true)[1]) { $s = 139; continue; }
				/* */ if ($assertType(_ref$3, ptrType$105, true)[1]) { $s = 140; continue; }
				/* */ if ($assertType(_ref$3, ptrType$107, true)[1]) { $s = 141; continue; }
				/* */ $s = 142; continue;
				/* if ($assertType(_ref$3, ptrType$108, true)[1]) { */ case 138:
					vl = _ref$3.$val;
					_r$54 = vl.value.Interface(); /* */ $s = 143; case 143: if($c) { $c = false; _r$54 = _r$54.$blk(); } if (_r$54 && _r$54.$blk !== undefined) { break s; }
					_r$55 = reflect.ValueOf(_r$54); /* */ $s = 144; case 144: if($c) { $c = false; _r$55 = _r$55.$blk(); } if (_r$55 && _r$55.$blk !== undefined) { break s; }
					/* */ $s = 145; case 145:
					return [_r$55, $ifaceNil];
				/* } else if ($assertType(_ref$3, ptrType$106, true)[1]) { */ case 139:
					vl$1 = _ref$3.$val;
					_r$56 = vl$1.value.Interface(); /* */ $s = 146; case 146: if($c) { $c = false; _r$56 = _r$56.$blk(); } if (_r$56 && _r$56.$blk !== undefined) { break s; }
					_r$57 = reflect.ValueOf(_r$56); /* */ $s = 147; case 147: if($c) { $c = false; _r$57 = _r$57.$blk(); } if (_r$57 && _r$57.$blk !== undefined) { break s; }
					/* */ $s = 148; case 148:
					return [_r$57, $ifaceNil];
				/* } else if ($assertType(_ref$3, ptrType$105, true)[1]) { */ case 140:
					vl$2 = _ref$3.$val;
					_r$58 = vl$2.value.Interface(); /* */ $s = 149; case 149: if($c) { $c = false; _r$58 = _r$58.$blk(); } if (_r$58 && _r$58.$blk !== undefined) { break s; }
					_r$59 = reflect.ValueOf(_r$58); /* */ $s = 150; case 150: if($c) { $c = false; _r$59 = _r$59.$blk(); } if (_r$59 && _r$59.$blk !== undefined) { break s; }
					/* */ $s = 151; case 151:
					return [_r$59, $ifaceNil];
				/* } else if ($assertType(_ref$3, ptrType$107, true)[1]) { */ case 141:
					vl$3 = _ref$3.$val;
					_r$60 = vl$3.value.Interface(); /* */ $s = 152; case 152: if($c) { $c = false; _r$60 = _r$60.$blk(); } if (_r$60 && _r$60.$blk !== undefined) { break s; }
					_r$61 = reflect.ValueOf(_r$60); /* */ $s = 153; case 153: if($c) { $c = false; _r$61 = _r$61.$blk(); } if (_r$61 && _r$61.$blk !== undefined) { break s; }
					/* */ $s = 154; case 154:
					return [_r$61, $ifaceNil];
				/* } */ case 142:
				_r$62 = value.exportNative(); /* */ $s = 155; case 155: if($c) { $c = false; _r$62 = _r$62.$blk(); } if (_r$62 && _r$62.$blk !== undefined) { break s; }
				_r$63 = reflect.ValueOf(_r$62); /* */ $s = 156; case 156: if($c) { $c = false; _r$63 = _r$63.$blk(); } if (_r$63 && _r$63.$blk !== undefined) { break s; }
				/* */ $s = 157; case 157:
				return [_r$63, $ifaceNil];
			/* } else if (_ref$2 === 6 || _ref$2 === 7 || _ref$2 === 8) { */ case 135:
				$s = 137; continue;
			/* } else { */ case 136:
				_r$64 = reflect.ValueOf(value.value); /* */ $s = 158; case 158: if($c) { $c = false; _r$64 = _r$64.$blk(); } if (_r$64 && _r$64.$blk !== undefined) { break s; }
				/* */ $s = 159; case 159:
				return [_r$64, $ifaceNil];
			/* } */ case 137:
		/* } */ case 36:
		_r$65 = fmt.Errorf("invalid conversion of %v (%v) to reflect.Kind: %v", new sliceType$1([new _valueKind(value.kind), new value.constructor.elem(value), new reflect.Kind(kind)])); /* */ $s = 160; case 160: if($c) { $c = false; _r$65 = _r$65.$blk(); } if (_r$65 && _r$65.$blk !== undefined) { break s; }
		$panic(_r$65);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.toReflectValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$45 = _r$45; $f._r$46 = _r$46; $f._r$47 = _r$47; $f._r$48 = _r$48; $f._r$49 = _r$49; $f._r$50 = _r$50; $f._r$51 = _r$51; $f._r$52 = _r$52; $f._r$53 = _r$53; $f._r$54 = _r$54; $f._r$55 = _r$55; $f._r$56 = _r$56; $f._r$57 = _r$57; $f._r$58 = _r$58; $f._r$59 = _r$59; $f._r$60 = _r$60; $f._r$61 = _r$61; $f._r$62 = _r$62; $f._r$63 = _r$63; $f._r$64 = _r$64; $f._r$65 = _r$65; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.frac = frac; $f.frac$1 = frac$1; $f.kind = kind; $f.object = object; $f.tmp = tmp; $f.tmp$1 = tmp$1; $f.tmp$10 = tmp$10; $f.tmp$2 = tmp$2; $f.tmp$3 = tmp$3; $f.tmp$4 = tmp$4; $f.tmp$5 = tmp$5; $f.tmp$6 = tmp$6; $f.tmp$7 = tmp$7; $f.tmp$8 = tmp$8; $f.tmp$9 = tmp$9; $f.tmp1 = tmp1; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.value$3 = value$3; $f.vl = vl; $f.vl$1 = vl$1; $f.vl$2 = vl$2; $f.vl$3 = vl$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.toReflectValue = function(kind) { return this.$val.toReflectValue(kind); };
	stringToReflectValue = function(value, kind) {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _ref, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, err, err$1, err$10, err$11, err$12, err$2, err$3, err$4, err$5, err$6, err$7, err$8, err$9, kind, value, value$1, value$10, value$11, value$12, value$13, value$2, value$3, value$4, value$5, value$6, value$7, value$8, value$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _ref = $f._ref; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; err = $f.err; err$1 = $f.err$1; err$10 = $f.err$10; err$11 = $f.err$11; err$12 = $f.err$12; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; err$7 = $f.err$7; err$8 = $f.err$8; err$9 = $f.err$9; kind = $f.kind; value = $f.value; value$1 = $f.value$1; value$10 = $f.value$10; value$11 = $f.value$11; value$12 = $f.value$12; value$13 = $f.value$13; value$2 = $f.value$2; value$3 = $f.value$3; value$4 = $f.value$4; value$5 = $f.value$5; value$6 = $f.value$6; value$7 = $f.value$7; value$8 = $f.value$8; value$9 = $f.value$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = kind;
		/* */ if (_ref === 1) { $s = 1; continue; }
		/* */ if (_ref === 2) { $s = 2; continue; }
		/* */ if (_ref === 3) { $s = 3; continue; }
		/* */ if (_ref === 4) { $s = 4; continue; }
		/* */ if (_ref === 5) { $s = 5; continue; }
		/* */ if (_ref === 6) { $s = 6; continue; }
		/* */ if (_ref === 7) { $s = 7; continue; }
		/* */ if (_ref === 8) { $s = 8; continue; }
		/* */ if (_ref === 9) { $s = 9; continue; }
		/* */ if (_ref === 10) { $s = 10; continue; }
		/* */ if (_ref === 11) { $s = 11; continue; }
		/* */ if (_ref === 13) { $s = 12; continue; }
		/* */ if (_ref === 14) { $s = 13; continue; }
		/* */ if (_ref === 24) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (_ref === 1) { */ case 1:
			_tuple$1 = strconv.ParseBool(value);
			value$1 = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), err];
			}
			_r$13 = reflect.ValueOf(new $Bool(value$1)); /* */ $s = 16; case 16: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 17; case 17:
			return [_r$13, $ifaceNil];
		/* } else if (_ref === 2) { */ case 2:
			_tuple$2 = strconv.ParseInt(value, 0, 0);
			value$2 = _tuple$2[0];
			err$1 = _tuple$2[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), err$1];
			}
			_r$14 = reflect.ValueOf(new $Int(((value$2.$low + ((value$2.$high >> 31) * 4294967296)) >> 0))); /* */ $s = 18; case 18: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 19; case 19:
			return [_r$14, $ifaceNil];
		/* } else if (_ref === 3) { */ case 3:
			_tuple$3 = strconv.ParseInt(value, 0, 8);
			value$3 = _tuple$3[0];
			err$2 = _tuple$3[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), err$2];
			}
			_r$15 = reflect.ValueOf(new $Int8(((value$3.$low + ((value$3.$high >> 31) * 4294967296)) << 24 >> 24))); /* */ $s = 20; case 20: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 21; case 21:
			return [_r$15, $ifaceNil];
		/* } else if (_ref === 4) { */ case 4:
			_tuple$4 = strconv.ParseInt(value, 0, 16);
			value$4 = _tuple$4[0];
			err$3 = _tuple$4[1];
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), err$3];
			}
			_r$16 = reflect.ValueOf(new $Int16(((value$4.$low + ((value$4.$high >> 31) * 4294967296)) << 16 >> 16))); /* */ $s = 22; case 22: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ $s = 23; case 23:
			return [_r$16, $ifaceNil];
		/* } else if (_ref === 5) { */ case 5:
			_tuple$5 = strconv.ParseInt(value, 0, 32);
			value$5 = _tuple$5[0];
			err$4 = _tuple$5[1];
			if (!($interfaceIsEqual(err$4, $ifaceNil))) {
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), err$4];
			}
			_r$17 = reflect.ValueOf(new $Int32(((value$5.$low + ((value$5.$high >> 31) * 4294967296)) >> 0))); /* */ $s = 24; case 24: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ $s = 25; case 25:
			return [_r$17, $ifaceNil];
		/* } else if (_ref === 6) { */ case 6:
			_tuple$6 = strconv.ParseInt(value, 0, 64);
			value$6 = _tuple$6[0];
			err$5 = _tuple$6[1];
			if (!($interfaceIsEqual(err$5, $ifaceNil))) {
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), err$5];
			}
			_r$18 = reflect.ValueOf(value$6); /* */ $s = 26; case 26: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			/* */ $s = 27; case 27:
			return [_r$18, $ifaceNil];
		/* } else if (_ref === 7) { */ case 7:
			_tuple$7 = strconv.ParseUint(value, 0, 0);
			value$7 = _tuple$7[0];
			err$6 = _tuple$7[1];
			if (!($interfaceIsEqual(err$6, $ifaceNil))) {
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), err$6];
			}
			_r$19 = reflect.ValueOf(new $Uint((value$7.$low >>> 0))); /* */ $s = 28; case 28: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			/* */ $s = 29; case 29:
			return [_r$19, $ifaceNil];
		/* } else if (_ref === 8) { */ case 8:
			_tuple$8 = strconv.ParseUint(value, 0, 8);
			value$8 = _tuple$8[0];
			err$7 = _tuple$8[1];
			if (!($interfaceIsEqual(err$7, $ifaceNil))) {
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), err$7];
			}
			_r$20 = reflect.ValueOf(new $Uint8((value$8.$low << 24 >>> 24))); /* */ $s = 30; case 30: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			/* */ $s = 31; case 31:
			return [_r$20, $ifaceNil];
		/* } else if (_ref === 9) { */ case 9:
			_tuple$9 = strconv.ParseUint(value, 0, 16);
			value$9 = _tuple$9[0];
			err$8 = _tuple$9[1];
			if (!($interfaceIsEqual(err$8, $ifaceNil))) {
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), err$8];
			}
			_r$21 = reflect.ValueOf(new $Uint16((value$9.$low << 16 >>> 16))); /* */ $s = 32; case 32: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			/* */ $s = 33; case 33:
			return [_r$21, $ifaceNil];
		/* } else if (_ref === 10) { */ case 10:
			_tuple$10 = strconv.ParseUint(value, 0, 32);
			value$10 = _tuple$10[0];
			err$9 = _tuple$10[1];
			if (!($interfaceIsEqual(err$9, $ifaceNil))) {
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), err$9];
			}
			_r$22 = reflect.ValueOf(new $Uint32((value$10.$low >>> 0))); /* */ $s = 34; case 34: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			/* */ $s = 35; case 35:
			return [_r$22, $ifaceNil];
		/* } else if (_ref === 11) { */ case 11:
			_tuple$11 = strconv.ParseUint(value, 0, 64);
			value$11 = _tuple$11[0];
			err$10 = _tuple$11[1];
			if (!($interfaceIsEqual(err$10, $ifaceNil))) {
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), err$10];
			}
			_r$23 = reflect.ValueOf(value$11); /* */ $s = 36; case 36: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			/* */ $s = 37; case 37:
			return [_r$23, $ifaceNil];
		/* } else if (_ref === 13) { */ case 12:
			_tuple$12 = strconv.ParseFloat(value, 32);
			value$12 = _tuple$12[0];
			err$11 = _tuple$12[1];
			if (!($interfaceIsEqual(err$11, $ifaceNil))) {
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), err$11];
			}
			_r$24 = reflect.ValueOf(new $Float32($fround(value$12))); /* */ $s = 38; case 38: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			/* */ $s = 39; case 39:
			return [_r$24, $ifaceNil];
		/* } else if (_ref === 14) { */ case 13:
			_tuple$13 = strconv.ParseFloat(value, 64);
			value$13 = _tuple$13[0];
			err$12 = _tuple$13[1];
			if (!($interfaceIsEqual(err$12, $ifaceNil))) {
				return [new reflect.Value.ptr(ptrType$99.nil, 0, 0), err$12];
			}
			_r$25 = reflect.ValueOf(new $Float64(value$13)); /* */ $s = 40; case 40: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			/* */ $s = 41; case 41:
			return [_r$25, $ifaceNil];
		/* } else if (_ref === 24) { */ case 14:
			_r$26 = reflect.ValueOf(new $String(value)); /* */ $s = 42; case 42: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			/* */ $s = 43; case 43:
			return [_r$26, $ifaceNil];
		/* } */ case 15:
		_r$27 = fmt.Errorf("invalid conversion of %q to reflect.Kind: %v", new sliceType$1([new $String(value), new reflect.Kind(kind)])); /* */ $s = 44; case 44: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
		$panic(_r$27);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: stringToReflectValue }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._ref = _ref; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.err = err; $f.err$1 = err$1; $f.err$10 = err$10; $f.err$11 = err$11; $f.err$12 = err$12; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.err$7 = err$7; $f.err$8 = err$8; $f.err$9 = err$9; $f.kind = kind; $f.value = value; $f.value$1 = value$1; $f.value$10 = value$10; $f.value$11 = value$11; $f.value$12 = value$12; $f.value$13 = value$13; $f.value$2 = value$2; $f.value$3 = value$3; $f.value$4 = value$4; $f.value$5 = value$5; $f.value$6 = value$6; $f.value$7 = value$7; $f.value$8 = value$8; $f.value$9 = value$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.ptr.prototype.bool = function() {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _ref, value, value$1, value$2, value$3, value$4, value$5, value$6, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _ref = $f._ref; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; value$3 = $f.value$3; value$4 = $f.value$4; value$5 = $f.value$5; value$6 = $f.value$6; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(this, Value);
		if (value.kind === 4) {
			return $assertType(value.value, $Bool);
		}
		if (value.IsUndefined()) {
			return false;
		}
		if (value.IsNull()) {
			return false;
		}
		_ref = value.value;
		/* */ if ($assertType(_ref, $Bool, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, $Int, true)[1] || $assertType(_ref, $Int8, true)[1] || $assertType(_ref, $Int16, true)[1] || $assertType(_ref, $Int32, true)[1] || $assertType(_ref, $Int64, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, $Uint, true)[1] || $assertType(_ref, $Uint8, true)[1] || $assertType(_ref, $Uint16, true)[1] || $assertType(_ref, $Uint32, true)[1] || $assertType(_ref, $Uint64, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, $Float32, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, $String, true)[1]) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ($assertType(_ref, $Bool, true)[1]) { */ case 1:
			value$1 = _ref.$val;
			return value$1;
		/* } else if ($assertType(_ref, $Int, true)[1] || $assertType(_ref, $Int8, true)[1] || $assertType(_ref, $Int16, true)[1] || $assertType(_ref, $Int32, true)[1] || $assertType(_ref, $Int64, true)[1]) { */ case 2:
			value$2 = _ref;
			_r$13 = reflect.ValueOf(value$2); /* */ $s = 8; case 8: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = _r$13.Int(); /* */ $s = 9; case 9: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 10; case 10:
			return !((x = _r$14, (0 === x.$high && 0 === x.$low)));
		/* } else if ($assertType(_ref, $Uint, true)[1] || $assertType(_ref, $Uint8, true)[1] || $assertType(_ref, $Uint16, true)[1] || $assertType(_ref, $Uint32, true)[1] || $assertType(_ref, $Uint64, true)[1]) { */ case 3:
			value$3 = _ref;
			_r$15 = reflect.ValueOf(value$3); /* */ $s = 11; case 11: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = _r$15.Uint(); /* */ $s = 12; case 12: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ $s = 13; case 13:
			return !((x$1 = _r$16, (0 === x$1.$high && 0 === x$1.$low)));
		/* } else if ($assertType(_ref, $Float32, true)[1]) { */ case 4:
			value$4 = _ref.$val;
			return !((0 === value$4));
		/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 5:
			value$5 = _ref.$val;
			if (math.IsNaN(value$5) || (value$5 === 0)) {
				return false;
			}
			return true;
		/* } else if ($assertType(_ref, $String, true)[1]) { */ case 6:
			value$6 = _ref.$val;
			return !((0 === value$6.length));
		/* } */ case 7:
		if (value.IsObject()) {
			return true;
		}
		_r$17 = fmt.Errorf("toBoolean(%T)", new sliceType$1([value.value])); /* */ $s = 14; case 14: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		$panic(_r$17);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.bool }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._ref = _ref; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.value$3 = value$3; $f.value$4 = value$4; $f.value$5 = value$5; $f.value$6 = value$6; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.bool = function() { return this.$val.bool(); };
	parseNumber = function(value) {
		var $ptr, _r$13, _r$14, _tuple$1, _tuple$2, err, err$1, number, number$1, parseFloat, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; err$1 = $f.err$1; number = $f.number; number$1 = $f.number$1; parseFloat = $f.parseFloat; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$13 = strings.TrimSpace(value); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		value = _r$13;
		if (value === "") {
			return 0;
		}
		parseFloat = false;
		/* */ if (!((strings.IndexRune(value, 46) === -1))) { $s = 2; continue; }
		_r$14 = stringToNumberParseInteger.MatchString(value); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ if (_r$14) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!((strings.IndexRune(value, 46) === -1))) { */ case 2:
			parseFloat = true;
			$s = 5; continue;
		/* } else if (_r$14) { */ case 3:
			parseFloat = false;
			$s = 5; continue;
		/* } else { */ case 4:
			parseFloat = true;
		/* } */ case 5:
		if (parseFloat) {
			_tuple$1 = strconv.ParseFloat(value, 64);
			number = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ptrType$6).Err, strconv.ErrRange))) {
				return math.NaN();
			}
			return number;
		}
		_tuple$2 = strconv.ParseInt(value, 0, 64);
		number$1 = _tuple$2[0];
		err$1 = _tuple$2[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return math.NaN();
		}
		return $flatten64(number$1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseNumber }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.err$1 = err$1; $f.number = number; $f.number$1 = number$1; $f.parseFloat = parseFloat; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.ptr.prototype.float64 = function() {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _ref, _ref$1, value, value$1, value$10, value$11, value$12, value$13, value$14, value$2, value$3, value$4, value$5, value$6, value$7, value$8, value$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _ref = $f._ref; _ref$1 = $f._ref$1; value = $f.value; value$1 = $f.value$1; value$10 = $f.value$10; value$11 = $f.value$11; value$12 = $f.value$12; value$13 = $f.value$13; value$14 = $f.value$14; value$2 = $f.value$2; value$3 = $f.value$3; value$4 = $f.value$4; value$5 = $f.value$5; value$6 = $f.value$6; value$7 = $f.value$7; value$8 = $f.value$8; value$9 = $f.value$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(this, Value);
		_ref = value.kind;
		if (_ref === 0) {
			return math.NaN();
		} else if (_ref === 1) {
			return 0;
		}
		_ref$1 = value.value;
		/* */ if ($assertType(_ref$1, $Bool, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref$1, $Int, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref$1, $Int8, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref$1, $Int16, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref$1, $Int32, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref$1, $Int64, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref$1, $Uint, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref$1, $Uint8, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref$1, $Uint16, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref$1, $Uint32, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref$1, $Uint64, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref$1, $Float64, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref$1, $String, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref$1, ptrType$4, true)[1]) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if ($assertType(_ref$1, $Bool, true)[1]) { */ case 1:
			value$1 = _ref$1.$val;
			if (value$1) {
				return 1;
			}
			return 0;
		/* } else if ($assertType(_ref$1, $Int, true)[1]) { */ case 2:
			value$2 = _ref$1.$val;
			return value$2;
		/* } else if ($assertType(_ref$1, $Int8, true)[1]) { */ case 3:
			value$3 = _ref$1.$val;
			return value$3;
		/* } else if ($assertType(_ref$1, $Int16, true)[1]) { */ case 4:
			value$4 = _ref$1.$val;
			return value$4;
		/* } else if ($assertType(_ref$1, $Int32, true)[1]) { */ case 5:
			value$5 = _ref$1.$val;
			return value$5;
		/* } else if ($assertType(_ref$1, $Int64, true)[1]) { */ case 6:
			value$6 = _ref$1.$val;
			return $flatten64(value$6);
		/* } else if ($assertType(_ref$1, $Uint, true)[1]) { */ case 7:
			value$7 = _ref$1.$val;
			return value$7;
		/* } else if ($assertType(_ref$1, $Uint8, true)[1]) { */ case 8:
			value$8 = _ref$1.$val;
			return value$8;
		/* } else if ($assertType(_ref$1, $Uint16, true)[1]) { */ case 9:
			value$9 = _ref$1.$val;
			return value$9;
		/* } else if ($assertType(_ref$1, $Uint32, true)[1]) { */ case 10:
			value$10 = _ref$1.$val;
			return value$10;
		/* } else if ($assertType(_ref$1, $Uint64, true)[1]) { */ case 11:
			value$11 = _ref$1.$val;
			return $flatten64(value$11);
		/* } else if ($assertType(_ref$1, $Float64, true)[1]) { */ case 12:
			value$12 = _ref$1.$val;
			return value$12;
		/* } else if ($assertType(_ref$1, $String, true)[1]) { */ case 13:
			value$13 = _ref$1.$val;
			_r$13 = parseNumber(value$13); /* */ $s = 16; case 16: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 17; case 17:
			return _r$13;
		/* } else if ($assertType(_ref$1, ptrType$4, true)[1]) { */ case 14:
			value$14 = _ref$1.$val;
			_r$14 = value$14.DefaultValue(2); /* */ $s = 18; case 18: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = _r$14.float64(); /* */ $s = 19; case 19: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 20; case 20:
			return _r$15;
		/* } */ case 15:
		_r$16 = fmt.Errorf("toFloat(%T)", new sliceType$1([value.value])); /* */ $s = 21; case 21: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		$panic(_r$16);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.float64 }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._ref = _ref; $f._ref$1 = _ref$1; $f.value = value; $f.value$1 = value$1; $f.value$10 = value$10; $f.value$11 = value$11; $f.value$12 = value$12; $f.value$13 = value$13; $f.value$14 = value$14; $f.value$2 = value$2; $f.value$3 = value$3; $f.value$4 = value$4; $f.value$5 = value$5; $f.value$6 = value$6; $f.value$7 = value$7; $f.value$8 = value$8; $f.value$9 = value$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.float64 = function() { return this.$val.float64(); };
	toIntegerFloat = function(value) {
		var $ptr, _r$13, float$1, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; float$1 = $f.float$1; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		_r$13 = value.float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		float$1 = _r$13;
		if (math.IsInf(float$1, 0)) {
		} else if (math.IsNaN(float$1)) {
			float$1 = 0;
		} else if (float$1 > 0) {
			float$1 = math.Floor(float$1);
		} else {
			float$1 = math.Ceil(float$1);
		}
		return float$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: toIntegerFloat }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.float$1 = float$1; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.ptr.prototype.number = function() {
		var $ptr, _r$13, _ref, float$1, integer, number, vl, vl$1, vl$2, vl$3, vl$4, vl$5, vl$6, vl$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _ref = $f._ref; float$1 = $f.float$1; integer = $f.integer; number = $f.number; vl = $f.vl; vl$1 = $f.vl$1; vl$2 = $f.vl$2; vl$3 = $f.vl$3; vl$4 = $f.vl$4; vl$5 = $f.vl$5; vl$6 = $f.vl$6; vl$7 = $f.vl$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		number = new _number.ptr(0, new $Int64(0, 0), 0);
		vl = $clone(this, Value);
		_ref = vl.value;
		if ($assertType(_ref, $Int8, true)[1]) {
			vl$1 = _ref.$val;
			number.int64 = new $Int64(0, vl$1);
			return number;
		} else if ($assertType(_ref, $Int16, true)[1]) {
			vl$2 = _ref.$val;
			number.int64 = new $Int64(0, vl$2);
			return number;
		} else if ($assertType(_ref, $Uint8, true)[1]) {
			vl$3 = _ref.$val;
			number.int64 = new $Int64(0, vl$3);
			return number;
		} else if ($assertType(_ref, $Uint16, true)[1]) {
			vl$4 = _ref.$val;
			number.int64 = new $Int64(0, vl$4);
			return number;
		} else if ($assertType(_ref, $Uint32, true)[1]) {
			vl$5 = _ref.$val;
			number.int64 = new $Int64(0, vl$5);
			return number;
		} else if ($assertType(_ref, $Int, true)[1]) {
			vl$6 = _ref.$val;
			number.int64 = new $Int64(0, vl$6);
			return number;
		} else if ($assertType(_ref, $Int64, true)[1]) {
			vl$7 = _ref.$val;
			number.int64 = vl$7;
			return number;
		}
		_r$13 = vl.float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		float$1 = _r$13;
		if (float$1 === 0) {
			return number;
		}
		number.kind = 1;
		number.float64 = float$1;
		if (math.IsNaN(float$1)) {
			number.kind = 3;
			return number;
		}
		if (math.IsInf(float$1, 0)) {
			number.kind = 2;
		}
		if (float$1 >= 9.223372036854776e+18) {
			number.int64 = new $Int64(2147483647, 4294967295);
			return number;
		}
		if (float$1 <= -9.223372036854776e+18) {
			number.int64 = new $Int64(-2147483648, 0);
			return number;
		}
		integer = 0;
		if (float$1 > 0) {
			integer = math.Floor(float$1);
		} else {
			integer = math.Ceil(float$1);
		}
		if (float$1 === integer) {
			number.kind = 0;
		}
		number.int64 = new $Int64(0, float$1);
		return number;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.number }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._ref = _ref; $f.float$1 = float$1; $f.integer = integer; $f.number = number; $f.vl = vl; $f.vl$1 = vl$1; $f.vl$2 = vl$2; $f.vl$3 = vl$3; $f.vl$4 = vl$4; $f.vl$5 = vl$5; $f.vl$6 = vl$6; $f.vl$7 = vl$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.number = function() { return this.$val.number(); };
	toInt32 = function(value) {
		var $ptr, _r$13, _ref, floatValue, remainder, value, value$1, value$2, value$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _ref = $f._ref; floatValue = $f.floatValue; remainder = $f.remainder; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; value$3 = $f.value$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		_ref = value.value;
		if ($assertType(_ref, $Int8, true)[1]) {
			value$1 = _ref.$val;
			return (value$1 >> 0);
		} else if ($assertType(_ref, $Int16, true)[1]) {
			value$2 = _ref.$val;
			return (value$2 >> 0);
		} else if ($assertType(_ref, $Int32, true)[1]) {
			value$3 = _ref.$val;
			return value$3;
		}
		_r$13 = value.float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		floatValue = _r$13;
		if (math.IsNaN(floatValue) || math.IsInf(floatValue, 0)) {
			return 0;
		}
		if (floatValue === 0) {
			return 0;
		}
		remainder = math.Mod(floatValue, 4.294967296e+09);
		if (remainder > 0) {
			remainder = math.Floor(remainder);
		} else {
			remainder = math.Ceil(remainder) + 4.294967296e+09;
		}
		if (remainder > 2.147483648e+09) {
			return (remainder - 4.294967296e+09 >> 0);
		}
		return (remainder >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: toInt32 }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._ref = _ref; $f.floatValue = floatValue; $f.remainder = remainder; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.value$3 = value$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	toUint32 = function(value) {
		var $ptr, _r$13, _ref, floatValue, remainder, value, value$1, value$2, value$3, value$4, value$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _ref = $f._ref; floatValue = $f.floatValue; remainder = $f.remainder; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; value$3 = $f.value$3; value$4 = $f.value$4; value$5 = $f.value$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		_ref = value.value;
		if ($assertType(_ref, $Int8, true)[1]) {
			value$1 = _ref.$val;
			return (value$1 >>> 0);
		} else if ($assertType(_ref, $Int16, true)[1]) {
			value$2 = _ref.$val;
			return (value$2 >>> 0);
		} else if ($assertType(_ref, $Uint8, true)[1]) {
			value$3 = _ref.$val;
			return (value$3 >>> 0);
		} else if ($assertType(_ref, $Uint16, true)[1]) {
			value$4 = _ref.$val;
			return (value$4 >>> 0);
		} else if ($assertType(_ref, $Uint32, true)[1]) {
			value$5 = _ref.$val;
			return value$5;
		}
		_r$13 = value.float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		floatValue = _r$13;
		if (math.IsNaN(floatValue) || math.IsInf(floatValue, 0)) {
			return 0;
		}
		if (floatValue === 0) {
			return 0;
		}
		remainder = math.Mod(floatValue, 4.294967296e+09);
		if (remainder > 0) {
			remainder = math.Floor(remainder);
		} else {
			remainder = math.Ceil(remainder) + 4.294967296e+09;
		}
		return (remainder >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: toUint32 }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._ref = _ref; $f.floatValue = floatValue; $f.remainder = remainder; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.value$3 = value$3; $f.value$4 = value$4; $f.value$5 = value$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	toUint16 = function(value) {
		var $ptr, _r$13, _ref, floatValue, remainder, value, value$1, value$2, value$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _ref = $f._ref; floatValue = $f.floatValue; remainder = $f.remainder; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; value$3 = $f.value$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		_ref = value.value;
		if ($assertType(_ref, $Int8, true)[1]) {
			value$1 = _ref.$val;
			return (value$1 << 16 >>> 16);
		} else if ($assertType(_ref, $Uint8, true)[1]) {
			value$2 = _ref.$val;
			return (value$2 << 16 >>> 16);
		} else if ($assertType(_ref, $Uint16, true)[1]) {
			value$3 = _ref.$val;
			return value$3;
		}
		_r$13 = value.float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		floatValue = _r$13;
		if (math.IsNaN(floatValue) || math.IsInf(floatValue, 0)) {
			return 0;
		}
		if (floatValue === 0) {
			return 0;
		}
		remainder = math.Mod(floatValue, 65536);
		if (remainder > 0) {
			remainder = math.Floor(remainder);
		} else {
			remainder = math.Ceil(remainder) + 65536;
		}
		return (remainder >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: toUint16 }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._ref = _ref; $f.floatValue = floatValue; $f.remainder = remainder; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.value$3 = value$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	toNumberPrimitive = function(value) {
		var $ptr, _r$13, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		_r$13 = _toPrimitive(value, 2); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: toNumberPrimitive }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	toPrimitive = function(value) {
		var $ptr, _r$13, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		_r$13 = _toPrimitive(value, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: toPrimitive }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	_toPrimitive = function(value, hint) {
		var $ptr, _r$13, _r$14, _ref, hint, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _ref = $f._ref; hint = $f.hint; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		_ref = value.kind;
		/* */ if (_ref === 1 || _ref === 0 || _ref === 2 || _ref === 3 || _ref === 4) { $s = 1; continue; }
		/* */ if (_ref === 5) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_ref === 1 || _ref === 0 || _ref === 2 || _ref === 3 || _ref === 4) { */ case 1:
			return value;
		/* } else if (_ref === 5) { */ case 2:
			_r$13 = value._object().DefaultValue(hint); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$13;
		/* } */ case 3:
		_r$14 = hereBeDragons(new sliceType$1([new _valueKind(value.kind), new value.constructor.elem(value)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		$panic(new $String(_r$14));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: _toPrimitive }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._ref = _ref; $f.hint = hint; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	floatToString = function(value, bitsize) {
		var $ptr, _r$13, bitsize, exponent, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; bitsize = $f.bitsize; exponent = $f.exponent; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (math.IsNaN(value)) {
			return "NaN";
		} else if (math.IsInf(value, 0)) {
			if (math.Signbit(value)) {
				return "-Infinity";
			}
			return "Infinity";
		}
		exponent = math.Log10(math.Abs(value));
		/* */ if (exponent >= 21 || exponent < -6) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (exponent >= 21 || exponent < -6) { */ case 1:
			_r$13 = matchLeading0Exponent.ReplaceAllString(strconv.FormatFloat(value, 103, -1, bitsize), "$1$2"); /* */ $s = 3; case 3: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r$13;
		/* } */ case 2:
		return strconv.FormatFloat(value, 102, -1, bitsize);
		/* */ } return; } if ($f === undefined) { $f = { $blk: floatToString }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.bitsize = bitsize; $f.exponent = exponent; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	numberToStringRadix = function(value, radix) {
		var $ptr, _r$13, float$1, radix, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; float$1 = $f.float$1; radix = $f.radix; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(value, Value);
		_r$13 = value.float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		float$1 = _r$13;
		if (math.IsNaN(float$1)) {
			return "NaN";
		} else if (math.IsInf(float$1, 1)) {
			return "Infinity";
		} else if (math.IsInf(float$1, -1)) {
			return "-Infinity";
		}
		return strconv.FormatInt(new $Int64(0, float$1), radix);
		/* */ } return; } if ($f === undefined) { $f = { $blk: numberToStringRadix }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f.float$1 = float$1; $f.radix = radix; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.ptr.prototype.string = function() {
		var $ptr, _r$13, _r$14, _r$15, _r$16, _r$17, _ref, _ref$1, value, value$1, value$10, value$11, value$12, value$13, value$14, value$15, value$16, value$17, value$18, value$2, value$3, value$4, value$5, value$6, value$7, value$8, value$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _ref = $f._ref; _ref$1 = $f._ref$1; value = $f.value; value$1 = $f.value$1; value$10 = $f.value$10; value$11 = $f.value$11; value$12 = $f.value$12; value$13 = $f.value$13; value$14 = $f.value$14; value$15 = $f.value$15; value$16 = $f.value$16; value$17 = $f.value$17; value$18 = $f.value$18; value$2 = $f.value$2; value$3 = $f.value$3; value$4 = $f.value$4; value$5 = $f.value$5; value$6 = $f.value$6; value$7 = $f.value$7; value$8 = $f.value$8; value$9 = $f.value$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $clone(this, Value);
		if (value.kind === 3) {
			_ref = value.value;
			if ($assertType(_ref, $String, true)[1]) {
				value$1 = _ref.$val;
				return value$1;
			} else if ($assertType(_ref, sliceType$2, true)[1]) {
				value$2 = _ref.$val;
				return $runesToString(utf16.Decode(value$2));
			}
		}
		if (value.IsUndefined()) {
			return "undefined";
		}
		if (value.IsNull()) {
			return "null";
		}
		_ref$1 = value.value;
		/* */ if ($assertType(_ref$1, $Bool, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref$1, $Int, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref$1, $Int8, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref$1, $Int16, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref$1, $Int32, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref$1, $Int64, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref$1, $Uint, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref$1, $Uint8, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref$1, $Uint16, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref$1, $Uint32, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref$1, $Uint64, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref$1, $Float32, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref$1, $Float64, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref$1, sliceType$2, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref$1, $String, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref$1, ptrType$4, true)[1]) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if ($assertType(_ref$1, $Bool, true)[1]) { */ case 1:
			value$3 = _ref$1.$val;
			return strconv.FormatBool(value$3);
		/* } else if ($assertType(_ref$1, $Int, true)[1]) { */ case 2:
			value$4 = _ref$1.$val;
			return strconv.FormatInt(new $Int64(0, value$4), 10);
		/* } else if ($assertType(_ref$1, $Int8, true)[1]) { */ case 3:
			value$5 = _ref$1.$val;
			return strconv.FormatInt(new $Int64(0, value$5), 10);
		/* } else if ($assertType(_ref$1, $Int16, true)[1]) { */ case 4:
			value$6 = _ref$1.$val;
			return strconv.FormatInt(new $Int64(0, value$6), 10);
		/* } else if ($assertType(_ref$1, $Int32, true)[1]) { */ case 5:
			value$7 = _ref$1.$val;
			return strconv.FormatInt(new $Int64(0, value$7), 10);
		/* } else if ($assertType(_ref$1, $Int64, true)[1]) { */ case 6:
			value$8 = _ref$1.$val;
			return strconv.FormatInt(value$8, 10);
		/* } else if ($assertType(_ref$1, $Uint, true)[1]) { */ case 7:
			value$9 = _ref$1.$val;
			return strconv.FormatUint(new $Uint64(0, value$9), 10);
		/* } else if ($assertType(_ref$1, $Uint8, true)[1]) { */ case 8:
			value$10 = _ref$1.$val;
			return strconv.FormatUint(new $Uint64(0, value$10), 10);
		/* } else if ($assertType(_ref$1, $Uint16, true)[1]) { */ case 9:
			value$11 = _ref$1.$val;
			return strconv.FormatUint(new $Uint64(0, value$11), 10);
		/* } else if ($assertType(_ref$1, $Uint32, true)[1]) { */ case 10:
			value$12 = _ref$1.$val;
			return strconv.FormatUint(new $Uint64(0, value$12), 10);
		/* } else if ($assertType(_ref$1, $Uint64, true)[1]) { */ case 11:
			value$13 = _ref$1.$val;
			return strconv.FormatUint(value$13, 10);
		/* } else if ($assertType(_ref$1, $Float32, true)[1]) { */ case 12:
			value$14 = _ref$1.$val;
			if (value$14 === 0) {
				return "0";
			}
			_r$13 = floatToString(value$14, 32); /* */ $s = 18; case 18: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 19; case 19:
			return _r$13;
		/* } else if ($assertType(_ref$1, $Float64, true)[1]) { */ case 13:
			value$15 = _ref$1.$val;
			if (value$15 === 0) {
				return "0";
			}
			_r$14 = floatToString(value$15, 64); /* */ $s = 20; case 20: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			/* */ $s = 21; case 21:
			return _r$14;
		/* } else if ($assertType(_ref$1, sliceType$2, true)[1]) { */ case 14:
			value$16 = _ref$1.$val;
			return $runesToString(utf16.Decode(value$16));
		/* } else if ($assertType(_ref$1, $String, true)[1]) { */ case 15:
			value$17 = _ref$1.$val;
			return value$17;
		/* } else if ($assertType(_ref$1, ptrType$4, true)[1]) { */ case 16:
			value$18 = _ref$1.$val;
			_r$15 = value$18.DefaultValue(1); /* */ $s = 22; case 22: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = _r$15.string(); /* */ $s = 23; case 23: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ $s = 24; case 24:
			return _r$16;
		/* } */ case 17:
		_r$17 = fmt.Errorf("%v.string( %T)", new sliceType$1([value.value, value.value])); /* */ $s = 25; case 25: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		$panic(_r$17);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.string }; } $f.$ptr = $ptr; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._ref = _ref; $f._ref$1 = _ref$1; $f.value = value; $f.value$1 = value$1; $f.value$10 = value$10; $f.value$11 = value$11; $f.value$12 = value$12; $f.value$13 = value$13; $f.value$14 = value$14; $f.value$15 = value$15; $f.value$16 = value$16; $f.value$17 = value$17; $f.value$18 = value$18; $f.value$2 = value$2; $f.value$3 = value$3; $f.value$4 = value$4; $f.value$5 = value$5; $f.value$6 = value$6; $f.value$7 = value$7; $f.value$8 = value$8; $f.value$9 = value$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.string = function() { return this.$val.string(); };
	ptrType$109.methods = [{prop: "object", name: "object", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$4], [ptrType$4], false)}, {prop: "dclStash", name: "dclStash", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$17], [ptrType$17, $Bool], false)}, {prop: "objectStash", name: "objectStash", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$15], [ptrType$15, $Bool], false)}, {prop: "fnStash", name: "fnStash", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$18], [ptrType$18, $Bool], false)}, {prop: "value", name: "value", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [Value], false)}, {prop: "valueArray", name: "valueArray", pkg: "github.com/robertkrimen/otto", typ: $funcType([sliceType$5], [sliceType$5], false)}, {prop: "stash", name: "stash", pkg: "github.com/robertkrimen/otto", typ: $funcType([_stash], [_stash], false)}, {prop: "property", name: "property", pkg: "github.com/robertkrimen/otto", typ: $funcType([_property], [_property], false)}, {prop: "dclProperty", name: "dclProperty", pkg: "github.com/robertkrimen/otto", typ: $funcType([_dclProperty], [_dclProperty], false)}];
	ptrType$110.methods = [{prop: "parse", name: "parse", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [ptrType$101], false)}, {prop: "parseExpression", name: "parseExpression", pkg: "github.com/robertkrimen/otto", typ: $funcType([ast.Expression], [_nodeExpression], false)}, {prop: "parseStatement", name: "parseStatement", pkg: "github.com/robertkrimen/otto", typ: $funcType([ast.Statement], [_nodeStatement], false)}, {prop: "_parse", name: "_parse", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$9], [ptrType$101], false)}];
	ptrType$19.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$20.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$21.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$22.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$23.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$24.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$25.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$10.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$26.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$27.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$28.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$29.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$30.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$31.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$32.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$33.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$34.methods = [{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$37.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$38.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$95.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$54.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$39.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$40.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$41.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$42.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$43.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$44.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$45.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$46.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$47.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$48.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$49.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$50.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$51.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$52.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$53.methods = [{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$97.methods = [{prop: "eject", name: "eject", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$emptyInterface], false)}];
	_error.methods = [{prop: "describe", name: "describe", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, sliceType$1], [$String], true)}, {prop: "messageValue", name: "messageValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [Value], false)}];
	_frame.methods = [{prop: "location", name: "location", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$String], false)}];
	Error.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "primitiveValue", name: "primitiveValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [Value], false)}, {prop: "hasPrimitive", name: "hasPrimitive", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "getOwnProperty", name: "getOwnProperty", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [ptrType$14], false)}, {prop: "getProperty", name: "getProperty", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [ptrType$14], false)}, {prop: "get", name: "get", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [Value], false)}, {prop: "canPut", name: "canPut", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [$Bool], false)}, {prop: "put", name: "put", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, Value, $Bool], [], false)}, {prop: "hasProperty", name: "hasProperty", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [$Bool], false)}, {prop: "hasOwnProperty", name: "hasOwnProperty", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [$Bool], false)}, {prop: "DefaultValue", name: "DefaultValue", pkg: "", typ: $funcType([_defaultValueHint], [Value], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "defineProperty", name: "defineProperty", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, Value, _propertyMode, $Bool], [$Bool], false)}, {prop: "defineOwnProperty", name: "defineOwnProperty", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, _property, $Bool], [$Bool], false)}, {prop: "delete$", name: "delete", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "enumerate", name: "enumerate", pkg: "github.com/robertkrimen/otto", typ: $funcType([$Bool, funcType$1], [], false)}, {prop: "_exists", name: "_exists", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [$Bool], false)}, {prop: "_read", name: "_read", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [_property, $Bool], false)}, {prop: "_write", name: "_write", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, $emptyInterface, _propertyMode], [], false)}, {prop: "_delete", name: "_delete", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [], false)}, {prop: "dateValue", name: "dateValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [_dateObject], false)}, {prop: "isCall", name: "isCall", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "call", name: "call", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value, sliceType$5, $Bool, _frame], [Value], false)}, {prop: "construct", name: "construct", pkg: "github.com/robertkrimen/otto", typ: $funcType([sliceType$5], [Value], false)}, {prop: "hasInstance", name: "hasInstance", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [$Bool], false)}, {prop: "regExpValue", name: "regExpValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [_regExpObject], false)}, {prop: "stringValue", name: "stringValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [_stringObject], false)}];
	Otto.methods = [{prop: "Run", name: "Run", pkg: "", typ: $funcType([$emptyInterface], [Value, $error], false)}, {prop: "Eval", name: "Eval", pkg: "", typ: $funcType([$emptyInterface], [Value, $error], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [Value, $error], false)}, {prop: "getValue", name: "getValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [Value], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [$error], false)}, {prop: "setValue", name: "setValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, Value], [], false)}, {prop: "SetDebuggerHandler", name: "SetDebuggerHandler", pkg: "", typ: $funcType([funcType$11], [], false)}, {prop: "Context", name: "Context", pkg: "", typ: $funcType([], [Context], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, $emptyInterface, sliceType$1], [Value, $error], true)}, {prop: "Object", name: "Object", pkg: "", typ: $funcType([$String], [ptrType$98, $error], false)}, {prop: "ToValue", name: "ToValue", pkg: "", typ: $funcType([$emptyInterface], [Value, $error], false)}];
	ptrType$11.methods = [{prop: "clone", name: "clone", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [ptrType$11], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [ptrType$11], false)}, {prop: "Compile", name: "Compile", pkg: "", typ: $funcType([$String, $emptyInterface], [ptrType$102, $error], false)}];
	Object.methods = [{prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType$1], [Value, $error], true)}, {prop: "Value", name: "Value", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [Value, $error], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [$error], false)}, {prop: "Keys", name: "Keys", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "Class", name: "Class", pkg: "", typ: $funcType([], [$String], false)}];
	_property.methods = [{prop: "writable", name: "writable", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "writeSet", name: "writeSet", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "enumerable", name: "enumerable", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "enumerateSet", name: "enumerateSet", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "configurable", name: "configurable", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "configureSet", name: "configureSet", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "copy", name: "copy", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [ptrType$14], false)}, {prop: "get", name: "get", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$4], [Value], false)}, {prop: "isAccessorDescriptor", name: "isAccessorDescriptor", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "isDataDescriptor", name: "isDataDescriptor", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "isGenericDescriptor", name: "isGenericDescriptor", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "isEmpty", name: "isEmpty", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}];
	ptrType$14.methods = [{prop: "writeOn", name: "writeOn", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}, {prop: "writeOff", name: "writeOff", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}, {prop: "writeClear", name: "writeClear", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}, {prop: "enumerateOn", name: "enumerateOn", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}, {prop: "enumerateOff", name: "enumerateOff", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}, {prop: "configureOn", name: "configureOn", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}, {prop: "configureOff", name: "configureOff", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}];
	ptrType$3.methods = [{prop: "newEvalError", name: "newEvalError", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [ptrType$4], false)}, {prop: "newTypeError", name: "newTypeError", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [ptrType$4], false)}, {prop: "newRangeError", name: "newRangeError", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [ptrType$4], false)}, {prop: "newURIError", name: "newURIError", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [ptrType$4], false)}, {prop: "newReferenceError", name: "newReferenceError", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [ptrType$4], false)}, {prop: "newSyntaxError", name: "newSyntaxError", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [ptrType$4], false)}, {prop: "clone", name: "clone", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [ptrType$3], false)}, {prop: "cmpl_evaluate_nodeProgram", name: "cmpl_evaluate_nodeProgram", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$101, $Bool], [Value], false)}, {prop: "cmpl_call_nodeFunction", name: "cmpl_call_nodeFunction", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$4, ptrType$18, ptrType$10, Value, sliceType$5], [Value], false)}, {prop: "cmpl_functionDeclaration", name: "cmpl_functionDeclaration", pkg: "github.com/robertkrimen/otto", typ: $funcType([sliceType$10], [], false)}, {prop: "cmpl_variableDeclaration", name: "cmpl_variableDeclaration", pkg: "github.com/robertkrimen/otto", typ: $funcType([sliceType], [], false)}, {prop: "cmpl_evaluate_nodeExpression", name: "cmpl_evaluate_nodeExpression", pkg: "github.com/robertkrimen/otto", typ: $funcType([_nodeExpression], [Value], false)}, {prop: "cmpl_evaluate_nodeArrayLiteral", name: "cmpl_evaluate_nodeArrayLiteral", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$19], [Value], false)}, {prop: "cmpl_evaluate_nodeAssignExpression", name: "cmpl_evaluate_nodeAssignExpression", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$20], [Value], false)}, {prop: "cmpl_evaluate_nodeBinaryExpression", name: "cmpl_evaluate_nodeBinaryExpression", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$21], [Value], false)}, {prop: "cmpl_evaluate_nodeBinaryExpression_comparison", name: "cmpl_evaluate_nodeBinaryExpression_comparison", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$21], [Value], false)}, {prop: "cmpl_evaluate_nodeBracketExpression", name: "cmpl_evaluate_nodeBracketExpression", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$22], [Value], false)}, {prop: "cmpl_evaluate_nodeCallExpression", name: "cmpl_evaluate_nodeCallExpression", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$23, sliceType$1], [Value], false)}, {prop: "cmpl_evaluate_nodeConditionalExpression", name: "cmpl_evaluate_nodeConditionalExpression", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$24], [Value], false)}, {prop: "cmpl_evaluate_nodeDotExpression", name: "cmpl_evaluate_nodeDotExpression", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$25], [Value], false)}, {prop: "cmpl_evaluate_nodeNewExpression", name: "cmpl_evaluate_nodeNewExpression", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$28], [Value], false)}, {prop: "cmpl_evaluate_nodeObjectLiteral", name: "cmpl_evaluate_nodeObjectLiteral", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$29], [Value], false)}, {prop: "cmpl_evaluate_nodeSequenceExpression", name: "cmpl_evaluate_nodeSequenceExpression", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$31], [Value], false)}, {prop: "cmpl_evaluate_nodeUnaryExpression", name: "cmpl_evaluate_nodeUnaryExpression", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$33], [Value], false)}, {prop: "cmpl_evaluate_nodeVariableExpression", name: "cmpl_evaluate_nodeVariableExpression", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$34], [Value], false)}, {prop: "cmpl_evaluate_nodeStatement", name: "cmpl_evaluate_nodeStatement", pkg: "github.com/robertkrimen/otto", typ: $funcType([_nodeStatement], [Value], false)}, {prop: "cmpl_evaluate_nodeStatementList", name: "cmpl_evaluate_nodeStatementList", pkg: "github.com/robertkrimen/otto", typ: $funcType([sliceType$12], [Value], false)}, {prop: "cmpl_evaluate_nodeDoWhileStatement", name: "cmpl_evaluate_nodeDoWhileStatement", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$40], [Value], false)}, {prop: "cmpl_evaluate_nodeForInStatement", name: "cmpl_evaluate_nodeForInStatement", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$43], [Value], false)}, {prop: "cmpl_evaluate_nodeForStatement", name: "cmpl_evaluate_nodeForStatement", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$44], [Value], false)}, {prop: "cmpl_evaluate_nodeIfStatement", name: "cmpl_evaluate_nodeIfStatement", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$45], [Value], false)}, {prop: "cmpl_evaluate_nodeSwitchStatement", name: "cmpl_evaluate_nodeSwitchStatement", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$48], [Value], false)}, {prop: "cmpl_evaluate_nodeTryStatement", name: "cmpl_evaluate_nodeTryStatement", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$50], [Value], false)}, {prop: "cmpl_evaluate_nodeWhileStatement", name: "cmpl_evaluate_nodeWhileStatement", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$52], [Value], false)}, {prop: "cmpl_evaluate_nodeWithStatement", name: "cmpl_evaluate_nodeWithStatement", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$53], [Value], false)}, {prop: "newConsole", name: "newConsole", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [ptrType$4], false)}, {prop: "typeErrorResult", name: "typeErrorResult", pkg: "github.com/robertkrimen/otto", typ: $funcType([$Bool], [$Bool], false)}, {prop: "panicTypeError", name: "panicTypeError", pkg: "github.com/robertkrimen/otto", typ: $funcType([sliceType$1], [ptrType$97], true)}, {prop: "panicReferenceError", name: "panicReferenceError", pkg: "github.com/robertkrimen/otto", typ: $funcType([sliceType$1], [ptrType$97], true)}, {prop: "panicURIError", name: "panicURIError", pkg: "github.com/robertkrimen/otto", typ: $funcType([sliceType$1], [ptrType$97], true)}, {prop: "panicSyntaxError", name: "panicSyntaxError", pkg: "github.com/robertkrimen/otto", typ: $funcType([sliceType$1], [ptrType$97], true)}, {prop: "panicRangeError", name: "panicRangeError", pkg: "github.com/robertkrimen/otto", typ: $funcType([sliceType$1], [ptrType$97], true)}, {prop: "evaluateMultiply", name: "evaluateMultiply", pkg: "github.com/robertkrimen/otto", typ: $funcType([$Float64, $Float64], [Value], false)}, {prop: "evaluateDivide", name: "evaluateDivide", pkg: "github.com/robertkrimen/otto", typ: $funcType([$Float64, $Float64], [Value], false)}, {prop: "evaluateModulo", name: "evaluateModulo", pkg: "github.com/robertkrimen/otto", typ: $funcType([$Float64, $Float64], [Value], false)}, {prop: "calculateBinaryExpression", name: "calculateBinaryExpression", pkg: "github.com/robertkrimen/otto", typ: $funcType([token.Token, Value, Value], [Value], false)}, {prop: "calculateComparison", name: "calculateComparison", pkg: "github.com/robertkrimen/otto", typ: $funcType([token.Token, Value, Value], [$Bool], false)}, {prop: "newBaseObject", name: "newBaseObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [ptrType$4], false)}, {prop: "newClassObject", name: "newClassObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [ptrType$4], false)}, {prop: "newPrimitiveObject", name: "newPrimitiveObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, Value], [ptrType$4], false)}, {prop: "newObject", name: "newObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [ptrType$4], false)}, {prop: "newArray", name: "newArray", pkg: "github.com/robertkrimen/otto", typ: $funcType([$Uint32], [ptrType$4], false)}, {prop: "newArrayOf", name: "newArrayOf", pkg: "github.com/robertkrimen/otto", typ: $funcType([sliceType$5], [ptrType$4], false)}, {prop: "newString", name: "newString", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [ptrType$4], false)}, {prop: "newBoolean", name: "newBoolean", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [ptrType$4], false)}, {prop: "newNumber", name: "newNumber", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [ptrType$4], false)}, {prop: "newRegExp", name: "newRegExp", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value, Value], [ptrType$4], false)}, {prop: "_newRegExp", name: "_newRegExp", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, $String], [ptrType$4], false)}, {prop: "newDate", name: "newDate", pkg: "github.com/robertkrimen/otto", typ: $funcType([$Float64], [ptrType$4], false)}, {prop: "newError", name: "newError", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, Value], [ptrType$4], false)}, {prop: "newNativeFunction", name: "newNativeFunction", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, _nativeFunction], [ptrType$4], false)}, {prop: "newNodeFunction", name: "newNodeFunction", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$10, _stash], [ptrType$4], false)}, {prop: "newBoundFunction", name: "newBoundFunction", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$4, Value, sliceType$5], [ptrType$4], false)}, {prop: "toValueArray", name: "toValueArray", pkg: "github.com/robertkrimen/otto", typ: $funcType([sliceType$1], [sliceType$5], true)}, {prop: "fromPropertyDescriptor", name: "fromPropertyDescriptor", pkg: "github.com/robertkrimen/otto", typ: $funcType([_property], [ptrType$4], false)}, {prop: "enterScope", name: "enterScope", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$16], [], false)}, {prop: "leaveScope", name: "leaveScope", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}, {prop: "enterGlobalScope", name: "enterGlobalScope", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}, {prop: "enterFunctionScope", name: "enterFunctionScope", pkg: "github.com/robertkrimen/otto", typ: $funcType([_stash, Value], [ptrType$18], false)}, {prop: "putValue", name: "putValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([_reference, Value], [], false)}, {prop: "tryCatchEvaluate", name: "tryCatchEvaluate", pkg: "github.com/robertkrimen/otto", typ: $funcType([funcType$13], [Value, $Bool], false)}, {prop: "toObject", name: "toObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [ptrType$4], false)}, {prop: "objectCoerce", name: "objectCoerce", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [ptrType$4, $error], false)}, {prop: "safeToValue", name: "safeToValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([$emptyInterface], [Value, $error], false)}, {prop: "toValue", name: "toValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([$emptyInterface], [Value], false)}, {prop: "newGoSlice", name: "newGoSlice", pkg: "github.com/robertkrimen/otto", typ: $funcType([reflect.Value], [ptrType$4], false)}, {prop: "newGoArray", name: "newGoArray", pkg: "github.com/robertkrimen/otto", typ: $funcType([reflect.Value], [ptrType$4], false)}, {prop: "parse", name: "parse", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, $emptyInterface], [ptrType$9, $error], false)}, {prop: "cmpl_parse", name: "cmpl_parse", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, $emptyInterface], [ptrType$101, $error], false)}, {prop: "parseSource", name: "parseSource", pkg: "github.com/robertkrimen/otto", typ: $funcType([$emptyInterface], [ptrType$101, ptrType$9, $error], false)}, {prop: "cmpl_runOrEval", name: "cmpl_runOrEval", pkg: "github.com/robertkrimen/otto", typ: $funcType([$emptyInterface, $Bool], [Value, $error], false)}, {prop: "cmpl_run", name: "cmpl_run", pkg: "github.com/robertkrimen/otto", typ: $funcType([$emptyInterface], [Value, $error], false)}, {prop: "cmpl_eval", name: "cmpl_eval", pkg: "github.com/robertkrimen/otto", typ: $funcType([$emptyInterface], [Value, $error], false)}, {prop: "parseThrow", name: "parseThrow", pkg: "github.com/robertkrimen/otto", typ: $funcType([$error], [], false)}, {prop: "parseOrThrow", name: "parseOrThrow", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [ptrType$9], false)}, {prop: "cmpl_parseOrThrow", name: "cmpl_parseOrThrow", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [ptrType$101], false)}, {prop: "newObjectStash", name: "newObjectStash", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$4, _stash], [ptrType$15], false)}, {prop: "newDeclarationStash", name: "newDeclarationStash", pkg: "github.com/robertkrimen/otto", typ: $funcType([_stash], [ptrType$17], false)}, {prop: "newFunctionStash", name: "newFunctionStash", pkg: "github.com/robertkrimen/otto", typ: $funcType([_stash], [ptrType$18], false)}, {prop: "newArgumentsObject", name: "newArgumentsObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([sliceType, _stash, $Int], [ptrType$4], false)}, {prop: "newArrayObject", name: "newArrayObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([$Uint32], [ptrType$4], false)}, {prop: "newBooleanObject", name: "newBooleanObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [ptrType$4], false)}, {prop: "newDateObject", name: "newDateObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([$Float64], [ptrType$4], false)}, {prop: "newErrorObject", name: "newErrorObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, Value], [ptrType$4], false)}, {prop: "newNativeFunctionObject", name: "newNativeFunctionObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, _nativeFunction, $Int], [ptrType$4], false)}, {prop: "newBoundFunctionObject", name: "newBoundFunctionObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$4, Value, sliceType$5], [ptrType$4], false)}, {prop: "newNodeFunctionObject", name: "newNodeFunctionObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$10, _stash], [ptrType$4], false)}, {prop: "newGoArrayObject", name: "newGoArrayObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([reflect.Value], [ptrType$4], false)}, {prop: "newGoMapObject", name: "newGoMapObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([reflect.Value], [ptrType$4], false)}, {prop: "newGoSliceObject", name: "newGoSliceObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([reflect.Value], [ptrType$4], false)}, {prop: "newGoStructObject", name: "newGoStructObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([reflect.Value], [ptrType$4], false)}, {prop: "newNumberObject", name: "newNumberObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [ptrType$4], false)}, {prop: "newRegExpObject", name: "newRegExpObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, $String], [ptrType$4], false)}, {prop: "newStringObject", name: "newStringObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [ptrType$4], false)}];
	ptrType$102.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "marshalBinary", name: "marshalBinary", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [sliceType$4, $error], false)}, {prop: "unmarshalBinary", name: "unmarshalBinary", pkg: "github.com/robertkrimen/otto", typ: $funcType([sliceType$4], [$error], false)}];
	ptrType$15.methods = [{prop: "runtime", name: "runtime", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [ptrType$3], false)}, {prop: "clone", name: "clone", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$109], [_stash], false)}, {prop: "hasBinding", name: "hasBinding", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [$Bool], false)}, {prop: "createBinding", name: "createBinding", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, $Bool, Value], [], false)}, {prop: "setBinding", name: "setBinding", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, Value, $Bool], [], false)}, {prop: "setValue", name: "setValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, Value, $Bool], [], false)}, {prop: "getBinding", name: "getBinding", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, $Bool], [Value], false)}, {prop: "deleteBinding", name: "deleteBinding", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [$Bool], false)}, {prop: "outer", name: "outer", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [_stash], false)}, {prop: "newReference", name: "newReference", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, $Bool, _at], [_reference], false)}];
	ptrType$17.methods = [{prop: "clone", name: "clone", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$109], [_stash], false)}, {prop: "hasBinding", name: "hasBinding", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [$Bool], false)}, {prop: "runtime", name: "runtime", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [ptrType$3], false)}, {prop: "createBinding", name: "createBinding", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, $Bool, Value], [], false)}, {prop: "setBinding", name: "setBinding", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, Value, $Bool], [], false)}, {prop: "setValue", name: "setValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, Value, $Bool], [], false)}, {prop: "getBinding", name: "getBinding", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, $Bool], [Value], false)}, {prop: "deleteBinding", name: "deleteBinding", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [$Bool], false)}, {prop: "outer", name: "outer", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [_stash], false)}, {prop: "newReference", name: "newReference", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, $Bool, _at], [_reference], false)}];
	ptrType$18.methods = [{prop: "clone", name: "clone", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$109], [_stash], false)}];
	_argumentsObject.methods = [{prop: "clone", name: "clone", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$109], [_argumentsObject], false)}, {prop: "get", name: "get", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [Value, $Bool], false)}, {prop: "put", name: "put", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, Value], [], false)}, {prop: "delete$", name: "delete", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [], false)}];
	ptrType$7.methods = [{prop: "Time", name: "Time", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Epoch", name: "Epoch", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Value", name: "Value", pkg: "", typ: $funcType([], [Value], false)}, {prop: "SetNaN", name: "SetNaN", pkg: "", typ: $funcType([], [], false)}, {prop: "SetTime", name: "SetTime", pkg: "", typ: $funcType([time.Time], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64], [], false)}];
	ptrType$8.methods = [{prop: "goTime", name: "goTime", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [time.Time], false)}];
	_bindFunctionObject.methods = [{prop: "construct", name: "construct", pkg: "github.com/robertkrimen/otto", typ: $funcType([sliceType$5], [Value], false)}];
	FunctionCall.methods = [{prop: "Argument", name: "Argument", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "getArgument", name: "getArgument", pkg: "github.com/robertkrimen/otto", typ: $funcType([$Int], [Value, $Bool], false)}, {prop: "slice", name: "slice", pkg: "github.com/robertkrimen/otto", typ: $funcType([$Int], [sliceType$5], false)}, {prop: "toObject", name: "toObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [ptrType$4], false)}, {prop: "CallerLocation", name: "CallerLocation", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$111.methods = [{prop: "thisObject", name: "thisObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [ptrType$4], false)}, {prop: "thisClassObject", name: "thisClassObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [ptrType$4], false)}];
	_goArrayObject.methods = [{prop: "getValue", name: "getValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([$Int64], [reflect.Value, $Bool], false)}, {prop: "setValue", name: "setValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([$Int64, Value], [$Bool], false)}];
	_goMapObject.methods = [{prop: "toKey", name: "toKey", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [reflect.Value], false)}, {prop: "toValue", name: "toValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [reflect.Value], false)}];
	_goSliceObject.methods = [{prop: "getValue", name: "getValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([$Int64], [reflect.Value, $Bool], false)}, {prop: "setValue", name: "setValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([$Int64, Value], [$Bool], false)}];
	_goStructObject.methods = [{prop: "getValue", name: "getValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [reflect.Value], false)}, {prop: "field", name: "field", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [reflect.StructField, $Bool], false)}, {prop: "method", name: "method", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [reflect.Method, $Bool], false)}, {prop: "setValue", name: "setValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, Value], [$Bool], false)}];
	ptrType$35.methods = [{prop: "invalid", name: "invalid", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "getValue", name: "getValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [Value], false)}, {prop: "putValue", name: "putValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [$String], false)}, {prop: "delete$", name: "delete", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}];
	ptrType$36.methods = [{prop: "invalid", name: "invalid", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "getValue", name: "getValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [Value], false)}, {prop: "putValue", name: "putValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [$String], false)}, {prop: "delete$", name: "delete", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}];
	_stringASCII.methods = [{prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [$Int32], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	_stringWide.methods = [{prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [$Int32], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Value.methods = [{prop: "safe", name: "safe", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "isEmpty", name: "isEmpty", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "IsDefined", name: "IsDefined", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsUndefined", name: "IsUndefined", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsNull", name: "IsNull", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "isCallable", name: "isCallable", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([Value, sliceType$1], [Value, $error], true)}, {prop: "call", name: "call", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$3, Value, sliceType$1], [Value], true)}, {prop: "constructSafe", name: "constructSafe", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$3, Value, sliceType$1], [Value, $error], true)}, {prop: "construct", name: "construct", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$3, Value, sliceType$1], [Value], true)}, {prop: "IsPrimitive", name: "IsPrimitive", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsBoolean", name: "IsBoolean", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsNumber", name: "IsNumber", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsNaN", name: "IsNaN", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsString", name: "IsString", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsObject", name: "IsObject", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsFunction", name: "IsFunction", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Class", name: "Class", pkg: "", typ: $funcType([], [$String], false)}, {prop: "isArray", name: "isArray", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "isStringObject", name: "isStringObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "isBooleanObject", name: "isBooleanObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "isNumberObject", name: "isNumberObject", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "isDate", name: "isDate", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "isRegExp", name: "isRegExp", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "isError", name: "isError", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ToBoolean", name: "ToBoolean", pkg: "", typ: $funcType([], [$Bool, $error], false)}, {prop: "numberValue", name: "numberValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [Value], false)}, {prop: "ToFloat", name: "ToFloat", pkg: "", typ: $funcType([], [$Float64, $error], false)}, {prop: "ToInteger", name: "ToInteger", pkg: "", typ: $funcType([], [$Int64, $error], false)}, {prop: "ToString", name: "ToString", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "_object", name: "_object", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [ptrType$4], false)}, {prop: "Object", name: "Object", pkg: "", typ: $funcType([], [ptrType$98], false)}, {prop: "reference", name: "reference", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [_reference], false)}, {prop: "resolve", name: "resolve", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [Value], false)}, {prop: "Export", name: "Export", pkg: "", typ: $funcType([], [$emptyInterface, $error], false)}, {prop: "export$", name: "export", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$emptyInterface], false)}, {prop: "evaluateBreakContinue", name: "evaluateBreakContinue", pkg: "github.com/robertkrimen/otto", typ: $funcType([sliceType], [_resultKind], false)}, {prop: "evaluateBreak", name: "evaluateBreak", pkg: "github.com/robertkrimen/otto", typ: $funcType([sliceType], [_resultKind], false)}, {prop: "exportNative", name: "exportNative", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$emptyInterface], false)}, {prop: "toReflectValue", name: "toReflectValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([reflect.Kind], [reflect.Value, $error], false)}, {prop: "bool", name: "bool", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "float64", name: "float64", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Float64], false)}, {prop: "number", name: "number", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [_number], false)}, {prop: "string", name: "string", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$String], false)}];
	_builtinJSON_parseContext.init([{prop: "call", name: "call", pkg: "github.com/robertkrimen/otto", typ: FunctionCall, tag: ""}, {prop: "reviver", name: "reviver", pkg: "github.com/robertkrimen/otto", typ: Value, tag: ""}]);
	_builtinJSON_stringifyContext.init([{prop: "call", name: "call", pkg: "github.com/robertkrimen/otto", typ: FunctionCall, tag: ""}, {prop: "stack", name: "stack", pkg: "github.com/robertkrimen/otto", typ: sliceType$7, tag: ""}, {prop: "propertyList", name: "propertyList", pkg: "github.com/robertkrimen/otto", typ: sliceType, tag: ""}, {prop: "replacerFunction", name: "replacerFunction", pkg: "github.com/robertkrimen/otto", typ: ptrType$13, tag: ""}, {prop: "gap", name: "gap", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}]);
	_clone.init([{prop: "runtime", name: "runtime", pkg: "github.com/robertkrimen/otto", typ: ptrType$3, tag: ""}, {prop: "_object", name: "_object", pkg: "github.com/robertkrimen/otto", typ: mapType$1, tag: ""}, {prop: "_objectStash", name: "_objectStash", pkg: "github.com/robertkrimen/otto", typ: mapType$2, tag: ""}, {prop: "_dclStash", name: "_dclStash", pkg: "github.com/robertkrimen/otto", typ: mapType$3, tag: ""}, {prop: "_fnStash", name: "_fnStash", pkg: "github.com/robertkrimen/otto", typ: mapType$4, tag: ""}]);
	_compiler.init([{prop: "file", name: "file", pkg: "github.com/robertkrimen/otto", typ: ptrType$1, tag: ""}, {prop: "program", name: "program", pkg: "github.com/robertkrimen/otto", typ: ptrType$9, tag: ""}]);
	_nodeProgram.init([{prop: "body", name: "body", pkg: "github.com/robertkrimen/otto", typ: sliceType$12, tag: ""}, {prop: "varList", name: "varList", pkg: "github.com/robertkrimen/otto", typ: sliceType, tag: ""}, {prop: "functionList", name: "functionList", pkg: "github.com/robertkrimen/otto", typ: sliceType$10, tag: ""}, {prop: "variableList", name: "variableList", pkg: "github.com/robertkrimen/otto", typ: sliceType$14, tag: ""}, {prop: "file", name: "file", pkg: "github.com/robertkrimen/otto", typ: ptrType$1, tag: ""}]);
	_nodeDeclaration.init([{prop: "name", name: "name", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "definition", name: "definition", pkg: "github.com/robertkrimen/otto", typ: _node, tag: ""}]);
	_node.init([]);
	_nodeExpression.init([{prop: "_expressionNode", name: "_expressionNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}]);
	_nodeArrayLiteral.init([{prop: "value", name: "value", pkg: "github.com/robertkrimen/otto", typ: sliceType$9, tag: ""}]);
	_nodeAssignExpression.init([{prop: "operator", name: "operator", pkg: "github.com/robertkrimen/otto", typ: token.Token, tag: ""}, {prop: "left", name: "left", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "right", name: "right", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}]);
	_nodeBinaryExpression.init([{prop: "operator", name: "operator", pkg: "github.com/robertkrimen/otto", typ: token.Token, tag: ""}, {prop: "left", name: "left", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "right", name: "right", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "comparison", name: "comparison", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}]);
	_nodeBracketExpression.init([{prop: "idx", name: "idx", pkg: "github.com/robertkrimen/otto", typ: file.Idx, tag: ""}, {prop: "left", name: "left", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "member", name: "member", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}]);
	_nodeCallExpression.init([{prop: "callee", name: "callee", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "argumentList", name: "argumentList", pkg: "github.com/robertkrimen/otto", typ: sliceType$9, tag: ""}]);
	_nodeConditionalExpression.init([{prop: "test", name: "test", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "consequent", name: "consequent", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "alternate", name: "alternate", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}]);
	_nodeDotExpression.init([{prop: "idx", name: "idx", pkg: "github.com/robertkrimen/otto", typ: file.Idx, tag: ""}, {prop: "left", name: "left", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "identifier", name: "identifier", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}]);
	_nodeFunctionLiteral.init([{prop: "name", name: "name", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "body", name: "body", pkg: "github.com/robertkrimen/otto", typ: _nodeStatement, tag: ""}, {prop: "source", name: "source", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "parameterList", name: "parameterList", pkg: "github.com/robertkrimen/otto", typ: sliceType, tag: ""}, {prop: "varList", name: "varList", pkg: "github.com/robertkrimen/otto", typ: sliceType, tag: ""}, {prop: "functionList", name: "functionList", pkg: "github.com/robertkrimen/otto", typ: sliceType$10, tag: ""}, {prop: "file", name: "file", pkg: "github.com/robertkrimen/otto", typ: ptrType$1, tag: ""}]);
	_nodeIdentifier.init([{prop: "idx", name: "idx", pkg: "github.com/robertkrimen/otto", typ: file.Idx, tag: ""}, {prop: "name", name: "name", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}]);
	_nodeLiteral.init([{prop: "value", name: "value", pkg: "github.com/robertkrimen/otto", typ: Value, tag: ""}]);
	_nodeNewExpression.init([{prop: "callee", name: "callee", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "argumentList", name: "argumentList", pkg: "github.com/robertkrimen/otto", typ: sliceType$9, tag: ""}]);
	_nodeObjectLiteral.init([{prop: "value", name: "value", pkg: "github.com/robertkrimen/otto", typ: sliceType$11, tag: ""}]);
	_nodeProperty.init([{prop: "key", name: "key", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "kind", name: "kind", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "value", name: "value", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}]);
	_nodeRegExpLiteral.init([{prop: "flags", name: "flags", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "pattern", name: "pattern", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "regexp", name: "regexp", pkg: "github.com/robertkrimen/otto", typ: ptrType$2, tag: ""}]);
	_nodeSequenceExpression.init([{prop: "sequence", name: "sequence", pkg: "github.com/robertkrimen/otto", typ: sliceType$9, tag: ""}]);
	_nodeThisExpression.init([]);
	_nodeUnaryExpression.init([{prop: "operator", name: "operator", pkg: "github.com/robertkrimen/otto", typ: token.Token, tag: ""}, {prop: "operand", name: "operand", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "postfix", name: "postfix", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}]);
	_nodeVariableExpression.init([{prop: "idx", name: "idx", pkg: "github.com/robertkrimen/otto", typ: file.Idx, tag: ""}, {prop: "name", name: "name", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "initializer", name: "initializer", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}]);
	_nodeStatement.init([{prop: "_statementNode", name: "_statementNode", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [], false)}]);
	_nodeBlockStatement.init([{prop: "list", name: "list", pkg: "github.com/robertkrimen/otto", typ: sliceType$12, tag: ""}]);
	_nodeBranchStatement.init([{prop: "branch", name: "branch", pkg: "github.com/robertkrimen/otto", typ: token.Token, tag: ""}, {prop: "label", name: "label", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}]);
	_nodeCaseStatement.init([{prop: "test", name: "test", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "consequent", name: "consequent", pkg: "github.com/robertkrimen/otto", typ: sliceType$12, tag: ""}]);
	_nodeCatchStatement.init([{prop: "parameter", name: "parameter", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "body", name: "body", pkg: "github.com/robertkrimen/otto", typ: _nodeStatement, tag: ""}]);
	_nodeDebuggerStatement.init([]);
	_nodeDoWhileStatement.init([{prop: "test", name: "test", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "body", name: "body", pkg: "github.com/robertkrimen/otto", typ: sliceType$12, tag: ""}]);
	_nodeEmptyStatement.init([]);
	_nodeExpressionStatement.init([{prop: "expression", name: "expression", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}]);
	_nodeForInStatement.init([{prop: "into", name: "into", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "source", name: "source", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "body", name: "body", pkg: "github.com/robertkrimen/otto", typ: sliceType$12, tag: ""}]);
	_nodeForStatement.init([{prop: "initializer", name: "initializer", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "update", name: "update", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "test", name: "test", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "body", name: "body", pkg: "github.com/robertkrimen/otto", typ: sliceType$12, tag: ""}]);
	_nodeIfStatement.init([{prop: "test", name: "test", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "consequent", name: "consequent", pkg: "github.com/robertkrimen/otto", typ: _nodeStatement, tag: ""}, {prop: "alternate", name: "alternate", pkg: "github.com/robertkrimen/otto", typ: _nodeStatement, tag: ""}]);
	_nodeLabelledStatement.init([{prop: "label", name: "label", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "statement", name: "statement", pkg: "github.com/robertkrimen/otto", typ: _nodeStatement, tag: ""}]);
	_nodeReturnStatement.init([{prop: "argument", name: "argument", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}]);
	_nodeSwitchStatement.init([{prop: "discriminant", name: "discriminant", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "default_", name: "default_", pkg: "github.com/robertkrimen/otto", typ: $Int, tag: ""}, {prop: "body", name: "body", pkg: "github.com/robertkrimen/otto", typ: sliceType$13, tag: ""}]);
	_nodeThrowStatement.init([{prop: "argument", name: "argument", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}]);
	_nodeTryStatement.init([{prop: "body", name: "body", pkg: "github.com/robertkrimen/otto", typ: _nodeStatement, tag: ""}, {prop: "catch$1", name: "catch", pkg: "github.com/robertkrimen/otto", typ: ptrType$54, tag: ""}, {prop: "finally$2", name: "finally", pkg: "github.com/robertkrimen/otto", typ: _nodeStatement, tag: ""}]);
	_nodeVariableStatement.init([{prop: "list", name: "list", pkg: "github.com/robertkrimen/otto", typ: sliceType$9, tag: ""}]);
	_nodeWhileStatement.init([{prop: "test", name: "test", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "body", name: "body", pkg: "github.com/robertkrimen/otto", typ: sliceType$12, tag: ""}]);
	_nodeWithStatement.init([{prop: "object", name: "object", pkg: "github.com/robertkrimen/otto", typ: _nodeExpression, tag: ""}, {prop: "body", name: "body", pkg: "github.com/robertkrimen/otto", typ: _nodeStatement, tag: ""}]);
	_exception.init([{prop: "value", name: "value", pkg: "github.com/robertkrimen/otto", typ: $emptyInterface, tag: ""}]);
	_error.init([{prop: "name", name: "name", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "message", name: "message", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "trace", name: "trace", pkg: "github.com/robertkrimen/otto", typ: sliceType$15, tag: ""}, {prop: "offset", name: "offset", pkg: "github.com/robertkrimen/otto", typ: $Int, tag: ""}]);
	_frame.init([{prop: "file", name: "file", pkg: "github.com/robertkrimen/otto", typ: ptrType$1, tag: ""}, {prop: "offset", name: "offset", pkg: "github.com/robertkrimen/otto", typ: $Int, tag: ""}, {prop: "callee", name: "callee", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}]);
	Error.init([{prop: "_error", name: "", pkg: "github.com/robertkrimen/otto", typ: _error, tag: ""}]);
	_object.init([{prop: "runtime", name: "runtime", pkg: "github.com/robertkrimen/otto", typ: ptrType$3, tag: ""}, {prop: "class$1", name: "class", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "objectClass", name: "objectClass", pkg: "github.com/robertkrimen/otto", typ: ptrType, tag: ""}, {prop: "value", name: "value", pkg: "github.com/robertkrimen/otto", typ: $emptyInterface, tag: ""}, {prop: "prototype", name: "prototype", pkg: "github.com/robertkrimen/otto", typ: ptrType$4, tag: ""}, {prop: "extensible", name: "extensible", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}, {prop: "property", name: "property", pkg: "github.com/robertkrimen/otto", typ: mapType$5, tag: ""}, {prop: "propertyOrder", name: "propertyOrder", pkg: "github.com/robertkrimen/otto", typ: sliceType, tag: ""}]);
	_objectClass.init([{prop: "getOwnProperty", name: "getOwnProperty", pkg: "github.com/robertkrimen/otto", typ: funcType$2, tag: ""}, {prop: "getProperty", name: "getProperty", pkg: "github.com/robertkrimen/otto", typ: funcType$2, tag: ""}, {prop: "get", name: "get", pkg: "github.com/robertkrimen/otto", typ: funcType$3, tag: ""}, {prop: "canPut", name: "canPut", pkg: "github.com/robertkrimen/otto", typ: funcType$4, tag: ""}, {prop: "put", name: "put", pkg: "github.com/robertkrimen/otto", typ: funcType$5, tag: ""}, {prop: "hasProperty", name: "hasProperty", pkg: "github.com/robertkrimen/otto", typ: funcType$4, tag: ""}, {prop: "hasOwnProperty", name: "hasOwnProperty", pkg: "github.com/robertkrimen/otto", typ: funcType$4, tag: ""}, {prop: "defineOwnProperty", name: "defineOwnProperty", pkg: "github.com/robertkrimen/otto", typ: funcType$6, tag: ""}, {prop: "delete$8", name: "delete", pkg: "github.com/robertkrimen/otto", typ: funcType$7, tag: ""}, {prop: "enumerate", name: "enumerate", pkg: "github.com/robertkrimen/otto", typ: funcType$8, tag: ""}, {prop: "clone", name: "clone", pkg: "github.com/robertkrimen/otto", typ: funcType$9, tag: ""}, {prop: "marshalJSON", name: "marshalJSON", pkg: "github.com/robertkrimen/otto", typ: funcType$10, tag: ""}]);
	Otto.init([{prop: "Interrupt", name: "Interrupt", pkg: "", typ: chanType, tag: ""}, {prop: "runtime", name: "runtime", pkg: "github.com/robertkrimen/otto", typ: ptrType$3, tag: ""}]);
	Context.init([{prop: "Filename", name: "Filename", pkg: "", typ: $String, tag: ""}, {prop: "Line", name: "Line", pkg: "", typ: $Int, tag: ""}, {prop: "Column", name: "Column", pkg: "", typ: $Int, tag: ""}, {prop: "Callee", name: "Callee", pkg: "", typ: $String, tag: ""}, {prop: "Symbols", name: "Symbols", pkg: "", typ: mapType$6, tag: ""}, {prop: "This", name: "This", pkg: "", typ: Value, tag: ""}, {prop: "Stacktrace", name: "Stacktrace", pkg: "", typ: sliceType, tag: ""}]);
	Object.init([{prop: "object", name: "object", pkg: "github.com/robertkrimen/otto", typ: ptrType$4, tag: ""}, {prop: "value", name: "value", pkg: "github.com/robertkrimen/otto", typ: Value, tag: ""}]);
	_propertyGetSet.init(ptrType$4, 2);
	_property.init([{prop: "value", name: "value", pkg: "github.com/robertkrimen/otto", typ: $emptyInterface, tag: ""}, {prop: "mode", name: "mode", pkg: "github.com/robertkrimen/otto", typ: _propertyMode, tag: ""}]);
	_result.init([{prop: "kind", name: "kind", pkg: "github.com/robertkrimen/otto", typ: _resultKind, tag: ""}, {prop: "value", name: "value", pkg: "github.com/robertkrimen/otto", typ: Value, tag: ""}, {prop: "target", name: "target", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}]);
	_global.init([{prop: "Object", name: "Object", pkg: "", typ: ptrType$4, tag: ""}, {prop: "Function", name: "Function", pkg: "", typ: ptrType$4, tag: ""}, {prop: "Array", name: "Array", pkg: "", typ: ptrType$4, tag: ""}, {prop: "String", name: "String", pkg: "", typ: ptrType$4, tag: ""}, {prop: "Boolean", name: "Boolean", pkg: "", typ: ptrType$4, tag: ""}, {prop: "Number", name: "Number", pkg: "", typ: ptrType$4, tag: ""}, {prop: "Math", name: "Math", pkg: "", typ: ptrType$4, tag: ""}, {prop: "Date", name: "Date", pkg: "", typ: ptrType$4, tag: ""}, {prop: "RegExp", name: "RegExp", pkg: "", typ: ptrType$4, tag: ""}, {prop: "Error", name: "Error", pkg: "", typ: ptrType$4, tag: ""}, {prop: "EvalError", name: "EvalError", pkg: "", typ: ptrType$4, tag: ""}, {prop: "TypeError", name: "TypeError", pkg: "", typ: ptrType$4, tag: ""}, {prop: "RangeError", name: "RangeError", pkg: "", typ: ptrType$4, tag: ""}, {prop: "ReferenceError", name: "ReferenceError", pkg: "", typ: ptrType$4, tag: ""}, {prop: "SyntaxError", name: "SyntaxError", pkg: "", typ: ptrType$4, tag: ""}, {prop: "URIError", name: "URIError", pkg: "", typ: ptrType$4, tag: ""}, {prop: "JSON", name: "JSON", pkg: "", typ: ptrType$4, tag: ""}, {prop: "ObjectPrototype", name: "ObjectPrototype", pkg: "", typ: ptrType$4, tag: ""}, {prop: "FunctionPrototype", name: "FunctionPrototype", pkg: "", typ: ptrType$4, tag: ""}, {prop: "ArrayPrototype", name: "ArrayPrototype", pkg: "", typ: ptrType$4, tag: ""}, {prop: "StringPrototype", name: "StringPrototype", pkg: "", typ: ptrType$4, tag: ""}, {prop: "BooleanPrototype", name: "BooleanPrototype", pkg: "", typ: ptrType$4, tag: ""}, {prop: "NumberPrototype", name: "NumberPrototype", pkg: "", typ: ptrType$4, tag: ""}, {prop: "DatePrototype", name: "DatePrototype", pkg: "", typ: ptrType$4, tag: ""}, {prop: "RegExpPrototype", name: "RegExpPrototype", pkg: "", typ: ptrType$4, tag: ""}, {prop: "ErrorPrototype", name: "ErrorPrototype", pkg: "", typ: ptrType$4, tag: ""}, {prop: "EvalErrorPrototype", name: "EvalErrorPrototype", pkg: "", typ: ptrType$4, tag: ""}, {prop: "TypeErrorPrototype", name: "TypeErrorPrototype", pkg: "", typ: ptrType$4, tag: ""}, {prop: "RangeErrorPrototype", name: "RangeErrorPrototype", pkg: "", typ: ptrType$4, tag: ""}, {prop: "ReferenceErrorPrototype", name: "ReferenceErrorPrototype", pkg: "", typ: ptrType$4, tag: ""}, {prop: "SyntaxErrorPrototype", name: "SyntaxErrorPrototype", pkg: "", typ: ptrType$4, tag: ""}, {prop: "URIErrorPrototype", name: "URIErrorPrototype", pkg: "", typ: ptrType$4, tag: ""}]);
	_runtime.init([{prop: "global", name: "global", pkg: "github.com/robertkrimen/otto", typ: _global, tag: ""}, {prop: "globalObject", name: "globalObject", pkg: "github.com/robertkrimen/otto", typ: ptrType$4, tag: ""}, {prop: "globalStash", name: "globalStash", pkg: "github.com/robertkrimen/otto", typ: ptrType$15, tag: ""}, {prop: "scope", name: "scope", pkg: "github.com/robertkrimen/otto", typ: ptrType$16, tag: ""}, {prop: "otto", name: "otto", pkg: "github.com/robertkrimen/otto", typ: ptrType$11, tag: ""}, {prop: "eval$5", name: "eval", pkg: "github.com/robertkrimen/otto", typ: ptrType$4, tag: ""}, {prop: "debugger$6", name: "debugger", pkg: "github.com/robertkrimen/otto", typ: funcType$11, tag: ""}, {prop: "labels", name: "labels", pkg: "github.com/robertkrimen/otto", typ: sliceType, tag: ""}, {prop: "lck", name: "lck", pkg: "github.com/robertkrimen/otto", typ: sync.Mutex, tag: ""}]);
	_scope.init([{prop: "lexical", name: "lexical", pkg: "github.com/robertkrimen/otto", typ: _stash, tag: ""}, {prop: "variable", name: "variable", pkg: "github.com/robertkrimen/otto", typ: _stash, tag: ""}, {prop: "this$2", name: "this", pkg: "github.com/robertkrimen/otto", typ: ptrType$4, tag: ""}, {prop: "eval$3", name: "eval", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}, {prop: "outer", name: "outer", pkg: "github.com/robertkrimen/otto", typ: ptrType$16, tag: ""}, {prop: "frame", name: "frame", pkg: "github.com/robertkrimen/otto", typ: _frame, tag: ""}]);
	Script.init([{prop: "version", name: "version", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "program", name: "program", pkg: "github.com/robertkrimen/otto", typ: ptrType$101, tag: ""}, {prop: "filename", name: "filename", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "src", name: "src", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}]);
	_stash.init([{prop: "clone", name: "clone", pkg: "github.com/robertkrimen/otto", typ: $funcType([ptrType$109], [_stash], false)}, {prop: "createBinding", name: "createBinding", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, $Bool, Value], [], false)}, {prop: "deleteBinding", name: "deleteBinding", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [$Bool], false)}, {prop: "getBinding", name: "getBinding", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, $Bool], [Value], false)}, {prop: "hasBinding", name: "hasBinding", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String], [$Bool], false)}, {prop: "newReference", name: "newReference", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, $Bool, _at], [_reference], false)}, {prop: "outer", name: "outer", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [_stash], false)}, {prop: "runtime", name: "runtime", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [ptrType$3], false)}, {prop: "setBinding", name: "setBinding", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, Value, $Bool], [], false)}, {prop: "setValue", name: "setValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([$String, Value, $Bool], [], false)}]);
	_objectStash.init([{prop: "_runtime", name: "_runtime", pkg: "github.com/robertkrimen/otto", typ: ptrType$3, tag: ""}, {prop: "_outer", name: "_outer", pkg: "github.com/robertkrimen/otto", typ: _stash, tag: ""}, {prop: "object", name: "object", pkg: "github.com/robertkrimen/otto", typ: ptrType$4, tag: ""}]);
	_dclStash.init([{prop: "_runtime", name: "_runtime", pkg: "github.com/robertkrimen/otto", typ: ptrType$3, tag: ""}, {prop: "_outer", name: "_outer", pkg: "github.com/robertkrimen/otto", typ: _stash, tag: ""}, {prop: "property", name: "property", pkg: "github.com/robertkrimen/otto", typ: mapType$7, tag: ""}]);
	_dclProperty.init([{prop: "value", name: "value", pkg: "github.com/robertkrimen/otto", typ: Value, tag: ""}, {prop: "mutable", name: "mutable", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}, {prop: "deletable", name: "deletable", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}, {prop: "readable", name: "readable", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}]);
	_fnStash.init([{prop: "_dclStash", name: "", pkg: "github.com/robertkrimen/otto", typ: _dclStash, tag: ""}, {prop: "arguments$1", name: "arguments", pkg: "github.com/robertkrimen/otto", typ: ptrType$4, tag: ""}, {prop: "indexOfArgumentName", name: "indexOfArgumentName", pkg: "github.com/robertkrimen/otto", typ: mapType$8, tag: ""}]);
	_argumentsObject.init([{prop: "indexOfParameterName", name: "indexOfParameterName", pkg: "github.com/robertkrimen/otto", typ: sliceType, tag: ""}, {prop: "stash", name: "stash", pkg: "github.com/robertkrimen/otto", typ: _stash, tag: ""}]);
	_dateObject.init([{prop: "time", name: "time", pkg: "github.com/robertkrimen/otto", typ: time.Time, tag: ""}, {prop: "epoch", name: "epoch", pkg: "github.com/robertkrimen/otto", typ: $Int64, tag: ""}, {prop: "value", name: "value", pkg: "github.com/robertkrimen/otto", typ: Value, tag: ""}, {prop: "isNaN", name: "isNaN", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}]);
	_ecmaTime.init([{prop: "year", name: "year", pkg: "github.com/robertkrimen/otto", typ: $Int, tag: ""}, {prop: "month", name: "month", pkg: "github.com/robertkrimen/otto", typ: $Int, tag: ""}, {prop: "day", name: "day", pkg: "github.com/robertkrimen/otto", typ: $Int, tag: ""}, {prop: "hour", name: "hour", pkg: "github.com/robertkrimen/otto", typ: $Int, tag: ""}, {prop: "minute", name: "minute", pkg: "github.com/robertkrimen/otto", typ: $Int, tag: ""}, {prop: "second", name: "second", pkg: "github.com/robertkrimen/otto", typ: $Int, tag: ""}, {prop: "millisecond", name: "millisecond", pkg: "github.com/robertkrimen/otto", typ: $Int, tag: ""}, {prop: "location", name: "location", pkg: "github.com/robertkrimen/otto", typ: ptrType$5, tag: ""}]);
	_constructFunction.init([ptrType$4, sliceType$5], [Value], false);
	_nativeFunction.init([FunctionCall], [Value], false);
	_nativeFunctionObject.init([{prop: "name", name: "name", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "call", name: "call", pkg: "github.com/robertkrimen/otto", typ: _nativeFunction, tag: ""}, {prop: "construct", name: "construct", pkg: "github.com/robertkrimen/otto", typ: _constructFunction, tag: ""}]);
	_bindFunctionObject.init([{prop: "target", name: "target", pkg: "github.com/robertkrimen/otto", typ: ptrType$4, tag: ""}, {prop: "this$1", name: "this", pkg: "github.com/robertkrimen/otto", typ: Value, tag: ""}, {prop: "argumentList", name: "argumentList", pkg: "github.com/robertkrimen/otto", typ: sliceType$5, tag: ""}]);
	_nodeFunctionObject.init([{prop: "node", name: "node", pkg: "github.com/robertkrimen/otto", typ: ptrType$10, tag: ""}, {prop: "stash", name: "stash", pkg: "github.com/robertkrimen/otto", typ: _stash, tag: ""}]);
	FunctionCall.init([{prop: "runtime", name: "runtime", pkg: "github.com/robertkrimen/otto", typ: ptrType$3, tag: ""}, {prop: "_thisObject", name: "_thisObject", pkg: "github.com/robertkrimen/otto", typ: ptrType$4, tag: ""}, {prop: "eval$2", name: "eval", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}, {prop: "This", name: "This", pkg: "", typ: Value, tag: ""}, {prop: "ArgumentList", name: "ArgumentList", pkg: "", typ: sliceType$5, tag: ""}, {prop: "Otto", name: "Otto", pkg: "", typ: ptrType$11, tag: ""}]);
	_goArrayObject.init([{prop: "value", name: "value", pkg: "github.com/robertkrimen/otto", typ: reflect.Value, tag: ""}, {prop: "writable", name: "writable", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}, {prop: "propertyMode", name: "propertyMode", pkg: "github.com/robertkrimen/otto", typ: _propertyMode, tag: ""}]);
	_goMapObject.init([{prop: "value", name: "value", pkg: "github.com/robertkrimen/otto", typ: reflect.Value, tag: ""}, {prop: "keyKind", name: "keyKind", pkg: "github.com/robertkrimen/otto", typ: reflect.Kind, tag: ""}, {prop: "valueKind", name: "valueKind", pkg: "github.com/robertkrimen/otto", typ: reflect.Kind, tag: ""}]);
	_goSliceObject.init([{prop: "value", name: "value", pkg: "github.com/robertkrimen/otto", typ: reflect.Value, tag: ""}]);
	_goStructObject.init([{prop: "value", name: "value", pkg: "github.com/robertkrimen/otto", typ: reflect.Value, tag: ""}]);
	_reference.init([{prop: "delete", name: "delete", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "getValue", name: "getValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [Value], false)}, {prop: "invalid", name: "invalid", pkg: "github.com/robertkrimen/otto", typ: $funcType([], [$Bool], false)}, {prop: "putValue", name: "putValue", pkg: "github.com/robertkrimen/otto", typ: $funcType([Value], [$String], false)}]);
	_propertyReference.init([{prop: "name", name: "name", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "strict", name: "strict", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}, {prop: "base", name: "base", pkg: "github.com/robertkrimen/otto", typ: ptrType$4, tag: ""}, {prop: "runtime", name: "runtime", pkg: "github.com/robertkrimen/otto", typ: ptrType$3, tag: ""}, {prop: "at", name: "at", pkg: "github.com/robertkrimen/otto", typ: _at, tag: ""}]);
	_stashReference.init([{prop: "name", name: "name", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "strict", name: "strict", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}, {prop: "base", name: "base", pkg: "github.com/robertkrimen/otto", typ: _stash, tag: ""}]);
	_regExpObject.init([{prop: "regularExpression", name: "regularExpression", pkg: "github.com/robertkrimen/otto", typ: ptrType$2, tag: ""}, {prop: "global", name: "global", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}, {prop: "ignoreCase", name: "ignoreCase", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}, {prop: "multiline", name: "multiline", pkg: "github.com/robertkrimen/otto", typ: $Bool, tag: ""}, {prop: "source", name: "source", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "flags", name: "flags", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}]);
	_stringObject.init([{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [$Int32], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	_stringWide.init([{prop: "string", name: "string", pkg: "github.com/robertkrimen/otto", typ: $String, tag: ""}, {prop: "length", name: "length", pkg: "github.com/robertkrimen/otto", typ: $Int, tag: ""}, {prop: "runes", name: "runes", pkg: "github.com/robertkrimen/otto", typ: sliceType$3, tag: ""}]);
	Value.init([{prop: "kind", name: "kind", pkg: "github.com/robertkrimen/otto", typ: _valueKind, tag: ""}, {prop: "value", name: "value", pkg: "github.com/robertkrimen/otto", typ: $emptyInterface, tag: ""}]);
	_number.init([{prop: "kind", name: "kind", pkg: "github.com/robertkrimen/otto", typ: _numberKind, tag: ""}, {prop: "int64", name: "int64", pkg: "github.com/robertkrimen/otto", typ: $Int64, tag: ""}, {prop: "float64", name: "float64", pkg: "github.com/robertkrimen/otto", typ: $Float64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gob.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hex.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = json.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ast.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dbg.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = file.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = parser.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = registry.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = token.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = url.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = regexp.$init(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf16.$init(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_classObject = ptrType.nil;
		_classArray = ptrType.nil;
		_classString = ptrType.nil;
		_classArguments = ptrType.nil;
		_classGoStruct = ptrType.nil;
		_classGoMap = ptrType.nil;
		_classGoArray = ptrType.nil;
		_classGoSlice = ptrType.nil;
		parseInt_alphabetTable = (function() {
			var $ptr, alphabet, radix, table, x;
			table = new sliceType(["", "", "01"]);
			radix = 3;
			while (true) {
				if (!(radix <= 36)) { break; }
				alphabet = (x = radix - 1 >> 0, ((x < 0 || x >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + x]));
				if (radix <= 10) {
					alphabet = alphabet + ($encodeRune((radix + 47 >> 0)));
				} else {
					alphabet = alphabet + ($encodeRune((radix + 54 >> 0)) + $encodeRune((radix + 86 >> 0)));
				}
				table = $append(table, alphabet);
				radix = radix + (1) >> 0;
			}
			return table;
		})();
		_r = regexp.MustCompile("[\\+\\-]?(?:[Ii]nf$|infinity)"); /* */ $s = 27; case 27: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		parseFloat_matchBadSpecial = _r;
		_r$1 = regexp.MustCompile("[0-9eE\\+\\-\\.]|Infinity"); /* */ $s = 28; case 28: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		parseFloat_matchValid = _r$1;
		_r$2 = regexp.MustCompile("([^~!@#$&*()=:/,;?+'])"); /* */ $s = 29; case 29: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		encodeURI_Regexp = _r$2;
		_r$3 = regexp.MustCompile("([^~!*()'])"); /* */ $s = 30; case 30: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		encodeURIComponent_Regexp = _r$3;
		_r$4 = regexp.MustCompile("(?i)(?:%)(3B|2F|3F|3A|40|26|3D|2B|24|2C|23)"); /* */ $s = 31; case 31: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		decodeURI_guard = _r$4;
		_r$5 = regexp.MustCompile("^[$_\\p{L}][$_\\p{L}\\d}]*$"); /* */ $s = 32; case 32: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		matchIdentifier = _r$5;
		_r$6 = regexp.MustCompile("\\$(?:[\\$\\&\\'\\`1-9]|0[1-9]|[1-9][0-9])"); /* */ $s = 33; case 33: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		builtinString_replace_Regexp = _r$6;
		emptyStatement = new _nodeEmptyStatement.ptr();
		_r$7 = dbg.New(new sliceType$1([])); /* */ $s = 34; case 34: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple = _r$7;
		dbg$1 = _tuple[0];
		dbgf = _tuple[1];
		nativeFrame = new _frame.ptr(ptrType$1.nil, 0, "");
		lessThanTable = $toNativeArray($kindMap, [$makeMap(_lessThanResult.keyFor, [{ k: 0, v: false }, { k: 1, v: true }, { k: 2, v: false }]), $makeMap(_lessThanResult.keyFor, [{ k: 0, v: false }, { k: 1, v: true }, { k: 2, v: false }]), $makeMap(_lessThanResult.keyFor, [{ k: 0, v: true }, { k: 1, v: false }, { k: 2, v: false }]), $makeMap(_lessThanResult.keyFor, [{ k: 0, v: true }, { k: 1, v: false }, { k: 2, v: false }])]);
		prototypeValueObject = $ifaceNil;
		prototypeValueFunction = new _nativeFunctionObject.ptr("", (function(param) {
			var $ptr, param;
			return new Value.ptr(0, $ifaceNil);
		}), $throwNilPointerError);
		prototypeValueString = "";
		prototypeValueRegExp = new _regExpObject.ptr(ptrType$2.nil, false, false, false, "", "");
		_r$8 = regexp.MustCompile("^[a-zA-Z\\$][a-zA-Z0-9\\$]*$"); /* */ $s = 35; case 35: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		isIdentifier_Regexp = _r$8;
		_nilGetSetObject = new _object.ptr(ptrType$3.nil, "", ptrType.nil, $ifaceNil, ptrType$4.nil, false, false, sliceType.nil);
		$pkg.ErrVersion = errors.New("version mismatch");
		scriptVersion = "2014-04-13/1";
		dateLayoutList = new sliceType(["2006", "2006-01", "2006-01-02", "2006T15:04", "2006-01T15:04", "2006-01-02T15:04", "2006T15:04:05", "2006-01T15:04:05", "2006-01-02T15:04:05", "2006T15:04:05.000", "2006-01T15:04:05.000", "2006-01-02T15:04:05.000", "2006T15:04-0700", "2006-01T15:04-0700", "2006-01-02T15:04-0700", "2006T15:04:05-0700", "2006-01T15:04:05-0700", "2006-01-02T15:04:05-0700", "2006T15:04:05.000-0700", "2006-01T15:04:05.000-0700", "2006-01-02T15:04:05.000-0700", "Mon, 02 Jan 2006 15:04:05 MST"]);
		_r$9 = regexp.MustCompile("^(.*)(?:(Z)|([\\+\\-]\\d{2}):(\\d{2}))$"); /* */ $s = 36; case 36: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		matchDateTimeZone = _r$9;
		prototypeValueNumber = new Value.ptr(2, new $Int(0));
		prototypeValueDate = new _dateObject.ptr($clone(time.Unix(new $Int64(0, 0), new $Int64(0, 0)).UTC(), time.Time), new $Int64(0, 0), new Value.ptr(2, new $Int(0)), false);
		prototypeValueBoolean = new Value.ptr(4, new $Bool(false));
		trueLiteral = new _nodeLiteral.ptr($clone(toValue_bool(true), Value));
		falseLiteral = new _nodeLiteral.ptr($clone(toValue_bool(false), Value));
		emptyValue = new Value.ptr(6, $ifaceNil);
		nullValue = new Value.ptr(1, $ifaceNil);
		nullLiteral = new _nodeLiteral.ptr($clone(nullValue, Value));
		falseValue = new Value.ptr(4, new $Bool(false));
		trueValue = new Value.ptr(4, new $Bool(true));
		__NaN__ = math.NaN();
		__PositiveInfinity__ = math.Inf(1);
		__NegativeInfinity__ = math.Inf(-1);
		__PositiveZero__ = 0;
		__NegativeZero__ = math.Float64frombits(new $Uint64(2147483648, 0));
		invalidDateObject = new _dateObject.ptr(new time.Time.ptr(new $Int64(0, 0), 0, ptrType$5.nil), new $Int64(-1, 4294967295), $clone(NaNValue(), Value), true);
		_r$10 = regexp.MustCompile("^(?:0[xX])"); /* */ $s = 37; case 37: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		stringToNumberParseInteger = _r$10;
		_r$11 = regexp.MustCompile("([eE][\\+\\-])0+([1-9])"); /* */ $s = 38; case 38: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		matchLeading0Exponent = _r$11;
		_r$12 = makeEqualDispatch(); /* */ $s = 39; case 39: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		equalDispatch = _r$12;
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["main"] = (function() {
	var $pkg = {}, $init, flag, fmt, otto, os, ptrType, sliceType, main;
	flag = $packages["flag"];
	fmt = $packages["fmt"];
	otto = $packages["github.com/robertkrimen/otto"];
	os = $packages["os"];
	ptrType = $ptrType(otto.Error);
	sliceType = $sliceType($emptyInterface);
	main = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _ref, err, err$1, err$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = flag.Parse(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = (function $b() {
			var $ptr, _r, _r$1, _tuple, err, vm, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; vm = $f.vm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = otto.New(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			vm = _r;
			_r$1 = vm.Run(new $String("\nvar div = document.createElement('div');\ndiv.textContent = 'Hello, Otto!';\ndocument.body.appendChild(div);")); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			err = _tuple[1];
			return err;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.vm = vm; $f.$s = $s; $f.$r = $r; return $f;
		})(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 3:
			_ref = err;
			/* */ if ($assertType(_ref, ptrType, true)[1]) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ($assertType(_ref, ptrType, true)[1]) { */ case 5:
				err$1 = _ref.$val;
				_r$1 = err$1.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = fmt.Print(new sliceType([new $String(_r$1)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				$s = 7; continue;
			/* } else { */ case 6:
				err$2 = _ref;
				_r$3 = fmt.Println(new sliceType([err$2])); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
			/* } */ case 7:
			os.Exit(64);
		/* } */ case 4:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: main }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = flag.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = otto.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if ($pkg === $mainPkg) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($pkg === $mainPkg) { */ case 5:
			$r = main(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$mainFinished = true;
		/* } */ case 6:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$synthesizeMethods();
var $mainPkg = $packages["main"];
$packages["runtime"].$init();
$go($mainPkg.$init, [], true);
$flushConsole();

}).call(this);
//# sourceMappingURL=main.js.map
